import bakkesmod
import typing
from _frozen_importlib import BuiltinImporter as __loader__

__all__ = [
    "AIControllerWrapper",
    "ActorWrapper",
    "AirControlComponentWrapper",
    "ArrayWrapper<ActorWrapper>",
    "ArrayWrapper<BallWrapper>",
    "ArrayWrapper<CarComponentWrapper>",
    "ArrayWrapper<CarWrapper>",
    "ArrayWrapper<ControllerWrapper>",
    "ArrayWrapper<GoalWrapper>",
    "ArrayWrapper<OnlineProductWrapper>",
    "ArrayWrapper<PlayerControllerWrapper>",
    "ArrayWrapper<PriWrapper>",
    "ArrayWrapper<ProductAttributeWrapper>",
    "ArrayWrapper<ProductWrapper>",
    "ArrayWrapper<RBActorWrapper>",
    "ArrayWrapper<SampleHistoryWrapper>",
    "ArrayWrapper<SequenceObjectWrapper>",
    "ArrayWrapper<SequenceVariableWrapper>",
    "ArrayWrapper<SequenceWrapper>",
    "ArrayWrapper<StatGraphWrapper>",
    "ArrayWrapper<TeamWrapper>",
    "ArrayWrapper<WheelWrapper>",
    "ArrayWrapper<int>",
    "ArrayWrapper<unsigned long long>",
    "ArrayWrapper<wchar_t>",
    "AttachmentPickup",
    "BakkesModPlugin",
    "BallCarSpringPickup",
    "BallFreezePickup",
    "BallLassoPickup",
    "BallWrapper",
    "BaseCameraWrapper",
    "BattarangPickup",
    "BlackMarket",
    "BoostModPickup",
    "BoostOverridePickup",
    "BoostPickupWrapper",
    "BoostWrapper",
    "BotLoadoutData",
    "CARBODY",
    "CAR_AFTERSHOCK",
    "CAR_ANIMUSGP",
    "CAR_ARMADILLO",
    "CAR_BACKFIRE",
    "CAR_BATMOBILE",
    "CAR_BONESHAKER",
    "CAR_BREAKOUT",
    "CAR_BREAKOUTTYPES",
    "CAR_CENTIO",
    "CAR_DELOREAN",
    "CAR_DOMINUS",
    "CAR_DOMINUSGT",
    "CAR_ENDO",
    "CAR_ESPER",
    "CAR_GIZMO",
    "CAR_GROG",
    "CAR_HOTSHOT",
    "CAR_ICECHARGER",
    "CAR_JOGER619RS",
    "CAR_MANTIS",
    "CAR_MARAUDER",
    "CAR_MASAMUNE",
    "CAR_MERC",
    "CAR_OCTANE",
    "CAR_OCTANEZSR",
    "CAR_PALADIN",
    "CAR_PROTEUS",
    "CAR_RIPPER",
    "CAR_ROADHOG",
    "CAR_ROADHOGXL",
    "CAR_SCARAB",
    "CAR_SWEETTOOTH",
    "CAR_TAKUMI",
    "CAR_TAKUMIRXT",
    "CAR_TRITON",
    "CAR_TWINMILL",
    "CAR_VENOM",
    "CAR_VULCAN",
    "CAR_WARTHOG",
    "CAR_XDEVIL",
    "CAR_XDEVILMK2",
    "CAR_ZIPPY",
    "CVarManagerWrapper",
    "CVarWrapper",
    "CameraSave",
    "CameraWrapper",
    "CameraXWrapper",
    "CanvasWrapper",
    "CarComponentWrapper",
    "CarSpeedPickup",
    "CarWrapper",
    "CertifiedStatDatabaseWrapper",
    "ClubColorSet",
    "ClubDetailsWrapper",
    "ClubMember",
    "ClubSettingsWrapper",
    "Common",
    "ControllerInput",
    "ControllerWrapper",
    "CurlRequest",
    "CustomMatchSettings",
    "CustomMatchTeamSettings",
    "DLC",
    "DataAssetDatabaseWrapper",
    "DataAssetDatabase_ESportsTeamWrapper",
    "Default",
    "DemolishPickup",
    "DodgeComponentWrapper",
    "DoubleJumpComponentWrapper",
    "Drop",
    "EngineTAWrapper",
    "Exotic",
    "FXActorWrapper",
    "FlipCarComponentWrapper",
    "FormField",
    "GameEditorSaveDataWrapper",
    "GameEditorWrapper",
    "GameEventWrapper",
    "GameSettingPlaylistWrapper",
    "GameWrapper",
    "GamepadSettings",
    "GoalWrapper",
    "GrapplingHookPickup",
    "GravityPickup",
    "HandbrakeOverridePickup",
    "HitForcePickup",
    "HttpWrapper",
    "ImageWrapper",
    "Import",
    "InputBufferGraphWrapper",
    "ItemsWrapper",
    "JumpComponentWrapper",
    "Limited",
    "LinearColor",
    "LoadedPlugin",
    "LoadoutWrapper",
    "MAX",
    "MAX_",
    "MMRNotifierToken",
    "MMRWrapper",
    "MatchmakingWrapper",
    "ModalWrapper",
    "NetStatGraphWrapper",
    "Never",
    "ObjectWrapper",
    "OnlinePlatform",
    "OnlinePlatform_Deleted",
    "OnlinePlatform_Dingo",
    "OnlinePlatform_Epic",
    "OnlinePlatform_MAX",
    "OnlinePlatform_NNX",
    "OnlinePlatform_OldNNX",
    "OnlinePlatform_PS3",
    "OnlinePlatform_PS4",
    "OnlinePlatform_PsyNet",
    "OnlinePlatform_QQ",
    "OnlinePlatform_Steam",
    "OnlinePlatform_Unknown",
    "OnlinePlatform_WeGame",
    "OnlineProductWrapper",
    "PERMISSION_ALL",
    "PERMISSION_CUSTOM_TRAINING",
    "PERMISSION_FREEPLAY",
    "PERMISSION_MENU",
    "PERMISSION_OFFLINE",
    "PERMISSION_ONLINE",
    "PERMISSION_PAUSEMENU_CLOSED",
    "PERMISSION_REPLAY",
    "PERMISSION_SOCCAR",
    "PLUGINTYPE_BOTAI",
    "PLUGINTYPE_CUSTOM_TRAINING",
    "PLUGINTYPE_FREEPLAY",
    "PLUGINTYPE_REPLAY",
    "PLUGINTYPE_SPECTATOR",
    "PLUGINTYPE_THREADED",
    "PLUGINTYPE_THREADEDUNLOAD",
    "POV",
    "PRODUCTQUALITY",
    "PaintDatabaseWrapper",
    "PerfStatGraphWrapper",
    "PhysicalMaterialPropertyWrapper",
    "PlayerControllerWrapper",
    "PlayerReplicationInfoWrapper",
    "Playlist",
    "PlaylistCategory",
    "PluginInfo",
    "PluginManagerWrapper",
    "PredictionInfo",
    "Premium",
    "PriWrapper",
    "PriXWrapper",
    "PrimitiveComponentWrapper",
    "ProductAttributeWrapper",
    "ProductAttribute_AnimatedSkinLabelWrapper",
    "ProductAttribute_BlueprintCostWrapper",
    "ProductAttribute_BlueprintWrapper",
    "ProductAttribute_BodyCompatibilityWrapper",
    "ProductAttribute_CertifiedWrapper",
    "ProductAttribute_CurrencyWrapper",
    "ProductAttribute_PaintedWrapper",
    "ProductAttribute_QualityWrapper",
    "ProductAttribute_SpecialEditionSettingsWrapper",
    "ProductAttribute_SpecialEditionWrapper",
    "ProductAttribute_TeamEditionUploadWrapper",
    "ProductAttribute_TeamEditionWrapper",
    "ProductAttribute_UnlockMethodWrapper",
    "ProductSlotWrapper",
    "ProductTemplateWrapper",
    "ProductTradeInWrapper",
    "ProductWrapper",
    "ProfileCameraSettings",
    "Quat",
    "QuatSlerp",
    "QuatToRotator",
    "RBActorWrapper",
    "RBState",
    "Rare",
    "RecordedSample",
    "Region",
    "ReplayDirectorWrapper",
    "ReplayScoreData",
    "ReplayServerWrapper",
    "ReplaySoccarWrapper",
    "ReplayWrapper",
    "Reward",
    "RotateVectorWithQuat",
    "Rotator",
    "RotatorToQuat",
    "RotatorToVector",
    "RumblePickupComponentWrapper",
    "SampleHistoryWrapper",
    "SampleRecordSettingsWrapper",
    "SaveDataWrapper",
    "SequenceObjectWrapper",
    "SequenceOpWrapper",
    "SequenceVariableWrapper",
    "SequenceWrapper",
    "ServerWrapper",
    "SettingsWrapper",
    "SkillRank",
    "SkillRating",
    "Special",
    "SpecialEdition",
    "SpecialEditionDatabaseWrapper",
    "SpringPickup",
    "StartGraphSystemWrapper",
    "StatEventWrapper",
    "StatGraphSystemWrapper",
    "StatGraphWrapper",
    "SteamID",
    "StickyForceData",
    "StructArrayWrapper<ClubMember>",
    "StructArrayWrapper<LinearColor>",
    "StructArrayWrapper<ProfileCameraSettings>",
    "StructArrayWrapper<RecordedSample>",
    "StructArrayWrapper<SteamID>",
    "SwapperPickup",
    "TRADEHOLD",
    "TRADEHOLD_ALL",
    "TRADEHOLD_NONE",
    "TRADEHOLD_P2P",
    "TargetedPickup",
    "TeamGameEventWrapper",
    "TeamInfoWrapper",
    "TeamWrapper",
    "TextInputModalWrapper",
    "TimeBombPickup",
    "ToastType",
    "ToastType_Error",
    "ToastType_Info",
    "ToastType_OK",
    "ToastType_Warning",
    "TornadoPickup",
    "TradeWrapper",
    "TrainingEditorSaveDataWrapper",
    "TrainingEditorWrapper",
    "TutorialWrapper",
    "UNLOCKMETHOD",
    "Uncommon",
    "UniqueIDWrapper",
    "UnrealColor",
    "UnrealStringWrapper",
    "Vector",
    "Vector2",
    "Vector2F",
    "VectorToRotator",
    "VehiclePickupWrapper",
    "VehicleSimWrapper",
    "VehicleWrapper",
    "VelcroPickup",
    "VeryRare",
    "VideoSettings",
    "ViewTarget",
    "WheelContactData",
    "WheelWrapper",
    "WorldContactData",
    "WorldInfoWrapper",
    "cvarManager",
    "fixPitch",
    "fixRotator",
    "gameWrapper",
    "quat_add",
    "quat_conj",
    "quat_identity",
    "quat_inner_product",
    "quat_mul",
    "quat_mul_vec3",
    "quat_rotate",
    "quat_scale",
    "quat_sub",
    "vec2_add",
    "vec2_len",
    "vec2_max",
    "vec2_min",
    "vec2_mul_inner",
    "vec2_norm",
    "vec2_scale",
    "vec2_sub",
    "vec3_add",
    "vec3_dot",
    "vec3_len",
    "vec3_max",
    "vec3_min",
    "vec3_mul_cross",
    "vec3_mul_inner",
    "vec3_norm",
    "vec3_reflect",
    "vec3_scale",
    "vec3_sub",
    "vec4_add",
    "vec4_len",
    "vec4_max",
    "vec4_min",
    "vec4_mul_cross",
    "vec4_mul_inner",
    "vec4_norm",
    "vec4_reflect",
    "vec4_scale",
    "vec4_sub"
]


class ObjectWrapper():
    @typing.overload
    def __init__(self, arg0: ObjectWrapper) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @property
    def memory_address(self) -> int:
        """
        :type: int
        """
    @memory_address.setter
    def memory_address(self, arg1: int) -> None:
        pass
    pass
class ActorWrapper(ObjectWrapper):
    def AddVelocity(self, velocity: Vector) -> None: ...
    def ChartData(self, DataName: str, DataValue: float) -> None: ...
    def ContainsPoint(self, Spot: Vector) -> bool: ...
    def DrawDebugCone(self, Origin: Vector, Direction: Vector, Length: float, AngleWidth: float, AngleHeight: float, NumSides: int, DrawColor: UnrealColor, bPersistentLines: int) -> None: ...
    def DrawDebugString(self, TextLocation: Vector, Text: str, TestBaseActor: ActorWrapper, TextColor: UnrealColor, Duration: float) -> None: ...
    def ForceNetUpdate2(self) -> None: ...
    def ForceNetUpdatePacket(self) -> None: ...
    def GetAggregateBaseVelocity(self, TestBase: ActorWrapper) -> Vector: ...
    def GetAngularVelocity(self) -> Vector: ...
    def GetAttached(self) -> ArrayWrapper<ActorWrapper>: ...
    def GetBase(self) -> ActorWrapper: ...
    def GetBlockRigidBody(self) -> int: ...
    def GetCollisionComponent(self) -> PrimitiveComponentWrapper: ...
    def GetCollisionType(self) -> int: ...
    def GetCreationTime(self) -> float: ...
    def GetCustomTimeDilation(self) -> float: ...
    def GetDrawScale(self) -> float: ...
    def GetDrawScale3D(self) -> Vector: ...
    def GetEditorIconColor(self) -> UnrealColor: ...
    def GetGravityAcceleration(self) -> Vector: ...
    def GetGravityDirection(self) -> Vector: ...
    def GetGravityZ(self) -> float: ...
    def GetHiddenEditorViews(self) -> int: ...
    def GetLastForcePacketUpdateTime(self) -> float: ...
    def GetLastNetUpdateTime(self) -> float: ...
    def GetLastRenderTime(self) -> float: ...
    def GetLifeSpan(self) -> float: ...
    def GetLocation(self) -> Vector: ...
    def GetNetPriority(self) -> float: ...
    def GetNetUpdateFrequency(self) -> float: ...
    def GetNetUpdateTime(self) -> float: ...
    def GetOwner(self) -> ActorWrapper: ...
    def GetPhysics(self) -> int: ...
    def GetPrePivot(self) -> Vector: ...
    def GetRelativeLocation(self) -> Vector: ...
    def GetRelativeRotation(self) -> Rotator: ...
    def GetRemoteRole(self) -> int: ...
    def GetReplicatedCollisionType(self) -> int: ...
    def GetRole(self) -> int: ...
    def GetRotation(self) -> Rotator: ...
    def GetTargetLocation(self, RequestedBy: ActorWrapper, bRequestAlternateLoc: int) -> Vector: ...
    def GetTeamNum2(self) -> int: ...
    def GetTerminalVelocity(self) -> float: ...
    def GetTimeSinceLastTick(self) -> float: ...
    def GetVelocity(self) -> Vector: ...
    def GetWorldInfo(self) -> WorldInfoWrapper: ...
    def GetbAlwaysEncroachCheck(self) -> int: ...
    def GetbAlwaysRelevant(self) -> int: ...
    def GetbAlwaysTick(self) -> int: ...
    def GetbBlockActors(self) -> int: ...
    def GetbBlocksNavigation(self) -> int: ...
    def GetbBlocksTeleport(self) -> int: ...
    def GetbBounce(self) -> int: ...
    def GetbCallRigidBodyWakeEvents(self) -> int: ...
    def GetbCanTeleport(self) -> int: ...
    def GetbCollideActors(self) -> int: ...
    def GetbCollideComplex(self) -> int: ...
    def GetbCollideWhenPlacing(self) -> int: ...
    def GetbCollideWorld(self) -> int: ...
    def GetbComponentOutsideWorld(self) -> int: ...
    def GetbDeleteMe(self) -> int: ...
    def GetbDemoOwner(self) -> int: ...
    def GetbDemoRecording(self) -> int: ...
    def GetbEditable(self) -> int: ...
    def GetbForceDemoRelevant(self) -> int: ...
    def GetbForceNetUpdate(self) -> int: ...
    def GetbForcePacketUpdate(self) -> int: ...
    def GetbGameRelevant(self) -> int: ...
    def GetbHasAlternateTargetLocation(self) -> int: ...
    def GetbHidden(self) -> int: ...
    def GetbHiddenSelf(self) -> int: ...
    def GetbIgnoreRigidBodyPawns(self) -> int: ...
    def GetbIsMoving(self) -> int: ...
    def GetbKillDuringLevelTransition(self) -> int: ...
    def GetbLockLocation(self) -> int: ...
    def GetbMovable(self) -> int: ...
    def GetbNetInitialRotation(self) -> int: ...
    def GetbNoDelete(self) -> int: ...
    def GetbOnlyOwnerSee(self) -> int: ...
    def GetbOrientOnSlope(self) -> int: ...
    def GetbPendingNetUpdate(self) -> int: ...
    def GetbPhysRigidBodyOutOfWorldCheck(self) -> int: ...
    def GetbPostRenderIfNotVisible(self) -> int: ...
    def GetbReplicateInstigator(self) -> int: ...
    def GetbReplicateMovement(self) -> int: ...
    def GetbReplicateRigidBodyLocation(self) -> int: ...
    def GetbRigidBodyWasAwake(self) -> int: ...
    def GetbStatic(self) -> int: ...
    def GetbTickIsDisabled(self) -> int: ...
    def GetbTicked(self) -> int: ...
    def GetbUpdateSimulatedPosition(self) -> int: ...
    def GetbWorldGeometry(self) -> int: ...
    def IsBasedOn(self, TestActor: ActorWrapper) -> bool: ...
    def IsInPersistentLevel(self, bIncludeLevelStreamingPersistent: int) -> bool: ...
    def IsNull(self) -> bool: ...
    def IsOverlapping(self, A: ActorWrapper) -> bool: ...
    def IsOwnedBy(self, TestActor: ActorWrapper) -> bool: ...
    def IsPlayerOwned(self) -> bool: ...
    def IsStationary(self) -> bool: ...
    def SetAngularVelocity(self, v: Vector, addToCurrent: bool) -> None: ...
    def SetBlockRigidBody(self, newBlockRigidBody: int) -> None: ...
    def SetCollisionType(self, newCollisionType: int) -> None: ...
    def SetCustomTimeDilation(self, newCustomTimeDilation: float) -> None: ...
    def SetDrawScale(self, newDrawScale: float) -> None: ...
    def SetDrawScale3D(self, newDrawScale3D: Vector) -> None: ...
    def SetEditorIconColor(self, newEditorIconColor: UnrealColor) -> None: ...
    def SetHUDLocation(self, NewHUDLocation: Vector) -> None: ...
    def SetHidden2(self, bNewHidden: int) -> None: ...
    def SetHiddenEditorViews(self, newHiddenEditorViews: int) -> None: ...
    def SetLastForcePacketUpdateTime(self, newLastForcePacketUpdateTime: float) -> None: ...
    def SetLocation(self, location: Vector) -> None: ...
    def SetNetPriority(self, newNetPriority: float) -> None: ...
    def SetNetUpdateFrequency(self, newNetUpdateFrequency: float) -> None: ...
    def SetNetUpdateTime(self, newNetUpdateTime: float) -> None: ...
    def SetPhysics(self, newPhysics: int) -> None: ...
    def SetPhysics2(self, newPhysics: int) -> None: ...
    def SetPrePivot(self, newPrePivot: Vector) -> None: ...
    def SetRelativeLocation(self, newRelativeLocation: Vector) -> None: ...
    def SetRelativeRotation(self, newRelativeRotation: Rotator) -> None: ...
    def SetRemoteRole(self, newRemoteRole: int) -> None: ...
    def SetReplicatedCollisionType(self, newReplicatedCollisionType: int) -> None: ...
    def SetRole(self, newRole: int) -> None: ...
    def SetRotation(self, rotation: Rotator) -> None: ...
    def SetTickIsDisabled(self, bInDisabled: int) -> None: ...
    def SetTorque(self, torq: Vector) -> None: ...
    def SetVelocity(self, velocity: Vector) -> None: ...
    def SetbAlwaysEncroachCheck(self, newbAlwaysEncroachCheck: int) -> None: ...
    def SetbAlwaysTick(self, newbAlwaysTick: int) -> None: ...
    def SetbBlockActors(self, newbBlockActors: int) -> None: ...
    def SetbBlocksNavigation(self, newbBlocksNavigation: int) -> None: ...
    def SetbBlocksTeleport(self, newbBlocksTeleport: int) -> None: ...
    def SetbBounce(self, newbBounce: int) -> None: ...
    def SetbCallRigidBodyWakeEvents(self, newbCallRigidBodyWakeEvents: int) -> None: ...
    def SetbCanTeleport(self, newbCanTeleport: int) -> None: ...
    def SetbCollideActors(self, newbCollideActors: int) -> None: ...
    def SetbCollideComplex(self, newbCollideComplex: int) -> None: ...
    def SetbCollideWhenPlacing(self, newbCollideWhenPlacing: int) -> None: ...
    def SetbCollideWorld(self, newbCollideWorld: int) -> None: ...
    def SetbDeleteMe(self, newbDeleteMe: int) -> None: ...
    def SetbDemoOwner(self, newbDemoOwner: int) -> None: ...
    def SetbDemoRecording(self, newbDemoRecording: int) -> None: ...
    def SetbEditable(self, newbEditable: int) -> None: ...
    def SetbForceDemoRelevant(self, newbForceDemoRelevant: int) -> None: ...
    def SetbForceNetUpdate(self, newbForceNetUpdate: int) -> None: ...
    def SetbForcePacketUpdate(self, newbForcePacketUpdate: int) -> None: ...
    def SetbGameRelevant(self, newbGameRelevant: int) -> None: ...
    def SetbHiddenSelf(self, newbHiddenSelf: int) -> None: ...
    def SetbIgnoreRigidBodyPawns(self, newbIgnoreRigidBodyPawns: int) -> None: ...
    def SetbKillDuringLevelTransition(self, newbKillDuringLevelTransition: int) -> None: ...
    def SetbLockLocation(self, newbLockLocation: int) -> None: ...
    def SetbMovable(self, newbMovable: int) -> None: ...
    def SetbNetInitialRotation(self, newbNetInitialRotation: int) -> None: ...
    def SetbNoDelete(self, newbNoDelete: int) -> None: ...
    def SetbOnlyOwnerSee(self, newbOnlyOwnerSee: int) -> None: ...
    def SetbOrientOnSlope(self, newbOrientOnSlope: int) -> None: ...
    def SetbPendingNetUpdate(self, newbPendingNetUpdate: int) -> None: ...
    def SetbPhysRigidBodyOutOfWorldCheck(self, newbPhysRigidBodyOutOfWorldCheck: int) -> None: ...
    def SetbPostRenderIfNotVisible(self, newbPostRenderIfNotVisible: int) -> None: ...
    def SetbReplicateRigidBodyLocation(self, newbReplicateRigidBodyLocation: int) -> None: ...
    def SetbRigidBodyWasAwake(self, newbRigidBodyWasAwake: int) -> None: ...
    def SetbTickIsDisabled(self, newbTickIsDisabled: int) -> None: ...
    def SetbTicked(self, newbTicked: int) -> None: ...
    def SetbUpdateSimulatedPosition(self, newbUpdateSimulatedPosition: int) -> None: ...
    def SetbWorldGeometry(self, newbWorldGeometry: int) -> None: ...
    def Stop(self) -> None: ...
    def WillOverlap(self, PosA: Vector, VelA: Vector, PosB: Vector, VelB: Vector, StepSize: float, Radius: float, Time: float) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ActorWrapper) -> None: ...
    def eventDebugMessagePlayer(self, msg: str) -> None: ...
    def eventFellOutOfWorld(self) -> None: ...
    def eventPostDemoRewind(self) -> None: ...
    def eventReplicationEnded(self) -> None: ...
    def eventScriptGetTeamNum(self) -> int: ...
    def eventSpawnedByKismet(self) -> None: ...
    pass
class CarComponentWrapper(ActorWrapper, ObjectWrapper):
    def Activate2(self) -> None: ...
    def ApplyForces(self, ActiveTime: float) -> None: ...
    def CanActivate(self) -> bool: ...
    def CanDeactivate(self) -> bool: ...
    def ClientUpdateActive(self) -> None: ...
    def ConditionalActivate(self) -> bool: ...
    def ConditionalDeactivate(self) -> bool: ...
    def Create2(self, OwnerCar: CarWrapper, InActivator: PriWrapper) -> None: ...
    def Deactivate2(self) -> None: ...
    def EventActivationChanged(self, CarComponent: CarComponentWrapper) -> None: ...
    def GetActivator(self) -> PriWrapper: ...
    def GetActiveTime(self) -> float: ...
    def GetActivityTime(self) -> float: ...
    def GetCar(self) -> CarWrapper: ...
    def GetComponentData(self) -> int: ...
    def GetFXActor(self) -> FXActorWrapper: ...
    def GetFXActorArchetype(self) -> FXActorWrapper: ...
    def GetInactiveTime(self) -> float: ...
    def GetReplicatedActive(self) -> int: ...
    def GetReplicatedActivityTime(self) -> float: ...
    def GetVehicle(self) -> VehicleWrapper: ...
    def GetbActive(self) -> int: ...
    def GetbAutoActivate(self) -> int: ...
    def GetbCreated(self) -> int: ...
    def GetbDisabled(self) -> int: ...
    def GetbRemovedFromCar(self) -> int: ...
    def GetbSimulateComponent(self) -> int: ...
    def HandleVehicleSetup(self, InCar: CarWrapper) -> None: ...
    def OnVehicleSetupComplete(self) -> None: ...
    def PrePhysicsStep(self, DeltaTime: float) -> None: ...
    def RegisterCarEvents(self) -> None: ...
    def RemoveFromCar(self) -> None: ...
    def SetActivator(self, newActivator: PriWrapper) -> None: ...
    def SetActive(self, bNewActive: int) -> None: ...
    def SetActivityTime(self, newActivityTime: float) -> None: ...
    def SetCar(self, newCar: CarWrapper) -> None: ...
    def SetComponentData(self, newComponentData: int) -> None: ...
    def SetFXActor(self, newFXActor: FXActorWrapper) -> None: ...
    def SetFXActorArchetype(self, newFXActorArchetype: FXActorWrapper) -> None: ...
    def SetReplicatedActive(self, newReplicatedActive: int) -> None: ...
    def SetReplicatedActivityTime(self, newReplicatedActivityTime: float) -> None: ...
    def SetVehicle(self, newVehicle: VehicleWrapper) -> None: ...
    def SetbActive(self, newbActive: int) -> None: ...
    def SetbAutoActivate(self, newbAutoActivate: int) -> None: ...
    def SetbCreated(self, newbCreated: int) -> None: ...
    def SetbDisabled(self, newbDisabled: int) -> None: ...
    def SetbRemovedFromCar(self, newbRemovedFromCar: int) -> None: ...
    def SetbSimulateComponent(self, newbSimulateComponent: int) -> None: ...
    def UnregisterCarEvents(self) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: CarComponentWrapper) -> None: ...
    def eventFellOutOfWorld(self) -> None: ...
    pass
class ArrayWrapper<ActorWrapper>():
    def Count(self) -> int: ...
    def Get(self, index: int) -> ActorWrapper: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ArrayWrapper<ActorWrapper>) -> None: ...
    pass
class ArrayWrapper<BallWrapper>():
    def Count(self) -> int: ...
    def Get(self, index: int) -> BallWrapper: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ArrayWrapper<BallWrapper>) -> None: ...
    pass
class ArrayWrapper<CarComponentWrapper>():
    def Count(self) -> int: ...
    def Get(self, index: int) -> CarComponentWrapper: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ArrayWrapper<CarComponentWrapper>) -> None: ...
    pass
class ArrayWrapper<CarWrapper>():
    def Count(self) -> int: ...
    def Get(self, index: int) -> CarWrapper: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ArrayWrapper<CarWrapper>) -> None: ...
    pass
class ArrayWrapper<ControllerWrapper>():
    def Count(self) -> int: ...
    def Get(self, index: int) -> ControllerWrapper: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ArrayWrapper<ControllerWrapper>) -> None: ...
    pass
class ArrayWrapper<GoalWrapper>():
    def Count(self) -> int: ...
    def Get(self, index: int) -> GoalWrapper: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ArrayWrapper<GoalWrapper>) -> None: ...
    pass
class ArrayWrapper<OnlineProductWrapper>():
    def Count(self) -> int: ...
    def Get(self, index: int) -> OnlineProductWrapper: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ArrayWrapper<OnlineProductWrapper>) -> None: ...
    pass
class ArrayWrapper<PlayerControllerWrapper>():
    def Count(self) -> int: ...
    def Get(self, index: int) -> PlayerControllerWrapper: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ArrayWrapper<PlayerControllerWrapper>) -> None: ...
    pass
class ArrayWrapper<PriWrapper>():
    def Count(self) -> int: ...
    def Get(self, index: int) -> PriWrapper: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ArrayWrapper<PriWrapper>) -> None: ...
    pass
class ArrayWrapper<ProductAttributeWrapper>():
    def Count(self) -> int: ...
    def Get(self, index: int) -> ProductAttributeWrapper: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ArrayWrapper<ProductAttributeWrapper>) -> None: ...
    pass
class ArrayWrapper<ProductWrapper>():
    def Count(self) -> int: ...
    def Get(self, index: int) -> ProductWrapper: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ArrayWrapper<ProductWrapper>) -> None: ...
    pass
class ArrayWrapper<RBActorWrapper>():
    def Count(self) -> int: ...
    def Get(self, index: int) -> RBActorWrapper: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ArrayWrapper<RBActorWrapper>) -> None: ...
    pass
class ArrayWrapper<SampleHistoryWrapper>():
    def Count(self) -> int: ...
    def Get(self, index: int) -> SampleHistoryWrapper: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ArrayWrapper<SampleHistoryWrapper>) -> None: ...
    pass
class ArrayWrapper<SequenceObjectWrapper>():
    def Count(self) -> int: ...
    def Get(self, index: int) -> SequenceObjectWrapper: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ArrayWrapper<SequenceObjectWrapper>) -> None: ...
    pass
class ArrayWrapper<SequenceVariableWrapper>():
    def Count(self) -> int: ...
    def Get(self, index: int) -> SequenceVariableWrapper: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ArrayWrapper<SequenceVariableWrapper>) -> None: ...
    pass
class ArrayWrapper<SequenceWrapper>():
    def Count(self) -> int: ...
    def Get(self, index: int) -> SequenceWrapper: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ArrayWrapper<SequenceWrapper>) -> None: ...
    pass
class ArrayWrapper<StatGraphWrapper>():
    def Count(self) -> int: ...
    def Get(self, index: int) -> StatGraphWrapper: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ArrayWrapper<StatGraphWrapper>) -> None: ...
    pass
class ArrayWrapper<TeamWrapper>():
    def Count(self) -> int: ...
    def Get(self, index: int) -> TeamWrapper: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ArrayWrapper<TeamWrapper>) -> None: ...
    pass
class ArrayWrapper<WheelWrapper>():
    def Count(self) -> int: ...
    def Get(self, index: int) -> WheelWrapper: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ArrayWrapper<WheelWrapper>) -> None: ...
    pass
class ArrayWrapper<int>():
    def Count(self) -> int: ...
    def Get(self, index: int) -> int: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ArrayWrapper<int>) -> None: ...
    pass
class ArrayWrapper<unsigned long long>():
    def Count(self) -> int: ...
    def Get(self, index: int) -> int: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ArrayWrapper<unsigned long long>) -> None: ...
    pass
class ArrayWrapper<wchar_t>():
    def Count(self) -> int: ...
    def Get(self, index: int) -> str: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ArrayWrapper<wchar_t>) -> None: ...
    pass
class RumblePickupComponentWrapper(CarComponentWrapper, ActorWrapper, ObjectWrapper):
    def ApplyPickup(self, InCar: CarWrapper) -> None: ...
    def CanPickup(self, InCar: CarWrapper) -> bool: ...
    def DeactivatePickup(self) -> None: ...
    def GetActivationDuration(self) -> float: ...
    def GetActiveTimePercent(self) -> float: ...
    def GetBoostComponent(self) -> BoostWrapper: ...
    def GetClientTarget(self) -> RBActorWrapper: ...
    def GetPickupFX(self) -> FXActorWrapper: ...
    def GetPickupFXArchetype(self) -> FXActorWrapper: ...
    def GetPickupName(self) -> UnrealStringWrapper: ...
    def GetbHasActivated(self) -> int: ...
    def GetbHudIgnoreUseTime(self) -> int: ...
    def GetbIsActive(self) -> int: ...
    def HasActivated2(self) -> bool: ...
    def OnCreated(self) -> None: ...
    def OnVehicleSetupComplete(self) -> None: ...
    def PickupEnd(self) -> None: ...
    def PickupStart(self) -> None: ...
    def SetActivationDuration(self, newActivationDuration: float) -> None: ...
    def SetPickupFX(self, newPickupFX: FXActorWrapper) -> None: ...
    def SetPickupFXArchetype(self, newPickupFXArchetype: FXActorWrapper) -> None: ...
    def SetbHasActivated(self, newbHasActivated: int) -> None: ...
    def SetbHudIgnoreUseTime(self, newbHudIgnoreUseTime: int) -> None: ...
    def SetbIsActive(self, newbIsActive: int) -> None: ...
    def TryActivate(self, TargetOverride: RBActorWrapper) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: RumblePickupComponentWrapper) -> None: ...
    pass
class BakkesModPlugin():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: BakkesModPlugin) -> None: ...
    def onLoad(self) -> None: ...
    def onUnload(self) -> None: ...
    @property
    def cvarManager(self) -> CVarManagerWrapper:
        """
        :type: CVarManagerWrapper
        """
    @cvarManager.setter
    def cvarManager(self, arg1: CVarManagerWrapper) -> None:
        pass
    @property
    def gameWrapper(self) -> GameWrapper:
        """
        :type: GameWrapper
        """
    @gameWrapper.setter
    def gameWrapper(self, arg1: GameWrapper) -> None:
        pass
    pass
class TargetedPickup(RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    def GetClientTarget(self) -> RBActorWrapper: ...
    def GetClientTarget2(self) -> RBActorWrapper: ...
    def GetDirectionalTargetingAccuracy(self) -> float: ...
    def GetRange(self) -> float: ...
    def GetTarget2(self) -> RBActorWrapper: ...
    def GetTargeted(self) -> RBActorWrapper: ...
    def GetbCanTargetBall(self) -> int: ...
    def GetbCanTargetCars(self) -> int: ...
    def GetbCanTargetEnemyCars(self) -> int: ...
    def GetbCanTargetTeamCars(self) -> int: ...
    def GetbRequireTrace(self) -> int: ...
    def GetbUseDirectionalTargeting(self) -> int: ...
    def OnTargetChanged(self) -> None: ...
    def SetClientTarget(self, newClientTarget: RBActorWrapper) -> None: ...
    def SetDirectionalTargetingAccuracy(self, newDirectionalTargetingAccuracy: float) -> None: ...
    def SetRange(self, newRange: float) -> None: ...
    def SetTargeted(self, newTargeted: RBActorWrapper) -> None: ...
    def SetbCanTargetBall(self, newbCanTargetBall: int) -> None: ...
    def SetbCanTargetCars(self, newbCanTargetCars: int) -> None: ...
    def SetbCanTargetEnemyCars(self, newbCanTargetEnemyCars: int) -> None: ...
    def SetbCanTargetTeamCars(self, newbCanTargetTeamCars: int) -> None: ...
    def SetbRequireTrace(self, newbRequireTrace: int) -> None: ...
    def SetbUseDirectionalTargeting(self, newbUseDirectionalTargeting: int) -> None: ...
    def TargetChanged(self) -> None: ...
    def TryActivate(self, TargetOverride: RBActorWrapper) -> bool: ...
    def ValidateTarget2(self, InTarget: RBActorWrapper) -> bool: ...
    def ValidateTargetTrace(self, InTarget: RBActorWrapper) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: TargetedPickup) -> None: ...
    pass
class BallFreezePickup(TargetedPickup, RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    def ApplyForces(self, ActiveTime: float) -> None: ...
    def GetBall(self) -> BallWrapper: ...
    def GetFreezeBreakFXArchetype(self) -> FXActorWrapper: ...
    def GetFreezeFX(self) -> FXActorWrapper: ...
    def GetFreezeFXArchetype(self) -> FXActorWrapper: ...
    def GetOrigAngularVelocity(self) -> Vector: ...
    def GetOrigLinearVelocity(self) -> Vector: ...
    def GetOrigSpeed(self) -> float: ...
    def GetRepOrigSpeed(self) -> float: ...
    def GetStopMomentumPercentage(self) -> float: ...
    def GetTimeToStop(self) -> float: ...
    def GetbMaintainMomentum(self) -> int: ...
    def GetbTouched(self) -> int: ...
    def HandleBallExploded(self, InBall: BallWrapper) -> None: ...
    def HandleBallHit(self, InBall: BallWrapper, InCar: CarWrapper, HitType: int) -> None: ...
    def OnTargetChanged(self) -> None: ...
    def PickupEnd(self) -> None: ...
    def PickupStart(self) -> None: ...
    def SetBall(self, newBall: BallWrapper) -> None: ...
    def SetFreezeBreakFXArchetype(self, newFreezeBreakFXArchetype: FXActorWrapper) -> None: ...
    def SetFreezeFX(self, newFreezeFX: FXActorWrapper) -> None: ...
    def SetFreezeFXArchetype(self, newFreezeFXArchetype: FXActorWrapper) -> None: ...
    def SetOrigAngularVelocity(self, newOrigAngularVelocity: Vector) -> None: ...
    def SetOrigLinearVelocity(self, newOrigLinearVelocity: Vector) -> None: ...
    def SetOrigSpeed(self, newOrigSpeed: float) -> None: ...
    def SetRepOrigSpeed(self, newRepOrigSpeed: float) -> None: ...
    def SetStopMomentumPercentage(self, newStopMomentumPercentage: float) -> None: ...
    def SetTimeToStop(self, newTimeToStop: float) -> None: ...
    def SetbMaintainMomentum(self, newbMaintainMomentum: int) -> None: ...
    def SetbTouched(self, newbTouched: int) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: BallFreezePickup) -> None: ...
    pass
class SpringPickup(TargetedPickup, RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    def ApplyForces(self, ActiveTime: float) -> None: ...
    def DoSpring(self, bFirstHit: int) -> None: ...
    def GetAfterSpringDuration(self) -> float: ...
    def GetAfterSpringTime(self) -> float: ...
    def GetBallHitType(self) -> int: ...
    def GetConstantForce(self) -> float: ...
    def GetCurrentSpringLength(self) -> float: ...
    def GetForce(self) -> float: ...
    def GetFromOffset(self) -> Vector: ...
    def GetHitDistanceOffset(self) -> float: ...
    def GetHittingMeshOffset(self) -> Vector: ...
    def GetHittingMeshScale(self) -> Vector: ...
    def GetHittingRotationOffset(self) -> Rotator: ...
    def GetMaxSpringLength(self) -> float: ...
    def GetMinSpringLength(self) -> float: ...
    def GetRelativeConstantForce(self, Direction: Vector) -> Vector: ...
    def GetRelativeForceNormalDirection(self) -> float: ...
    def GetRelativeImpulse(self, Direction: Vector) -> Vector: ...
    def GetSpringMeshInitialSize(self) -> float: ...
    def GetSpringMeshScale(self) -> Vector: ...
    def GetSpringOrigin(self) -> Vector: ...
    def GetSpringRotationOffset(self) -> Rotator: ...
    def GetSpringToTime(self) -> float: ...
    def GetSpringedLength(self) -> float: ...
    def GetSpringedLocation(self) -> Vector: ...
    def GetSpringedNormal(self) -> Vector: ...
    def GetSpringedTime(self) -> float: ...
    def GetTorque(self) -> Vector: ...
    def GetVerticalForce(self) -> float: ...
    def GetWeldedForceScalar(self) -> float: ...
    def GetWeldedVerticalForce(self) -> float: ...
    def GetbApplyConstantForce(self) -> int: ...
    def GetbApplyRelativeConstantForce(self) -> int: ...
    def GetbApplyRelativeForce(self) -> int: ...
    def GetbBreakConstantForceWithHit(self) -> int: ...
    def GetbFollowAfterHit(self) -> int: ...
    def GetbInstant(self) -> int: ...
    def GetbSpringed(self) -> int: ...
    def HandleCarTouchedBall(self, Ball: BallWrapper, OtherCar: CarWrapper, HitType: int) -> None: ...
    def PickupEnd(self) -> None: ...
    def PickupStart(self) -> None: ...
    def ScaleSpringMeshToLocation(self, NewLocation: Vector, TargetLoction: Vector) -> None: ...
    def SetAfterSpringDuration(self, newAfterSpringDuration: float) -> None: ...
    def SetAfterSpringTime(self, newAfterSpringTime: float) -> None: ...
    def SetBallHitType(self, newBallHitType: int) -> None: ...
    def SetConstantForce(self, newConstantForce: float) -> None: ...
    def SetCurrentSpringLength(self, newCurrentSpringLength: float) -> None: ...
    def SetForce(self, newForce: float) -> None: ...
    def SetFromOffset(self, newFromOffset: Vector) -> None: ...
    def SetHitDistanceOffset(self, newHitDistanceOffset: float) -> None: ...
    def SetHittingMeshOffset(self, newHittingMeshOffset: Vector) -> None: ...
    def SetHittingMeshScale(self, newHittingMeshScale: Vector) -> None: ...
    def SetHittingRotationOffset(self, newHittingRotationOffset: Rotator) -> None: ...
    def SetMaxSpringLength(self, newMaxSpringLength: float) -> None: ...
    def SetMinSpringLength(self, newMinSpringLength: float) -> None: ...
    def SetRelativeForceNormalDirection(self, newRelativeForceNormalDirection: float) -> None: ...
    def SetSpringMeshInitialSize(self, newSpringMeshInitialSize: float) -> None: ...
    def SetSpringMeshScale(self, newSpringMeshScale: Vector) -> None: ...
    def SetSpringOrigin(self, newSpringOrigin: Vector) -> None: ...
    def SetSpringRotationOffset(self, newSpringRotationOffset: Rotator) -> None: ...
    def SetSpringToTime(self, newSpringToTime: float) -> None: ...
    def SetSpringedLength(self, newSpringedLength: float) -> None: ...
    def SetSpringedLocation(self, newSpringedLocation: Vector) -> None: ...
    def SetSpringedNormal(self, newSpringedNormal: Vector) -> None: ...
    def SetSpringedTime(self, newSpringedTime: float) -> None: ...
    def SetTorque(self, newTorque: Vector) -> None: ...
    def SetVerticalForce(self, newVerticalForce: float) -> None: ...
    def SetWeldedForceScalar(self, newWeldedForceScalar: float) -> None: ...
    def SetWeldedVerticalForce(self, newWeldedVerticalForce: float) -> None: ...
    def SetbApplyConstantForce(self, newbApplyConstantForce: int) -> None: ...
    def SetbApplyRelativeConstantForce(self, newbApplyRelativeConstantForce: int) -> None: ...
    def SetbApplyRelativeForce(self, newbApplyRelativeForce: int) -> None: ...
    def SetbBreakConstantForceWithHit(self, newbBreakConstantForceWithHit: int) -> None: ...
    def SetbFollowAfterHit(self, newbFollowAfterHit: int) -> None: ...
    def SetbInstant(self, newbInstant: int) -> None: ...
    def SetbSpringed(self, newbSpringed: int) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: SpringPickup) -> None: ...
    pass
class RBActorWrapper(ActorWrapper, ObjectWrapper):
    def AddForce(self, Force: Vector, ForceMode: int) -> None: ...
    def AddTorque(self, Torque: Vector, ForceMode: int) -> None: ...
    def GetClientCorrectionRBState(self) -> RBState: ...
    def GetCurrentRBLocation(self) -> Vector: ...
    def GetCurrentRBState(self) -> RBState: ...
    def GetFXActor(self) -> FXActorWrapper: ...
    def GetFXActorArchetype(self) -> FXActorWrapper: ...
    def GetLastRBCollisionsFrame(self) -> int: ...
    def GetMaxAngularSpeed(self) -> float: ...
    def GetMaxLinearSpeed(self) -> float: ...
    def GetOldRBState(self) -> RBState: ...
    def GetPhysicsFrame(self) -> int: ...
    def GetPhysicsTime(self) -> float: ...
    def GetPreWeldMass(self) -> float: ...
    def GetRBState(self) -> RBState: ...
    def GetReplicatedRBState(self) -> RBState: ...
    def GetSyncErrorAngle(self) -> float: ...
    def GetSyncErrorAxis(self) -> Vector: ...
    def GetSyncErrorLocation(self) -> Vector: ...
    def GetWeldedActor(self) -> RBActorWrapper: ...
    def GetWeldedTo(self) -> RBActorWrapper: ...
    def GetWorldContact(self) -> WorldContactData: ...
    def GetbDisableSleeping(self) -> int: ...
    def GetbFrozen(self) -> int: ...
    def GetbIgnoreSyncing(self) -> int: ...
    def GetbPhysInitialized(self) -> int: ...
    def GetbReplayActor(self) -> int: ...
    def InitAk(self) -> None: ...
    def ReInitRBPhys(self) -> None: ...
    def SetClientCorrectionRBState(self, newClientCorrectionRBState: RBState) -> None: ...
    def SetConstrained2D(self, bConstrain2D: int) -> None: ...
    def SetConstrained3D(self, LinearLower: Vector, LinearUpper: Vector, AngularLower: Vector, AngularUpper: Vector) -> None: ...
    def SetFXActor(self, newFXActor: FXActorWrapper) -> None: ...
    def SetFXActorArchetype(self, newFXActorArchetype: FXActorWrapper) -> None: ...
    def SetFrozen(self, bEnabled: int) -> None: ...
    def SetMass(self, NewMass: float) -> None: ...
    def SetMaxAngularSpeed(self, newMaxAngularSpeed: float) -> None: ...
    def SetMaxAngularSpeed2(self, NewMaxSpeed: float) -> None: ...
    def SetMaxLinearSpeed(self, newMaxLinearSpeed: float) -> None: ...
    def SetMaxLinearSpeed2(self, NewMaxSpeed: float) -> None: ...
    def SetOldRBState(self, newOldRBState: RBState) -> None: ...
    def SetPhysicsState(self, NewState: RBState) -> None: ...
    def SetRBState(self, newRBState: RBState) -> None: ...
    def SetReplicatedRBState(self, newReplicatedRBState: RBState) -> None: ...
    def SetWorldContact(self, newWorldContact: WorldContactData) -> None: ...
    def SetbDisableSleeping(self, newbDisableSleeping: int) -> None: ...
    def SetbFrozen(self, newbFrozen: int) -> None: ...
    def SetbIgnoreSyncing(self, newbIgnoreSyncing: int) -> None: ...
    def SetbReplayActor(self, newbReplayActor: int) -> None: ...
    def TerminateRBPhys(self) -> None: ...
    def UnWeldRBActor(self, Other: RBActorWrapper) -> None: ...
    def WeldRBActor2(self, Other: RBActorWrapper, WeldOffset: Vector, WeldRotation: Rotator) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: RBActorWrapper) -> None: ...
    def eventPreBeginPlay(self) -> None: ...
    pass
class BaseCameraWrapper(ActorWrapper, ObjectWrapper):
    def ApplyAudioFade(self) -> None: ...
    def CalcRadialShakeScale(self, Cam: BaseCameraWrapper, Epicenter: Vector, InnerRadius: float, OuterRadius: float, Falloff: float) -> float: ...
    def ClearAllCameraShakes(self) -> None: ...
    def ClearCameraLensEffects(self) -> None: ...
    def DoUpdateCamera(self, DeltaTime: float) -> None: ...
    def GetBlendTimeToGo(self) -> float: ...
    def GetCamOverridePostProcessAlpha(self) -> float: ...
    def GetCameraRotation(self) -> Rotator: ...
    def GetColorScale(self) -> Vector: ...
    def GetColorScaleInterpDuration(self) -> float: ...
    def GetColorScaleInterpStartTime(self) -> float: ...
    def GetConstrainedAspectRatio(self) -> float: ...
    def GetDefaultAspectRatio(self) -> float: ...
    def GetDefaultFOV(self) -> float: ...
    def GetDesiredColorScale(self) -> Vector: ...
    def GetFOVAngle(self) -> float: ...
    def GetFadeAmount(self) -> float: ...
    def GetFadeColor(self) -> UnrealColor: ...
    def GetFadeTime(self) -> float: ...
    def GetFadeTimeRemaining(self) -> float: ...
    def GetFreeCamDistance(self) -> float: ...
    def GetFreeCamOffset(self) -> Vector: ...
    def GetLockedFOV(self) -> float: ...
    def GetOffAxisPitchAngle(self) -> float: ...
    def GetOffAxisYawAngle(self) -> float: ...
    def GetOriginalColorScale(self) -> Vector: ...
    def GetPendingViewTarget(self) -> ViewTarget: ...
    def GetViewTarget(self) -> ViewTarget: ...
    def GetbConstrainAspectRatio(self) -> int: ...
    def GetbDebugClientSideCamera(self) -> int: ...
    def GetbEnableColorScaleInterp(self) -> int: ...
    def GetbEnableColorScaling(self) -> int: ...
    def GetbEnableFading(self) -> int: ...
    def GetbFadeAudio(self) -> int: ...
    def GetbForceDisableTemporalAA(self) -> int: ...
    def GetbLockedFOV(self) -> int: ...
    def GetbShouldSendClientSideCameraUpdate(self) -> int: ...
    def GetbUseClientSideCameraUpdates(self) -> int: ...
    def PostBeginPlay(self) -> None: ...
    def SetBlendTimeToGo(self, newBlendTimeToGo: float) -> None: ...
    def SetCamOverridePostProcessAlpha(self, newCamOverridePostProcessAlpha: float) -> None: ...
    def SetColorScale(self, newColorScale: Vector) -> None: ...
    def SetColorScaleInterpDuration(self, newColorScaleInterpDuration: float) -> None: ...
    def SetColorScaleInterpStartTime(self, newColorScaleInterpStartTime: float) -> None: ...
    def SetConstrainedAspectRatio(self, newConstrainedAspectRatio: float) -> None: ...
    def SetDefaultAspectRatio(self, newDefaultAspectRatio: float) -> None: ...
    def SetDefaultFOV(self, newDefaultFOV: float) -> None: ...
    def SetDesiredColorScale(self, newDesiredColorScale: Vector) -> None: ...
    def SetDesiredColorScale2(self, NewColorScale: Vector, InterpTime: float) -> None: ...
    def SetFOV(self, NewFOV: float) -> None: ...
    def SetFadeAmount(self, newFadeAmount: float) -> None: ...
    def SetFadeColor(self, newFadeColor: UnrealColor) -> None: ...
    def SetFadeTime(self, newFadeTime: float) -> None: ...
    def SetFadeTimeRemaining(self, newFadeTimeRemaining: float) -> None: ...
    def SetFreeCamDistance(self, newFreeCamDistance: float) -> None: ...
    def SetFreeCamOffset(self, newFreeCamOffset: Vector) -> None: ...
    def SetLockedFOV(self, newLockedFOV: float) -> None: ...
    def SetOffAxisPitchAngle(self, newOffAxisPitchAngle: float) -> None: ...
    def SetOffAxisYawAngle(self, newOffAxisYawAngle: float) -> None: ...
    def SetOriginalColorScale(self, newOriginalColorScale: Vector) -> None: ...
    def SetPendingViewTarget(self, newPendingViewTarget: ViewTarget) -> None: ...
    def SetViewTarget(self, newViewTarget: ViewTarget) -> None: ...
    def SetbConstrainAspectRatio(self, newbConstrainAspectRatio: int) -> None: ...
    def SetbDebugClientSideCamera(self, newbDebugClientSideCamera: int) -> None: ...
    def SetbEnableColorScaleInterp(self, newbEnableColorScaleInterp: int) -> None: ...
    def SetbEnableColorScaling(self, newbEnableColorScaling: int) -> None: ...
    def SetbEnableFading(self, newbEnableFading: int) -> None: ...
    def SetbFadeAudio(self, newbFadeAudio: int) -> None: ...
    def SetbForceDisableTemporalAA(self, newbForceDisableTemporalAA: int) -> None: ...
    def SetbLockedFOV(self, newbLockedFOV: int) -> None: ...
    def SetbShouldSendClientSideCameraUpdate(self, newbShouldSendClientSideCameraUpdate: int) -> None: ...
    def SetbUseClientSideCameraUpdates(self, newbUseClientSideCameraUpdates: int) -> None: ...
    def StopAllCameraAnims(self, bImmediate: int) -> None: ...
    def UpdateFade(self, DeltaTime: float) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: BaseCameraWrapper) -> None: ...
    def eventDestroyed(self) -> None: ...
    def eventUpdateCamera(self, DeltaTime: float) -> None: ...
    pass
class BallLassoPickup(SpringPickup, TargetedPickup, RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    def DoSpring(self, bFirstHit: int) -> None: ...
    def ScaleSpringMeshToLocation(self, NewLocation: Vector, TargetLocation: Vector) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: BallLassoPickup) -> None: ...
    pass
class BoostModPickup(RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    def GetBoostStrength(self) -> float: ...
    def GetOldBoostStrength(self) -> float: ...
    def GetbUnlimitedBoost(self) -> int: ...
    def PickupEnd(self) -> None: ...
    def PickupStart(self) -> None: ...
    def SetBoostStrength(self, newBoostStrength: float) -> None: ...
    def SetOldBoostStrength(self, newOldBoostStrength: float) -> None: ...
    def SetbUnlimitedBoost(self, newbUnlimitedBoost: int) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: BoostModPickup) -> None: ...
    pass
class BoostOverridePickup(TargetedPickup, RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    def GetOtherCar(self) -> CarWrapper: ...
    def OnTargetChanged(self) -> None: ...
    def PickupEnd(self) -> None: ...
    def PickupStart(self) -> None: ...
    def SetOtherCar(self, newOtherCar: CarWrapper) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: BoostOverridePickup) -> None: ...
    pass
class VehiclePickupWrapper(ActorWrapper, ObjectWrapper):
    def CanPickup(self, Car: CarWrapper) -> bool: ...
    def EventPickedUp(self, Pickup: VehiclePickupWrapper) -> None: ...
    def EventSpawned(self, Pickup: VehiclePickupWrapper) -> None: ...
    def GetFXActor(self) -> FXActorWrapper: ...
    def GetFXActorArchetype(self) -> FXActorWrapper: ...
    def GetRespawnDelay(self) -> float: ...
    def GetbNetRelevant(self) -> int: ...
    def GetbNoPickup(self) -> int: ...
    def GetbPickedUp(self) -> int: ...
    def InitFX(self) -> None: ...
    def IsTouchingAVehicle(self) -> bool: ...
    def OnPickUp(self) -> None: ...
    def OnSpawn(self) -> None: ...
    def OnTouch(self, Car: CarWrapper) -> None: ...
    def Pickup2(self, Car: CarWrapper) -> None: ...
    def PlayPickedUpFX(self) -> None: ...
    def Respawn2(self) -> None: ...
    def SetFXActor(self, newFXActor: FXActorWrapper) -> None: ...
    def SetFXActorArchetype(self, newFXActorArchetype: FXActorWrapper) -> None: ...
    def SetNetRelevant(self, bRelevant: int) -> None: ...
    def SetNoPickup(self) -> None: ...
    def SetPickedUp(self, bNewPickedUp: int, InInstigator: CarWrapper) -> None: ...
    def SetRespawnDelay(self, newRespawnDelay: float) -> None: ...
    def SetbNetRelevant(self, newbNetRelevant: int) -> None: ...
    def SetbNoPickup(self, newbNoPickup: int) -> None: ...
    def SetbPickedUp(self, newbPickedUp: int) -> None: ...
    def SetupReplicateNoPickup(self) -> None: ...
    def UpdateTickDisabled(self) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: VehiclePickupWrapper) -> None: ...
    def eventPostBeginPlay(self) -> None: ...
    def eventPreBeginPlay(self) -> None: ...
    def eventTouch(self, Other: ActorWrapper, OtherComp: PrimitiveComponentWrapper, HitLocation: Vector, HitNormal: Vector) -> None: ...
    pass
class BoostWrapper(CarComponentWrapper, ActorWrapper, ObjectWrapper):
    def ApplyForces(self, ActiveTime: float) -> None: ...
    def CanActivate(self) -> bool: ...
    def CanDeactivate(self) -> bool: ...
    def ClientFixBoostAmount(self, TimeStamp: float, Amount: float) -> None: ...
    def ClientGiveBoost(self, Amount: float) -> None: ...
    def ConfirmBoostAmount2(self) -> None: ...
    def GetBoostConsumptionRate(self) -> float: ...
    def GetBoostForce(self) -> float: ...
    def GetBoostModifier(self) -> float: ...
    def GetCurrentBoostAmount(self) -> float: ...
    def GetLastBoostAmount(self) -> float: ...
    def GetLastBoostAmountRequestTime(self) -> float: ...
    def GetMaxBoostAmount(self) -> float: ...
    def GetMinBoostTime(self) -> float: ...
    def GetPercentBoostFull(self) -> float: ...
    def GetRechargeDelay(self) -> float: ...
    def GetRechargeRate(self) -> float: ...
    def GetReplicatedBoostAmount(self) -> int: ...
    def GetStartBoostAmount(self) -> float: ...
    def GetUnlimitedBoostRefCount(self) -> int: ...
    def GetbNoBoost(self) -> int: ...
    def GetbPendingConfirmBoostAmount(self) -> int: ...
    def GiveBoost2(self, Amount: float) -> None: ...
    def GiveFullBoost(self) -> None: ...
    def GiveStartingBoost(self) -> None: ...
    def IsFull(self) -> bool: ...
    def ReadReplicatedBoostAmount(self) -> None: ...
    def RemoveFromCar(self) -> None: ...
    def SendConfirmBoostAmount(self) -> None: ...
    def ServerConfirmBoostAmount(self, TimeStamp: float, Amount: float) -> None: ...
    def SetBoostAmount(self, Amount: float) -> None: ...
    def SetBoostConsumptionRate(self, newBoostConsumptionRate: float) -> None: ...
    def SetBoostForce(self, newBoostForce: float) -> None: ...
    def SetBoostModifier(self, newBoostModifier: float) -> None: ...
    def SetBoostModifier2(self, Modifier: float) -> None: ...
    def SetCurrentBoostAmount(self, newCurrentBoostAmount: float) -> None: ...
    def SetLastBoostAmount(self, newLastBoostAmount: float) -> None: ...
    def SetLastBoostAmountRequestTime(self, newLastBoostAmountRequestTime: float) -> None: ...
    def SetMaxBoostAmount(self, newMaxBoostAmount: float) -> None: ...
    def SetMinBoostTime(self, newMinBoostTime: float) -> None: ...
    def SetNoBoost(self, Enabled: int) -> None: ...
    def SetRechargeDelay(self, newRechargeDelay: float) -> None: ...
    def SetRechargeDelay2(self, InRechargeDelay: float) -> None: ...
    def SetRechargeRate(self, newRechargeRate: float) -> None: ...
    def SetRechargeRate2(self, InRechargeRate: float) -> None: ...
    def SetReplicatedBoostAmount(self, newReplicatedBoostAmount: int) -> None: ...
    def SetStartBoostAmount(self, newStartBoostAmount: float) -> None: ...
    def SetUnlimitedBoost2(self, Enabled: int) -> None: ...
    def SetUnlimitedBoostDelayed(self, Enabled: int) -> None: ...
    def SetUnlimitedBoostRefCount(self, newUnlimitedBoostRefCount: int) -> None: ...
    def SetbNoBoost(self, newbNoBoost: int) -> None: ...
    def SetbPendingConfirmBoostAmount(self, newbPendingConfirmBoostAmount: int) -> None: ...
    def ShouldPredictBoostConsumption(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: BoostWrapper) -> None: ...
    def eventSetReplicatedBoostAmount(self) -> None: ...
    pass
class BotLoadoutData():
    class Attribute():
        class Type():
            """
            Members:

              PAINT

              ESPORTWHEEL

              SPECIALEDITION
            """
            def __eq__(self, other: object) -> bool: ...
            def __getstate__(self) -> int: ...
            def __hash__(self) -> int: ...
            def __init__(self, value: int) -> None: ...
            def __int__(self) -> int: ...
            def __ne__(self, other: object) -> bool: ...
            def __repr__(self) -> str: ...
            def __setstate__(self, state: int) -> None: ...
            @property
            def name(self) -> str:
                """
                :type: str
                """
            @property
            def value(self) -> int:
                """
                :type: int
                """
            ESPORTWHEEL: bakkesmod.BotLoadoutData.Attribute.Type # value = <Type.ESPORTWHEEL: 1>
            PAINT: bakkesmod.BotLoadoutData.Attribute.Type # value = <Type.PAINT: 0>
            SPECIALEDITION: bakkesmod.BotLoadoutData.Attribute.Type # value = <Type.SPECIALEDITION: 2>
            __members__: dict # value = {'PAINT': <Type.PAINT: 0>, 'ESPORTWHEEL': <Type.ESPORTWHEEL: 1>, 'SPECIALEDITION': <Type.SPECIALEDITION: 2>}
            pass
        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, arg0: BotLoadoutData.Attribute) -> None: ...
        @property
        def type(self) -> BotLoadoutData::Attribute::Type:
            """
            :type: BotLoadoutData::Attribute::Type
            """
        @type.setter
        def type(self, arg1: BotLoadoutData::Attribute::Type) -> None:
            pass
        @property
        def value(self) -> int:
            """
            :type: int
            """
        @value.setter
        def value(self, arg1: int) -> None:
            pass
        pass
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: BotLoadoutData) -> None: ...
    @property
    def custom_color_id(self) -> int:
        """
        :type: int
        """
    @custom_color_id.setter
    def custom_color_id(self, arg1: int) -> None:
        pass
    @property
    def custom_finish_id(self) -> int:
        """
        :type: int
        """
    @custom_finish_id.setter
    def custom_finish_id(self, arg1: int) -> None:
        pass
    @property
    def product_attributes(self) -> typing.Dict[int, typing.List[BotLoadoutData::Attribute]]:
        """
        :type: typing.Dict[int, typing.List[BotLoadoutData::Attribute]]
        """
    @product_attributes.setter
    def product_attributes(self, arg1: typing.Dict[int, typing.List[BotLoadoutData::Attribute]]) -> None:
        pass
    @property
    def products(self) -> typing.Dict[int, int]:
        """
        :type: typing.Dict[int, int]
        """
    @products.setter
    def products(self, arg1: typing.Dict[int, int]) -> None:
        pass
    @property
    def team(self) -> int:
        """
        :type: int
        """
    @team.setter
    def team(self, arg1: int) -> None:
        pass
    @property
    def team_color_id(self) -> int:
        """
        :type: int
        """
    @team_color_id.setter
    def team_color_id(self, arg1: int) -> None:
        pass
    @property
    def team_finish_id(self) -> int:
        """
        :type: int
        """
    @team_finish_id.setter
    def team_finish_id(self, arg1: int) -> None:
        pass
    pass
class CARBODY():
    """
    Members:

      CAR_BACKFIRE

      CAR_BREAKOUT

      CAR_BREAKOUTTYPES

      CAR_OCTANE

      CAR_OCTANEZSR

      CAR_PALADIN

      CAR_ROADHOG

      CAR_ROADHOGXL

      CAR_GIZMO

      CAR_SWEETTOOTH

      CAR_XDEVIL

      CAR_XDEVILMK2

      CAR_HOTSHOT

      CAR_MERC

      CAR_VENOM

      CAR_TAKUMI

      CAR_TAKUMIRXT

      CAR_DOMINUS

      CAR_DOMINUSGT

      CAR_SCARAB

      CAR_ZIPPY

      CAR_DELOREAN

      CAR_RIPPER

      CAR_GROG

      CAR_ARMADILLO

      CAR_WARTHOG

      CAR_BATMOBILE

      CAR_MASAMUNE

      CAR_MARAUDER

      CAR_AFTERSHOCK

      CAR_ESPER

      CAR_PROTEUS

      CAR_TRITON

      CAR_VULCAN

      CAR_TWINMILL

      CAR_BONESHAKER

      CAR_ENDO

      CAR_ICECHARGER

      CAR_MANTIS

      CAR_JOGER619RS

      CAR_CENTIO

      CAR_ANIMUSGP
    """
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    CAR_AFTERSHOCK: bakkesmod.CARBODY # value = <CARBODY.CAR_AFTERSHOCK: 1286>
    CAR_ANIMUSGP: bakkesmod.CARBODY # value = <CARBODY.CAR_ANIMUSGP: 1932>
    CAR_ARMADILLO: bakkesmod.CARBODY # value = <CARBODY.CAR_ARMADILLO: 625>
    CAR_BACKFIRE: bakkesmod.CARBODY # value = <CARBODY.CAR_BACKFIRE: 21>
    CAR_BATMOBILE: bakkesmod.CARBODY # value = <CARBODY.CAR_BATMOBILE: 803>
    CAR_BONESHAKER: bakkesmod.CARBODY # value = <CARBODY.CAR_BONESHAKER: 1623>
    CAR_BREAKOUT: bakkesmod.CARBODY # value = <CARBODY.CAR_BREAKOUT: 22>
    CAR_BREAKOUTTYPES: bakkesmod.CARBODY # value = <CARBODY.CAR_BREAKOUTTYPES: 1416>
    CAR_CENTIO: bakkesmod.CARBODY # value = <CARBODY.CAR_CENTIO: 1919>
    CAR_DELOREAN: bakkesmod.CARBODY # value = <CARBODY.CAR_DELOREAN: 597>
    CAR_DOMINUS: bakkesmod.CARBODY # value = <CARBODY.CAR_DOMINUS: 403>
    CAR_DOMINUSGT: bakkesmod.CARBODY # value = <CARBODY.CAR_DOMINUSGT: 1018>
    CAR_ENDO: bakkesmod.CARBODY # value = <CARBODY.CAR_ENDO: 1624>
    CAR_ESPER: bakkesmod.CARBODY # value = <CARBODY.CAR_ESPER: 1317>
    CAR_GIZMO: bakkesmod.CARBODY # value = <CARBODY.CAR_GIZMO: 26>
    CAR_GROG: bakkesmod.CARBODY # value = <CARBODY.CAR_GROG: 607>
    CAR_HOTSHOT: bakkesmod.CARBODY # value = <CARBODY.CAR_HOTSHOT: 29>
    CAR_ICECHARGER: bakkesmod.CARBODY # value = <CARBODY.CAR_ICECHARGER: 1675>
    CAR_JOGER619RS: bakkesmod.CARBODY # value = <CARBODY.CAR_JOGER619RS: 1856>
    CAR_MANTIS: bakkesmod.CARBODY # value = <CARBODY.CAR_MANTIS: 1691>
    CAR_MARAUDER: bakkesmod.CARBODY # value = <CARBODY.CAR_MARAUDER: 1172>
    CAR_MASAMUNE: bakkesmod.CARBODY # value = <CARBODY.CAR_MASAMUNE: 1171>
    CAR_MERC: bakkesmod.CARBODY # value = <CARBODY.CAR_MERC: 30>
    CAR_OCTANE: bakkesmod.CARBODY # value = <CARBODY.CAR_OCTANE: 23>
    CAR_OCTANEZSR: bakkesmod.CARBODY # value = <CARBODY.CAR_OCTANEZSR: 1568>
    CAR_PALADIN: bakkesmod.CARBODY # value = <CARBODY.CAR_PALADIN: 24>
    CAR_PROTEUS: bakkesmod.CARBODY # value = <CARBODY.CAR_PROTEUS: 1475>
    CAR_RIPPER: bakkesmod.CARBODY # value = <CARBODY.CAR_RIPPER: 600>
    CAR_ROADHOG: bakkesmod.CARBODY # value = <CARBODY.CAR_ROADHOG: 25>
    CAR_ROADHOGXL: bakkesmod.CARBODY # value = <CARBODY.CAR_ROADHOGXL: 1300>
    CAR_SCARAB: bakkesmod.CARBODY # value = <CARBODY.CAR_SCARAB: 404>
    CAR_SWEETTOOTH: bakkesmod.CARBODY # value = <CARBODY.CAR_SWEETTOOTH: 27>
    CAR_TAKUMI: bakkesmod.CARBODY # value = <CARBODY.CAR_TAKUMI: 402>
    CAR_TAKUMIRXT: bakkesmod.CARBODY # value = <CARBODY.CAR_TAKUMIRXT: 1295>
    CAR_TRITON: bakkesmod.CARBODY # value = <CARBODY.CAR_TRITON: 1478>
    CAR_TWINMILL: bakkesmod.CARBODY # value = <CARBODY.CAR_TWINMILL: 1603>
    CAR_VENOM: bakkesmod.CARBODY # value = <CARBODY.CAR_VENOM: 31>
    CAR_VULCAN: bakkesmod.CARBODY # value = <CARBODY.CAR_VULCAN: 1533>
    CAR_WARTHOG: bakkesmod.CARBODY # value = <CARBODY.CAR_WARTHOG: 723>
    CAR_XDEVIL: bakkesmod.CARBODY # value = <CARBODY.CAR_XDEVIL: 28>
    CAR_XDEVILMK2: bakkesmod.CARBODY # value = <CARBODY.CAR_XDEVILMK2: 1159>
    CAR_ZIPPY: bakkesmod.CARBODY # value = <CARBODY.CAR_ZIPPY: 523>
    __members__: dict # value = {'CAR_BACKFIRE': <CARBODY.CAR_BACKFIRE: 21>, 'CAR_BREAKOUT': <CARBODY.CAR_BREAKOUT: 22>, 'CAR_BREAKOUTTYPES': <CARBODY.CAR_BREAKOUTTYPES: 1416>, 'CAR_OCTANE': <CARBODY.CAR_OCTANE: 23>, 'CAR_OCTANEZSR': <CARBODY.CAR_OCTANEZSR: 1568>, 'CAR_PALADIN': <CARBODY.CAR_PALADIN: 24>, 'CAR_ROADHOG': <CARBODY.CAR_ROADHOG: 25>, 'CAR_ROADHOGXL': <CARBODY.CAR_ROADHOGXL: 1300>, 'CAR_GIZMO': <CARBODY.CAR_GIZMO: 26>, 'CAR_SWEETTOOTH': <CARBODY.CAR_SWEETTOOTH: 27>, 'CAR_XDEVIL': <CARBODY.CAR_XDEVIL: 28>, 'CAR_XDEVILMK2': <CARBODY.CAR_XDEVILMK2: 1159>, 'CAR_HOTSHOT': <CARBODY.CAR_HOTSHOT: 29>, 'CAR_MERC': <CARBODY.CAR_MERC: 30>, 'CAR_VENOM': <CARBODY.CAR_VENOM: 31>, 'CAR_TAKUMI': <CARBODY.CAR_TAKUMI: 402>, 'CAR_TAKUMIRXT': <CARBODY.CAR_TAKUMIRXT: 1295>, 'CAR_DOMINUS': <CARBODY.CAR_DOMINUS: 403>, 'CAR_DOMINUSGT': <CARBODY.CAR_DOMINUSGT: 1018>, 'CAR_SCARAB': <CARBODY.CAR_SCARAB: 404>, 'CAR_ZIPPY': <CARBODY.CAR_ZIPPY: 523>, 'CAR_DELOREAN': <CARBODY.CAR_DELOREAN: 597>, 'CAR_RIPPER': <CARBODY.CAR_RIPPER: 600>, 'CAR_GROG': <CARBODY.CAR_GROG: 607>, 'CAR_ARMADILLO': <CARBODY.CAR_ARMADILLO: 625>, 'CAR_WARTHOG': <CARBODY.CAR_WARTHOG: 723>, 'CAR_BATMOBILE': <CARBODY.CAR_BATMOBILE: 803>, 'CAR_MASAMUNE': <CARBODY.CAR_MASAMUNE: 1171>, 'CAR_MARAUDER': <CARBODY.CAR_MARAUDER: 1172>, 'CAR_AFTERSHOCK': <CARBODY.CAR_AFTERSHOCK: 1286>, 'CAR_ESPER': <CARBODY.CAR_ESPER: 1317>, 'CAR_PROTEUS': <CARBODY.CAR_PROTEUS: 1475>, 'CAR_TRITON': <CARBODY.CAR_TRITON: 1478>, 'CAR_VULCAN': <CARBODY.CAR_VULCAN: 1533>, 'CAR_TWINMILL': <CARBODY.CAR_TWINMILL: 1603>, 'CAR_BONESHAKER': <CARBODY.CAR_BONESHAKER: 1623>, 'CAR_ENDO': <CARBODY.CAR_ENDO: 1624>, 'CAR_ICECHARGER': <CARBODY.CAR_ICECHARGER: 1675>, 'CAR_MANTIS': <CARBODY.CAR_MANTIS: 1691>, 'CAR_JOGER619RS': <CARBODY.CAR_JOGER619RS: 1856>, 'CAR_CENTIO': <CARBODY.CAR_CENTIO: 1919>, 'CAR_ANIMUSGP': <CARBODY.CAR_ANIMUSGP: 1932>}
    pass
class CVarManagerWrapper():
    @typing.overload
    def __init__(self, mem: int, pluginIdx: std::type_index) -> None: ...
    @typing.overload
    def __init__(self, other: CVarManagerWrapper) -> None: ...
    def backupBinds(self, path: str) -> None: ...
    def backupCfg(self, path: str) -> None: ...
    def executeCommand(self, command: str, log: bool) -> None: ...
    def getAlias(self, alias: str) -> str: ...
    def getBindStringForKey(self, key: str) -> str: ...
    def getCvar(self, cvar: str) -> CVarWrapper: ...
    def loadCfg(self, path: str) -> None: ...
    def log(self, text: str) -> None: ...
    def registerCvar(self, cvar: str, defaultValue: str, desc: str, searchAble: bool, hasMin: bool, min: float, hasMax: bool, max: float, saveToCfg: bool) -> CVarWrapper: ...
    def registerNotifier(self, cvar: str, notifier: typing.Callable[[typing.List[str]], None], description: str, permissions: int) -> None: ...
    def removeBind(self, key: str) -> None: ...
    def removeCvar(self, cvar: str) -> bool: ...
    def removeNotifier(self, cvar: str) -> bool: ...
    def setAlias(self, key: str, script: str) -> None: ...
    def setBind(self, key: str, command: str) -> None: ...
    pass
class CVarWrapper():
    def GetDefaultValue(self) -> str: ...
    def GetMaximum(self) -> float: ...
    def GetMinimum(self) -> float: ...
    def HasMaximum(self) -> bool: ...
    def HasMinimum(self) -> bool: ...
    def IsHidden(self) -> bool: ...
    def IsNull(self) -> bool: ...
    def ResetToDefault(self) -> None: ...
    def ShouldSaveToCfg(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int, pluginIdx: std::type_index) -> None: ...
    @typing.overload
    def __init__(self, other: CVarWrapper) -> None: ...
    def addOnValueChanged(self, changeFunc: typing.Callable[[str, CVarWrapper], None]) -> None: ...
    def getBoolValue(self) -> bool: ...
    def getCVarName(self) -> str: ...
    def getColorValue(self) -> LinearColor: ...
    def getDescription(self) -> str: ...
    def getFloatValue(self) -> float: ...
    def getIntValue(self) -> int: ...
    def getStringValue(self) -> str: ...
    def notify(self) -> None: ...
    def removeOnValueChanged(self) -> None: ...
    @typing.overload
    def setValue(self, value: LinearColor) -> None: ...
    @typing.overload
    def setValue(self, value: float) -> None: ...
    @typing.overload
    def setValue(self, value: int) -> None: ...
    @typing.overload
    def setValue(self, value: str) -> None: ...
    pass
class CameraSave():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: CameraSave) -> None: ...
    @property
    def CameraShake(self) -> bool:
        """
        :type: bool
        """
    @CameraShake.setter
    def CameraShake(self, arg1: bool) -> None:
        pass
    @property
    def InvertSwivelPitch(self) -> bool:
        """
        :type: bool
        """
    @InvertSwivelPitch.setter
    def InvertSwivelPitch(self, arg1: bool) -> None:
        pass
    pass
class CameraXWrapper(BaseCameraWrapper, ActorWrapper, ObjectWrapper):
    def CopyFade(self, Other: CameraXWrapper) -> None: ...
    def GetClipOffset(self) -> Vector: ...
    def GetEndFadeColor(self) -> UnrealColor: ...
    def GetOldControllerLocation(self) -> Vector: ...
    def GetOldControllerRotation(self) -> Rotator: ...
    def GetPCDeltaLocation(self) -> Vector: ...
    def GetPCDeltaRotation(self) -> Rotator: ...
    def GetShakeFOVOffset(self) -> float: ...
    def GetShakeLocationOffset(self) -> Vector: ...
    def GetShakeRotationOffset(self) -> Rotator: ...
    def GetStartFadeColor(self) -> UnrealColor: ...
    def GetbDisableCameraShake(self) -> int: ...
    def GetbSnapNextTransition(self) -> int: ...
    def InstanceCameraStates(self) -> None: ...
    def IsTransitioning(self) -> bool: ...
    def OnLoadingMovieClosesd(self) -> None: ...
    def RemoveRoll(self, InRot: Rotator) -> Rotator: ...
    def SetClipOffset(self, newClipOffset: Vector) -> None: ...
    def SetEndFadeColor(self, newEndFadeColor: UnrealColor) -> None: ...
    def SetOldControllerLocation(self, newOldControllerLocation: Vector) -> None: ...
    def SetOldControllerRotation(self, newOldControllerRotation: Rotator) -> None: ...
    def SetPCDeltaLocation(self, newPCDeltaLocation: Vector) -> None: ...
    def SetPCDeltaRotation(self, newPCDeltaRotation: Rotator) -> None: ...
    def SetShakeFOVOffset(self, newShakeFOVOffset: float) -> None: ...
    def SetShakeLocationOffset(self, newShakeLocationOffset: Vector) -> None: ...
    def SetShakeRotationOffset(self, newShakeRotationOffset: Rotator) -> None: ...
    def SetStartFadeColor(self, newStartFadeColor: UnrealColor) -> None: ...
    def SetbDisableCameraShake(self, newbDisableCameraShake: int) -> None: ...
    def SetbSnapNextTransition(self, newbSnapNextTransition: int) -> None: ...
    def SnapTransition(self) -> None: ...
    def UpdateCameraState(self) -> None: ...
    def UpdateFade(self, DeltaTime: float) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: CameraXWrapper) -> None: ...
    def eventOnViewTargetChanged(self) -> None: ...
    def eventPostBeginPlay(self) -> None: ...
    def eventUpdateCamera(self, DeltaTime: float) -> None: ...
    pass
class CameraWrapper(CameraXWrapper, BaseCameraWrapper, ActorWrapper, ObjectWrapper):
    def ClipToField(self, CameraLocationZ: float) -> float: ...
    def Demolished2(self, InDemolisher: RBActorWrapper) -> None: ...
    def EventCameraTargetChanged(self, Camera: CameraWrapper, Target: ActorWrapper) -> None: ...
    def GetCameraAsActor(self) -> ActorWrapper: ...
    def GetCameraPresetSettings(self) -> StructArrayWrapper<ProfileCameraSettings>: ...
    def GetCameraSettings(self) -> ProfileCameraSettings: ...
    def GetCameraState(self) -> str: ...
    def GetClipRate(self) -> float: ...
    def GetCurrentSwivel(self) -> Rotator: ...
    def GetDefaultFOVOffset(self) -> float: ...
    def GetDefaultViewHeightOffset(self) -> float: ...
    def GetDemolisher(self) -> RBActorWrapper: ...
    def GetDesiredSwivel(self, LookUp: float, LookRight: float) -> Rotator: ...
    def GetFOV(self) -> float: ...
    def GetFocusActor(self) -> str: ...
    def GetHorizontalSplitscreenFOVOffset(self) -> float: ...
    def GetHorizontalSplitscreenHeightOffset(self) -> float: ...
    def GetLocation(self) -> Vector: ...
    def GetPOV(self) -> POV: ...
    def GetRotation(self) -> Rotator: ...
    def GetSwivelDieRate(self) -> float: ...
    def GetSwivelFastSpeed(self) -> float: ...
    def GetVerticalSplitscreenFOVOffset(self) -> float: ...
    def GetbDemolished(self) -> int: ...
    def IsCameraShakeOn(self) -> bool: ...
    def SetCameraSettings(self, settings: ProfileCameraSettings) -> None: ...
    def SetCameraState(self, stateName: str) -> None: ...
    def SetClipRate(self, newClipRate: float) -> None: ...
    def SetCurrentSwivel(self, newCurrentSwivel: Rotator) -> None: ...
    def SetDemolisher(self, newDemolisher: RBActorWrapper) -> None: ...
    def SetFOV(self, fov: float) -> None: ...
    def SetFlyCamBallTargetMode(self) -> bool: ...
    def SetFocusActor(self, actorName: str) -> bool: ...
    def SetHorizontalSplitscreenFOVOffset(self, newHorizontalSplitscreenFOVOffset: float) -> None: ...
    def SetHorizontalSplitscreenHeightOffset(self, newHorizontalSplitscreenHeightOffset: float) -> None: ...
    def SetLocation(self, location: Vector) -> None: ...
    def SetLockedFOV(self, lock: bool) -> None: ...
    def SetPOV(self, pov: POV) -> None: ...
    def SetRotation(self, rotation: Rotator) -> None: ...
    def SetSwivelDieRate(self, newSwivelDieRate: float) -> None: ...
    def SetSwivelFastSpeed(self, newSwivelFastSpeed: float) -> None: ...
    def SetVerticalSplitscreenFOVOffset(self, newVerticalSplitscreenFOVOffset: float) -> None: ...
    def SetbDemolished(self, newbDemolished: int) -> None: ...
    def UpdateFOV(self) -> None: ...
    def UpdateSwivel(self, DeltaTime: float) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: CameraWrapper) -> None: ...
    def linterp(self, start: Vector, end: Vector, elapsed: float, speed: float) -> Vector: ...
    pass
class CanvasWrapper():
    @typing.overload
    def DrawBox(self, size: Vector2) -> None: ...
    @typing.overload
    def DrawBox(self, size: Vector2F) -> None: ...
    @typing.overload
    def DrawLine(self, start: Vector2, end: Vector2) -> None: ...
    @typing.overload
    def DrawLine(self, start: Vector2, end: Vector2, width: float) -> None: ...
    @typing.overload
    def DrawLine(self, start: Vector2F, end: Vector2F) -> None: ...
    @typing.overload
    def DrawLine(self, start: Vector2F, end: Vector2F, width: float) -> None: ...
    @typing.overload
    def DrawRect(self, RectX: float, RectY: float, img: ImageWrapper) -> None: ...
    @typing.overload
    def DrawRect(self, start: Vector2, end: Vector2) -> None: ...
    @typing.overload
    def DrawRect(self, start: Vector2F, end: Vector2F) -> None: ...
    def DrawRotatedTile(self, img: ImageWrapper, Rotation: Rotator, XL: float, YL: float, U: float, V: float, UL: float, VL: float, AnchorX: float, AnchorY: float) -> None: ...
    @typing.overload
    def DrawString(self, text: str) -> None: ...
    @typing.overload
    def DrawString(self, text: str, xScale: float, yScale: float) -> None: ...
    @typing.overload
    def DrawString(self, text: str, xScale: float, yScale: float, dropShadow: bool, wrapText: bool) -> None: ...
    def DrawTexture(self, img: ImageWrapper, scale: float) -> None: ...
    def DrawTile(self, img: ImageWrapper, XL: float, YL: float, U: float, V: float, UL: float, VL: float, Color: LinearColor, ClipTile: int, Blend: int) -> None: ...
    @typing.overload
    def FillBox(self, size: Vector2) -> None: ...
    @typing.overload
    def FillBox(self, size: Vector2F) -> None: ...
    @typing.overload
    def FillTriangle(self, p1: Vector2, p2: Vector2, p3: Vector2) -> None: ...
    @typing.overload
    def FillTriangle(self, p1: Vector2, p2: Vector2, p3: Vector2, color: LinearColor) -> None: ...
    @typing.overload
    def FillTriangle(self, p1: Vector2F, p2: Vector2F, p3: Vector2F) -> None: ...
    @typing.overload
    def FillTriangle(self, p1: Vector2F, p2: Vector2F, p3: Vector2F, color: LinearColor) -> None: ...
    def GetColor(self) -> LinearColor: ...
    def GetPosition(self) -> Vector2: ...
    def GetPositionFloat(self) -> Vector2F: ...
    def GetSize(self) -> Vector2: ...
    def GetStringSize(self, text: str, xScale: float, yScale: float) -> Vector2F: ...
    def Project(self, location: Vector) -> Vector2: ...
    def ProjectF(self, location: Vector) -> Vector2F: ...
    @typing.overload
    def SetColor(self, Red: str, Green: str, Blue: str, Alpha: str) -> None: ...
    @typing.overload
    def SetColor(self, color: LinearColor) -> None: ...
    @typing.overload
    def SetPosition(self, pos: Vector2) -> None: ...
    @typing.overload
    def SetPosition(self, pos: Vector2F) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: CanvasWrapper) -> None: ...
    pass
class AirControlComponentWrapper(CarComponentWrapper, ActorWrapper, ObjectWrapper):
    def ApplyForces(self, ActiveTime: float) -> None: ...
    def GetAirControlSensitivity(self) -> float: ...
    def GetAirDamping(self) -> Rotator: ...
    def GetAirTorque(self) -> Rotator: ...
    def GetControlScale(self) -> float: ...
    def GetDodgeDisableTimeRemaining(self) -> float: ...
    def GetThrottleForce(self) -> float: ...
    def OnCreated(self) -> None: ...
    def SetAirControlSensitivity(self, newAirControlSensitivity: float) -> None: ...
    def SetAirDamping(self, newAirDamping: Rotator) -> None: ...
    def SetAirTorque(self, newAirTorque: Rotator) -> None: ...
    def SetControlScale(self, newControlScale: float) -> None: ...
    def SetDodgeDisableTimeRemaining(self, newDodgeDisableTimeRemaining: float) -> None: ...
    def SetThrottleForce(self, newThrottleForce: float) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: AirControlComponentWrapper) -> None: ...
    pass
class CarSpeedPickup(RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    def GetAddedForce(self) -> Vector: ...
    def GetGravityScale(self) -> float: ...
    def GetOrigGravityScale(self) -> float: ...
    def PickupEnd(self) -> None: ...
    def PickupStart(self) -> None: ...
    def SetAddedForce(self, newAddedForce: Vector) -> None: ...
    def SetGravityScale(self, newGravityScale: float) -> None: ...
    def SetOrigGravityScale(self, newOrigGravityScale: float) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: CarSpeedPickup) -> None: ...
    pass
class VehicleWrapper(RBActorWrapper, ActorWrapper, ObjectWrapper):
    def EnablePodiumMode(self) -> None: ...
    def EventPRIChanged(self, Vehicle: VehicleWrapper) -> None: ...
    def ForceNetPacketIfNearBall(self) -> None: ...
    def GetAIController(self) -> AIControllerWrapper: ...
    def GetAirControlComponent(self) -> AirControlComponentWrapper: ...
    def GetBoostComponent(self) -> BoostWrapper: ...
    def GetDodgeComponent(self) -> DodgeComponentWrapper: ...
    def GetDoubleJumpComponent(self) -> DoubleJumpComponentWrapper: ...
    def GetForwardSpeed(self) -> float: ...
    def GetGroundNormal(self) -> Vector: ...
    def GetInput(self) -> ControllerInput: ...
    def GetJumpComponent(self) -> JumpComponentWrapper: ...
    def GetLastBallImpactFrame(self) -> int: ...
    def GetLastBallTouchFrame(self) -> int: ...
    def GetLocalCollisionExtent(self) -> Vector: ...
    def GetLocalCollisionOffset(self) -> Vector: ...
    def GetNumWheelContacts(self) -> int: ...
    def GetNumWheelWorldContacts(self) -> int: ...
    def GetPRI(self) -> PriWrapper: ...
    def GetPlayerController(self) -> PlayerControllerWrapper: ...
    def GetReplicatedSteer(self) -> int: ...
    def GetReplicatedThrottle(self) -> int: ...
    def GetStickyForce(self) -> StickyForceData: ...
    def GetTimeBelowSupersonicSpeed(self) -> float: ...
    def GetTimeOffGround(self) -> float: ...
    def GetTimeOnGround(self) -> float: ...
    def GetVehicleSim(self) -> VehicleSimWrapper: ...
    def GetVehicleUpdateTag(self) -> int: ...
    def GetbCanJump(self) -> int: ...
    def GetbDoubleJumped(self) -> int: ...
    def GetbDriving(self) -> int: ...
    def GetbJumped(self) -> int: ...
    def GetbOnGround(self) -> int: ...
    def GetbPodiumMode(self) -> int: ...
    def GetbReplicatedHandbrake(self) -> int: ...
    def GetbSuperSonic(self) -> int: ...
    def InitAudioParams(self) -> None: ...
    def IsCarWithinForwardEllipticalCone(self, OtherCar: VehicleWrapper, YawAngleDegrees: float, PitchAngleDegrees: float) -> bool: ...
    def IsOnGround(self) -> bool: ...
    def IsOnWall(self) -> bool: ...
    def OnControllerChanged(self) -> None: ...
    def OnPRIChanged(self) -> None: ...
    def SetDoubleJumpComponent(self, newDoubleJumpComponent: DoubleJumpComponentWrapper) -> None: ...
    def SetDriving(self, bDrive: int) -> None: ...
    def SetInput(self, newInput: ControllerInput) -> None: ...
    def SetLastBallImpactFrame(self, newLastBallImpactFrame: int) -> None: ...
    def SetLastBallTouchFrame(self, newLastBallTouchFrame: int) -> None: ...
    def SetLocalCollisionExtent(self, newLocalCollisionExtent: Vector) -> None: ...
    def SetLocalCollisionOffset(self, newLocalCollisionOffset: Vector) -> None: ...
    def SetPRI(self, newPRI: PriWrapper) -> None: ...
    def SetPlayerController(self, newPlayerController: PlayerControllerWrapper) -> None: ...
    def SetReplicatedSteer(self, newReplicatedSteer: int) -> None: ...
    def SetReplicatedThrottle(self, newReplicatedThrottle: int) -> None: ...
    def SetStickyForce(self, newStickyForce: StickyForceData) -> None: ...
    def SetTimeBelowSupersonicSpeed(self, newTimeBelowSupersonicSpeed: float) -> None: ...
    def SetVehicleSim(self, newVehicleSim: VehicleSimWrapper) -> None: ...
    def SetVehicleUpdateTag(self, newVehicleUpdateTag: int) -> None: ...
    def SetbCanJump(self, newbCanJump: int) -> None: ...
    def SetbDoubleJumped(self, newbDoubleJumped: int) -> None: ...
    def SetbDriving(self, newbDriving: int) -> None: ...
    def SetbJumped(self, newbJumped: int) -> None: ...
    def SetbOnGround(self, newbOnGround: int) -> None: ...
    def SetbPodiumMode(self, newbPodiumMode: int) -> None: ...
    def SetbReplicatedHandbrake(self, newbReplicatedHandbrake: int) -> None: ...
    def SetbSuperSonic(self, newbSuperSonic: int) -> None: ...
    def UnPossessed(self) -> None: ...
    def ZeroMovementVariables(self) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: VehicleWrapper) -> None: ...
    def eventSetVehicleInput(self, NewInput: ControllerInput) -> None: ...
    pass
class CertifiedStatDatabaseWrapper(ObjectWrapper):
    def GetStatId(self, StatName: str) -> int: ...
    def GetStatName(self, StatId: int) -> str: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: CertifiedStatDatabaseWrapper) -> None: ...
    pass
class ClubColorSet():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: ClubColorSet) -> None: ...
    @property
    def CustomColorID(self) -> int:
        """
        :type: int
        """
    @CustomColorID.setter
    def CustomColorID(self, arg1: int) -> None:
        pass
    @property
    def TeamColorID(self) -> int:
        """
        :type: int
        """
    @TeamColorID.setter
    def TeamColorID(self, arg1: int) -> None:
        pass
    @property
    def bCustomColorSet(self) -> bool:
        """
        :type: bool
        """
    @bCustomColorSet.setter
    def bCustomColorSet(self, arg1: bool) -> None:
        pass
    @property
    def bTeamColorSet(self) -> bool:
        """
        :type: bool
        """
    @bTeamColorSet.setter
    def bTeamColorSet(self, arg1: bool) -> None:
        pass
    pass
class ClubSettingsWrapper(ObjectWrapper):
    def GetAccentColor(self) -> int: ...
    def GetClubName(self) -> UnrealStringWrapper: ...
    def GetClubTag(self) -> UnrealStringWrapper: ...
    def GetPrimaryColor(self) -> int: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ClubSettingsWrapper) -> None: ...
    pass
class ClubMember():
    def GetName(self) -> UnrealStringWrapper: ...
    def GetUniqueID(self) -> UniqueIDWrapper: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: ClubMember) -> None: ...
    pass
class ClubDetailsWrapper(ClubSettingsWrapper, ObjectWrapper):
    def GetClubID(self) -> int: ...
    def GetLastUpdatedTime(self) -> int: ...
    def GetMembers(self) -> StructArrayWrapper<ClubMember>: ...
    def GetMotD(self) -> UnrealStringWrapper: ...
    def GetOwnerPlayerUniqueID(self) -> UniqueIDWrapper: ...
    def GetbVerified(self) -> int: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ClubDetailsWrapper) -> None: ...
    pass
class ControllerInput():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: ControllerInput) -> None: ...
    @property
    def ActivateBoost(self) -> int:
        """
        :type: int
        """
    @ActivateBoost.setter
    def ActivateBoost(self, arg1: int) -> None:
        pass
    @property
    def DodgeForward(self) -> float:
        """
        :type: float
        """
    @DodgeForward.setter
    def DodgeForward(self, arg1: float) -> None:
        pass
    @property
    def DodgeStrafe(self) -> float:
        """
        :type: float
        """
    @DodgeStrafe.setter
    def DodgeStrafe(self, arg1: float) -> None:
        pass
    @property
    def Handbrake(self) -> int:
        """
        :type: int
        """
    @Handbrake.setter
    def Handbrake(self, arg1: int) -> None:
        pass
    @property
    def HoldingBoost(self) -> int:
        """
        :type: int
        """
    @HoldingBoost.setter
    def HoldingBoost(self, arg1: int) -> None:
        pass
    @property
    def Jump(self) -> int:
        """
        :type: int
        """
    @Jump.setter
    def Jump(self, arg1: int) -> None:
        pass
    @property
    def Jumped(self) -> int:
        """
        :type: int
        """
    @Jumped.setter
    def Jumped(self, arg1: int) -> None:
        pass
    @property
    def Pitch(self) -> float:
        """
        :type: float
        """
    @Pitch.setter
    def Pitch(self, arg1: float) -> None:
        pass
    @property
    def Roll(self) -> float:
        """
        :type: float
        """
    @Roll.setter
    def Roll(self, arg1: float) -> None:
        pass
    @property
    def Steer(self) -> float:
        """
        :type: float
        """
    @Steer.setter
    def Steer(self, arg1: float) -> None:
        pass
    @property
    def Throttle(self) -> float:
        """
        :type: float
        """
    @Throttle.setter
    def Throttle(self, arg1: float) -> None:
        pass
    @property
    def Yaw(self) -> float:
        """
        :type: float
        """
    @Yaw.setter
    def Yaw(self, arg1: float) -> None:
        pass
    pass
class ControllerWrapper(ActorWrapper, ObjectWrapper):
    def GetPlayerReplicationInfo(self) -> PlayerReplicationInfoWrapper: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ControllerWrapper) -> None: ...
    pass
class CurlRequest():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: CurlRequest) -> None: ...
    @property
    def body(self) -> str:
        """
        :type: str
        """
    @body.setter
    def body(self, arg1: str) -> None:
        pass
    @property
    def form_data(self) -> typing.List[FormField]:
        """
        :type: typing.List[FormField]
        """
    @form_data.setter
    def form_data(self, arg1: typing.List[FormField]) -> None:
        pass
    @property
    def headers(self) -> typing.Dict[str, str]:
        """
        :type: typing.Dict[str, str]
        """
    @headers.setter
    def headers(self, arg1: typing.Dict[str, str]) -> None:
        pass
    @property
    def progress_function(self) -> typing.Callable[[float, float, float, float], None]:
        """
        :type: typing.Callable[[float, float, float, float], None]
        """
    @progress_function.setter
    def progress_function(self, arg1: typing.Callable[[float, float, float, float], None]) -> None:
        pass
    @property
    def url(self) -> str:
        """
        :type: str
        """
    @url.setter
    def url(self, arg1: str) -> None:
        pass
    @property
    def verb(self) -> str:
        """
        :type: str
        """
    @verb.setter
    def verb(self, arg1: str) -> None:
        pass
    pass
class CustomMatchSettings():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: CustomMatchSettings) -> None: ...
    @property
    def BlueTeamSettings(self) -> CustomMatchTeamSettings:
        """
        :type: CustomMatchTeamSettings
        """
    @BlueTeamSettings.setter
    def BlueTeamSettings(self, arg1: CustomMatchTeamSettings) -> None:
        pass
    @property
    def GameMode(self) -> int:
        """
        :type: int
        """
    @GameMode.setter
    def GameMode(self, arg1: int) -> None:
        pass
    @property
    def GameTags(self) -> str:
        """
        :type: str
        """
    @GameTags.setter
    def GameTags(self, arg1: str) -> None:
        pass
    @property
    def MapName(self) -> str:
        """
        :type: str
        """
    @MapName.setter
    def MapName(self, arg1: str) -> None:
        pass
    @property
    def MaxPlayerCount(self) -> int:
        """
        :type: int
        """
    @MaxPlayerCount.setter
    def MaxPlayerCount(self, arg1: int) -> None:
        pass
    @property
    def OrangeTeamSettings(self) -> CustomMatchTeamSettings:
        """
        :type: CustomMatchTeamSettings
        """
    @OrangeTeamSettings.setter
    def OrangeTeamSettings(self, arg1: CustomMatchTeamSettings) -> None:
        pass
    @property
    def Password(self) -> str:
        """
        :type: str
        """
    @Password.setter
    def Password(self, arg1: str) -> None:
        pass
    @property
    def ServerName(self) -> str:
        """
        :type: str
        """
    @ServerName.setter
    def ServerName(self, arg1: str) -> None:
        pass
    @property
    def bClubServer(self) -> bool:
        """
        :type: bool
        """
    @bClubServer.setter
    def bClubServer(self, arg1: bool) -> None:
        pass
    @property
    def bPartyMembersOnly(self) -> bool:
        """
        :type: bool
        """
    @bPartyMembersOnly.setter
    def bPartyMembersOnly(self, arg1: bool) -> None:
        pass
    pass
class CustomMatchTeamSettings():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: CustomMatchTeamSettings) -> None: ...
    @property
    def Colors(self) -> ClubColorSet:
        """
        :type: ClubColorSet
        """
    @Colors.setter
    def Colors(self, arg1: ClubColorSet) -> None:
        pass
    @property
    def GameScore(self) -> int:
        """
        :type: int
        """
    @GameScore.setter
    def GameScore(self, arg1: int) -> None:
        pass
    @property
    def Name(self) -> str:
        """
        :type: str
        """
    @Name.setter
    def Name(self, arg1: str) -> None:
        pass
    pass
class DataAssetDatabaseWrapper(ObjectWrapper):
    def GetID(self, DataAssetName: str) -> int: ...
    def GetName(self, DataAssetID: int) -> str: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: DataAssetDatabaseWrapper) -> None: ...
    pass
class DataAssetDatabase_ESportsTeamWrapper(DataAssetDatabaseWrapper, ObjectWrapper):
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: DataAssetDatabase_ESportsTeamWrapper) -> None: ...
    pass
class DemolishPickup(RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    def GetDemolishSpeed(self) -> int: ...
    def GetDemolishTarget(self) -> int: ...
    def GetOldSpeed(self) -> int: ...
    def GetOldTarget(self) -> int: ...
    def PickupEnd(self) -> None: ...
    def PickupStart(self) -> None: ...
    def SetDemolishSpeed(self, newDemolishSpeed: int) -> None: ...
    def SetDemolishTarget(self, newDemolishTarget: int) -> None: ...
    def SetOldSpeed(self, newOldSpeed: int) -> None: ...
    def SetOldTarget(self, newOldTarget: int) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: DemolishPickup) -> None: ...
    pass
class DodgeComponentWrapper(CarComponentWrapper, ActorWrapper, ObjectWrapper):
    def ApplyDodgeImpulse(self) -> None: ...
    def ApplyForces(self, ActiveTime: float) -> None: ...
    def ApplyTorqueForces(self, ActiveTime: float) -> None: ...
    def CanActivate(self) -> bool: ...
    def GetBackwardDodgeImpulse(self) -> float: ...
    def GetBackwardDodgeImpulseMaxSpeedScale(self) -> float: ...
    def GetDodgeDirection(self) -> Vector: ...
    def GetDodgeImpulse2(self, DodgeDir: Vector) -> Vector: ...
    def GetDodgeImpulseScale(self) -> float: ...
    def GetDodgeInputThreshold(self) -> float: ...
    def GetDodgeTorque(self) -> Vector: ...
    def GetDodgeTorqueScale(self) -> float: ...
    def GetDodgeTorqueTime(self) -> float: ...
    def GetDodgeZDamping(self) -> float: ...
    def GetDodgeZDampingDelay(self) -> float: ...
    def GetDodgeZDampingUpTime(self) -> float: ...
    def GetForwardDodgeImpulse(self) -> float: ...
    def GetForwardDodgeImpulseMaxSpeedScale(self) -> float: ...
    def GetForwardDodgeTorque(self) -> float: ...
    def GetMinDodgeTorqueTime(self) -> float: ...
    def GetSideDodgeImpulse(self) -> float: ...
    def GetSideDodgeImpulseMaxSpeedScale(self) -> float: ...
    def GetSideDodgeTorque(self) -> float: ...
    def OnCreated(self) -> None: ...
    def SetBackwardDodgeImpulse(self, newBackwardDodgeImpulse: float) -> None: ...
    def SetBackwardDodgeImpulseMaxSpeedScale(self, newBackwardDodgeImpulseMaxSpeedScale: float) -> None: ...
    def SetDodgeDirection(self, newDodgeDirection: Vector) -> None: ...
    def SetDodgeImpulseScale(self, newDodgeImpulseScale: float) -> None: ...
    def SetDodgeInputThreshold(self, newDodgeInputThreshold: float) -> None: ...
    def SetDodgeSettings(self) -> None: ...
    def SetDodgeTorque(self, newDodgeTorque: Vector) -> None: ...
    def SetDodgeTorqueScale(self, newDodgeTorqueScale: float) -> None: ...
    def SetDodgeTorqueTime(self, newDodgeTorqueTime: float) -> None: ...
    def SetDodgeZDamping(self, newDodgeZDamping: float) -> None: ...
    def SetDodgeZDampingDelay(self, newDodgeZDampingDelay: float) -> None: ...
    def SetDodgeZDampingUpTime(self, newDodgeZDampingUpTime: float) -> None: ...
    def SetForwardDodgeImpulse(self, newForwardDodgeImpulse: float) -> None: ...
    def SetForwardDodgeImpulseMaxSpeedScale(self, newForwardDodgeImpulseMaxSpeedScale: float) -> None: ...
    def SetForwardDodgeTorque(self, newForwardDodgeTorque: float) -> None: ...
    def SetMinDodgeTorqueTime(self, newMinDodgeTorqueTime: float) -> None: ...
    def SetSideDodgeImpulse(self, newSideDodgeImpulse: float) -> None: ...
    def SetSideDodgeImpulseMaxSpeedScale(self, newSideDodgeImpulseMaxSpeedScale: float) -> None: ...
    def SetSideDodgeTorque(self, newSideDodgeTorque: float) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: DodgeComponentWrapper) -> None: ...
    pass
class DoubleJumpComponentWrapper(CarComponentWrapper, ActorWrapper, ObjectWrapper):
    def ApplyForces(self, ActiveTime: float) -> None: ...
    def GetImpulseScale(self) -> float: ...
    def OnCreated(self) -> None: ...
    def SetImpulseScale(self, newImpulseScale: float) -> None: ...
    def SetJumpImpulse(self, newJumpImpulse: float) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: DoubleJumpComponentWrapper) -> None: ...
    pass
class EngineTAWrapper(ObjectWrapper):
    def DebugClientCorrections2(self) -> None: ...
    def DebugDedicatedServer(self, ForHowLong: float) -> None: ...
    def EventPreAsyncTick(self, DeltaTime: float) -> None: ...
    def GetBulletFixedDeltaTime(self) -> float: ...
    def GetDebugClientCorrectionCount(self) -> int: ...
    def GetDebugClientCorrectionStartTime(self) -> float: ...
    def GetDirtyPhysicsFrame(self) -> int: ...
    def GetForceCorrectionFrames(self) -> int: ...
    def GetLastBugReportTime(self) -> float: ...
    def GetLastPhysicsDeltaTimeScale(self) -> float: ...
    def GetMaxClientReplayFrames(self) -> int: ...
    def GetMaxPhysicsSubsteps(self) -> int: ...
    def GetMaxUploadedClientFrames(self) -> int: ...
    def GetPhysicsFrame(self) -> int: ...
    def GetPhysicsFramerate(self) -> float: ...
    def GetPhysicsTime(self) -> float: ...
    def GetRenderAlpha(self) -> float: ...
    def GetReplicatedPhysicsFrame(self) -> int: ...
    def GetShellArchetypePath(self) -> UnrealStringWrapper: ...
    def GetStatGraphs(self) -> StatGraphSystemWrapper: ...
    def GetTickNotifyIndex(self) -> int: ...
    def GetbClientPhysicsUpdate(self) -> int: ...
    def GetbDebugClientCorrections(self) -> int: ...
    def GetbDisableClientCorrections(self) -> int: ...
    def GetbEnableClientPrediction(self) -> int: ...
    def GetbForceClientCorrection(self) -> int: ...
    def IsNull(self) -> bool: ...
    def RunPhysicsStep(self, BulletSceneIndex: int, DeltaTime: float) -> None: ...
    def SetDebugClientCorrectionCount(self, newDebugClientCorrectionCount: int) -> None: ...
    def SetDebugClientCorrectionStartTime(self, newDebugClientCorrectionStartTime: float) -> None: ...
    def SetDirtyPhysicsFrame(self, newDirtyPhysicsFrame: int) -> None: ...
    def SetForceCorrectionFrames(self, newForceCorrectionFrames: int) -> None: ...
    def SetLastBugReportTime(self, newLastBugReportTime: float) -> None: ...
    def SetLastPhysicsDeltaTimeScale(self, newLastPhysicsDeltaTimeScale: float) -> None: ...
    def SetMaxClientReplayFrames(self, newMaxClientReplayFrames: int) -> None: ...
    def SetMaxPhysicsSubsteps(self, newMaxPhysicsSubsteps: int) -> None: ...
    def SetMaxUploadedClientFrames(self, newMaxUploadedClientFrames: int) -> None: ...
    def SetPhysicsFrame(self, newPhysicsFrame: int) -> None: ...
    def SetPhysicsFramerate(self, newPhysicsFramerate: float) -> None: ...
    def SetRenderAlpha(self, newRenderAlpha: float) -> None: ...
    def SetReplicatedPhysicsFrame(self, newReplicatedPhysicsFrame: int) -> None: ...
    def SetStatGraphs(self, newStatGraphs: StatGraphSystemWrapper) -> None: ...
    def SetTickNotifyIndex(self, newTickNotifyIndex: int) -> None: ...
    def SetbClientPhysicsUpdate(self, newbClientPhysicsUpdate: int) -> None: ...
    def SetbDebugClientCorrections(self, newbDebugClientCorrections: int) -> None: ...
    def SetbDisableClientCorrections(self, newbDisableClientCorrections: int) -> None: ...
    def SetbEnableClientPrediction(self, newbEnableClientPrediction: int) -> None: ...
    def SetbForceClientCorrection(self, newbForceClientCorrection: int) -> None: ...
    def UpdateReplicatedPhysicsFrame(self, ServerFrame: int) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: EngineTAWrapper) -> None: ...
    def eventInit(self) -> None: ...
    def eventRecordAppStart(self) -> None: ...
    pass
class FXActorWrapper(ActorWrapper, ObjectWrapper):
    def Activate2(self) -> None: ...
    def BindTo(self, ParentFXActor: FXActorWrapper) -> None: ...
    def Deactivate2(self) -> None: ...
    def GetAttachmentActor(self) -> ActorWrapper: ...
    def GetDestroyTime(self) -> float: ...
    def GetDestroyWaitTime(self) -> float: ...
    def GetEditID(self) -> int: ...
    def GetParent(self) -> FXActorWrapper: ...
    def GetbActive(self) -> int: ...
    def GetbAllowShadowCasting(self) -> int: ...
    def GetbAutoActivate(self) -> int: ...
    def GetbDeactivateWhenOwnerDestroyed(self) -> int: ...
    def GetbHadOwner(self) -> int: ...
    def GetbRenderInactive(self) -> int: ...
    def Inherit(self, Other: FXActorWrapper) -> None: ...
    def IsLocallyControlled(self) -> bool: ...
    def PostBeginPlay(self) -> None: ...
    def ResetParticles(self) -> None: ...
    def SetAttachmentActor(self, newAttachmentActor: ActorWrapper) -> None: ...
    def SetAttachmentActor2(self, AttachToActor: ActorWrapper) -> None: ...
    def SetDestroyTime(self, newDestroyTime: float) -> None: ...
    def SetDestroyWaitTime(self, newDestroyWaitTime: float) -> None: ...
    def SetEditID(self, newEditID: int) -> None: ...
    def SetParent(self, newParent: FXActorWrapper) -> None: ...
    def SetbActive(self, newbActive: int) -> None: ...
    def SetbAllowShadowCasting(self, newbAllowShadowCasting: int) -> None: ...
    def SetbAutoActivate(self, newbAutoActivate: int) -> None: ...
    def SetbDeactivateWhenOwnerDestroyed(self, newbDeactivateWhenOwnerDestroyed: int) -> None: ...
    def SetbHadOwner(self, newbHadOwner: int) -> None: ...
    def SetbRenderInactive(self, newbRenderInactive: int) -> None: ...
    def StopAllEffects(self) -> None: ...
    def UpdateFXStates(self) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: FXActorWrapper) -> None: ...
    def eventDeactivateAndDestroy(self) -> None: ...
    def eventDestroyed(self) -> None: ...
    def eventDumpDebugInfo(self) -> None: ...
    pass
class FlipCarComponentWrapper(CarComponentWrapper, ActorWrapper, ObjectWrapper):
    def ApplyForces(self, ActiveTime: float) -> None: ...
    def CanActivate(self) -> bool: ...
    def GetFlipCarImpulse(self) -> float: ...
    def GetFlipCarTime(self) -> float: ...
    def GetFlipCarTorque(self) -> float: ...
    def GetbFlipRight(self) -> int: ...
    def InitFlip(self) -> None: ...
    def OnCreated(self) -> None: ...
    def SetFlipCarImpulse(self, newFlipCarImpulse: float) -> None: ...
    def SetFlipCarTime(self, newFlipCarTime: float) -> None: ...
    def SetFlipCarTorque(self, newFlipCarTorque: float) -> None: ...
    def SetbFlipRight(self, newbFlipRight: int) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: FlipCarComponentWrapper) -> None: ...
    pass
class FormField():
    class Type():
        """
        Members:

          kString

          kFile
        """
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __init__(self, value: int) -> None: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __repr__(self) -> str: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str:
            """
            :type: str
            """
        @property
        def value(self) -> int:
            """
            :type: int
            """
        __members__: dict # value = {'kString': <Type.kString: 0>, 'kFile': <Type.kFile: 1>}
        kFile: bakkesmod.FormField.Type # value = <Type.kFile: 1>
        kString: bakkesmod.FormField.Type # value = <Type.kString: 0>
        pass
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: FormField) -> None: ...
    @property
    def data(self) -> str:
        """
        :type: str
        """
    @data.setter
    def data(self, arg1: str) -> None:
        pass
    @property
    def field_type(self) -> FormField::Type:
        """
        :type: FormField::Type
        """
    @field_type.setter
    def field_type(self, arg1: FormField::Type) -> None:
        pass
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @name.setter
    def name(self, arg1: str) -> None:
        pass
    pass
class SaveDataWrapper(ObjectWrapper):
    def GetDirectoryPath(self) -> UnrealStringWrapper: ...
    def GetSaveExt(self) -> UnrealStringWrapper: ...
    def GetSaveType(self) -> UnrealStringWrapper: ...
    def GetbExactFileMatch(self) -> int: ...
    def Init(self) -> None: ...
    def IsNull(self) -> bool: ...
    def SetbExactFileMatch(self, newbExactFileMatch: int) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: SaveDataWrapper) -> None: ...
    pass
class GameEventWrapper(ActorWrapper, ObjectWrapper):
    def AddCar(self, Car: CarWrapper) -> None: ...
    def AddForfeitInitiator(self, PlayerID: SteamID) -> None: ...
    def AddLocalPlayer(self, Player: PlayerControllerWrapper) -> None: ...
    def AddPRI(self, PRI: PriWrapper) -> None: ...
    def AddPlayerChatMessage(self, PlayerID: SteamID, ChatChannel: int, Team: TeamInfoWrapper, Message: str) -> None: ...
    def AllPlayersSelectedTeam(self) -> bool: ...
    def AllowReadyUp2(self) -> None: ...
    def AllowShutdown(self) -> bool: ...
    def AllowSplitScreenPlayer(self) -> bool: ...
    def AutoReadyPlayers(self) -> None: ...
    def BanPlayerID(self, PlayerID: SteamID) -> None: ...
    def BroadcastCountdownMessage(self, Seconds: int) -> None: ...
    def BroadcastGoMessage(self) -> None: ...
    def CanQueSaveReplay(self) -> bool: ...
    def CanUseBallCam(self) -> bool: ...
    def CheckChatBanned(self, PC: PlayerControllerWrapper) -> None: ...
    def CheckInitiatedForfeit(self, PRI: PriWrapper) -> None: ...
    def CheckPlayersReady2(self) -> None: ...
    def ClearGameScoreFromCustomSettings(self) -> None: ...
    def ClearRespawnList(self) -> None: ...
    def ConditionalStartMatch(self) -> None: ...
    def ConditionalStartSpectatorMatch(self) -> None: ...
    def CreateMatchType(self, Options: str) -> None: ...
    def EventPlayerResetTraining(self, GameEvent: GameEventWrapper) -> None: ...
    def FindBotReplacement(self, PRI: PriWrapper) -> bool: ...
    def FindPCForUniqueID(self, PlayerID: SteamID) -> PlayerControllerWrapper: ...
    def FindPlayerPRI(self, UniqueId: SteamID) -> PriWrapper: ...
    def ForceMatchStart(self) -> None: ...
    def GetActivator(self) -> PlayerControllerWrapper: ...
    def GetActivatorCar(self) -> CarWrapper: ...
    def GetBannedPlayers(self) -> StructArrayWrapper<SteamID>: ...
    def GetBotBoostThreshold_vsAI(self) -> float: ...
    def GetBotSkill(self) -> float: ...
    def GetCarArchetype(self) -> CarWrapper: ...
    def GetCars(self) -> ArrayWrapper<CarWrapper>: ...
    def GetCountdownTime(self) -> int: ...
    def GetFinishTime(self) -> int: ...
    def GetForfeitInitiatorIDs(self) -> StructArrayWrapper<SteamID>: ...
    def GetGameOwner(self) -> PriWrapper: ...
    def GetGameStateTimeRemaining(self) -> int: ...
    def GetLocalPlayers(self) -> ArrayWrapper<PlayerControllerWrapper>: ...
    def GetLocalPrimaryPlayer(self) -> PlayerControllerWrapper: ...
    def GetMatchTimeDilation(self) -> float: ...
    def GetMaxHumans(self) -> int: ...
    def GetMaxPlayers(self) -> int: ...
    def GetMinPlayers(self) -> int: ...
    def GetNumHumans(self) -> int: ...
    def GetPRIs(self) -> ArrayWrapper<PriWrapper>: ...
    def GetPlayers(self) -> ArrayWrapper<ControllerWrapper>: ...
    def GetPlaylist(self) -> GameSettingPlaylistWrapper: ...
    def GetRealDeltaTime(self, ElapsedTime: float) -> float: ...
    def GetReplicatedGameStateTimeRemaining(self) -> int: ...
    def GetReplicatedRoundCountDownNumber(self) -> int: ...
    def GetReplicatedStateIndex(self) -> int: ...
    def GetRespawnTime(self) -> int: ...
    def GetRespawnTime2(self) -> int: ...
    def GetRichPresenceString(self) -> UnrealStringWrapper: ...
    def GetSpawnPoints(self) -> ArrayWrapper<ActorWrapper>: ...
    def GetStartPointIndex(self) -> int: ...
    def GetbAllowQueueSaveReplay(self) -> int: ...
    def GetbAllowReadyUp(self) -> int: ...
    def GetbAwardAchievements(self) -> int: ...
    def GetbCanVoteToForfeit(self) -> int: ...
    def GetbCountdownMessagesDisabled(self) -> int: ...
    def GetbDisableAimAssist(self) -> int: ...
    def GetbFillWithAI(self) -> int: ...
    def GetbHasLeaveMatchPenalty(self) -> int: ...
    def GetbMultiplayer(self) -> int: ...
    def GetbRandomizedBotLoadouts(self) -> int: ...
    def GetbRestartingMatch(self) -> int: ...
    def HandleFinished(self, GameEvent: GameEventWrapper) -> None: ...
    def HandleNextGame(self) -> bool: ...
    def HandlePlayerRemoved(self, GameEvent: GameEventWrapper, PRI: PriWrapper) -> None: ...
    def HasPlayerNamed(self, PlayerName: str) -> bool: ...
    def Init2(self, InActivator: PlayerControllerWrapper) -> None: ...
    def InitBotSkill(self) -> None: ...
    def InitCountDown(self) -> None: ...
    def InitMutators(self) -> None: ...
    def IsFinished(self) -> bool: ...
    def IsOnlineMultiplayer(self) -> bool: ...
    def IsPlayingLan(self) -> bool: ...
    def IsPlayingOffline(self) -> bool: ...
    def IsPlayingPrivate(self) -> bool: ...
    def IsPlayingPublic(self) -> bool: ...
    def IsPlayingTraining(self) -> bool: ...
    def MoveToGround(self, Mover: ActorWrapper, HeightCheck: float) -> bool: ...
    def OnAllPlayersReady(self) -> None: ...
    def OnCanVoteForfeitChanged(self) -> None: ...
    def OnCarSpawned(self, NewCar: CarWrapper) -> None: ...
    def OnFinished(self) -> None: ...
    def OnGameStateChanged(self) -> None: ...
    def OnGameStateTimeLapsed(self) -> None: ...
    def OnGameStateTimeUpdated(self) -> None: ...
    def OnMatchSettingsChanged(self) -> None: ...
    def OnPenaltyChanged(self) -> None: ...
    def OnPlayerRestarted(self, PlayerCar: CarWrapper) -> None: ...
    def PlayerResetTraining(self) -> None: ...
    def RandomizeBots(self) -> None: ...
    def RandomizeSpawnPoints(self) -> None: ...
    def RemoveCar(self, Car: CarWrapper) -> None: ...
    def RemoveLocalPlayer(self, Player: PlayerControllerWrapper) -> None: ...
    def RemovePRI(self, PRI: PriWrapper) -> None: ...
    def ReplaceBotsWithAwaitingPlayers(self) -> None: ...
    def RestartPlayers(self) -> None: ...
    def SaveLocalPlayerStats(self) -> None: ...
    def SendCountdownMessage(self, Seconds: int, Player: PlayerControllerWrapper) -> None: ...
    def SendGoMessage(self, Player: PlayerControllerWrapper) -> None: ...
    def SetActivator(self, newActivator: PlayerControllerWrapper) -> None: ...
    def SetActivatorCar(self, newActivatorCar: CarWrapper) -> None: ...
    def SetAllDriving(self, bDriving: int) -> None: ...
    def SetAllowReadyUp2(self, bAllow: int) -> None: ...
    def SetBotBoostThreshold_vsAI(self, newBotBoostThreshold_vsAI: float) -> None: ...
    def SetBotSkill(self, newBotSkill: float) -> None: ...
    def SetBotSkill2(self, NewSkill: float) -> None: ...
    def SetCarArchetype(self, newCarArchetype: CarWrapper) -> None: ...
    def SetCountdownTime(self, newCountdownTime: int) -> None: ...
    def SetFinishTime(self, newFinishTime: int) -> None: ...
    def SetGameOwner(self, newGameOwner: PriWrapper) -> None: ...
    def SetGameOwner2(self, NewOwner: PriWrapper) -> None: ...
    def SetGameStateTime2(self, StateTime: int) -> None: ...
    def SetGameStateTimeRemaining(self, newGameStateTimeRemaining: int) -> None: ...
    def SetGameStateTimeRemaining2(self, StateTime: int, bFromReplication: int) -> None: ...
    def SetMatchTimeDilation(self, newMatchTimeDilation: float) -> None: ...
    def SetMaxPlayers(self, newMaxPlayers: int) -> None: ...
    def SetMaxPlayers2(self, InMaxPlayers: int) -> None: ...
    def SetMinPlayers(self, newMinPlayers: int) -> None: ...
    def SetReplicatedGameStateTimeRemaining(self, newReplicatedGameStateTimeRemaining: int) -> None: ...
    def SetReplicatedRoundCountDownNumber(self, newReplicatedRoundCountDownNumber: int) -> None: ...
    def SetReplicatedStateIndex(self, newReplicatedStateIndex: int) -> None: ...
    def SetRespawnTime(self, newRespawnTime: int) -> None: ...
    def SetRestartingMatch(self, bRestart: int) -> None: ...
    def SetStartPointIndex(self, newStartPointIndex: int) -> None: ...
    def SetTimeDilation(self, NewTimeDilation: float) -> None: ...
    def SetbAllowQueueSaveReplay(self, newbAllowQueueSaveReplay: int) -> None: ...
    def SetbAllowReadyUp(self, newbAllowReadyUp: int) -> None: ...
    def SetbAwardAchievements(self, newbAwardAchievements: int) -> None: ...
    def SetbCanVoteToForfeit(self, newbCanVoteToForfeit: int) -> None: ...
    def SetbCountdownMessagesDisabled(self, newbCountdownMessagesDisabled: int) -> None: ...
    def SetbDisableAimAssist(self, newbDisableAimAssist: int) -> None: ...
    def SetbFillWithAI(self, newbFillWithAI: int) -> None: ...
    def SetbHasLeaveMatchPenalty(self, newbHasLeaveMatchPenalty: int) -> None: ...
    def SetbMultiplayer(self, newbMultiplayer: int) -> None: ...
    def SetbRandomizedBotLoadouts(self, newbRandomizedBotLoadouts: int) -> None: ...
    def SetbRestartingMatch(self, newbRestartingMatch: int) -> None: ...
    def ShouldAllowVoteToForfeit(self) -> bool: ...
    def ShouldAutoReadyUp(self, PRI: PriWrapper) -> bool: ...
    def ShouldBeFullScreen(self) -> bool: ...
    def ShouldHaveLeaveMatchPenalty(self) -> bool: ...
    def ShouldShowBallIndicator(self) -> bool: ...
    def SpotIsEncroached(self, Spot: Vector) -> bool: ...
    def StartCountDown(self) -> None: ...
    def StartCountdownTimer(self) -> None: ...
    def StartInitialCountDown(self) -> None: ...
    def SuppressModalDialogs(self) -> bool: ...
    def TeleportCar(self, PlayerCar: CarWrapper) -> None: ...
    def TickRespawnTime(self, DeltaTime: float) -> None: ...
    def TimerUpdateBotCount(self) -> None: ...
    def UpdateBotCount(self) -> None: ...
    def UpdateCanVoteToForfeit(self) -> None: ...
    def UpdateGameOwner(self) -> None: ...
    def UpdateGameStateTime(self) -> None: ...
    def UpdateLeaveMatchPenalty(self) -> None: ...
    def __GameEvent_TA__CheckForBannedPlayers(self, PRI: PriWrapper) -> SteamID: ...
    def __GameEvent_TA__CheckPlayersReady(self, P: PriWrapper) -> bool: ...
    def __GameEvent_TA__SetAllowReadyUp(self, P: PriWrapper) -> None: ...
    def __Pylon__ChangeNotifyFunc(self) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: GameEventWrapper) -> None: ...
    def eventInitGame(self, Options: str) -> None: ...
    pass
class TeamGameEventWrapper(GameEventWrapper, ActorWrapper, ObjectWrapper):
    def AddTemporarySpawnSpot(self, Team: TeamWrapper, Car: CarWrapper) -> None: ...
    def AllTeamsCreated2(self) -> bool: ...
    def AllTeamsHaveHumans2(self) -> bool: ...
    def AssignCustomTeamSettings(self) -> None: ...
    def CanChangeTeam(self) -> bool: ...
    def CheckRematchVote(self) -> None: ...
    def ChooseTeam(self, TeamIndex: int, Player: PlayerControllerWrapper) -> bool: ...
    def ClearTemporarySpawnSpots(self) -> None: ...
    def CreateTeams(self) -> None: ...
    def DestroyTeams(self) -> None: ...
    def EndGame(self) -> None: ...
    def FindBotReplacement(self, PRI: PriWrapper) -> bool: ...
    def ForceNoContest(self) -> None: ...
    def GetMaxTeamSize(self) -> int: ...
    def GetNumBots(self) -> int: ...
    def GetTeamArchetypes(self) -> ArrayWrapper<TeamWrapper>: ...
    def GetTeams(self) -> ArrayWrapper<TeamWrapper>: ...
    def GetbAlwaysAutoSelectTeam(self) -> int: ...
    def GetbDisableMutingOtherTeam(self) -> int: ...
    def GetbForfeit(self) -> int: ...
    def GetbMuteOppositeTeams(self) -> int: ...
    def GetbUnfairTeams(self) -> int: ...
    def HandleSelectedLoadout(self, PlayerPRI: PriWrapper) -> None: ...
    def HandleTeamForfeit(self, Team: TeamWrapper) -> None: ...
    def InitBotSkill(self) -> None: ...
    def MuteOppositeTeams2(self, bMute: int) -> None: ...
    def OnAllTeamsCreated(self) -> None: ...
    def OnInit(self) -> None: ...
    def OnMatchSettingsChanged(self) -> None: ...
    def OnPenaltyChanged(self) -> None: ...
    def OnTeamForfeited(self, Team: TeamWrapper) -> None: ...
    def PreloadBots(self) -> None: ...
    def SetMaxTeamSize(self, newMaxTeamSize: int) -> None: ...
    def SetMaxTeamSize2(self, MaxSize: int) -> None: ...
    def SetNumBots(self, newNumBots: int) -> None: ...
    def SetTeam(self, TeamNum: int, NewTeam: TeamWrapper) -> None: ...
    def SetUnfairTeams(self, bUnfair: int) -> None: ...
    def SetbAlwaysAutoSelectTeam(self, newbAlwaysAutoSelectTeam: int) -> None: ...
    def SetbDisableMutingOtherTeam(self, newbDisableMutingOtherTeam: int) -> None: ...
    def SetbForfeit(self, newbForfeit: int) -> None: ...
    def SetbMuteOppositeTeams(self, newbMuteOppositeTeams: int) -> None: ...
    def SetbUnfairTeams(self, newbUnfairTeams: int) -> None: ...
    def StartRematchVote(self) -> None: ...
    def UpdateBotCount(self) -> None: ...
    def UpdateMaxTeamSize(self) -> None: ...
    def UpdatePlayerShortcuts(self) -> None: ...
    def __GameEvent_Team_TA__AllTeamsHaveHumans(self, Team: TeamWrapper) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: TeamGameEventWrapper) -> None: ...
    def eventInitGame(self, Options: str) -> None: ...
    pass
class GameSettingPlaylistWrapper(ObjectWrapper):
    def GetDescription(self) -> UnrealStringWrapper: ...
    def GetPlayerCount(self) -> int: ...
    def GetPlaylistId(self) -> int: ...
    def GetServerCommand(self) -> UnrealStringWrapper: ...
    def GetTitle(self) -> UnrealStringWrapper: ...
    def GetbAllowClubs(self) -> int: ...
    def GetbAllowForfeit(self) -> int: ...
    def GetbApplyQuitPenalty(self) -> int: ...
    def GetbDisableRankedReconnect(self) -> int: ...
    def GetbIgnoreAssignTeams(self) -> int: ...
    def GetbKickOnMigrate(self) -> int: ...
    def GetbNew(self) -> int: ...
    def GetbPlayersVSBots(self) -> int: ...
    def GetbRanked(self) -> int: ...
    def GetbSolo(self) -> int: ...
    def GetbStandard(self) -> int: ...
    def IsLanMatch(self) -> bool: ...
    def IsNull(self) -> bool: ...
    def IsPrivateMatch(self) -> bool: ...
    def IsValid2(self) -> bool: ...
    def IsValidID(self, InPlaylistID: int) -> bool: ...
    def SetPlayerCount(self, newPlayerCount: int) -> None: ...
    def SetPlaylistId(self, newPlaylistId: int) -> None: ...
    def SetbAllowClubs(self, newbAllowClubs: int) -> None: ...
    def SetbAllowForfeit(self, newbAllowForfeit: int) -> None: ...
    def SetbApplyQuitPenalty(self, newbApplyQuitPenalty: int) -> None: ...
    def SetbDisableRankedReconnect(self, newbDisableRankedReconnect: int) -> None: ...
    def SetbIgnoreAssignTeams(self, newbIgnoreAssignTeams: int) -> None: ...
    def SetbKickOnMigrate(self, newbKickOnMigrate: int) -> None: ...
    def SetbNew(self, newbNew: int) -> None: ...
    def SetbPlayersVSBots(self, newbPlayersVSBots: int) -> None: ...
    def SetbRanked(self, newbRanked: int) -> None: ...
    def SetbSolo(self, newbSolo: int) -> None: ...
    def SetbStandard(self, newbStandard: int) -> None: ...
    def ShouldUpdateSkills(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: GameSettingPlaylistWrapper) -> None: ...
    pass
class GameWrapper():
    def CreateModal(self, title: str) -> ModalWrapper: ...
    def CreateTextInputModal(self, title: str) -> TextInputModalWrapper: ...
    def Execute(self, theLambda: typing.Callable[[GameWrapper], None]) -> None: ...
    def ExecuteUnrealCommand(self, command: str) -> None: ...
    def GetBakkesModPathW(self) -> str: ...
    def GetBakkesModVersion(self) -> int: ...
    def GetCamera(self) -> CameraWrapper: ...
    def GetCurrentGameState(self) -> ServerWrapper: ...
    def GetCurrentMap(self) -> str: ...
    def GetDataFolderW(self) -> str: ...
    def GetEngine(self) -> EngineTAWrapper: ...
    def GetEpicID(self) -> str: ...
    def GetFNameByIndex(self, index: int) -> str: ...
    def GetFNameIndexByString(self, name: str) -> int: ...
    def GetGameEventAsReplay(self) -> ReplayServerWrapper: ...
    def GetGameEventAsServer(self) -> ServerWrapper: ...
    def GetItemsWrapper(self) -> ItemsWrapper: ...
    def GetLocalCar(self) -> CarWrapper: ...
    def GetLocalClub(self) -> ClubDetailsWrapper: ...
    def GetMMRWrapper(self) -> MMRWrapper: ...
    def GetMainSequence(self) -> SequenceWrapper: ...
    def GetMatchmakingWrapper(self) -> MatchmakingWrapper: ...
    def GetOnlineGame(self) -> ServerWrapper: ...
    def GetPlayerController(self) -> PlayerControllerWrapper: ...
    def GetPlayerName(self) -> UnrealStringWrapper: ...
    def GetPluginManager(self) -> PluginManagerWrapper: ...
    def GetPsyBuildID(self) -> str: ...
    def GetRandomMap(self) -> str: ...
    def GetSafeZoneRatio(self) -> float: ...
    def GetScreenSize(self) -> Vector2: ...
    def GetSettings(self) -> SettingsWrapper: ...
    def GetSteamID(self) -> int: ...
    def GetSteamVersion(self) -> int: ...
    def GetUILanguage(self) -> UnrealStringWrapper: ...
    def GetUIScale(self) -> float: ...
    def GetUniqueID(self) -> UniqueIDWrapper: ...
    def GetbColorBlind(self) -> bool: ...
    def GetbMetric(self) -> int: ...
    def HookEvent(self, eventName: str, callback: typing.Callable[[str], None]) -> None: ...
    def HookEventPost(self, eventName: str, callback: typing.Callable[[str], None]) -> None: ...
    @typing.overload
    def HookEventWithCaller(self, eventName: str, callback: typing.Callable[[ActorWrapper, capsule, str], None]) -> None: ...
    @typing.overload
    def HookEventWithCaller(self, eventName: str, callback: typing.Callable[[BallWrapper, capsule, str], None]) -> None: ...
    @typing.overload
    def HookEventWithCaller(self, eventName: str, callback: typing.Callable[[CarComponentWrapper, capsule, str], None]) -> None: ...
    @typing.overload
    def HookEventWithCaller(self, eventName: str, callback: typing.Callable[[CarWrapper, capsule, str], None]) -> None: ...
    @typing.overload
    def HookEventWithCaller(self, eventName: str, callback: typing.Callable[[PlayerControllerWrapper, capsule, str], None]) -> None: ...
    @typing.overload
    def HookEventWithCaller(self, eventName: str, callback: typing.Callable[[ServerWrapper, capsule, str], None]) -> None: ...
    @typing.overload
    def HookEventWithCallerPost(self, eventName: str, callback: typing.Callable[[ActorWrapper, capsule, str], None]) -> None: ...
    @typing.overload
    def HookEventWithCallerPost(self, eventName: str, callback: typing.Callable[[BallWrapper, capsule, str], None]) -> None: ...
    @typing.overload
    def HookEventWithCallerPost(self, eventName: str, callback: typing.Callable[[CarComponentWrapper, capsule, str], None]) -> None: ...
    @typing.overload
    def HookEventWithCallerPost(self, eventName: str, callback: typing.Callable[[CarWrapper, capsule, str], None]) -> None: ...
    @typing.overload
    def HookEventWithCallerPost(self, eventName: str, callback: typing.Callable[[PlayerControllerWrapper, capsule, str], None]) -> None: ...
    @typing.overload
    def HookEventWithCallerPost(self, eventName: str, callback: typing.Callable[[ServerWrapper, capsule, str], None]) -> None: ...
    def IsCursorVisible(self) -> int: ...
    def IsInCustomTraining(self) -> bool: ...
    def IsInFreeplay(self) -> bool: ...
    def IsInGame(self) -> bool: ...
    def IsInOnlineGame(self) -> bool: ...
    def IsInReplay(self) -> bool: ...
    def IsKeyPressed(self, keyName: int) -> bool: ...
    def IsPaused(self) -> bool: ...
    def IsSpectatingInOnlineGame(self) -> bool: ...
    def IsUsingEpicVersion(self) -> bool: ...
    def IsUsingSteamVersion(self) -> bool: ...
    def LoadToastTexture(self, name: str, path: str) -> None: ...
    def LogToChatbox(self, text: str, sender: str) -> None: ...
    def OverrideParams(self, src: capsule, memsize: int) -> None: ...
    def PlayReplay(self, path: str) -> None: ...
    def RegisterDrawable(self, callback: typing.Callable[[CanvasWrapper], None]) -> None: ...
    def SetTimeout(self, theLambda: typing.Callable[[GameWrapper], None], time: float) -> None: ...
    def Toast(self, title: str, text: str, texture: str, timeout: float, toastType: int, width: float, height: float) -> None: ...
    def UnhookEvent(self, eventName: str) -> None: ...
    def UnhookEventPost(self, eventName: str) -> None: ...
    def UnregisterDrawables(self) -> None: ...
    @typing.overload
    def __init__(self, mem: int, pluginType: int, idx: std::type_index) -> None: ...
    @typing.overload
    def __init__(self, other: GameWrapper) -> None: ...
    pass
class GamepadSettings():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: GamepadSettings) -> None: ...
    @property
    def AirControlSensitivity(self) -> float:
        """
        :type: float
        """
    @AirControlSensitivity.setter
    def AirControlSensitivity(self, arg1: float) -> None:
        pass
    @property
    def ControllerDeadzone(self) -> float:
        """
        :type: float
        """
    @ControllerDeadzone.setter
    def ControllerDeadzone(self, arg1: float) -> None:
        pass
    @property
    def DodgeInputThreshold(self) -> float:
        """
        :type: float
        """
    @DodgeInputThreshold.setter
    def DodgeInputThreshold(self, arg1: float) -> None:
        pass
    @property
    def SteeringSensitivity(self) -> float:
        """
        :type: float
        """
    @SteeringSensitivity.setter
    def SteeringSensitivity(self, arg1: float) -> None:
        pass
    pass
class GoalWrapper(ObjectWrapper):
    def GetAutoCamFocusExtent(self) -> Vector: ...
    def GetDirection(self) -> Vector: ...
    def GetGoalDirection(self) -> ActorWrapper: ...
    def GetGoalFocusExtentCenter(self) -> Vector: ...
    def GetGoalFocusLocationOffset(self) -> Vector: ...
    def GetGoalIndicatorArchetype(self) -> UnrealStringWrapper: ...
    def GetGoalOrientation(self) -> ActorWrapper: ...
    def GetGoalScoredDotDirection(self) -> Vector: ...
    def GetLocalExtent(self) -> Vector: ...
    def GetLocation(self) -> Vector: ...
    def GetMaxGoalScorerAttachRadius(self) -> float: ...
    def GetMinAttachGoalToScorerDot(self) -> float: ...
    def GetOverrideGoalIndicatorOrientations(self) -> ArrayWrapper<ActorWrapper>: ...
    def GetPointsToAward(self) -> int: ...
    def GetRight(self) -> Vector: ...
    def GetRotation(self) -> Rotator: ...
    def GetScoreFX(self) -> FXActorWrapper: ...
    def GetTeamNum(self) -> int: ...
    def GetUp(self) -> Vector: ...
    def GetWorldCenter(self) -> Vector: ...
    def GetWorldExtent(self) -> Vector: ...
    def GetWorldFrontCenter(self) -> Vector: ...
    def GetbNoGoalIndicator(self) -> int: ...
    def GetbOnlyGoalsFromDirection(self) -> int: ...
    def GetbShowFocusExtent(self) -> int: ...
    def Init(self) -> None: ...
    def IsNull(self) -> bool: ...
    def SetAutoCamFocusExtent(self, newAutoCamFocusExtent: Vector) -> None: ...
    def SetDirection(self, newDirection: Vector) -> None: ...
    def SetGoalDirection(self, newGoalDirection: ActorWrapper) -> None: ...
    def SetGoalFocusLocationOffset(self, newGoalFocusLocationOffset: Vector) -> None: ...
    def SetGoalOrientation(self, newGoalOrientation: ActorWrapper) -> None: ...
    def SetGoalScoredDotDirection(self, newGoalScoredDotDirection: Vector) -> None: ...
    def SetLocalExtent(self, newLocalExtent: Vector) -> None: ...
    def SetLocation(self, newLocation: Vector) -> None: ...
    def SetMaxGoalScorerAttachRadius(self, newMaxGoalScorerAttachRadius: float) -> None: ...
    def SetMinAttachGoalToScorerDot(self, newMinAttachGoalToScorerDot: float) -> None: ...
    def SetPointsToAward(self, newPointsToAward: int) -> None: ...
    def SetRight(self, newRight: Vector) -> None: ...
    def SetRotation(self, newRotation: Rotator) -> None: ...
    def SetScoreFX(self, newScoreFX: FXActorWrapper) -> None: ...
    def SetTeamNum(self, newTeamNum: int) -> None: ...
    def SetUp(self, newUp: Vector) -> None: ...
    def SetWorldCenter(self, newWorldCenter: Vector) -> None: ...
    def SetWorldExtent(self, newWorldExtent: Vector) -> None: ...
    def SetWorldFrontCenter(self, newWorldFrontCenter: Vector) -> None: ...
    def SetbNoGoalIndicator(self, newbNoGoalIndicator: int) -> None: ...
    def SetbOnlyGoalsFromDirection(self, newbOnlyGoalsFromDirection: int) -> None: ...
    def SetbShowFocusExtent(self, newbShowFocusExtent: int) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: GoalWrapper) -> None: ...
    def eventBeginPlay(self) -> None: ...
    pass
class GrapplingHookPickup(TargetedPickup, RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    def ApplyForces(self, ActiveTime: float) -> None: ...
    def DoAttach(self) -> None: ...
    def GetAfterAttachDuration(self) -> float: ...
    def GetAttachTime(self) -> float: ...
    def GetBall(self) -> BallWrapper: ...
    def GetBlockedRequiredMoveDistance(self) -> float: ...
    def GetBlockedRequiredMoveTime(self) -> float: ...
    def GetBlockedStartPos(self) -> Vector: ...
    def GetBlockedStartTime(self) -> float: ...
    def GetCurrentRopeLength(self) -> float: ...
    def GetForce(self) -> float: ...
    def GetHitDistanceOffset(self) -> float: ...
    def GetHookMeshOffset(self) -> Vector: ...
    def GetHookMeshScale(self) -> Vector: ...
    def GetHookRotationOffset(self) -> Rotator: ...
    def GetImpulse(self) -> float: ...
    def GetMaxRopeLength(self) -> float: ...
    def GetPredictedBallLocation(self, InBall: BallWrapper) -> Vector: ...
    def GetPredictionSpeed(self) -> float: ...
    def GetRopeMeshInitialSize(self) -> float: ...
    def GetRopeMeshScale(self) -> Vector: ...
    def GetRopeOrigin(self) -> Vector: ...
    def GetRopeRotationOffset(self) -> Rotator: ...
    def GetRopeToTime(self) -> float: ...
    def GetTargetedLocation(self) -> Vector: ...
    def GetbAttachedToBall(self) -> int: ...
    def GetbBlocked(self) -> int: ...
    def GetbDeactivateOnTouch(self) -> int: ...
    def GetbInstant(self) -> int: ...
    def HandleBallExploded(self, InBall: BallWrapper) -> None: ...
    def PickupEnd(self) -> None: ...
    def PickupStart(self) -> None: ...
    def PickupTick(self, DeltaTime: float) -> None: ...
    def ScaleMeshToLocation(self, NewLocation: Vector, TargetLocation: Vector) -> None: ...
    def SetAfterAttachDuration(self, newAfterAttachDuration: float) -> None: ...
    def SetAttachTime(self, newAttachTime: float) -> None: ...
    def SetBall(self, newBall: BallWrapper) -> None: ...
    def SetBlockedRequiredMoveDistance(self, newBlockedRequiredMoveDistance: float) -> None: ...
    def SetBlockedRequiredMoveTime(self, newBlockedRequiredMoveTime: float) -> None: ...
    def SetBlockedStartPos(self, newBlockedStartPos: Vector) -> None: ...
    def SetBlockedStartTime(self, newBlockedStartTime: float) -> None: ...
    def SetCurrentRopeLength(self, newCurrentRopeLength: float) -> None: ...
    def SetForce(self, newForce: float) -> None: ...
    def SetHitDistanceOffset(self, newHitDistanceOffset: float) -> None: ...
    def SetHookMeshOffset(self, newHookMeshOffset: Vector) -> None: ...
    def SetHookMeshScale(self, newHookMeshScale: Vector) -> None: ...
    def SetHookRotationOffset(self, newHookRotationOffset: Rotator) -> None: ...
    def SetImpulse(self, newImpulse: float) -> None: ...
    def SetMaxRopeLength(self, newMaxRopeLength: float) -> None: ...
    def SetPredictionSpeed(self, newPredictionSpeed: float) -> None: ...
    def SetRopeMeshInitialSize(self, newRopeMeshInitialSize: float) -> None: ...
    def SetRopeMeshScale(self, newRopeMeshScale: Vector) -> None: ...
    def SetRopeOrigin(self, newRopeOrigin: Vector) -> None: ...
    def SetRopeRotationOffset(self, newRopeRotationOffset: Rotator) -> None: ...
    def SetRopeToTime(self, newRopeToTime: float) -> None: ...
    def SetbAttachedToBall(self, newbAttachedToBall: int) -> None: ...
    def SetbBlocked(self, newbBlocked: int) -> None: ...
    def SetbDeactivateOnTouch(self, newbDeactivateOnTouch: int) -> None: ...
    def SetbInstant(self, newbInstant: int) -> None: ...
    def UpdateVisual(self, DeltaTime: float) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: GrapplingHookPickup) -> None: ...
    pass
class GravityPickup(RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    def ApplyForces(self, ActiveTime: float) -> None: ...
    def GetBallGravity(self) -> float: ...
    def GetLastRecordedBallHitTime(self) -> float: ...
    def GetOffset(self) -> Vector: ...
    def GetPrevBall(self) -> BallWrapper: ...
    def GetRange(self) -> float: ...
    def GetRecordBallHitRate(self) -> float: ...
    def GetbDeactivateOnTouch(self) -> int: ...
    def PickupEnd(self) -> None: ...
    def PickupStart(self) -> None: ...
    def SetBallGravity(self, newBallGravity: float) -> None: ...
    def SetLastRecordedBallHitTime(self, newLastRecordedBallHitTime: float) -> None: ...
    def SetOffset(self, newOffset: Vector) -> None: ...
    def SetPrevBall(self, newPrevBall: BallWrapper) -> None: ...
    def SetRange(self, newRange: float) -> None: ...
    def SetRecordBallHitRate(self, newRecordBallHitRate: float) -> None: ...
    def SetbDeactivateOnTouch(self, newbDeactivateOnTouch: int) -> None: ...
    def UpdateVisual(self) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: GravityPickup) -> None: ...
    pass
class HandbrakeOverridePickup(TargetedPickup, RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    def GetOtherCar(self) -> CarWrapper: ...
    def PickupEnd(self) -> None: ...
    def PickupStart(self) -> None: ...
    def SetOtherCar(self, newOtherCar: CarWrapper) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: HandbrakeOverridePickup) -> None: ...
    pass
class HitForcePickup(RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    def GetBallHitForce(self) -> float: ...
    def GetCarHitForce(self) -> float: ...
    def GetLastFXTime(self) -> float: ...
    def GetMinFXTime(self) -> float: ...
    def GetOrigBallHitForce(self) -> float: ...
    def GetOrigCarHitForce(self) -> float: ...
    def GetbBallForce(self) -> int: ...
    def GetbCarForce(self) -> int: ...
    def GetbDemolishCars(self) -> int: ...
    def PickupEnd(self) -> None: ...
    def PickupStart(self) -> None: ...
    def SetBallHitForce(self, newBallHitForce: float) -> None: ...
    def SetCarHitForce(self, newCarHitForce: float) -> None: ...
    def SetLastFXTime(self, newLastFXTime: float) -> None: ...
    def SetMinFXTime(self, newMinFXTime: float) -> None: ...
    def SetOrigBallHitForce(self, newOrigBallHitForce: float) -> None: ...
    def SetOrigCarHitForce(self, newOrigCarHitForce: float) -> None: ...
    def SetbBallForce(self, newbBallForce: int) -> None: ...
    def SetbCarForce(self, newbCarForce: int) -> None: ...
    def SetbDemolishCars(self, newbDemolishCars: int) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: HitForcePickup) -> None: ...
    pass
class HttpWrapper():
    @staticmethod
    def SendCurlJsonRequest(request_data: CurlRequest, on_complete: typing.Callable[[int, str], None]) -> None: ...
    @staticmethod
    @typing.overload
    def SendCurlRequest(request_data: CurlRequest, file_output: str, on_complete: typing.Callable[[int, str], None]) -> None: ...
    @staticmethod
    @typing.overload
    def SendCurlRequest(request_data: CurlRequest, on_complete: typing.Callable[[int, str, int], None]) -> None: ...
    @staticmethod
    @typing.overload
    def SendCurlRequest(request_data: CurlRequest, on_complete: typing.Callable[[int, str], None]) -> None: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: HttpWrapper) -> None: ...
    pass
class ImageWrapper():
    def GetCanvasTex(self) -> capsule: ...
    def GetImGuiTex(self) -> capsule: ...
    def GetPath(self) -> str: ...
    def GetPathW(self) -> str: ...
    def GetSize(self) -> Vector2: ...
    def GetSizeF(self) -> Vector2F: ...
    def IsLoadedForCanvas(self) -> bool: ...
    def IsLoadedForImGui(self) -> bool: ...
    def LoadForCanvas(self) -> bool: ...
    def LoadForImGui(self, onLoaded: typing.Callable[[bool], None]) -> None: ...
    def __init__(self, path: str, canvasLoad: bool, ImGuiLoad: bool) -> None: ...
    pass
class StatGraphWrapper(ObjectWrapper):
    def AddSampleHistory(self, History: SampleHistoryWrapper) -> SampleHistoryWrapper: ...
    def CreateSampleHistory(self, Title: str) -> SampleHistoryWrapper: ...
    def GetLastTickTime(self) -> float: ...
    def GetRecordSettings(self) -> SampleRecordSettingsWrapper: ...
    def GetSampleHistories(self) -> ArrayWrapper<SampleHistoryWrapper>: ...
    def IsNull(self) -> bool: ...
    def SetLastTickTime(self, newLastTickTime: float) -> None: ...
    def SetRecordSettings(self, newRecordSettings: SampleRecordSettingsWrapper) -> None: ...
    def StopDrawing(self) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: StatGraphWrapper) -> None: ...
    def eventConstruct(self) -> None: ...
    pass
class ItemsWrapper(ObjectWrapper):
    def GetAllProducts(self) -> ArrayWrapper<ProductWrapper>: ...
    def GetCachedUnlockedProducts(self) -> ArrayWrapper<ProductWrapper>: ...
    def GetCertifiedStatDB(self) -> CertifiedStatDatabaseWrapper: ...
    def GetCurrentLoadout(self, teamIndex: int) -> LoadoutWrapper: ...
    def GetCurrentLoadoutName(self) -> UnrealStringWrapper: ...
    def GetEsportTeamDB(self) -> DataAssetDatabase_ESportsTeamWrapper: ...
    def GetOnlineProduct(self, instanceID: int) -> OnlineProductWrapper: ...
    def GetOwnedProducts(self) -> ArrayWrapper<OnlineProductWrapper>: ...
    def GetPaintDB(self) -> PaintDatabaseWrapper: ...
    def GetProduct(self, productId: int) -> ProductWrapper: ...
    def GetProductTradeInWrapper(self) -> ProductTradeInWrapper: ...
    def GetSpecialEditionDB(self) -> SpecialEditionDatabaseWrapper: ...
    def GetTradeWrapper(self) -> TradeWrapper: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, gamedata: int, savedata: int) -> None: ...
    @typing.overload
    def __init__(self, other: ItemsWrapper) -> None: ...
    pass
class JumpComponentWrapper(CarComponentWrapper, ActorWrapper, ObjectWrapper):
    def ApplyForces(self, ActiveTime: float) -> None: ...
    def CacheJumpData(self) -> None: ...
    def GetJumpAccel(self) -> float: ...
    def GetJumpForce(self) -> float: ...
    def GetJumpForceTime(self) -> float: ...
    def GetJumpImpulse(self) -> float: ...
    def GetJumpImpulseSpeed(self) -> float: ...
    def GetMaxJumpHeight(self) -> float: ...
    def GetMaxJumpHeightTime(self) -> float: ...
    def GetMinJumpTime(self) -> float: ...
    def GetPodiumJumpForceTime(self) -> float: ...
    def GetbDeactivate(self) -> int: ...
    def OnCreated(self) -> None: ...
    def SetJumpAccel(self, newJumpAccel: float) -> None: ...
    def SetJumpForce(self, newJumpForce: float) -> None: ...
    def SetJumpForceTime(self, newJumpForceTime: float) -> None: ...
    def SetJumpImpulse(self, newJumpImpulse: float) -> None: ...
    def SetJumpImpulseSpeed(self, newJumpImpulseSpeed: float) -> None: ...
    def SetMaxJumpHeight(self, newMaxJumpHeight: float) -> None: ...
    def SetMaxJumpHeightTime(self, newMaxJumpHeightTime: float) -> None: ...
    def SetMinJumpTime(self, newMinJumpTime: float) -> None: ...
    def SetPodiumJumpForceTime(self, newPodiumJumpForceTime: float) -> None: ...
    def SetbDeactivate(self, newbDeactivate: int) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: JumpComponentWrapper) -> None: ...
    pass
class LinearColor():
    def __eq__(self, c2: LinearColor) -> bool: ...
    def __imul__(self, f: float) -> LinearColor: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: LinearColor) -> None: ...
    def __itruediv__(self, f: float) -> LinearColor: ...
    def __mul__(self, f: float) -> LinearColor: ...
    def __ne__(self, c2: LinearColor) -> bool: ...
    def __truediv__(self, f: float) -> LinearColor: ...
    @property
    def A(self) -> float:
        """
        :type: float
        """
    @A.setter
    def A(self, arg1: float) -> None:
        pass
    @property
    def B(self) -> float:
        """
        :type: float
        """
    @B.setter
    def B(self, arg1: float) -> None:
        pass
    @property
    def G(self) -> float:
        """
        :type: float
        """
    @G.setter
    def G(self, arg1: float) -> None:
        pass
    @property
    def R(self) -> float:
        """
        :type: float
        """
    @R.setter
    def R(self, arg1: float) -> None:
        pass
    __hash__ = None
    pass
class LoadedPlugin():
    @typing.overload
    def __init__(self, arg0: LoadedPlugin) -> None: ...
    @typing.overload
    def __init__(self, details: PluginInfo, plugin: BakkesModPlugin, instance: HINSTANCE__, filename: str) -> None: ...
    @property
    def _details(self) -> PluginInfo:
        """
        :type: PluginInfo
        """
    @_details.setter
    def _details(self, arg1: PluginInfo) -> None:
        pass
    @property
    def _filename(self) -> str:
        """
        :type: str
        """
    @_filename.setter
    def _filename(self, arg1: str) -> None:
        pass
    @property
    def _instance(self) -> HINSTANCE__:
        """
        :type: HINSTANCE__
        """
    @_instance.setter
    def _instance(self, arg1: HINSTANCE__) -> None:
        pass
    @property
    def _plugin(self) -> BakkesModPlugin:
        """
        :type: BakkesModPlugin
        """
    @_plugin.setter
    def _plugin(self, arg1: BakkesModPlugin) -> None:
        pass
    @property
    def _typeid(self) -> std::type_index:
        """
        :type: std::type_index
        """
    @_typeid.setter
    def _typeid(self, arg1: std::type_index) -> None:
        pass
    pass
class LoadoutWrapper(ObjectWrapper):
    def GetAccentFinishId(self) -> int: ...
    def GetAccentPaintColorId(self) -> int: ...
    def GetLoadout(self) -> ArrayWrapper<int>: ...
    def GetOnlineLoadout(self) -> ArrayWrapper<unsigned long long>: ...
    def GetPrimaryFinishId(self) -> int: ...
    def GetPrimaryPaintColorId(self) -> int: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: LoadoutWrapper) -> None: ...
    pass
class MMRNotifierToken():
    pass
class MMRWrapper(ObjectWrapper):
    def CalculateMMR(self, sr: SkillRating, disregardPlacements: bool) -> float: ...
    def GetCurrentPlaylist(self) -> int: ...
    @typing.overload
    def GetPlayerMMR(self, playerID: SteamID, playlistID: int) -> float: ...
    @typing.overload
    def GetPlayerMMR(self, playerID: UniqueIDWrapper, playlistID: int) -> float: ...
    @typing.overload
    def GetPlayerRank(self, playerID: SteamID, playlistID: int) -> SkillRank: ...
    @typing.overload
    def GetPlayerRank(self, playerID: UniqueIDWrapper, playlistID: int) -> SkillRank: ...
    @typing.overload
    def GetPlayerSkillRating(self, playerID: SteamID, playlistID: int) -> SkillRating: ...
    @typing.overload
    def GetPlayerSkillRating(self, playerID: UniqueIDWrapper, playlistID: int) -> SkillRating: ...
    def IsRanked(self, playlistID: int) -> bool: ...
    @typing.overload
    def IsSynced(self, playerID: SteamID, playlistID: int) -> bool: ...
    @typing.overload
    def IsSynced(self, playerID: UniqueIDWrapper, playlistID: int) -> bool: ...
    @typing.overload
    def IsSyncing(self, playerID: SteamID) -> bool: ...
    @typing.overload
    def IsSyncing(self, playerID: UniqueIDWrapper) -> bool: ...
    def RegisterMMRNotifier(self, arg0: typing.Callable[[UniqueIDWrapper], None]) -> MMRNotifierToken: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: MMRWrapper) -> None: ...
    pass
class MatchmakingWrapper(ObjectWrapper):
    def CancelMatchmaking(self) -> None: ...
    def CreatePrivateMatch(self, region: Region, match_settings: CustomMatchSettings) -> None: ...
    def GetActiveViewTab(self) -> int: ...
    @staticmethod
    def GetRegionID(region: Region) -> str: ...
    @staticmethod
    def GetRegionLabel(region: Region) -> str: ...
    def GetSeasonEndTimeSeconds(self) -> int: ...
    def GetSeasonTimeRemaining(self) -> int: ...
    def GetTotalPopulation(self) -> int: ...
    def HasSeasonEnded(self) -> bool: ...
    def IsNull(self) -> bool: ...
    def IsSearching(self) -> bool: ...
    def JoinPrivateMatch(self, server_name: str, server_password: str) -> None: ...
    def SeasonEndDays(self) -> int: ...
    def SeasonEndHours(self) -> int: ...
    def SeasonEndMinutes(self) -> int: ...
    def SetPlaylistSelection(self, playlist: Playlist, bSelected: bool) -> None: ...
    def SetRegionSelection(self, region: Region, bSelected: bool) -> None: ...
    def StartMatchmaking(self, playlist_category: PlaylistCategory) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: MatchmakingWrapper) -> None: ...
    pass
class ModalWrapper(ObjectWrapper):
    def AddButton(self, button_text: str, is_cancel_button: bool, click_callback: typing.Callable[[], None]) -> None: ...
    def CloseModal(self) -> None: ...
    def SetBody(self, bodyHtml: str) -> None: ...
    def SetColor(self, r: float, g: float, b: float) -> None: ...
    def SetIcon(self, iconName: str) -> None: ...
    def ShowModal(self) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ModalWrapper) -> None: ...
    pass
class NetStatGraphWrapper(StatGraphWrapper, ObjectWrapper):
    def CreateBytesSummary(self, Title: str) -> SampleHistoryWrapper: ...
    def CreateLossSummary(self, Title: str) -> SampleHistoryWrapper: ...
    def CreatePktSummary(self, Title: str) -> SampleHistoryWrapper: ...
    def GetBytesIn(self) -> SampleHistoryWrapper: ...
    def GetBytesOut(self) -> SampleHistoryWrapper: ...
    def GetExpectedInPacketRate(self) -> float: ...
    def GetExpectedOutPacketRate(self) -> float: ...
    def GetLatency(self) -> SampleHistoryWrapper: ...
    def GetLostPacketsIn(self) -> SampleHistoryWrapper: ...
    def GetLostPacketsOut(self) -> SampleHistoryWrapper: ...
    def GetMaxBytesRate(self) -> float: ...
    def GetPacketsIn(self) -> SampleHistoryWrapper: ...
    def GetPacketsOut(self) -> SampleHistoryWrapper: ...
    def SetBytesIn(self, newBytesIn: SampleHistoryWrapper) -> None: ...
    def SetBytesOut(self, newBytesOut: SampleHistoryWrapper) -> None: ...
    def SetExpectedInPacketRate(self, newExpectedInPacketRate: float) -> None: ...
    def SetExpectedOutPacketRate(self, newExpectedOutPacketRate: float) -> None: ...
    def SetLatency(self, newLatency: SampleHistoryWrapper) -> None: ...
    def SetLostPacketsIn(self, newLostPacketsIn: SampleHistoryWrapper) -> None: ...
    def SetLostPacketsOut(self, newLostPacketsOut: SampleHistoryWrapper) -> None: ...
    def SetMaxBytesRate(self, newMaxBytesRate: float) -> None: ...
    def SetPacketsIn(self, newPacketsIn: SampleHistoryWrapper) -> None: ...
    def SetPacketsOut(self, newPacketsOut: SampleHistoryWrapper) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: NetStatGraphWrapper) -> None: ...
    def eventConstruct(self) -> None: ...
    def eventUpdateGraphRanges(self) -> None: ...
    pass
class AIControllerWrapper(ControllerWrapper, ActorWrapper, ObjectWrapper):
    def DoNothing(self) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: AIControllerWrapper) -> None: ...
    pass
class OnlinePlatform():
    """
    Members:

      OnlinePlatform_Unknown

      OnlinePlatform_Steam

      OnlinePlatform_PS4

      OnlinePlatform_PS3

      OnlinePlatform_Dingo

      OnlinePlatform_QQ

      OnlinePlatform_OldNNX

      OnlinePlatform_NNX

      OnlinePlatform_PsyNet

      OnlinePlatform_Deleted

      OnlinePlatform_WeGame

      OnlinePlatform_Epic

      OnlinePlatform_MAX
    """
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    OnlinePlatform_Deleted: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_Deleted: 9>
    OnlinePlatform_Dingo: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_Dingo: 4>
    OnlinePlatform_Epic: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_Epic: 11>
    OnlinePlatform_MAX: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_MAX: 12>
    OnlinePlatform_NNX: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_NNX: 7>
    OnlinePlatform_OldNNX: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_OldNNX: 6>
    OnlinePlatform_PS3: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_PS3: 3>
    OnlinePlatform_PS4: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_PS4: 2>
    OnlinePlatform_PsyNet: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_PsyNet: 8>
    OnlinePlatform_QQ: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_QQ: 5>
    OnlinePlatform_Steam: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_Steam: 1>
    OnlinePlatform_Unknown: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_Unknown: 0>
    OnlinePlatform_WeGame: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_WeGame: 10>
    __members__: dict # value = {'OnlinePlatform_Unknown': <OnlinePlatform.OnlinePlatform_Unknown: 0>, 'OnlinePlatform_Steam': <OnlinePlatform.OnlinePlatform_Steam: 1>, 'OnlinePlatform_PS4': <OnlinePlatform.OnlinePlatform_PS4: 2>, 'OnlinePlatform_PS3': <OnlinePlatform.OnlinePlatform_PS3: 3>, 'OnlinePlatform_Dingo': <OnlinePlatform.OnlinePlatform_Dingo: 4>, 'OnlinePlatform_QQ': <OnlinePlatform.OnlinePlatform_QQ: 5>, 'OnlinePlatform_OldNNX': <OnlinePlatform.OnlinePlatform_OldNNX: 6>, 'OnlinePlatform_NNX': <OnlinePlatform.OnlinePlatform_NNX: 7>, 'OnlinePlatform_PsyNet': <OnlinePlatform.OnlinePlatform_PsyNet: 8>, 'OnlinePlatform_Deleted': <OnlinePlatform.OnlinePlatform_Deleted: 9>, 'OnlinePlatform_WeGame': <OnlinePlatform.OnlinePlatform_WeGame: 10>, 'OnlinePlatform_Epic': <OnlinePlatform.OnlinePlatform_Epic: 11>, 'OnlinePlatform_MAX': <OnlinePlatform.OnlinePlatform_MAX: 12>}
    pass
class OnlineProductWrapper(ObjectWrapper):
    def GetAttributes(self) -> ArrayWrapper<ProductAttributeWrapper>: ...
    def GetBlueprintSeriesID(self) -> int: ...
    def GetBlueprintType(self) -> int: ...
    def GetInstanceID(self) -> int: ...
    def GetIsUntradable(self) -> bool: ...
    def GetLongLabel(self) -> UnrealStringWrapper: ...
    def GetProduct(self) -> ProductWrapper: ...
    def GetProductID(self) -> int: ...
    def GetProductSeries(self) -> str: ...
    def GetQuality(self) -> int: ...
    def GetSeriesID(self) -> int: ...
    def GetTradeHold(self) -> int: ...
    def IsBlueprint(self) -> bool: ...
    def IsNull(self) -> bool: ...
    def SeriesIdToSeriesName(self, seriesID: int) -> str: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: OnlineProductWrapper) -> None: ...
    pass
class POV():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: POV) -> None: ...
    @property
    def FOV(self) -> float:
        """
        :type: float
        """
    @FOV.setter
    def FOV(self, arg1: float) -> None:
        pass
    @property
    def location(self) -> Vector:
        """
        :type: Vector
        """
    @location.setter
    def location(self, arg1: Vector) -> None:
        pass
    @property
    def rotation(self) -> Rotator:
        """
        :type: Rotator
        """
    @rotation.setter
    def rotation(self, arg1: Rotator) -> None:
        pass
    pass
class PRODUCTQUALITY():
    """
    Members:

      Common

      Uncommon

      Rare

      VeryRare

      Import

      Exotic

      BlackMarket

      Premium

      Limited

      MAX
    """
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    BlackMarket: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.BlackMarket: 6>
    Common: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Common: 0>
    Exotic: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Exotic: 5>
    Import: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Import: 4>
    Limited: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Limited: 8>
    MAX: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.MAX: 9>
    Premium: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Premium: 7>
    Rare: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Rare: 2>
    Uncommon: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Uncommon: 1>
    VeryRare: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.VeryRare: 3>
    __members__: dict # value = {'Common': <PRODUCTQUALITY.Common: 0>, 'Uncommon': <PRODUCTQUALITY.Uncommon: 1>, 'Rare': <PRODUCTQUALITY.Rare: 2>, 'VeryRare': <PRODUCTQUALITY.VeryRare: 3>, 'Import': <PRODUCTQUALITY.Import: 4>, 'Exotic': <PRODUCTQUALITY.Exotic: 5>, 'BlackMarket': <PRODUCTQUALITY.BlackMarket: 6>, 'Premium': <PRODUCTQUALITY.Premium: 7>, 'Limited': <PRODUCTQUALITY.Limited: 8>, 'MAX': <PRODUCTQUALITY.MAX: 9>}
    pass
class PaintDatabaseWrapper(ObjectWrapper):
    def GetPaintID(self, PaintName: str) -> int: ...
    def GetPaintName(self, PaintID: int) -> str: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: PaintDatabaseWrapper) -> None: ...
    pass
class PerfStatGraphWrapper(StatGraphWrapper, ObjectWrapper):
    def CreateFpsHistory(self, Title: str) -> SampleHistoryWrapper: ...
    def CreateFrameTimeHistory(self, Title: str) -> SampleHistoryWrapper: ...
    def GetFPS(self) -> SampleHistoryWrapper: ...
    def GetFrameTime(self) -> SampleHistoryWrapper: ...
    def GetFrameTimeHistories(self) -> ArrayWrapper<SampleHistoryWrapper>: ...
    def GetGPUFrameTime(self) -> SampleHistoryWrapper: ...
    def GetGameThreadTime(self) -> SampleHistoryWrapper: ...
    def GetMaxFPS(self) -> float: ...
    def GetRenderThreadTime(self) -> SampleHistoryWrapper: ...
    def GetTargetFPS(self) -> float: ...
    def SetFPS(self, newFPS: SampleHistoryWrapper) -> None: ...
    def SetFrameTime(self, newFrameTime: SampleHistoryWrapper) -> None: ...
    def SetGPUFrameTime(self, newGPUFrameTime: SampleHistoryWrapper) -> None: ...
    def SetGameThreadTime(self, newGameThreadTime: SampleHistoryWrapper) -> None: ...
    def SetMaxFPS(self, newMaxFPS: float) -> None: ...
    def SetRenderThreadTime(self, newRenderThreadTime: SampleHistoryWrapper) -> None: ...
    def SetTargetFPS(self, newTargetFPS: float) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: PerfStatGraphWrapper) -> None: ...
    def eventConstruct(self) -> None: ...
    def eventUpdateGraphRanges(self) -> None: ...
    pass
class PhysicalMaterialPropertyWrapper(ObjectWrapper):
    def GetTireFrictionScale(self) -> float: ...
    def GetbConsiderForGround(self) -> int: ...
    def GetbStickyWheels(self) -> int: ...
    def IsNull(self) -> bool: ...
    def SetTireFrictionScale(self, newTireFrictionScale: float) -> None: ...
    def SetbConsiderForGround(self, newbConsiderForGround: int) -> None: ...
    def SetbStickyWheels(self, newbStickyWheels: int) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: PhysicalMaterialPropertyWrapper) -> None: ...
    pass
class PlayerControllerWrapper(ActorWrapper, ObjectWrapper):
    def AllowTextMessage(self, msg: str) -> bool: ...
    def BackupEditorPawnOrientation(self) -> None: ...
    def BannedKick(self) -> None: ...
    def CalculateMouseAxis(self, Center: float, CurrentLocation: float, Deadzone: float, MaxDist: float) -> float: ...
    def CanChatWith(self, Other: PlayerControllerWrapper, bPreset: int) -> bool: ...
    def CanSendMessage(self, bQuickChatMessage: int) -> bool: ...
    def ChangeTeam(self, TeamNum: int) -> None: ...
    def ChatMessage_TA(self, InPRI: PlayerReplicationInfoWrapper, Message: str, ChatChannel: int, bPreset: int) -> None: ...
    def ClampMoveActorGrabOffset(self) -> None: ...
    def ClientArbitratedMatchEnded(self) -> None: ...
    def ClientNotifyChatBanned(self, ChatBanExpiration: int) -> None: ...
    def ClientNotifyChatDisabled(self, Time: float) -> None: ...
    def ClientSetOnlineStatus(self) -> None: ...
    def ClientSplitscreenJoinResponse(self, PlayerID: SteamID, bAllow: int, Error: str) -> None: ...
    def ClientUseItem(self, UseLocation: Vector, UseRotation: Rotator) -> None: ...
    def DebugAI(self) -> None: ...
    def DuplicateShot(self) -> None: ...
    def EditorCycleActor(self) -> None: ...
    def EditorDecreasePower(self) -> None: ...
    def EditorDecreasePowerToggle2(self, bToggle: int) -> None: ...
    def EditorDecreasePowerToggleInterim(self) -> None: ...
    def EditorDecreaseRoundTime(self) -> None: ...
    def EditorIncreasePower(self) -> None: ...
    def EditorIncreasePowerToggle2(self, bToggle: int) -> None: ...
    def EditorIncreasePowerToggleInterim(self) -> None: ...
    def EditorIncreaseRoundTime(self) -> None: ...
    def EditorNextRound(self) -> None: ...
    def EditorPrevRound(self) -> None: ...
    def EditorRedo(self) -> None: ...
    def EditorReleaseActor(self) -> None: ...
    def EditorUndo(self) -> None: ...
    def EventChatMessage(self, PC: PlayerControllerWrapper, Message: str, bPreset: int) -> None: ...
    def EventLaunchAccountPicker(self, ControllerId: int) -> None: ...
    def EventLaunchControllerApplet(self) -> None: ...
    def EventMuteChanged(self, PC: PlayerControllerWrapper, PlayerID: SteamID, bMuted: int) -> None: ...
    def EventResetPlayer(self, PC: PlayerControllerWrapper, bFullReset: int) -> None: ...
    def EventSelectBallCamTarget(self, PC: PlayerControllerWrapper, Direction: int) -> None: ...
    def EventTrainingEditorActorModified(self) -> None: ...
    def FollowPlayer(self, InPlayer: PriWrapper) -> None: ...
    def GameplayMutePlayer(self, PlayerNetId: SteamID) -> None: ...
    def GameplayUnmutePlayer(self, PlayerNetId: SteamID) -> None: ...
    def GetAForward(self) -> float: ...
    def GetALookRoll(self) -> float: ...
    def GetALookUp(self) -> float: ...
    def GetAStrafe(self) -> float: ...
    def GetATurn(self) -> float: ...
    def GetAUp(self) -> float: ...
    def GetBallVelocityIncrementAmount(self) -> float: ...
    def GetBallVelocityIncrementFireCount(self) -> int: ...
    def GetBallVelocityIncrementFireCountMax(self) -> float: ...
    def GetBallVelocityIncrementSpeedDefault(self) -> float: ...
    def GetBallVelocityIncrementSpeedMax(self) -> float: ...
    def GetCar(self) -> CarWrapper: ...
    def GetChatFilter(self) -> int: ...
    def GetConfiguredClientInputRate(self) -> int: ...
    def GetCrosshairTraceDistance(self) -> float: ...
    def GetDebugInputs(self) -> ControllerInput: ...
    def GetDesiredCameraSide(self) -> float: ...
    def GetEditorCameraArchetype(self) -> BaseCameraWrapper: ...
    def GetEngineShare(self) -> EngineTAWrapper: ...
    def GetFollowTarget(self) -> PriWrapper: ...
    def GetGameEvent(self) -> GameEventWrapper: ...
    def GetGamepadLookScale(self) -> float: ...
    def GetLastInputPitch(self) -> float: ...
    def GetLastInputPitchDown(self) -> float: ...
    def GetLastInputPitchUp(self) -> float: ...
    def GetLastInputYaw(self) -> float: ...
    def GetLastInputYawLeft(self) -> float: ...
    def GetLastInputYawRight(self) -> float: ...
    def GetLastInputs(self) -> ControllerInput: ...
    def GetLoginURL(self) -> UnrealStringWrapper: ...
    def GetLookRightScale(self) -> float: ...
    def GetLookUpScale(self) -> float: ...
    def GetMaxClientInputRate(self) -> int: ...
    def GetMedianClientInputRate(self) -> int: ...
    def GetMinClientInputRate(self) -> int: ...
    def GetMinMoveActorGrabDistance(self) -> float: ...
    def GetMouseIncrementSpeed(self) -> float: ...
    def GetMouseInputMax(self) -> float: ...
    def GetMouseSensitivity(self) -> float: ...
    def GetMouseXDeadZone(self) -> float: ...
    def GetMouseXDeadZoneAir(self) -> float: ...
    def GetMouseYDeadZone(self) -> float: ...
    def GetMouseYDeadZoneAir(self) -> float: ...
    def GetMoveActorGrabIncrement(self) -> float: ...
    def GetMoveActorGrabOffset(self) -> Vector: ...
    def GetPRI(self) -> PriWrapper: ...
    def GetPawnTypeChangedTime(self) -> float: ...
    def GetPendingViewPRI(self) -> PriWrapper: ...
    def GetPrimaryPlayerController(self) -> PlayerControllerWrapper: ...
    def GetRotateActorCameraLocationOffset(self) -> Vector: ...
    def GetRotateActorCameraOffset(self, DeltaTime: float, bSnap: int) -> Vector: ...
    def GetRotateActorCameraRotationOffset(self) -> Vector: ...
    def GetRotateActorCameraSide(self) -> int: ...
    def GetSelectedSpawnArchetype(self) -> int: ...
    def GetSpectatorCameraAccel(self) -> float: ...
    def GetSpectatorCameraArchetype(self) -> BaseCameraWrapper: ...
    def GetSpectatorCameraSpeed(self) -> float: ...
    def GetTimeLastReplicatedMovePacket(self) -> float: ...
    def GetTimeSinceLastMovePacket(self) -> float: ...
    def GetTracedCrosshairActor(self) -> ActorWrapper: ...
    def GetVehicleInput(self) -> ControllerInput: ...
    def GetVoiceFilter(self) -> int: ...
    def GetbAllowAsymmetricalMute(self) -> int: ...
    def GetbBoostPressed(self) -> int: ...
    def GetbHandbrakePressed(self) -> int: ...
    def GetbHasPitchedBack(self) -> int: ...
    def GetbJumpPressed(self) -> int: ...
    def GetbReceivedServerShutdownMessage(self) -> int: ...
    def GetbResetCamera(self) -> int: ...
    def GetbRoll(self) -> bool: ...
    def GetbUseDebugInputs(self) -> int: ...
    def GetbUsingGamepad(self) -> bool: ...
    def HandleAddBoostComponent(self, Boost: BoostWrapper) -> None: ...
    def HandleCarSet(self, InPRI: PriWrapper) -> None: ...
    def HandleControllerLayoutChanged(self, InPRI: PriWrapper) -> None: ...
    def HandleGameDataSelected(self, PlaylistId: int, MutatorIndex: int) -> None: ...
    def HandleGameEventChanged(self, InPRI: PriWrapper) -> None: ...
    def HandleJoinGameMigrationCompleted(self, bSuccess: int, FailReason: str) -> None: ...
    def HandleMatchEnded(self, GameEvent: ServerWrapper) -> None: ...
    def HandlePRICameraChanged(self, InPRI: PriWrapper) -> None: ...
    def HandlePawnTypeChanged(self, InPRI: PriWrapper) -> None: ...
    def HandlePendingViewCarSet(self, InPRI: PriWrapper) -> None: ...
    def HandlePersistentCameraSet(self, InPRI: PriWrapper) -> None: ...
    def HandleReplaceBot(self, InPRI: PriWrapper) -> None: ...
    def HandleStartNewRound(self, GameEvent: ServerWrapper) -> None: ...
    def HandleTeamChanged(self, InPRI: PriXWrapper) -> None: ...
    def IdleKick2(self) -> None: ...
    def IgnoreMoveInput(self, bNewMoveInput: int) -> None: ...
    def Interact(self) -> None: ...
    def IsCommunicationFiltered(self, Filter: int, Other: PlayerControllerWrapper, bPreset: int) -> bool: ...
    def IsExplictlyMuted(self, PlayerNetId: SteamID) -> bool: ...
    def ModifyEditorPower(self, Direction: int) -> None: ...
    def NetClientInputRate(self, Rate: int) -> None: ...
    def NoReservationKick(self) -> None: ...
    def NotifyGoalScored(self, ScoredOnTeam: int) -> None: ...
    def OnOpenPauseMenu(self) -> None: ...
    def OnReceivedPlayerAndPRI(self) -> None: ...
    def PlayerMove(self, DeltaTime: float) -> None: ...
    def PressRearCamera(self) -> None: ...
    def PressSecondaryCamera(self) -> None: ...
    def PushToTalk2(self) -> None: ...
    def PushToTalkEnd(self) -> None: ...
    def QueSaveReplay(self) -> None: ...
    def ReadyUp(self) -> None: ...
    def RefreshMutedPlayers(self, bForceRefresh: int) -> None: ...
    def ReleaseRearCamera(self) -> None: ...
    def ReleaseSecondaryCamera(self) -> None: ...
    def RemoveActor(self) -> bool: ...
    def ReplicateCameraRotation(self) -> None: ...
    def ReplicateCameraSettings(self) -> None: ...
    def ReplicateLevelSessionID(self) -> None: ...
    def ReplicateLoadout(self) -> None: ...
    def ResetCameraMode(self) -> None: ...
    def ResetMouseCenter(self) -> None: ...
    def ResetPlayerCheckpoint(self) -> None: ...
    def ResetPlayerRun(self) -> None: ...
    def RestoreEditorPawnOrientation(self) -> None: ...
    def RevertToDefaultCameraHUDInput(self) -> None: ...
    def Say_TA2(self, Message: str, ChatChannel: int, Recipient: SteamID, bPreset: int) -> None: ...
    def SendPendingRPCs(self) -> None: ...
    def ServerCreateMatchBroadcast(self, GameEvent: ServerWrapper) -> None: ...
    def ServerInitInputBuffer(self, Type: int) -> None: ...
    def ServerReportServer(self) -> None: ...
    def ServerRequestSplitscreenJoin(self, PlayerID: SteamID, PlayerName: str) -> None: ...
    def ServerResetPlayer(self, bFullReset: int) -> None: ...
    def ServerSayInternal_TA(self, Message: str, ChatChannel: int, bPreset: int) -> None: ...
    def ServerSay_TA(self, Message: str, ChatChannel: int, bPreset: int) -> None: ...
    def ServerSetChatFilter(self, InVoiceFilter: int) -> None: ...
    def ServerSetVoiceFilter(self, InVoiceFilter: int) -> None: ...
    def ServerTeleportCar(self, SpawnLocation: Vector, NewRotation: Rotator) -> None: ...
    def ServerUsePickup(self, Target: RBActorWrapper) -> None: ...
    def SetAForward(self, aForward: float) -> None: ...
    def SetALookRoll(self, NewLookRoll: float) -> None: ...
    def SetALookUp(self, aLookUp: float) -> None: ...
    def SetAStrafe(self, aStrafe: float) -> None: ...
    def SetATurn(self, aTurn: float) -> None: ...
    def SetAUp(self, aUp: float) -> None: ...
    def SetBallVelocityIncrementAmount(self, newBallVelocityIncrementAmount: float) -> None: ...
    def SetBallVelocityIncrementFireCount(self, newBallVelocityIncrementFireCount: int) -> None: ...
    def SetBallVelocityIncrementFireCountMax(self, newBallVelocityIncrementFireCountMax: float) -> None: ...
    def SetBallVelocityIncrementSpeedDefault(self, newBallVelocityIncrementSpeedDefault: float) -> None: ...
    def SetBallVelocityIncrementSpeedMax(self, newBallVelocityIncrementSpeedMax: float) -> None: ...
    def SetCar(self, newCar: CarWrapper) -> None: ...
    def SetChatFilter(self, newChatFilter: int) -> None: ...
    def SetConfiguredClientInputRate(self, newConfiguredClientInputRate: int) -> None: ...
    def SetCrosshairTraceDistance(self, newCrosshairTraceDistance: float) -> None: ...
    def SetDebugInputs(self, newDebugInputs: ControllerInput) -> None: ...
    def SetDefaultCameraMode(self) -> None: ...
    def SetDesiredCameraSide(self, newDesiredCameraSide: float) -> None: ...
    def SetEditorCameraArchetype(self, newEditorCameraArchetype: BaseCameraWrapper) -> None: ...
    def SetEngineShare(self, newEngineShare: EngineTAWrapper) -> None: ...
    def SetFollowTarget(self, newFollowTarget: PriWrapper) -> None: ...
    def SetFollowTarget2(self, InTarget: PriWrapper) -> None: ...
    def SetGamepadLookScale(self, NewScale: float) -> None: ...
    def SetLastInputPitch(self, newLastInputPitch: float) -> None: ...
    def SetLastInputPitchDown(self, newLastInputPitchDown: float) -> None: ...
    def SetLastInputPitchUp(self, newLastInputPitchUp: float) -> None: ...
    def SetLastInputYaw(self, newLastInputYaw: float) -> None: ...
    def SetLastInputYawLeft(self, newLastInputYawLeft: float) -> None: ...
    def SetLastInputYawRight(self, newLastInputYawRight: float) -> None: ...
    def SetLastInputs(self, newLastInputs: ControllerInput) -> None: ...
    def SetLookRightScale(self, NewScale: float) -> None: ...
    def SetLookUpScale(self, NewScale: float) -> None: ...
    def SetMaxClientInputRate(self, newMaxClientInputRate: int) -> None: ...
    def SetMedianClientInputRate(self, newMedianClientInputRate: int) -> None: ...
    def SetMinClientInputRate(self, newMinClientInputRate: int) -> None: ...
    def SetMinMoveActorGrabDistance(self, newMinMoveActorGrabDistance: float) -> None: ...
    def SetMouseIncrementSpeed(self, newMouseIncrementSpeed: float) -> None: ...
    def SetMouseInputMax(self, newMouseInputMax: float) -> None: ...
    def SetMouseSensitivity(self, NewSensitivity: float) -> None: ...
    def SetMouseXDeadZone(self, newMouseXDeadZone: float) -> None: ...
    def SetMouseXDeadZoneAir(self, newMouseXDeadZoneAir: float) -> None: ...
    def SetMouseYDeadZone(self, newMouseYDeadZone: float) -> None: ...
    def SetMouseYDeadZoneAir(self, newMouseYDeadZoneAir: float) -> None: ...
    def SetMoveActorGrabIncrement(self, newMoveActorGrabIncrement: float) -> None: ...
    def SetMoveActorGrabOffset(self, newMoveActorGrabOffset: Vector) -> None: ...
    def SetPRI(self, newPRI: PriWrapper) -> None: ...
    def SetPawnTypeChangedTime(self, newPawnTypeChangedTime: float) -> None: ...
    def SetPendingViewPRI(self, newPendingViewPRI: PriWrapper) -> None: ...
    def SetRotateActorCameraLocationOffset(self, newRotateActorCameraLocationOffset: Vector) -> None: ...
    def SetRotateActorCameraRotationOffset(self, newRotateActorCameraRotationOffset: Vector) -> None: ...
    def SetRotateActorCameraSide(self, newRotateActorCameraSide: int) -> None: ...
    def SetSelectedSpawnArchetype(self, newSelectedSpawnArchetype: int) -> None: ...
    def SetSpectatorCameraAccel(self, SpectatorCameraAccel: float) -> None: ...
    def SetSpectatorCameraArchetype(self, newSpectatorCameraArchetype: BaseCameraWrapper) -> None: ...
    def SetSpectatorCameraSpeed(self, SpectatorCameraSpeed: float) -> None: ...
    def SetTimeLastReplicatedMovePacket(self, newTimeLastReplicatedMovePacket: float) -> None: ...
    def SetTimeSinceLastMovePacket(self, newTimeSinceLastMovePacket: float) -> None: ...
    def SetTracedCrosshairActor(self, newTracedCrosshairActor: ActorWrapper) -> None: ...
    def SetUsingBehindView(self, bBehindView: int) -> None: ...
    def SetUsingFreecam(self, bFreecam: int) -> None: ...
    def SetUsingSecondaryCamera(self, bSecondaryCamera: int) -> None: ...
    def SetVehicleInput(self, newVehicleInput: ControllerInput) -> None: ...
    def SetVoiceFilter(self, newVoiceFilter: int) -> None: ...
    def SetbAllowAsymmetricalMute(self, newbAllowAsymmetricalMute: int) -> None: ...
    def SetbBoostPressed(self, newbBoostPressed: int) -> None: ...
    def SetbHandbrakePressed(self, newbHandbrakePressed: int) -> None: ...
    def SetbHasPitchedBack(self, newbHasPitchedBack: int) -> None: ...
    def SetbJumpPressed(self, newbJumpPressed: int) -> None: ...
    def SetbReceivedServerShutdownMessage(self, newbReceivedServerShutdownMessage: int) -> None: ...
    def SetbResetCamera(self, newbResetCamera: int) -> None: ...
    def SetbRoll(self, NewRoll: bool) -> None: ...
    def SetbUseDebugInputs(self, newbUseDebugInputs: int) -> None: ...
    def SetupLightBar(self) -> None: ...
    def ShouldBeMuted(self, Other: PlayerControllerWrapper) -> bool: ...
    def ShowAccountPicker(self) -> None: ...
    def ShowControllerApplet(self) -> None: ...
    def SpawnSelectedArchetype(self) -> None: ...
    def Spectate(self) -> None: ...
    def StopEditing(self) -> None: ...
    def StopMovement(self, bOnlyIfNoAccel: int) -> None: ...
    def SwitchTeam(self) -> None: ...
    def SwitchToEditPawn(self) -> None: ...
    def TargetSelectLeft(self) -> None: ...
    def TargetSelectRight(self) -> None: ...
    def ToggleBetweenCarAndEditPawn(self) -> None: ...
    def ToggleBoost(self, bBoost: int) -> None: ...
    def ToggleCameraPosition(self) -> None: ...
    def ToggleEditorRound(self) -> None: ...
    def ToggleGrabActor(self) -> None: ...
    def ToggleHandbrake(self, bHandbrake: int) -> None: ...
    def ToggleJump(self, bJump: int) -> None: ...
    def ToggleRotateActor(self) -> None: ...
    def UpdateCrosshair(self) -> None: ...
    def UpdateRotatedActorOrientation(self, DeltaTime: float) -> None: ...
    def UpdateVoiceFilter(self) -> None: ...
    def UsePickup2(self) -> None: ...
    def ZeroMoveInput(self) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: PlayerControllerWrapper) -> None: ...
    def eventClientMutePlayer(self, PlayerNetId: SteamID, bAddToMuteList: int) -> None: ...
    def eventClientUnmutePlayer(self, PlayerNetId: SteamID) -> None: ...
    def eventDestroyed(self) -> None: ...
    def eventPostBeginPlay(self) -> None: ...
    def eventPreClientTravel(self, PendingURL: str, TravelType: int, bIsSeamlessTravel: int) -> bool: ...
    def eventReceivedPlayer(self) -> None: ...
    def eventSendClientAdjustment(self) -> None: ...
    def eventServerMutePlayer(self, PlayerNetId: SteamID) -> None: ...
    def eventServerUnmutePlayer(self, PlayerNetId: SteamID) -> None: ...
    def eventTeleportCar(self, SpawnLocation: Vector, NewRotation: Rotator) -> None: ...
    pass
class PlayerReplicationInfoWrapper(ActorWrapper, ObjectWrapper):
    def CopyProperties(self, PRI: PlayerReplicationInfoWrapper) -> None: ...
    def Duplicate(self) -> PlayerReplicationInfoWrapper: ...
    def GetDeaths(self) -> int: ...
    def GetExactPing(self) -> float: ...
    def GetKills(self) -> int: ...
    def GetNumLives(self) -> int: ...
    def GetOldName(self) -> UnrealStringWrapper: ...
    def GetPing(self) -> int: ...
    def GetPlatform(self) -> OnlinePlatform: ...
    def GetPlayerID(self) -> int: ...
    def GetPlayerName(self) -> UnrealStringWrapper: ...
    def GetSavedNetworkAddress(self) -> UnrealStringWrapper: ...
    def GetScore(self) -> int: ...
    def GetStartTime(self) -> int: ...
    def GetStringSpectating(self) -> UnrealStringWrapper: ...
    def GetStringUnknown(self) -> UnrealStringWrapper: ...
    def GetTTSSpeaker(self) -> int: ...
    def GetTeam(self) -> TeamInfoWrapper: ...
    def GetTeamNum(self) -> int: ...
    def GetUniqueIdWrapper(self) -> UniqueIDWrapper: ...
    def GetbAdmin(self) -> int: ...
    def GetbBot(self) -> int: ...
    def GetbFromPreviousLevel(self) -> int: ...
    def GetbIsInactive(self) -> int: ...
    def GetbIsSpectator(self) -> int: ...
    def GetbOnlySpectator(self) -> int: ...
    def GetbOutOfLives(self) -> int: ...
    def GetbReadyToPlay(self) -> int: ...
    def GetbTimedOut(self) -> int: ...
    def GetbUnregistered(self) -> int: ...
    def GetbWaitingPlayer(self) -> int: ...
    def IncrementDeaths(self, Amt: int) -> None: ...
    def IsInvalidName(self) -> bool: ...
    def OverrideWith(self, PRI: PlayerReplicationInfoWrapper) -> None: ...
    def RegisterPlayerWithSession(self) -> None: ...
    def RemoteUserDataReplicated(self) -> None: ...
    def Reset(self) -> None: ...
    def SeamlessTravelTo(self, NewPRI: PlayerReplicationInfoWrapper) -> None: ...
    def SetDeaths(self, newDeaths: int) -> None: ...
    def SetExactPing(self, newExactPing: float) -> None: ...
    def SetKills(self, newKills: int) -> None: ...
    def SetNumLives(self, newNumLives: int) -> None: ...
    def SetPing(self, newPing: int) -> None: ...
    def SetPlayerID(self, newPlayerID: int) -> None: ...
    def SetPlayerTeam(self, NewTeam: TeamInfoWrapper) -> None: ...
    def SetScore(self, newScore: int) -> None: ...
    def SetStartTime(self, newStartTime: int) -> None: ...
    def SetTTSSpeaker(self, newTTSSpeaker: int) -> None: ...
    def SetTeam(self, newTeam: TeamInfoWrapper) -> None: ...
    def SetUniqueId(self, newUniqueId: UniqueIDWrapper) -> None: ...
    def SetUniqueId2(self, PlayerUniqueId: UniqueIDWrapper) -> None: ...
    def SetWaitingPlayer(self, B: int) -> None: ...
    def SetbAdmin(self, newbAdmin: int) -> None: ...
    def SetbBot(self, newbBot: int) -> None: ...
    def SetbFromPreviousLevel(self, newbFromPreviousLevel: int) -> None: ...
    def SetbIsInactive(self, newbIsInactive: int) -> None: ...
    def SetbIsSpectator(self, newbIsSpectator: int) -> None: ...
    def SetbOnlySpectator(self, newbOnlySpectator: int) -> None: ...
    def SetbOutOfLives(self, newbOutOfLives: int) -> None: ...
    def SetbReadyToPlay(self, newbReadyToPlay: int) -> None: ...
    def SetbTimedOut(self, newbTimedOut: int) -> None: ...
    def SetbUnregistered(self, newbUnregistered: int) -> None: ...
    def SetbWaitingPlayer(self, newbWaitingPlayer: int) -> None: ...
    def Unregister2(self) -> None: ...
    def UnregisterPlayerFromSession(self) -> None: ...
    def UpdatePing(self, TimeStamp: float) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: PlayerReplicationInfoWrapper) -> None: ...
    def eventClientFillRemoteUserData(self) -> None: ...
    def eventConstruct(self) -> None: ...
    def eventDestroyed(self) -> None: ...
    def eventOnOwnerChanged(self) -> None: ...
    def eventPostBeginPlay(self) -> None: ...
    def eventSetPlayerName(self, S: str) -> None: ...
    pass
class Playlist():
    """
    Members:

      CASUAL_STANDARD

      CASUAL_DOUBLES

      CASUAL_DUELS

      CASUAL_CHAOS

      RANKED_STANDARD

      RANKED_DOUBLES

      RANKED_DUELS

      EXTRAS_RUMBLE

      EXTRAS_DROPSHOT

      EXTRAS_HOOPS

      EXTRAS_SNOWDAY
    """
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    CASUAL_CHAOS: bakkesmod.Playlist # value = <Playlist.CASUAL_CHAOS: 3>
    CASUAL_DOUBLES: bakkesmod.Playlist # value = <Playlist.CASUAL_DOUBLES: 1>
    CASUAL_DUELS: bakkesmod.Playlist # value = <Playlist.CASUAL_DUELS: 2>
    CASUAL_STANDARD: bakkesmod.Playlist # value = <Playlist.CASUAL_STANDARD: 0>
    EXTRAS_DROPSHOT: bakkesmod.Playlist # value = <Playlist.EXTRAS_DROPSHOT: 13>
    EXTRAS_HOOPS: bakkesmod.Playlist # value = <Playlist.EXTRAS_HOOPS: 14>
    EXTRAS_RUMBLE: bakkesmod.Playlist # value = <Playlist.EXTRAS_RUMBLE: 12>
    EXTRAS_SNOWDAY: bakkesmod.Playlist # value = <Playlist.EXTRAS_SNOWDAY: 15>
    RANKED_DOUBLES: bakkesmod.Playlist # value = <Playlist.RANKED_DOUBLES: 5>
    RANKED_DUELS: bakkesmod.Playlist # value = <Playlist.RANKED_DUELS: 6>
    RANKED_STANDARD: bakkesmod.Playlist # value = <Playlist.RANKED_STANDARD: 4>
    __members__: dict # value = {'CASUAL_STANDARD': <Playlist.CASUAL_STANDARD: 0>, 'CASUAL_DOUBLES': <Playlist.CASUAL_DOUBLES: 1>, 'CASUAL_DUELS': <Playlist.CASUAL_DUELS: 2>, 'CASUAL_CHAOS': <Playlist.CASUAL_CHAOS: 3>, 'RANKED_STANDARD': <Playlist.RANKED_STANDARD: 4>, 'RANKED_DOUBLES': <Playlist.RANKED_DOUBLES: 5>, 'RANKED_DUELS': <Playlist.RANKED_DUELS: 6>, 'EXTRAS_RUMBLE': <Playlist.EXTRAS_RUMBLE: 12>, 'EXTRAS_DROPSHOT': <Playlist.EXTRAS_DROPSHOT: 13>, 'EXTRAS_HOOPS': <Playlist.EXTRAS_HOOPS: 14>, 'EXTRAS_SNOWDAY': <Playlist.EXTRAS_SNOWDAY: 15>}
    pass
class PlaylistCategory():
    """
    Members:

      CASUAL

      RANKED

      EXTRAS
    """
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    CASUAL: bakkesmod.PlaylistCategory # value = <PlaylistCategory.CASUAL: 0>
    EXTRAS: bakkesmod.PlaylistCategory # value = <PlaylistCategory.EXTRAS: 2>
    RANKED: bakkesmod.PlaylistCategory # value = <PlaylistCategory.RANKED: 1>
    __members__: dict # value = {'CASUAL': <PlaylistCategory.CASUAL: 0>, 'RANKED': <PlaylistCategory.RANKED: 1>, 'EXTRAS': <PlaylistCategory.EXTRAS: 2>}
    pass
class PluginInfo():
    def __init__(self, arg0: PluginInfo) -> None: ...
    @property
    def apiBuildVersion(self) -> int:
        """
        :type: int
        """
    @apiBuildVersion.setter
    def apiBuildVersion(self, arg1: int) -> None:
        pass
    @property
    def className(self) -> str:
        """
        :type: str
        """
    @className.setter
    def className(self, arg1: str) -> None:
        pass
    @property
    def fileName(self) -> str:
        """
        :type: str
        """
    @fileName.setter
    def fileName(self, arg1: str) -> None:
        pass
    @property
    def pluginName(self) -> str:
        """
        :type: str
        """
    @pluginName.setter
    def pluginName(self, arg1: str) -> None:
        pass
    @property
    def pluginType(self) -> int:
        """
        :type: int
        """
    @property
    def pluginVersion(self) -> str:
        """
        :type: str
        """
    @pluginVersion.setter
    def pluginVersion(self, arg1: str) -> None:
        pass
    pass
class PluginManagerWrapper(ObjectWrapper):
    def GetLoadedPlugins(self) -> typing.List[BakkesMod::Plugin::LoadedPlugin]: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: PluginManagerWrapper) -> None: ...
    pass
class PredictionInfo():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: PredictionInfo) -> None: ...
    @property
    def ArchTop(self) -> Vector:
        """
        :type: Vector
        """
    @ArchTop.setter
    def ArchTop(self, arg1: Vector) -> None:
        pass
    @property
    def ArchTopTime(self) -> float:
        """
        :type: float
        """
    @ArchTopTime.setter
    def ArchTopTime(self, arg1: float) -> None:
        pass
    @property
    def ArchTopVelocity(self) -> Vector:
        """
        :type: Vector
        """
    @ArchTopVelocity.setter
    def ArchTopVelocity(self, arg1: Vector) -> None:
        pass
    @property
    def Location(self) -> Vector:
        """
        :type: Vector
        """
    @Location.setter
    def Location(self, arg1: Vector) -> None:
        pass
    @property
    def Time(self) -> float:
        """
        :type: float
        """
    @Time.setter
    def Time(self, arg1: float) -> None:
        pass
    @property
    def Velocity(self) -> Vector:
        """
        :type: Vector
        """
    @Velocity.setter
    def Velocity(self, arg1: Vector) -> None:
        pass
    @property
    def bHitGround(self) -> int:
        """
        :type: int
        """
    @bHitGround.setter
    def bHitGround(self, arg1: int) -> None:
        pass
    @property
    def bHitWall(self) -> int:
        """
        :type: int
        """
    @bHitWall.setter
    def bHitWall(self, arg1: int) -> None:
        pass
    pass
class PriXWrapper(PlayerReplicationInfoWrapper, ActorWrapper, ObjectWrapper):
    def EventDestroyed(self, PRI: PriXWrapper) -> None: ...
    def EventPlayerNameChanged(self, PRI: PriXWrapper) -> None: ...
    def EventTeamChanged(self, PRI: PriXWrapper) -> None: ...
    def EventUniqueIdChanged(self, PRI: PriXWrapper) -> None: ...
    def OnTeamChanged(self) -> None: ...
    def OnUniqueIdChanged(self) -> None: ...
    def RegisterPlayerWithSession(self) -> None: ...
    def SetPlayerTeam(self, NewTeam: TeamInfoWrapper) -> None: ...
    def UnregisterPlayerFromSession(self) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: PriXWrapper) -> None: ...
    def eventDestroyed(self) -> None: ...
    def eventOnOwnerChanged(self) -> None: ...
    def eventSetPlayerName(self, S: str) -> None: ...
    pass
class PriWrapper(PriXWrapper, PlayerReplicationInfoWrapper, ActorWrapper, ObjectWrapper):
    def AddLocalPlayerToGameEvent(self) -> None: ...
    def AreLoadoutsSet(self) -> bool: ...
    def CanAwardTimeRestrictedStatEvent(self) -> bool: ...
    def ClearBotReplacement(self) -> None: ...
    def ClientAchievementProgression(self, AchievementId: int, AchievementType: int, Progress: float, MaxProgress: float) -> None: ...
    def ClientChangeTeamFailed(self, TeamNum: int) -> None: ...
    def ClientScoredGoal(self, BallHitLocation: Vector) -> None: ...
    def ClientUnlockAchievement(self, AchievementId: int, AchievementType: int) -> None: ...
    def CommitStats(self) -> None: ...
    def EventCarPreUpdate(self, PRI: PriWrapper) -> None: ...
    def EventOwnerChanged(self, PRI: PriWrapper) -> None: ...
    def EventServerAchievementProgression(self, PRI: PriWrapper, AchievementId: int, AchievementType: int, Progress: float, MaxProgress: float) -> None: ...
    def EventSpectatorShortcutChanged(self, PRI: PriWrapper) -> None: ...
    def EventStartVoteToForfeitDisabledChanged(self, PRI: PriWrapper) -> None: ...
    def EventVanityChanged(self) -> None: ...
    def GetAirControlSensitivity(self) -> float: ...
    def GetBallTouches(self) -> int: ...
    def GetBoostPickups(self) -> int: ...
    def GetCameraPitch(self) -> int: ...
    def GetCameraSettings(self) -> ProfileCameraSettings: ...
    def GetCameraYaw(self) -> int: ...
    def GetCar(self) -> CarWrapper: ...
    def GetCarTouches(self) -> int: ...
    def GetClubDetails(self) -> ClubDetailsWrapper: ...
    def GetClubID(self) -> int: ...
    def GetDodgeInputThreshold(self) -> float: ...
    def GetGameEvent(self) -> GameEventWrapper: ...
    def GetLastTimeRestrictedStatEventTime(self) -> float: ...
    def GetMatchAssists(self) -> int: ...
    def GetMatchBonusXP(self) -> int: ...
    def GetMatchBreakoutDamage(self) -> int: ...
    def GetMatchDemolishes(self) -> int: ...
    def GetMatchGoals(self) -> int: ...
    def GetMatchOwnGoals(self) -> int: ...
    def GetMatchSaves(self) -> int: ...
    def GetMatchScore(self) -> int: ...
    def GetMatchShots(self) -> int: ...
    def GetMatchXP(self) -> int: ...
    def GetMaxTimeTillItem(self) -> int: ...
    def GetNewFriendKey(self) -> None: ...
    def GetNextTimeRestrictedStatEventAllowedTime(self) -> float: ...
    def GetPartyLeaderID(self) -> UniqueIDWrapper: ...
    def GetPawnType(self) -> int: ...
    def GetPlayerHistoryValid(self) -> int: ...
    def GetPublicIP(self) -> UnrealStringWrapper: ...
    def GetReplacingBotPRI(self) -> PriWrapper: ...
    def GetReplicatedGameEvent(self) -> GameEventWrapper: ...
    def GetReplicatedWorstNetQualityBeyondLatency(self) -> int: ...
    def GetRespawnTimeRemaining(self) -> int: ...
    def GetSpectatorShortcut(self) -> int: ...
    def GetSteeringSensitivity(self) -> float: ...
    def GetTimeTillItem(self) -> int: ...
    def GetTotalGameTimePlayed(self) -> float: ...
    def GetWaitingStartTime(self) -> int: ...
    def GetbBusy(self) -> int: ...
    def GetbIsInSplitScreen(self) -> int: ...
    def GetbLoadoutSet(self) -> int: ...
    def GetbLoadoutsSet(self) -> int: ...
    def GetbMatchAdmin(self) -> int: ...
    def GetbMatchMVP(self) -> int: ...
    def GetbOnlineLoadoutSet(self) -> int: ...
    def GetbOnlineLoadoutsSet(self) -> int: ...
    def GetbReady(self) -> int: ...
    def GetbStartVoteToForfeitDisabled(self) -> int: ...
    def GetbTeamPaintSet(self) -> int: ...
    def GetbUsingBehindView(self) -> int: ...
    def GetbUsingFreecam(self) -> int: ...
    def GetbUsingItems(self) -> int: ...
    def GetbUsingSecondaryCamera(self) -> int: ...
    def HandleAirControl(self, AirControlComp: AirControlComponentWrapper) -> None: ...
    def InitLoadoutAttributesForTeam(self, PRI: PriXWrapper) -> None: ...
    def IsClientPlayerPRI(self) -> bool: ...
    def IsEditor(self) -> bool: ...
    def IsInWarmUpMode(self) -> bool: ...
    def IsInvalidName(self) -> bool: ...
    def IsLocalPlayerPRI(self) -> bool: ...
    def IsPlayer(self) -> bool: ...
    def IsSpectator(self) -> bool: ...
    def NotifyWonMVP(self) -> None: ...
    def OnLoadoutsOnlineSet(self) -> None: ...
    def OnLoadoutsSet2(self) -> None: ...
    def OnLoadoutsSetInternal(self) -> None: ...
    def OnMVPChange(self) -> None: ...
    def OnMatchAdmin(self) -> None: ...
    def OnPartyLeaderChanged(self) -> None: ...
    def OnPawnTypeChanged(self) -> None: ...
    def OnRep_ClientScorePoint(self) -> None: ...
    def OnRep_SteeringSensitivity(self) -> None: ...
    def OnRep_UniqueId(self) -> None: ...
    def OnReplacingBotPRIChanged(self) -> None: ...
    def OnRespawnTimeRemainingChanged(self) -> None: ...
    def OnScoredGoal(self, BallHitLocation: Vector) -> None: ...
    def OnSkillTierChanged(self) -> None: ...
    def OnSpectatorShortcutChanged(self) -> None: ...
    def OnSplitScreenStatusChanged(self) -> None: ...
    def OnStartVoteToForfeitDisabledChanged(self) -> None: ...
    def OnTeamChanged(self) -> None: ...
    def OnTitleChanged(self) -> None: ...
    def OnUniqueIdChanged(self) -> None: ...
    def RecordTimeRestrictedStatEvent(self) -> None: ...
    def RemoveCertifiedProductStat(self, InstanceID: int) -> None: ...
    def RemovePoints(self, Points: int) -> None: ...
    def ReplicatePodiumTitles(self) -> None: ...
    def ReplicateSkillTier(self, NewTier: int) -> None: ...
    def ReportCheater(self, Reason: str) -> None: ...
    def ResetScore(self) -> None: ...
    def ResetTimeRestrictedStatEvent(self) -> None: ...
    def ScorePoint2(self, AdditionalScore: int) -> None: ...
    def ServerChangeTeam(self, TeamNum: int) -> None: ...
    def ServerMatchAdminSetPaused(self, bPause: int) -> None: ...
    def ServerMatchAdminSetScoreAndTime(self, NewScoreTeam0: int, NewScoreTeam1: int, SecondsRemaining: int, bOverTime: int, bRestartRound: int) -> None: ...
    def ServerReadyUp(self) -> None: ...
    def ServerSetPlayerActivatedFX(self, FX: FXActorWrapper) -> None: ...
    def ServerSetPlayerHistoryKey(self, HistoryKeyArray: int) -> None: ...
    def ServerSetPublicIP(self, IP: str) -> None: ...
    def ServerSetUserCarPreferences(self, NewDodgeThreshold: float, NewSteeringSensitivity: float, NewAirControlSensitivity: float) -> None: ...
    def ServerSpectate(self) -> None: ...
    def ServerSplitScreenStatusChanged(self, bInSplitScreen: int) -> None: ...
    def ServerVoteToForfeit(self) -> None: ...
    def SetAirControlSensitivity(self, newAirControlSensitivity: float) -> None: ...
    def SetBallTouches(self, newBallTouches: int) -> None: ...
    def SetBoostPickups(self, newBoostPickups: int) -> None: ...
    def SetCameraPitch(self, newCameraPitch: int) -> None: ...
    def SetCameraSettings(self, newCameraSettings: ProfileCameraSettings) -> None: ...
    def SetCameraYaw(self, newCameraYaw: int) -> None: ...
    def SetCar(self, newCar: CarWrapper) -> None: ...
    def SetCar2(self, NewCar: CarWrapper) -> None: ...
    def SetCarTouches(self, newCarTouches: int) -> None: ...
    def SetClubID(self, newClubID: int) -> None: ...
    def SetDodgeInputThreshold(self, newDodgeInputThreshold: float) -> None: ...
    def SetGameEvent(self, newGameEvent: GameEventWrapper) -> None: ...
    def SetLastTimeRestrictedStatEventTime(self, newLastTimeRestrictedStatEventTime: float) -> None: ...
    def SetMatchAdmin(self, bIsMatchAdmin: int) -> None: ...
    def SetMatchAssists(self, newMatchAssists: int) -> None: ...
    def SetMatchBonusXP(self, newMatchBonusXP: int) -> None: ...
    def SetMatchBreakoutDamage(self, newMatchBreakoutDamage: int) -> None: ...
    def SetMatchDemolishes(self, newMatchDemolishes: int) -> None: ...
    def SetMatchGoals(self, newMatchGoals: int) -> None: ...
    def SetMatchOwnGoals(self, newMatchOwnGoals: int) -> None: ...
    def SetMatchSaves(self, newMatchSaves: int) -> None: ...
    def SetMatchScore(self, newMatchScore: int) -> None: ...
    def SetMatchShots(self, newMatchShots: int) -> None: ...
    def SetMaxTimeTillItem(self, newMaxTimeTillItem: int) -> None: ...
    def SetNextTimeRestrictedStatEventAllowedTime(self, newNextTimeRestrictedStatEventAllowedTime: float) -> None: ...
    def SetPartyLeader(self, newPartyLeader: UniqueIDWrapper) -> None: ...
    def SetPawnType(self, newPawnType: int) -> None: ...
    def SetPawnType2(self, NewPawnType: int) -> None: ...
    def SetPlayerHistoryValid(self, newPlayerHistoryValid: int) -> None: ...
    def SetReady(self, bNewReady: int) -> None: ...
    def SetReplacingBotPRI(self, newReplacingBotPRI: PriWrapper) -> None: ...
    def SetReplicatedGameEvent(self, newReplicatedGameEvent: GameEventWrapper) -> None: ...
    def SetReplicatedWorstNetQualityBeyondLatency(self, newReplicatedWorstNetQualityBeyondLatency: int) -> None: ...
    def SetRespawnTime2(self, NewTime: int) -> None: ...
    def SetRespawnTimeRemaining(self, newRespawnTimeRemaining: int) -> None: ...
    def SetSpectatorShortcut(self, newSpectatorShortcut: int) -> None: ...
    def SetSpectatorShortcut2(self, InShortcut: int) -> None: ...
    def SetStartVoteToForfeitDisabled(self, bDisabled: int) -> None: ...
    def SetSteeringSensitivity(self, newSteeringSensitivity: float) -> None: ...
    def SetTimeTillItem(self, newTimeTillItem: int) -> None: ...
    def SetTotalGameTimePlayed(self, newTotalGameTimePlayed: float) -> None: ...
    def SetUserCarPreferences(self, NewDodgeThreshold: float, NewSteeringSensitivity: float, NewAirControlSensitivity: float) -> None: ...
    def SetWaitingPlayer(self, B: int) -> None: ...
    def SetWaitingStartTime(self, newWaitingStartTime: int) -> None: ...
    def SetWaitingStartTime2(self) -> None: ...
    def SetbBusy(self, newbBusy: int) -> None: ...
    def SetbIsInSplitScreen(self, newbIsInSplitScreen: int) -> None: ...
    def SetbLoadoutSet(self, newbLoadoutSet: int) -> None: ...
    def SetbLoadoutsSet(self, newbLoadoutsSet: int) -> None: ...
    def SetbMatchAdmin(self, newbMatchAdmin: int) -> None: ...
    def SetbMatchMVP(self, newbMatchMVP: int) -> None: ...
    def SetbOnlineLoadoutSet(self, newbOnlineLoadoutSet: int) -> None: ...
    def SetbOnlineLoadoutsSet(self, newbOnlineLoadoutsSet: int) -> None: ...
    def SetbReady(self, newbReady: int) -> None: ...
    def SetbStartVoteToForfeitDisabled(self, newbStartVoteToForfeitDisabled: int) -> None: ...
    def SetbTeamPaintSet(self, newbTeamPaintSet: int) -> None: ...
    def SetbUsingBehindView(self, newbUsingBehindView: int) -> None: ...
    def SetbUsingFreecam(self, newbUsingFreecam: int) -> None: ...
    def SetbUsingItems(self, newbUsingItems: int) -> None: ...
    def SetbUsingSecondaryCamera(self, newbUsingSecondaryCamera: int) -> None: ...
    def ShouldBroadCastWelcomeMessage(self, bExiting: int) -> bool: ...
    def ShouldValidateOnlineProducts(self) -> bool: ...
    def SyncPlayerTitle(self) -> None: ...
    def Unregister(self) -> None: ...
    def UpdateCarLocalPlayer(self) -> None: ...
    def UpdateFromLoadout(self) -> None: ...
    def UpdateOnlineProductStats(self) -> None: ...
    def UpdatePartyStatus(self) -> None: ...
    def UpdatePlayerAvatarBorder(self) -> None: ...
    def UpdatePlayerBanner(self) -> None: ...
    def UpdateSplitScreenStatus(self) -> None: ...
    def UpdateTitle2(self) -> None: ...
    def UpdateTitleFromLoadout(self) -> None: ...
    def UpdateUserCarPreferences(self, AirControlComponent: AirControlComponentWrapper) -> None: ...
    def ValidateLoadoutDLC(self) -> None: ...
    def ValidateLoadoutSlots(self) -> bool: ...
    def ValidateLoadoutTeamPaints(self) -> bool: ...
    def ValidateUserFloat(self, Reason: str, NewValue: float, Min: float, Max: float) -> float: ...
    def ValidateUserInt(self, Reason: str, NewValue: int, Min: int, Max: int) -> int: ...
    def __ClubID__ChangeNotifyFunc(self) -> None: ...
    def __PREI__ChangeNotifyFunc(self) -> None: ...
    def __ReplicatedWorstNetQualityBeyondLatency__ChangeNotifyFunc(self) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: PriWrapper) -> None: ...
    def eventDestroyed(self) -> None: ...
    pass
class PrimitiveComponentWrapper(ObjectWrapper):
    def AddRadialForce(self, Origin: Vector, Radius: float, Strength: float, Falloff: int) -> None: ...
    def AddRadialImpulse(self, Origin: Vector, Radius: float, Strength: float, Falloff: int, bVelChange: int) -> None: ...
    def GetAbsoluteRotation(self) -> int: ...
    def GetAbsoluteScale(self) -> int: ...
    def GetAbsoluteTranslation(self) -> int: ...
    def GetAlwaysCheckCollision(self) -> int: ...
    def GetAlwaysLoadOnClient(self) -> int: ...
    def GetAlwaysLoadOnServer(self) -> int: ...
    def GetBlockActors(self) -> int: ...
    def GetBlockNonZeroExtent(self) -> int: ...
    def GetBlockRigidBody(self) -> int: ...
    def GetBlockZeroExtent(self) -> int: ...
    def GetBoundsScale(self) -> float: ...
    def GetCanBlockCamera(self) -> int: ...
    def GetCastShadow(self) -> int: ...
    def GetCollideActors(self) -> int: ...
    def GetHiddenGame(self) -> int: ...
    def GetLastRenderTime(self) -> float: ...
    def GetRBChannel(self) -> int: ...
    def GetRBDominanceGroup(self) -> int: ...
    def GetRotation(self) -> Rotator: ...
    def GetScale(self) -> float: ...
    def GetScale3D(self) -> Vector: ...
    def GetScriptRigidBodyCollisionThreshold(self) -> float: ...
    def GetTranslation(self) -> Vector: ...
    def GetVisibilityId(self) -> int: ...
    def GetbAcceptsDynamicDecals(self) -> int: ...
    def GetbAcceptsDynamicDominantLightShadows(self) -> int: ...
    def GetbAcceptsDynamicLights(self) -> int: ...
    def GetbAcceptsLights(self) -> int: ...
    def GetbAcceptsStaticDecals(self) -> int: ...
    def GetbAllowApproximateOcclusion(self) -> int: ...
    def GetbBlockFootPlacement(self) -> int: ...
    def GetbCastDynamicShadow(self) -> int: ...
    def GetbCastHiddenShadow(self) -> int: ...
    def GetbCastShadowAsTwoSided(self) -> int: ...
    def GetbCastStaticShadow(self) -> int: ...
    def GetbDisableAllRigidBody(self) -> int: ...
    def GetbFirstFrameOcclusion(self) -> int: ...
    def GetbFluidDrain(self) -> int: ...
    def GetbFluidTwoWay(self) -> int: ...
    def GetbForceDirectLightMap(self) -> int: ...
    def GetbHasExplicitShadowParent(self) -> int: ...
    def GetbIgnoreForceField(self) -> int: ...
    def GetbIgnoreHiddenActorsMembership(self) -> int: ...
    def GetbIgnoreNearPlaneIntersection(self) -> int: ...
    def GetbIgnoreOwnerHidden(self) -> int: ...
    def GetbIgnoreRadialForce(self) -> int: ...
    def GetbIgnoreRadialImpulse(self) -> int: ...
    def GetbIsRefreshingDecals(self) -> int: ...
    def GetbNoModSelfShadow(self) -> int: ...
    def GetbNotifyRigidBodyCollision(self) -> int: ...
    def GetbOnlyBlockActorMovement(self) -> int: ...
    def GetbOnlyOwnerSee(self) -> int: ...
    def GetbOwnerNoSee(self) -> int: ...
    def GetbSelfShadowOnly(self) -> int: ...
    def GetbSkipRBGeomCreation(self) -> int: ...
    def GetbUseAsOccluder(self) -> int: ...
    def GetbUseCompartment(self) -> int: ...
    def GetbUseOnePassLightingOnTranslucency(self) -> int: ...
    def GetbUsePrecomputedShadows(self) -> int: ...
    def InitRBPhys(self) -> None: ...
    def IsNull(self) -> bool: ...
    def RetardRBLinearVelocity(self, RetardDir: Vector, VelScale: float) -> None: ...
    def SetAbsoluteRotation(self, newAbsoluteRotation: int) -> None: ...
    def SetAbsoluteScale(self, newAbsoluteScale: int) -> None: ...
    def SetAbsoluteTranslation(self, newAbsoluteTranslation: int) -> None: ...
    def SetAlwaysCheckCollision(self, newAlwaysCheckCollision: int) -> None: ...
    def SetAlwaysLoadOnClient(self, newAlwaysLoadOnClient: int) -> None: ...
    def SetAlwaysLoadOnServer(self, newAlwaysLoadOnServer: int) -> None: ...
    def SetBlockActors(self, newBlockActors: int) -> None: ...
    def SetBlockNonZeroExtent(self, newBlockNonZeroExtent: int) -> None: ...
    def SetBlockRigidBody(self, newBlockRigidBody: int) -> None: ...
    def SetBlockRigidBody2(self, bNewBlockRigidBody: int) -> None: ...
    def SetBlockZeroExtent(self, newBlockZeroExtent: int) -> None: ...
    def SetBoundsScale(self, newBoundsScale: float) -> None: ...
    def SetCanBlockCamera(self, newCanBlockCamera: int) -> None: ...
    def SetCastShadow(self, newCastShadow: int) -> None: ...
    def SetCollideActors(self, newCollideActors: int) -> None: ...
    def SetHiddenGame(self, newHiddenGame: int) -> None: ...
    def SetLastSubmitTime(self, newLastSubmitTime: float) -> None: ...
    def SetNotifyRigidBodyCollision(self, bNewNotifyRigidBodyCollision: int) -> None: ...
    def SetRBAngularVelocity(self, NewAngVel: Vector, bAddToCurrent: int) -> None: ...
    def SetRBChannel(self, newRBChannel: int) -> None: ...
    def SetRBChannel2(self, Channel: int) -> None: ...
    def SetRBCollidesWithChannel(self, Channel: int, bNewCollides: int) -> None: ...
    def SetRBDominanceGroup(self, newRBDominanceGroup: int) -> None: ...
    def SetRBLinearVelocity(self, NewVel: Vector, bAddToCurrent: int) -> None: ...
    def SetRotation(self, newRotation: Rotator) -> None: ...
    def SetScale(self, newScale: float) -> None: ...
    def SetScale3D(self, newScale3D: Vector) -> None: ...
    def SetScriptRigidBodyCollisionThreshold(self, newScriptRigidBodyCollisionThreshold: float) -> None: ...
    def SetTranslation(self, newTranslation: Vector) -> None: ...
    def SetVisibilityId(self, newVisibilityId: int) -> None: ...
    def SetbAcceptsDynamicDominantLightShadows(self, newbAcceptsDynamicDominantLightShadows: int) -> None: ...
    def SetbAcceptsDynamicLights(self, newbAcceptsDynamicLights: int) -> None: ...
    def SetbAcceptsLights(self, newbAcceptsLights: int) -> None: ...
    def SetbAllowApproximateOcclusion(self, newbAllowApproximateOcclusion: int) -> None: ...
    def SetbBlockFootPlacement(self, newbBlockFootPlacement: int) -> None: ...
    def SetbCastDynamicShadow(self, newbCastDynamicShadow: int) -> None: ...
    def SetbCastHiddenShadow(self, newbCastHiddenShadow: int) -> None: ...
    def SetbCastShadowAsTwoSided(self, newbCastShadowAsTwoSided: int) -> None: ...
    def SetbCastStaticShadow(self, newbCastStaticShadow: int) -> None: ...
    def SetbDisableAllRigidBody(self, newbDisableAllRigidBody: int) -> None: ...
    def SetbFirstFrameOcclusion(self, newbFirstFrameOcclusion: int) -> None: ...
    def SetbFluidDrain(self, newbFluidDrain: int) -> None: ...
    def SetbFluidTwoWay(self, newbFluidTwoWay: int) -> None: ...
    def SetbForceDirectLightMap(self, newbForceDirectLightMap: int) -> None: ...
    def SetbIgnoreForceField(self, newbIgnoreForceField: int) -> None: ...
    def SetbIgnoreHiddenActorsMembership(self, newbIgnoreHiddenActorsMembership: int) -> None: ...
    def SetbIgnoreNearPlaneIntersection(self, newbIgnoreNearPlaneIntersection: int) -> None: ...
    def SetbIgnoreOwnerHidden(self, newbIgnoreOwnerHidden: int) -> None: ...
    def SetbIgnoreRadialForce(self, newbIgnoreRadialForce: int) -> None: ...
    def SetbIgnoreRadialImpulse(self, newbIgnoreRadialImpulse: int) -> None: ...
    def SetbNoModSelfShadow(self, newbNoModSelfShadow: int) -> None: ...
    def SetbNotifyRigidBodyCollision(self, newbNotifyRigidBodyCollision: int) -> None: ...
    def SetbOnlyBlockActorMovement(self, newbOnlyBlockActorMovement: int) -> None: ...
    def SetbOnlyOwnerSee(self, newbOnlyOwnerSee: int) -> None: ...
    def SetbOwnerNoSee(self, newbOwnerNoSee: int) -> None: ...
    def SetbSelfShadowOnly(self, newbSelfShadowOnly: int) -> None: ...
    def SetbSkipRBGeomCreation(self, newbSkipRBGeomCreation: int) -> None: ...
    def SetbUseAsOccluder(self, newbUseAsOccluder: int) -> None: ...
    def SetbUseCompartment(self, newbUseCompartment: int) -> None: ...
    def SetbUseOnePassLightingOnTranslucency(self, newbUseOnePassLightingOnTranslucency: int) -> None: ...
    def TermRBPhys(self) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: PrimitiveComponentWrapper) -> None: ...
    pass
class ProductAttributeWrapper(ObjectWrapper):
    def GetAttributeType(self) -> str: ...
    def GetLabel(self) -> UnrealStringWrapper: ...
    def GetTypename(self) -> str: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ProductAttributeWrapper) -> None: ...
    pass
class ProductAttribute_AnimatedSkinLabelWrapper(ProductAttributeWrapper, ObjectWrapper):
    def GetAnimatedLabel(self) -> UnrealStringWrapper: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ProductAttribute_AnimatedSkinLabelWrapper) -> None: ...
    pass
class ProductAttribute_BlueprintCostWrapper(ProductAttributeWrapper, ObjectWrapper):
    def GetCost(self) -> int: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ProductAttribute_BlueprintCostWrapper) -> None: ...
    pass
class ProductAttribute_BlueprintWrapper(ProductAttributeWrapper, ObjectWrapper):
    def GetCachedBlueprintSeriesID(self) -> int: ...
    def GetProductID(self) -> int: ...
    def GetSortLabel(self) -> UnrealStringWrapper: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ProductAttribute_BlueprintWrapper) -> None: ...
    pass
class ProductAttribute_BodyCompatibilityWrapper(ProductAttributeWrapper, ObjectWrapper):
    def GetCompatibleBodies(self) -> ArrayWrapper<ProductWrapper>: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ProductAttribute_BodyCompatibilityWrapper) -> None: ...
    pass
class ProductAttribute_CertifiedWrapper(ProductAttributeWrapper, ObjectWrapper):
    def GetDescription(self) -> UnrealStringWrapper: ...
    def GetRank(self) -> int: ...
    def GetRankLabel(self) -> UnrealStringWrapper: ...
    def GetSortLabel(self) -> UnrealStringWrapper: ...
    def GetStatId(self) -> int: ...
    def GetStatValue(self) -> int: ...
    def GetValueKeyName(self) -> str: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ProductAttribute_CertifiedWrapper) -> None: ...
    pass
class ProductAttribute_CurrencyWrapper(ProductAttributeWrapper, ObjectWrapper):
    def GetCurrencyID(self) -> int: ...
    def GetSortLabel(self) -> UnrealStringWrapper: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ProductAttribute_CurrencyWrapper) -> None: ...
    pass
class ProductAttribute_PaintedWrapper(ProductAttributeWrapper, ObjectWrapper):
    def GetPaintID(self) -> int: ...
    def GetSortLabel(self) -> UnrealStringWrapper: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ProductAttribute_PaintedWrapper) -> None: ...
    pass
class ProductAttribute_QualityWrapper(ProductAttributeWrapper, ObjectWrapper):
    def GetQuality(self) -> int: ...
    def ProductQualityToString(self, InQuality: int) -> UnrealStringWrapper: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ProductAttribute_QualityWrapper) -> None: ...
    pass
class ProductAttribute_SpecialEditionSettingsWrapper(ProductAttributeWrapper, ObjectWrapper):
    def GetEditions(self) -> typing.List[SpecialEdition]: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ProductAttribute_SpecialEditionSettingsWrapper) -> None: ...
    pass
class ProductAttribute_SpecialEditionWrapper(ProductAttributeWrapper, ObjectWrapper):
    def GetEditionID(self) -> int: ...
    def GetOverrideProductID(self, ProductID: int) -> int: ...
    def GetSortLabel(self) -> UnrealStringWrapper: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ProductAttribute_SpecialEditionWrapper) -> None: ...
    pass
class ProductAttribute_TeamEditionUploadWrapper(ProductAttributeWrapper, ObjectWrapper):
    def GetSupportedTeamEditions(self) -> ArrayWrapper<int>: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ProductAttribute_TeamEditionUploadWrapper) -> None: ...
    pass
class ProductAttribute_TeamEditionWrapper(ProductAttributeWrapper, ObjectWrapper):
    def GetId(self) -> int: ...
    def GetSortLabel(self) -> UnrealStringWrapper: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ProductAttribute_TeamEditionWrapper) -> None: ...
    pass
class ProductAttribute_UnlockMethodWrapper(ProductAttributeWrapper, ObjectWrapper):
    def GetUnlockMethod(self) -> int: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ProductAttribute_UnlockMethodWrapper) -> None: ...
    pass
class ProductSlotWrapper(ObjectWrapper):
    def GetDescription(self) -> UnrealStringWrapper: ...
    def GetLabel(self) -> UnrealStringWrapper: ...
    def GetOnlineLabel(self) -> UnrealStringWrapper: ...
    def GetPluralLabel(self) -> UnrealStringWrapper: ...
    def GetSlotIndex(self) -> int: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ProductSlotWrapper) -> None: ...
    pass
class ProductTemplateWrapper(ObjectWrapper):
    def GetQuality(self) -> int: ...
    def GetRequiredProduct(self) -> ProductWrapper: ...
    def GetSlot(self) -> ProductSlotWrapper: ...
    def GetUnlockMethod(self) -> int: ...
    def GetbLicensed(self) -> int: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ProductTemplateWrapper) -> None: ...
    pass
class ProductTradeInWrapper(ObjectWrapper):
    def GetProducts(self) -> ArrayWrapper<OnlineProductWrapper>: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ProductTradeInWrapper) -> None: ...
    pass
class ProductWrapper(ProductTemplateWrapper, ObjectWrapper):
    def GetAsciiLabel(self) -> UnrealStringWrapper: ...
    def GetAssetPackageName(self) -> str: ...
    def GetAssetPath(self) -> UnrealStringWrapper: ...
    def GetAttributes(self) -> ArrayWrapper<ProductAttributeWrapper>: ...
    def GetDisplayLabelSlot(self) -> UnrealStringWrapper: ...
    def GetID(self) -> int: ...
    def GetLabel(self) -> UnrealStringWrapper: ...
    def GetLongLabel(self) -> UnrealStringWrapper: ...
    def GetQuality(self) -> int: ...
    def GetSortLabel(self) -> UnrealStringWrapper: ...
    def GetThumbnailAssetName(self) -> str: ...
    def GetThumbnailAssetPath(self) -> UnrealStringWrapper: ...
    def GetThumbnailPackageName(self) -> str: ...
    def GetThumbnailPackageNameForLoad(self) -> UnrealStringWrapper: ...
    def GetTrademarkLabel(self) -> UnrealStringWrapper: ...
    def IsBlueprint(self) -> bool: ...
    def IsContainer(self) -> bool: ...
    def IsContainerKey(self) -> bool: ...
    def IsContainerUnlocked(self) -> bool: ...
    def IsCurrency(self) -> bool: ...
    def IsLicensed(self) -> bool: ...
    def IsNull(self) -> bool: ...
    def IsPaintable(self) -> bool: ...
    def IsPlatformExclusive(self) -> bool: ...
    def IsSchematic(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ProductWrapper) -> None: ...
    pass
class ProfileCameraSettings():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: ProfileCameraSettings) -> None: ...
    @property
    def Distance(self) -> float:
        """
        :type: float
        """
    @Distance.setter
    def Distance(self, arg1: float) -> None:
        pass
    @property
    def FOV(self) -> float:
        """
        :type: float
        """
    @FOV.setter
    def FOV(self, arg1: float) -> None:
        pass
    @property
    def Height(self) -> float:
        """
        :type: float
        """
    @Height.setter
    def Height(self, arg1: float) -> None:
        pass
    @property
    def Pitch(self) -> float:
        """
        :type: float
        """
    @Pitch.setter
    def Pitch(self, arg1: float) -> None:
        pass
    @property
    def Stiffness(self) -> float:
        """
        :type: float
        """
    @Stiffness.setter
    def Stiffness(self, arg1: float) -> None:
        pass
    @property
    def SwivelSpeed(self) -> float:
        """
        :type: float
        """
    @SwivelSpeed.setter
    def SwivelSpeed(self, arg1: float) -> None:
        pass
    @property
    def TransitionSpeed(self) -> float:
        """
        :type: float
        """
    @TransitionSpeed.setter
    def TransitionSpeed(self, arg1: float) -> None:
        pass
    pass
class Quat():
    def __imul__(self, q2: Quat) -> Quat: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: Quat) -> None: ...
    @typing.overload
    def __init__(self, w: float, x: float, y: float, z: float) -> None: ...
    def __mul__(self, q2: Quat) -> Quat: ...
    def conjugate(self) -> Quat: ...
    def normalize(self) -> Quat: ...
    @property
    def W(self) -> float:
        """
        :type: float
        """
    @W.setter
    def W(self, arg1: float) -> None:
        pass
    @property
    def X(self) -> float:
        """
        :type: float
        """
    @X.setter
    def X(self, arg1: float) -> None:
        pass
    @property
    def Y(self) -> float:
        """
        :type: float
        """
    @Y.setter
    def Y(self, arg1: float) -> None:
        pass
    @property
    def Z(self) -> float:
        """
        :type: float
        """
    @Z.setter
    def Z(self, arg1: float) -> None:
        pass
    pass
class BallWrapper(RBActorWrapper, ActorWrapper, ObjectWrapper):
    def DoDestroy(self) -> None: ...
    def DoExplode(self) -> None: ...
    def EventHitGoal(self, Ball: BallWrapper, Goal: GoalWrapper) -> None: ...
    def Explode(self, ExplosionGoal: GoalWrapper, ExplodeLocation: Vector, Scorer: PriWrapper) -> None: ...
    def FellOutOfWorld(self) -> None: ...
    def GetAdditionalCarBounceScaleZ(self, Car: CarWrapper) -> float: ...
    def GetAdditionalCarGroundBounceScaleXY(self) -> float: ...
    def GetAdditionalCarGroundBounceScaleZ(self) -> float: ...
    def GetCurrentAffector(self) -> CarWrapper: ...
    def GetEndOfGameFXArchetype(self) -> FXActorWrapper: ...
    def GetExplosionTime(self) -> float: ...
    def GetGameEvent(self) -> ServerWrapper: ...
    def GetGroundForce(self) -> float: ...
    def GetHitTeamNum(self) -> int: ...
    def GetInitialLocation(self) -> Vector: ...
    def GetLastCalculateCarHit(self) -> float: ...
    def GetLastHitWorldTime(self) -> float: ...
    def GetLastPredictionTime(self) -> float: ...
    def GetLastTouchTime(self) -> float: ...
    def GetMagnusCoefficient(self) -> Vector: ...
    def GetOldLocation(self) -> Vector: ...
    def GetPredictionTimestep(self) -> float: ...
    def GetRadius(self) -> float: ...
    def GetReplicatedAddedCarBounceScale(self) -> float: ...
    def GetReplicatedBallGravityScale(self) -> float: ...
    def GetReplicatedBallMaxLinearSpeedScale(self) -> float: ...
    def GetReplicatedBallScale(self) -> float: ...
    def GetReplicatedWorldBounceScale(self) -> float: ...
    def GetTrajectoryStartLocation(self) -> Vector: ...
    def GetTrajectoryStartRotation(self) -> Rotator: ...
    def GetTrajectoryStartVelocity(self) -> Vector: ...
    def GetVisualRadius(self) -> float: ...
    def GetbAllowPlayerExplosionOverride(self) -> int: ...
    def GetbCanBeAttached(self) -> int: ...
    def GetbEndOfGameHidden(self) -> int: ...
    def GetbFadeIn(self) -> int: ...
    def GetbFadeOut(self) -> int: ...
    def GetbItemFreeze(self) -> int: ...
    def GetbNotifyGroundHit(self) -> int: ...
    def GetbPredictionOnGround(self) -> int: ...
    def InitAk(self) -> None: ...
    def IsGroundHit(self, HitNormal: Vector) -> bool: ...
    def IsRoundActive(self) -> bool: ...
    def Launch(self, LaunchPosition: Vector, LaunchDirection: Vector) -> None: ...
    def OnCarTouch(self, HitCar: CarWrapper, HitType: int) -> None: ...
    def PredictPosition(self, timeAhead: float) -> PredictionInfo: ...
    def RecordCarHit(self, HitCar: CarWrapper, HitLocation: Vector, HitNormal: Vector, HitType: int) -> None: ...
    def SetAdditionalCarGroundBounceScaleXY(self, newAdditionalCarGroundBounceScaleXY: float) -> None: ...
    def SetAdditionalCarGroundBounceScaleZ(self, newAdditionalCarGroundBounceScaleZ: float) -> None: ...
    def SetBallGravityScale(self, InBallGravityScale: float) -> None: ...
    def SetBallMaxLinearSpeedScale(self, InMaxLinearSpeedScale: float) -> None: ...
    def SetBallScale(self, NewScale: float) -> None: ...
    def SetCarBounceScale(self, NewScale: float) -> None: ...
    def SetCurrentAffector(self, newCurrentAffector: CarWrapper) -> None: ...
    def SetEndOfGameFXArchetype(self, newEndOfGameFXArchetype: FXActorWrapper) -> None: ...
    def SetEndOfGameHidden(self) -> None: ...
    def SetExplosionTime(self, newExplosionTime: float) -> None: ...
    def SetGroundForce(self, newGroundForce: float) -> None: ...
    def SetHitTeamNum(self, newHitTeamNum: int) -> None: ...
    def SetInitialLocation(self, newInitialLocation: Vector) -> None: ...
    def SetInitialRotation(self, newInitialRotation: Rotator) -> None: ...
    def SetLastPredictionTime(self, newLastPredictionTime: float) -> None: ...
    def SetMagnusCoefficient(self, newMagnusCoefficient: Vector) -> None: ...
    def SetOldLocation(self, newOldLocation: Vector) -> None: ...
    def SetPredictionTimestep(self, newPredictionTimestep: float) -> None: ...
    def SetRadius(self, newRadius: float) -> None: ...
    def SetReplicatedAddedCarBounceScale(self, newReplicatedAddedCarBounceScale: float) -> None: ...
    def SetReplicatedBallGravityScale(self, newReplicatedBallGravityScale: float) -> None: ...
    def SetReplicatedBallMaxLinearSpeedScale(self, newReplicatedBallMaxLinearSpeedScale: float) -> None: ...
    def SetReplicatedBallScale(self, newReplicatedBallScale: float) -> None: ...
    def SetReplicatedWorldBounceScale(self, newReplicatedWorldBounceScale: float) -> None: ...
    def SetVisualRadius(self, newVisualRadius: float) -> None: ...
    def SetWorldBounceScale(self, NewScale: float) -> None: ...
    def SetbAllowPlayerExplosionOverride(self, newbAllowPlayerExplosionOverride: int) -> None: ...
    def SetbCanBeAttached(self, newbCanBeAttached: int) -> None: ...
    def SetbEndOfGameHidden(self, newbEndOfGameHidden: int) -> None: ...
    def SetbFadeIn(self, newbFadeIn: int) -> None: ...
    def SetbFadeOut(self, newbFadeOut: int) -> None: ...
    def SetbItemFreeze(self, newbItemFreeze: int) -> None: ...
    def SetbNotifyGroundHit(self, newbNotifyGroundHit: int) -> None: ...
    def SetbPredictionOnGround(self, newbPredictionOnGround: int) -> None: ...
    def ShouldDrawTrajectory(self) -> bool: ...
    def TurnOff(self) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: BallWrapper) -> None: ...
    def eventOnHitGoal(self, Goal: GoalWrapper, HitLoc: Vector) -> None: ...
    pass
class RBState():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: RBState) -> None: ...
    @property
    def AngularVelocity(self) -> Vector:
        """
        :type: Vector
        """
    @AngularVelocity.setter
    def AngularVelocity(self, arg1: Vector) -> None:
        pass
    @property
    def LinearVelocity(self) -> Vector:
        """
        :type: Vector
        """
    @LinearVelocity.setter
    def LinearVelocity(self, arg1: Vector) -> None:
        pass
    @property
    def Location(self) -> Vector:
        """
        :type: Vector
        """
    @Location.setter
    def Location(self, arg1: Vector) -> None:
        pass
    @property
    def Quaternion(self) -> Quat:
        """
        :type: Quat
        """
    @Quaternion.setter
    def Quaternion(self, arg1: Quat) -> None:
        pass
    @property
    def Time(self) -> float:
        """
        :type: float
        """
    @Time.setter
    def Time(self, arg1: float) -> None:
        pass
    @property
    def bNewData(self) -> int:
        """
        :type: int
        """
    @bNewData.setter
    def bNewData(self, arg1: int) -> None:
        pass
    @property
    def bSleeping(self) -> int:
        """
        :type: int
        """
    @bSleeping.setter
    def bSleeping(self, arg1: int) -> None:
        pass
    pass
class RecordedSample():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: RecordedSample) -> None: ...
    @property
    def High(self) -> float:
        """
        :type: float
        """
    @High.setter
    def High(self, arg1: float) -> None:
        pass
    @property
    def Low(self) -> float:
        """
        :type: float
        """
    @Low.setter
    def Low(self, arg1: float) -> None:
        pass
    pass
class Region():
    """
    Members:

      USE

      EU

      USW

      ASC

      ASM

      JPN

      ME

      OCE

      SAF

      SAM
    """
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    ASC: bakkesmod.Region # value = <Region.ASC: 3>
    ASM: bakkesmod.Region # value = <Region.ASM: 4>
    EU: bakkesmod.Region # value = <Region.EU: 1>
    JPN: bakkesmod.Region # value = <Region.JPN: 5>
    ME: bakkesmod.Region # value = <Region.ME: 6>
    OCE: bakkesmod.Region # value = <Region.OCE: 7>
    SAF: bakkesmod.Region # value = <Region.SAF: 8>
    SAM: bakkesmod.Region # value = <Region.SAM: 9>
    USE: bakkesmod.Region # value = <Region.USE: 0>
    USW: bakkesmod.Region # value = <Region.USW: 2>
    __members__: dict # value = {'USE': <Region.USE: 0>, 'EU': <Region.EU: 1>, 'USW': <Region.USW: 2>, 'ASC': <Region.ASC: 3>, 'ASM': <Region.ASM: 4>, 'JPN': <Region.JPN: 5>, 'ME': <Region.ME: 6>, 'OCE': <Region.OCE: 7>, 'SAF': <Region.SAF: 8>, 'SAM': <Region.SAM: 9>}
    pass
class ReplayDirectorWrapper(ActorWrapper, ObjectWrapper):
    def BuildFocusCars(self) -> None: ...
    def EventAutoSaveChanged(self, Director: ReplayDirectorWrapper) -> None: ...
    def EventFocusCarChanged(self, NewFocusCar: ActorWrapper) -> None: ...
    def EventReplayFinished(self, Director: ReplayDirectorWrapper) -> None: ...
    def EventScoreDataChanged(self, Director: ReplayDirectorWrapper) -> None: ...
    def GetBallSpawnTime(self) -> float: ...
    def GetFocusBall(self) -> ActorWrapper: ...
    def GetFocusCar(self) -> ActorWrapper: ...
    def GetFocusCarChangeTime(self) -> float: ...
    def GetFocusCarIdx(self) -> int: ...
    def GetFocusHitIndex(self) -> int: ...
    def GetForceCutToFocusActors(self) -> int: ...
    def GetHighlightReplayDuration(self) -> float: ...
    def GetMaxReplayTime(self) -> float: ...
    def GetMinReplayTime(self) -> float: ...
    def GetNextHighlightFrame(self) -> int: ...
    def GetReplay(self) -> ReplaySoccarWrapper: ...
    def GetReplayPadding(self) -> float: ...
    def GetReplayScoreData(self) -> ReplayScoreData: ...
    def GetReplayStartGameTime(self) -> float: ...
    def GetReplayStartTime(self) -> float: ...
    def GetReplayTimeSeconds(self) -> float: ...
    def GetScoreHitIndex(self) -> int: ...
    def GetScoreTime(self) -> float: ...
    def GetScoredGoal(self) -> GoalWrapper: ...
    def GetScoredOnTeam(self) -> int: ...
    def GetSlomoDefendDistance(self) -> float: ...
    def GetSlomoDefendTime(self) -> float: ...
    def GetSlomoPostScoreTime(self) -> float: ...
    def GetSlomoPreScoreTime(self) -> float: ...
    def GetSlomoTimeDilation(self) -> float: ...
    def GetSoccarGame(self) -> ServerWrapper: ...
    def GetTimeBeforeHighlightReplay(self) -> float: ...
    def GetbAutoSave(self) -> int: ...
    def GetbSlomo(self) -> int: ...
    def GetbSlomoForDefender(self) -> int: ...
    def HandleAllTeamsCreated(self, TeamGame: TeamGameEventWrapper) -> None: ...
    def HandleGameStateChanged(self, G: GameEventWrapper) -> None: ...
    def HandleReplayFinished(self, InReplay: ReplayWrapper) -> None: ...
    def HandleScoreUpdated(self, Team: TeamWrapper) -> None: ...
    def OnScoreDataChanged(self) -> None: ...
    def OnSoccarGameSet(self) -> None: ...
    def PlayRandomHighlight(self) -> None: ...
    def RecordPlayers(self) -> None: ...
    def SaveUserKeyframe(self) -> None: ...
    def SetAutoSave(self) -> None: ...
    def SetBallSpawnTime(self, newBallSpawnTime: float) -> None: ...
    def SetFocusActors(self, NewCar: ActorWrapper, NewBall: ActorWrapper) -> None: ...
    def SetFocusBall(self, newFocusBall: ActorWrapper) -> None: ...
    def SetFocusCar(self, newFocusCar: ActorWrapper) -> None: ...
    def SetFocusCarChangeTime(self, newFocusCarChangeTime: float) -> None: ...
    def SetFocusCarIdx(self, newFocusCarIdx: int) -> None: ...
    def SetFocusHitIndex(self, newFocusHitIndex: int) -> None: ...
    def SetForceCutToFocusActors(self, newForceCutToFocusActors: int) -> None: ...
    def SetGameEvent(self, InGameEvent: ServerWrapper) -> None: ...
    def SetHighlightReplayDuration(self, newHighlightReplayDuration: float) -> None: ...
    def SetMaxReplayTime(self, newMaxReplayTime: float) -> None: ...
    def SetMinReplayTime(self, newMinReplayTime: float) -> None: ...
    def SetReplay(self, newReplay: ReplaySoccarWrapper) -> None: ...
    def SetReplayPadding(self, newReplayPadding: float) -> None: ...
    def SetReplayStartGameTime(self, newReplayStartGameTime: float) -> None: ...
    def SetScoreHitIndex(self, newScoreHitIndex: int) -> None: ...
    def SetScoreTime(self, newScoreTime: float) -> None: ...
    def SetScoredGoal(self, newScoredGoal: GoalWrapper) -> None: ...
    def SetScoredOnTeam(self, newScoredOnTeam: int) -> None: ...
    def SetSlomo2(self, bNewSlomo: int) -> None: ...
    def SetSlomoDefendDistance(self, newSlomoDefendDistance: float) -> None: ...
    def SetSlomoDefendTime(self, newSlomoDefendTime: float) -> None: ...
    def SetSlomoForDefender(self, Ball: BallWrapper, DefendingTeam: int) -> None: ...
    def SetSlomoPostScoreTime(self, newSlomoPostScoreTime: float) -> None: ...
    def SetSlomoPreScoreTime(self, newSlomoPreScoreTime: float) -> None: ...
    def SetSlomoTimeDilation(self, newSlomoTimeDilation: float) -> None: ...
    def SetSoccarGame(self, newSoccarGame: ServerWrapper) -> None: ...
    def SetTimeBeforeHighlightReplay(self, newTimeBeforeHighlightReplay: float) -> None: ...
    def SetbAutoSave(self, newbAutoSave: int) -> None: ...
    def SetbSlomo(self, newbSlomo: int) -> None: ...
    def SetbSlomoForDefender(self, newbSlomoForDefender: int) -> None: ...
    def ShouldSlomo(self) -> bool: ...
    def UpdateFocusActors(self) -> None: ...
    def UpdateSlomo(self) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ReplayDirectorWrapper) -> None: ...
    def eventDestroyed(self) -> None: ...
    def eventTick(self, DeltaTime: float) -> None: ...
    pass
class ReplayScoreData():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: ReplayScoreData) -> None: ...
    @property
    def AssistedBy(self) -> int:
        """
        :type: int
        """
    @AssistedBy.setter
    def AssistedBy(self, arg1: int) -> None:
        pass
    @property
    def ScoreTeam(self) -> int:
        """
        :type: int
        """
    @ScoreTeam.setter
    def ScoreTeam(self, arg1: int) -> None:
        pass
    @property
    def ScoredBy(self) -> int:
        """
        :type: int
        """
    @ScoredBy.setter
    def ScoredBy(self, arg1: int) -> None:
        pass
    @property
    def Speed(self) -> float:
        """
        :type: float
        """
    @Speed.setter
    def Speed(self, arg1: float) -> None:
        pass
    @property
    def Time(self) -> float:
        """
        :type: float
        """
    @Time.setter
    def Time(self, arg1: float) -> None:
        pass
    pass
class ServerWrapper(TeamGameEventWrapper, GameEventWrapper, ActorWrapper, ObjectWrapper):
    def AddBallTrajectory(self, InBall: BallWrapper) -> None: ...
    def AddGameBall(self, Ball: BallWrapper) -> None: ...
    def AddLocalPlayer(self, Player: PlayerControllerWrapper) -> None: ...
    def AddPRI(self, PRI: PriWrapper) -> None: ...
    def AllowDynamicCrowd(self) -> bool: ...
    def AssignCustomTeamSettings(self) -> None: ...
    def BeginHighlightsReplay(self) -> None: ...
    def CanAwardPoints(self) -> bool: ...
    def CanEnableCarPodiumMovement(self) -> bool: ...
    def CanInitClubMatch(self) -> bool: ...
    def CanSpawnBots(self) -> bool: ...
    def CanUpdateGameTime(self) -> bool: ...
    def CanUseBallCam(self) -> bool: ...
    def CheckForAutoBalance(self) -> None: ...
    def CheckForCountdownAction(self) -> None: ...
    def CheckJoinInProgress(self, PRI: PriWrapper) -> None: ...
    def CheckStart(self) -> None: ...
    def ClearReplicatedScoredOnTeam(self) -> None: ...
    def ClearReplicatedStatEvent(self) -> None: ...
    def CreateGoalIndicators(self, Player: PlayerControllerWrapper) -> None: ...
    def DestroyBalls(self) -> None: ...
    def DestroyCars(self) -> None: ...
    def DestroyGoalIndicators(self, Player: PlayerControllerWrapper) -> None: ...
    def DetermineAssistTouchIndex(self, Ball: BallWrapper, ScoreIdx: int) -> int: ...
    def DetermineScoreTouchIndex(self, Ball: BallWrapper, Goal: GoalWrapper) -> int: ...
    def DisableGoalReset(self) -> None: ...
    def DisableStatXP(self) -> bool: ...
    def EnableGoalReset(self) -> None: ...
    def EndGame(self) -> None: ...
    def EndRound(self) -> None: ...
    def EnoughTimePassedToForfeit(self) -> bool: ...
    def EventGameWinnerSet(self, GameEvent: ServerWrapper) -> None: ...
    def EventGoalScored(self, GameEvent: ServerWrapper, Ball: BallWrapper, Goal: GoalWrapper, ScoreIndex: int, AssistIdx: int) -> None: ...
    def FinishEvent(self) -> None: ...
    def ForceMatchStart(self) -> None: ...
    def ForceOvertime(self) -> None: ...
    def FreezePawns(self) -> None: ...
    def GenerateGoalAimLocation(self, goalNumber: int, currentBallLocation: Vector) -> Vector: ...
    def GenerateShot(self, startPos: Vector, destination: Vector, speed: float) -> Vector: ...
    def GetAssistMaxTime(self) -> float: ...
    def GetAutoBalanceDifference(self) -> int: ...
    def GetBall(self) -> BallWrapper: ...
    def GetBallArchetype(self) -> BallWrapper: ...
    def GetBallHasBeenHitStartDelay(self) -> float: ...
    def GetBallSpawnPoint(self) -> ActorWrapper: ...
    def GetFastestGoalPlayer(self) -> PriWrapper: ...
    def GetFastestGoalSpeed(self) -> float: ...
    def GetFieldCenter(self) -> Vector: ...
    def GetFurthestGoal(self) -> float: ...
    def GetFurthestGoalPlayer(self) -> PriWrapper: ...
    def GetGameBalls(self) -> ArrayWrapper<BallWrapper>: ...
    def GetGameCar(self) -> CarWrapper: ...
    def GetGameSpeed(self) -> float: ...
    def GetGameTime(self) -> int: ...
    def GetGameTimeRemaining(self) -> float: ...
    def GetGameWinner(self) -> TeamWrapper: ...
    def GetGoalExtent(self, goalNumber: int) -> Vector: ...
    def GetGoalLocation(self, goalNumber: int) -> Vector: ...
    def GetGoals(self) -> ArrayWrapper<GoalWrapper>: ...
    def GetLobbyCountdown(self) -> int: ...
    def GetLobbyEndCountdown(self) -> int: ...
    def GetLobbySpawnRestartTime(self) -> int: ...
    def GetLobbyTime(self) -> float: ...
    def GetMVP(self) -> PriWrapper: ...
    def GetMatchGUID(self) -> str: ...
    def GetMatchWinner(self) -> TeamWrapper: ...
    def GetMaxScore(self) -> int: ...
    def GetNextSpawnIndex(self) -> int: ...
    def GetOvertimeTimePlayed(self) -> float: ...
    def GetPauser(self) -> PlayerControllerWrapper: ...
    def GetPlayerCarCount(self) -> int: ...
    def GetPodiumDelay(self) -> float: ...
    def GetPodiumTime(self) -> float: ...
    def GetPostGoalTime(self) -> float: ...
    def GetReplayDirector(self) -> ReplayDirectorWrapper: ...
    def GetReplayDirectorArchetype(self) -> ReplayDirectorWrapper: ...
    def GetReplicatedScoredOnTeam(self) -> int: ...
    def GetReplicatedServerPerformanceState(self) -> int: ...
    def GetRoundNum(self) -> int: ...
    def GetScoreSlomoTime(self) -> float: ...
    def GetSecondsElapsed(self) -> float: ...
    def GetSecondsRemaining(self) -> int: ...
    def GetSecondsRemainingCountdown(self) -> int: ...
    def GetSeriesLength(self) -> int: ...
    def GetSlowestGoalPlayer(self) -> PriWrapper: ...
    def GetSlowestGoalSpeed(self) -> float: ...
    def GetTestCarArchetype(self) -> CarWrapper: ...
    def GetTotalGameBalls(self) -> int: ...
    def GetTotalGameTimePlayed(self) -> float: ...
    def GetTotalScore(self) -> int: ...
    def GetWaitTimeRemaining(self) -> int: ...
    def GetWarmupTime(self) -> int: ...
    def GetWinningTeam(self) -> TeamWrapper: ...
    def GetbBallHasBeenHit(self) -> int: ...
    def GetbClubMatch(self) -> int: ...
    def GetbDisableGoalDelay(self) -> int: ...
    def GetbMatchEnded(self) -> int: ...
    def GetbNoContest(self) -> int: ...
    def GetbOverTime(self) -> int: ...
    def GetbPlayReplays(self) -> int: ...
    def GetbRoundActive(self) -> int: ...
    def GetbShowIntroScene(self) -> int: ...
    def GetbShowNoScorerGoalMessage(self) -> int: ...
    def GetbUnlimitedTime(self) -> int: ...
    def GotoPodiumSpotlight(self) -> None: ...
    def HandleCarSet(self, InPRI: PriWrapper) -> None: ...
    def HandleCarTouch(self, Ball: BallWrapper, HitCar: CarWrapper, HitType: int) -> None: ...
    def HandleCountdownTick(self) -> None: ...
    def HandleHitGoal(self, Ball: BallWrapper, Goal: GoalWrapper) -> None: ...
    def HandleReplayFinished(self, InReplay: ReplayDirectorWrapper) -> None: ...
    def HandleScoreUpdated(self, Team: TeamWrapper) -> None: ...
    def HasAuthority(self) -> bool: ...
    def HasWinner(self) -> bool: ...
    def InitBotDetection(self) -> None: ...
    def InitCrowdManager(self) -> None: ...
    def InitField(self) -> None: ...
    def InitGame2(self, Options: str) -> None: ...
    def InitGameObserver(self) -> None: ...
    def InitMutators(self) -> None: ...
    def IsBallMovingTowardsGoal(self, goalNo: int, bw: BallWrapper) -> bool: ...
    def IsInGoal(self, vec: Vector) -> bool: ...
    def LobbyCountdownTick(self) -> None: ...
    def MVPSort(self, A: PriWrapper, B: PriWrapper) -> int: ...
    def NotifyKismetOfCurrentTime(self) -> None: ...
    def OnAllTeamsCreated(self) -> None: ...
    def OnBallHasBeenHit(self) -> None: ...
    def OnBallSpawned(self, NewBall: BallWrapper) -> None: ...
    def OnClubMatch(self) -> None: ...
    def OnGameTimeUpdated(self) -> None: ...
    def OnGameWinnerSet(self) -> None: ...
    def OnInit(self) -> None: ...
    def OnMatchEnded(self) -> None: ...
    def OnMatchWinnerSet(self) -> None: ...
    def OnMyHalf(self, TestLocation: Vector, TeamNum: int) -> bool: ...
    def OnOvertimeUpdated(self) -> None: ...
    def RecordRecentPlayers(self) -> None: ...
    def RemoveGameBall(self, Ball: BallWrapper) -> None: ...
    def RemoveLocalPlayer(self, Player: PlayerControllerWrapper) -> None: ...
    def RemovePRI(self, PRI: PriWrapper) -> None: ...
    def RemovePlayer(self, Player: ControllerWrapper) -> None: ...
    def RemoveTeamSelection(self) -> None: ...
    def ReplicateSkillTiers(self) -> None: ...
    def ResetBalls(self) -> None: ...
    def ResetGame(self) -> None: ...
    def ResetPickups(self) -> None: ...
    def ResetPlayers(self) -> None: ...
    def SaveLocalPlayerStats(self) -> None: ...
    def SetAssistMaxTime(self, newAssistMaxTime: float) -> None: ...
    def SetAutoBalanceDifference(self, newAutoBalanceDifference: int) -> None: ...
    def SetBallArchetype(self, newBallArchetype: BallWrapper) -> None: ...
    def SetBallEventListeners(self, Ball: BallWrapper, bListen: int) -> None: ...
    def SetBallHasBeenHit2(self) -> None: ...
    def SetBallHasBeenHitStartDelay(self, newBallHasBeenHitStartDelay: float) -> None: ...
    def SetBallSpawnPoint(self, newBallSpawnPoint: ActorWrapper) -> None: ...
    def SetDisableGoalDelay(self, bInDisableGoalDelay: int) -> None: ...
    def SetFastestGoalPlayer(self, newFastestGoalPlayer: PriWrapper) -> None: ...
    def SetFastestGoalSpeed(self, newFastestGoalSpeed: float) -> None: ...
    def SetFieldCenter(self, newFieldCenter: Vector) -> None: ...
    def SetFurthestGoal(self, newFurthestGoal: float) -> None: ...
    def SetFurthestGoalPlayer(self, newFurthestGoalPlayer: PriWrapper) -> None: ...
    def SetGameSpeed(self, GameSpeed: float) -> None: ...
    def SetGameTime(self, newGameTime: int) -> None: ...
    def SetGameTimeRemaining(self, newGameTimeRemaining: float) -> None: ...
    def SetGameWinner(self, newGameWinner: TeamWrapper) -> None: ...
    def SetLobbyCountdown(self, newLobbyCountdown: int) -> None: ...
    def SetLobbyEndCountdown(self, newLobbyEndCountdown: int) -> None: ...
    def SetLobbySpawnRestartTime(self, newLobbySpawnRestartTime: int) -> None: ...
    def SetLobbyTime(self, newLobbyTime: float) -> None: ...
    def SetMVP(self, newMVP: PriWrapper) -> None: ...
    def SetMatchGUID(self, s: str) -> None: ...
    def SetMatchWinner(self, newMatchWinner: TeamWrapper) -> None: ...
    def SetMaxScore(self, newMaxScore: int) -> None: ...
    def SetNextSpawnIndex(self, newNextSpawnIndex: int) -> None: ...
    def SetOvertimeTimePlayed(self, newOvertimeTimePlayed: float) -> None: ...
    def SetPaused(self, InPauser: PlayerControllerWrapper, bInPaused: int) -> None: ...
    def SetPauser(self, newPauser: PlayerControllerWrapper) -> None: ...
    def SetPodiumDelay(self, newPodiumDelay: float) -> None: ...
    def SetPodiumTime(self, newPodiumTime: float) -> None: ...
    def SetPostGoalTime(self, newPostGoalTime: float) -> None: ...
    def SetReplayDirector(self, newReplayDirector: ReplayDirectorWrapper) -> None: ...
    def SetReplayDirectorArchetype(self, newReplayDirectorArchetype: ReplayDirectorWrapper) -> None: ...
    def SetReplicatedScoredOnTeam(self, newReplicatedScoredOnTeam: int) -> None: ...
    def SetReplicatedServerPerformanceState(self, newReplicatedServerPerformanceState: int) -> None: ...
    def SetRoundNum(self, newRoundNum: int) -> None: ...
    def SetScoreAndTime(self, PC: PlayerControllerWrapper, NewScoreTeam0: int, NewScoreTeam1: int, InGameTimeRemaining: int, bInOvertime: int, bRestartRound: int) -> None: ...
    def SetScoreSlomoTime(self, newScoreSlomoTime: float) -> None: ...
    def SetSecondsElapsed(self, SecondsElapsed: float) -> None: ...
    def SetSecondsRemaining(self, newSecondsRemaining: int) -> None: ...
    def SetSecondsRemainingCountdown(self, newSecondsRemainingCountdown: int) -> None: ...
    def SetSeriesLength(self, newSeriesLength: int) -> None: ...
    def SetSlowestGoalPlayer(self, newSlowestGoalPlayer: PriWrapper) -> None: ...
    def SetSlowestGoalSpeed(self, newSlowestGoalSpeed: float) -> None: ...
    def SetTestCarArchetype(self, newTestCarArchetype: CarWrapper) -> None: ...
    def SetTotalGameBalls(self, newTotalGameBalls: int) -> None: ...
    def SetTotalGameBalls2(self, TotalBalls: int) -> None: ...
    def SetTotalGameTimePlayed(self, newTotalGameTimePlayed: float) -> None: ...
    def SetWaitTimeRemaining(self, newWaitTimeRemaining: int) -> None: ...
    def SetWarmupTime(self, newWarmupTime: int) -> None: ...
    def SetbBallHasBeenHit(self, newbBallHasBeenHit: int) -> None: ...
    def SetbClubMatch(self, newbClubMatch: int) -> None: ...
    def SetbDisableGoalDelay(self, newbDisableGoalDelay: int) -> None: ...
    def SetbMatchEnded(self, newbMatchEnded: int) -> None: ...
    def SetbNoContest(self, newbNoContest: int) -> None: ...
    def SetbOverTime(self, newbOverTime: int) -> None: ...
    def SetbPlayReplays(self, newbPlayReplays: int) -> None: ...
    def SetbRoundActive(self, newbRoundActive: int) -> None: ...
    def SetbShowIntroScene(self, newbShowIntroScene: int) -> None: ...
    def SetbShowNoScorerGoalMessage(self, newbShowNoScorerGoalMessage: int) -> None: ...
    def SetbUnlimitedTime(self, newbUnlimitedTime: int) -> None: ...
    def ShouldAllowVoteToForfeit(self) -> bool: ...
    def ShouldCountUp(self) -> bool: ...
    def ShouldCountdownResumeFromPause(self) -> bool: ...
    def ShouldDoPodiumSpotlight(self) -> bool: ...
    def ShouldHaveLeaveMatchPenalty(self) -> bool: ...
    def ShouldPlayReplay(self) -> bool: ...
    def ShouldRecordReplay(self) -> bool: ...
    def ShowScorerGoalMessage(self) -> bool: ...
    def SpawnBall(self, position: Vector, wake: bool, spawnCannon: bool) -> BallWrapper: ...
    def SpawnBall2(self, SpawnLoc: Vector, bWake: int, bSpawnCannon: int, BallArch: str) -> BallWrapper: ...
    def SpawnBot(self, carBody: int, name: str) -> None: ...
    def SpawnCar(self, carBody: int, name: str) -> None: ...
    def SpawnPodiumCars(self) -> None: ...
    def StartLobbyTimer(self) -> None: ...
    def StartNewGame(self) -> None: ...
    def StartNewRound(self) -> None: ...
    def StartOvertime(self) -> None: ...
    def StartReplay(self) -> None: ...
    def StartRound(self) -> None: ...
    def SubmitMatch2(self) -> None: ...
    def SubmitMatchComplete2(self) -> None: ...
    def TriggerGoalScoreEvent(self, TeamScoredOn: int, Scorer: CarWrapper) -> None: ...
    def TriggerScoreChangedEvent(self) -> None: ...
    def UpdateGameTime(self, DeltaTime: float) -> None: ...
    def UpdateSpotlight(self) -> None: ...
    def UpdateStats(self) -> None: ...
    def UpdateTeamScores2(self) -> None: ...
    def UpdateTotalGameTimePlayed(self, DeltaTime: float) -> None: ...
    def __GameEvent_Soccar_TA__CheckStart(self, T: TeamWrapper) -> None: ...
    def __GameEvent_Soccar_TA__EndState(self, T: TeamWrapper) -> None: ...
    def __GameEvent_Soccar_TA__SubmitMatchComplete(self, PRI: PriWrapper) -> None: ...
    def __GameEvent_Soccar_TA__UpdateTeamScores(self, T: TeamWrapper) -> bool: ...
    def __ReplicatedServerPerformanceState__ChangeNotifyFunc(self) -> None: ...
    def __WaitTimeRemaining__ChangeNotifyFunc(self) -> None: ...
    def __bClubMatch__ChangeNotifyFunc(self) -> None: ...
    def __bShowIntroScene__ChangeNotifyFunc(self) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ServerWrapper) -> None: ...
    def eventDestroyed(self) -> None: ...
    pass
class ReplayWrapper(ObjectWrapper):
    def CreateCopy(self, StartTime: float) -> ReplayWrapper: ...
    def EventPlaybackStopped(self, Replay: ReplayWrapper) -> None: ...
    def EventPlayedFrame(self, Replay: ReplayWrapper) -> None: ...
    def EventPostTimeSkip(self, Replay: ReplayWrapper) -> None: ...
    def EventPreTimeSkip(self, Replay: ReplayWrapper) -> None: ...
    def EventSpawned(self, Replay: ReplayWrapper, A: ActorWrapper) -> None: ...
    def ExportReplay(self, Path: str) -> None: ...
    def GetAccumulatedDeltaTime(self) -> float: ...
    def GetBuildID(self) -> int: ...
    def GetBuildVersion(self) -> UnrealStringWrapper: ...
    def GetChangelist(self) -> int: ...
    def GetCurrentFrame(self) -> int: ...
    def GetCurrentTime(self) -> float: ...
    def GetDate(self) -> UnrealStringWrapper: ...
    def GetEngineVersion(self) -> int: ...
    def GetFilename(self) -> UnrealStringWrapper: ...
    def GetFrameToSkipTo(self) -> int: ...
    def GetGameVersion(self) -> int: ...
    def GetId(self) -> UnrealStringWrapper: ...
    def GetKeyframeDelay(self) -> float: ...
    def GetLicenseeVersion(self) -> int: ...
    def GetMaxChannels(self) -> int: ...
    def GetMaxReplaySizeMB(self) -> int: ...
    def GetNetVersion(self) -> int: ...
    def GetNextKeyframe(self) -> int: ...
    def GetNumFrames(self) -> int: ...
    def GetPlaybackTime(self) -> float: ...
    def GetPlayerName(self) -> UnrealStringWrapper: ...
    def GetPlayersOnlyTicks(self) -> int: ...
    def GetRecordFPS(self) -> float: ...
    def GetReplayLastSaveVersion(self) -> int: ...
    def GetReplayName(self) -> UnrealStringWrapper: ...
    def GetReplayState(self) -> int: ...
    def GetReplayTimeSeconds(self) -> float: ...
    def GetReplayVersion(self) -> int: ...
    def GetReserveMegabytes(self) -> int: ...
    def GetTimeToSkipTo(self) -> float: ...
    def GetbDebug(self) -> int: ...
    def GetbFileCorrupted(self) -> int: ...
    def GetbForceKeyframe(self) -> int: ...
    def GetbLoadedNetPackages(self) -> int: ...
    def ImportReplay(self, Path: str) -> None: ...
    def IsFromBeforeGameVersion(self, BeforeGameVersion: int) -> bool: ...
    def IsFromBeforeReplayVersion(self, BeforeReplayVersion: int) -> bool: ...
    def IsNull(self) -> bool: ...
    def RemoveTimelineKeyframe(self, KeyframeIndex: int) -> None: ...
    def SetAccumulatedDeltaTime(self, newAccumulatedDeltaTime: float) -> None: ...
    def SetBuildID(self, newBuildID: int) -> None: ...
    def SetChangelist(self, newChangelist: int) -> None: ...
    def SetCurrentFrame(self, newCurrentFrame: int) -> None: ...
    def SetCurrentTime(self, newCurrentTime: float) -> None: ...
    def SetEngineVersion(self, newEngineVersion: int) -> None: ...
    def SetFrameToSkipTo(self, newFrameToSkipTo: int) -> None: ...
    def SetGameVersion(self, newGameVersion: int) -> None: ...
    def SetKeyframeDelay(self, newKeyframeDelay: float) -> None: ...
    def SetLicenseeVersion(self, newLicenseeVersion: int) -> None: ...
    def SetMaxChannels(self, newMaxChannels: int) -> None: ...
    def SetMaxReplaySizeMB(self, newMaxReplaySizeMB: int) -> None: ...
    def SetNetVersion(self, newNetVersion: int) -> None: ...
    def SetNextKeyframe(self, newNextKeyframe: int) -> None: ...
    def SetNumFrames(self, newNumFrames: int) -> None: ...
    def SetPlayersOnlyTicks(self, newPlayersOnlyTicks: int) -> None: ...
    def SetRecordFPS(self, newRecordFPS: float) -> None: ...
    def SetReplayLastSaveVersion(self, newReplayLastSaveVersion: int) -> None: ...
    def SetReplayName(self, NewName: str) -> None: ...
    def SetReplayState(self, newReplayState: int) -> None: ...
    def SetReplayVersion(self, newReplayVersion: int) -> None: ...
    def SetReserveMegabytes(self, newReserveMegabytes: int) -> None: ...
    def SetTimeToSkipTo(self, newTimeToSkipTo: float) -> None: ...
    def SetbDebug(self, newbDebug: int) -> None: ...
    def SetbFileCorrupted(self, newbFileCorrupted: int) -> None: ...
    def SetbForceKeyframe(self, newbForceKeyframe: int) -> None: ...
    def SetbLoadedNetPackages(self, newbLoadedNetPackages: int) -> None: ...
    def SkipToFrame(self, frame: int, bFlush: int) -> None: ...
    def SkipToTime(self, Time: float, bFlush: int) -> None: ...
    def StartPlaybackAtFrame(self, StartFrame: int) -> None: ...
    def StartPlaybackAtTimeSeconds(self, StartTime: float) -> None: ...
    def StartRecord(self) -> None: ...
    def StopPlayback(self) -> None: ...
    def StopRecord(self) -> None: ...
    def Tick2(self, DeltaTime: float) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ReplayWrapper) -> None: ...
    def eventPreExport(self) -> None: ...
    def eventTrimData(self, FirstKeyframe: int, FirstFrame: int) -> None: ...
    pass
class ReplaySoccarWrapper(ReplayWrapper, ObjectWrapper):
    def AddPlayer(self, PRI: PriWrapper) -> None: ...
    def GetPrimaryPlayerTeam(self) -> int: ...
    def GetTeam0Score(self) -> int: ...
    def GetTeam1Score(self) -> int: ...
    def GetTeamSize(self) -> int: ...
    def GetUnfairTeamSize(self) -> int: ...
    def GetbUnfairBots(self) -> int: ...
    def RecordUserEvent(self) -> None: ...
    def RemoveTimelineKeyframe(self, KeyframeIndex: int) -> None: ...
    def SetPrimaryPlayerTeam(self, newPrimaryPlayerTeam: int) -> None: ...
    def SetTeam0Score(self, newTeam0Score: int) -> None: ...
    def SetTeam1Score(self, newTeam1Score: int) -> None: ...
    def SetTeamSize(self, newTeamSize: int) -> None: ...
    def SetUnfairTeamSize(self, newUnfairTeamSize: int) -> None: ...
    def SetbUnfairBots(self, newbUnfairBots: int) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: ReplaySoccarWrapper) -> None: ...
    def eventPreExport(self) -> None: ...
    pass
class Rotator():
    def __add__(self, r2: Rotator) -> Rotator: ...
    def __iadd__(self, r2: Rotator) -> Rotator: ...
    def __imul__(self, r2: Rotator) -> Rotator: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: Rotator) -> None: ...
    @typing.overload
    def __init__(self, def_: int) -> None: ...
    @typing.overload
    def __init__(self, pitch: int, yaw: int, roll: int) -> None: ...
    def __isub__(self, r2: Rotator) -> Rotator: ...
    def __itruediv__(self, r2: Rotator) -> Rotator: ...
    def __mul__(self, r2: Rotator) -> Rotator: ...
    def __sub__(self, r2: Rotator) -> Rotator: ...
    def __truediv__(self, r2: Rotator) -> Rotator: ...
    @property
    def Pitch(self) -> int:
        """
        :type: int
        """
    @Pitch.setter
    def Pitch(self, arg1: int) -> None:
        pass
    @property
    def Roll(self) -> int:
        """
        :type: int
        """
    @Roll.setter
    def Roll(self, arg1: int) -> None:
        pass
    @property
    def Yaw(self) -> int:
        """
        :type: int
        """
    @Yaw.setter
    def Yaw(self, arg1: int) -> None:
        pass
    pass
class AttachmentPickup(RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    def PickupEnd(self) -> None: ...
    def PickupStart(self) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: AttachmentPickup) -> None: ...
    pass
class SampleHistoryWrapper(ObjectWrapper):
    def AddSample(self, NewValue: float) -> None: ...
    def GetAccumTime(self) -> float: ...
    def GetBadValue(self) -> float: ...
    def GetBaseValue(self) -> float: ...
    def GetGoodValue(self) -> float: ...
    def GetPendingSample(self) -> RecordedSample: ...
    def GetRecordSettings(self) -> SampleRecordSettingsWrapper: ...
    def GetSampleIndex(self) -> int: ...
    def GetSamples(self) -> StructArrayWrapper<RecordedSample>: ...
    def GetSummaryValue(self, Type: int, MaxSampleAge: float, bAbsoluteValue: int) -> float: ...
    def GetTitle(self) -> UnrealStringWrapper: ...
    def GetYMax(self) -> float: ...
    def GetYMin(self) -> float: ...
    def GetbHasPendingSample(self) -> int: ...
    def IsNull(self) -> bool: ...
    def SetAccumTime(self, newAccumTime: float) -> None: ...
    def SetBadValue(self, newBadValue: float) -> None: ...
    def SetBaseValue(self, newBaseValue: float) -> None: ...
    def SetBaseValue2(self, InBaseValue: float) -> SampleHistoryWrapper: ...
    def SetGoodBadValues(self, InGoodValue: float, InBadValue: float) -> SampleHistoryWrapper: ...
    def SetGoodValue(self, newGoodValue: float) -> None: ...
    def SetGraphMaxMin(self, MaxValue: float, MinValue: float) -> SampleHistoryWrapper: ...
    def SetPendingSample(self, newPendingSample: RecordedSample) -> None: ...
    def SetRecordSettings(self, newRecordSettings: SampleRecordSettingsWrapper) -> None: ...
    def SetSampleIndex(self, newSampleIndex: int) -> None: ...
    def SetTitle(self, InTitle: str) -> SampleHistoryWrapper: ...
    def SetYMax(self, newYMax: float) -> None: ...
    def SetYMin(self, newYMin: float) -> None: ...
    def SetbHasPendingSample(self, newbHasPendingSample: int) -> None: ...
    def Tick(self, DeltaTime: float) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: SampleHistoryWrapper) -> None: ...
    pass
class SampleRecordSettingsWrapper(ObjectWrapper):
    def GetMaxSampleAge(self) -> float: ...
    def GetRecordRate(self) -> float: ...
    def IsNull(self) -> bool: ...
    def SetMaxSampleAge(self, newMaxSampleAge: float) -> None: ...
    def SetRecordRate(self, newRecordRate: float) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: SampleRecordSettingsWrapper) -> None: ...
    pass
class GameEditorSaveDataWrapper(SaveDataWrapper, ObjectWrapper):
    def GetDownloadedFolderPath(self) -> UnrealStringWrapper: ...
    def GetFavoritesFolderPath(self) -> UnrealStringWrapper: ...
    def GetLoadedSaveName(self) -> UnrealStringWrapper: ...
    def GetMyTrainingFolderPath(self) -> UnrealStringWrapper: ...
    def GetPlayerTeamNumber(self) -> int: ...
    def GetShotsCompleted(self) -> int: ...
    def GetTrainingData(self) -> TrainingEditorSaveDataWrapper: ...
    def GetTrainingSaveType(self, bOwned: int, bFavorited: int) -> int: ...
    def GetbUnowned(self) -> int: ...
    def Init(self) -> None: ...
    def SetPlayerTeamNumber(self, newPlayerTeamNumber: int) -> None: ...
    def SetShotsCompleted(self, newShotsCompleted: int) -> None: ...
    def SetTrainingData(self, newTrainingData: TrainingEditorSaveDataWrapper) -> None: ...
    def SetbUnowned(self, newbUnowned: int) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: GameEditorSaveDataWrapper) -> None: ...
    pass
class SequenceObjectWrapper(ObjectWrapper):
    def GetObjCategory(self) -> UnrealStringWrapper: ...
    def GetObjComment(self) -> UnrealStringWrapper: ...
    def GetObjName(self) -> UnrealStringWrapper: ...
    def GetParentSequence(self) -> SequenceWrapper: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: SequenceObjectWrapper) -> None: ...
    pass
class SequenceOpWrapper(SequenceObjectWrapper, ObjectWrapper):
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: SequenceOpWrapper) -> None: ...
    pass
class SequenceVariableWrapper(SequenceObjectWrapper, ObjectWrapper):
    def GetActor(self) -> ActorWrapper: ...
    def GetBool(self) -> bool: ...
    def GetFloat(self) -> float: ...
    def GetInt(self) -> int: ...
    def GetObjectList(self) -> ArrayWrapper<SequenceVariableWrapper>: ...
    def GetString(self) -> str: ...
    def GetVarName(self) -> str: ...
    def GetVector(self) -> Vector: ...
    def IsActor(self) -> bool: ...
    def IsBool(self) -> bool: ...
    def IsFloat(self) -> bool: ...
    def IsInt(self) -> bool: ...
    def IsObjectList(self) -> bool: ...
    def IsString(self) -> bool: ...
    def IsVector(self) -> bool: ...
    def SetBool(self, value: bool) -> None: ...
    def SetFloat(self, value: float) -> None: ...
    def SetInt(self, value: int) -> None: ...
    def SetString(self, value: str) -> None: ...
    def SetVector(self, value: Vector) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: SequenceVariableWrapper) -> None: ...
    pass
class SequenceWrapper(SequenceOpWrapper, SequenceObjectWrapper, ObjectWrapper):
    def ActivateRemoteEvents(self, remote_event_name: str) -> int: ...
    def GetAllSequenceVariables(self, reqursive: bool) -> typing.Dict[str, SequenceVariableWrapper]: ...
    def GetNestedSequences(self) -> ArrayWrapper<SequenceWrapper>: ...
    def GetSequenceObjects(self) -> ArrayWrapper<SequenceObjectWrapper>: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: SequenceWrapper) -> None: ...
    pass
class GameEditorWrapper(ServerWrapper, TeamGameEventWrapper, GameEventWrapper, ActorWrapper, ObjectWrapper):
    def CanAddHistory(self) -> bool: ...
    def CanChangeTeam(self) -> bool: ...
    def CanQueSaveReplay(self) -> bool: ...
    def ChooseTeam(self, TeamIndex: int, Player: PlayerControllerWrapper) -> bool: ...
    def ClampUndoHistory(self) -> None: ...
    def ClearAllHistory(self) -> None: ...
    def ClearRedoHistory(self) -> None: ...
    def CommitRedoRound(self) -> None: ...
    def CycleActor(self, PC: PlayerControllerWrapper) -> None: ...
    def DecreaseTime(self) -> None: ...
    def DeleteAllExistingActorsBasedOffSpawnList(self) -> None: ...
    def DestroyActor(self, A: ActorWrapper, HistoryType: int) -> bool: ...
    def EnableTriggers(self, bEnable: int) -> None: ...
    def FireBalls(self) -> None: ...
    def GetActiveRoundNumber(self) -> int: ...
    def GetFXActor(self) -> FXActorWrapper: ...
    def GetFXActorArchetype(self) -> FXActorWrapper: ...
    def GetHistoryPosition(self) -> int: ...
    def GetMaxRounds(self) -> int: ...
    def GetMaxUndoHistory(self) -> int: ...
    def GetOtherHistoryType(self, HistoryType: int) -> int: ...
    def GetPlayerTeamNumber(self) -> int: ...
    def GrabActor2(self, PC: PlayerControllerWrapper) -> None: ...
    def HandleVehicleSetup(self, Car: CarWrapper) -> None: ...
    def HideCarSpawnPoints(self, bHide: int) -> None: ...
    def IncreaseTime(self) -> None: ...
    def IncrementSelectedSpawnArchetypeIndex(self, Direction: int, Index: int) -> None: ...
    def InitFX(self) -> None: ...
    def Interact(self) -> None: ...
    def IsInEditorMode(self) -> bool: ...
    def NextRound(self) -> None: ...
    def OnPlayerRestarted(self, PlayerCar: CarWrapper) -> None: ...
    def OnSpawnedArchetype(self, SpawnedActor: ActorWrapper, HistoryType: int) -> None: ...
    def OnVehicleSetup(self, Car: CarWrapper) -> None: ...
    def PrevRound(self) -> None: ...
    def Redo2(self, PC: PlayerControllerWrapper) -> None: ...
    def ReleaseActor2(self, PC: PlayerControllerWrapper) -> None: ...
    def ReleaseGrabbedActor(self, PC: PlayerControllerWrapper) -> None: ...
    def ReleaseRotateActor(self, PC: PlayerControllerWrapper) -> None: ...
    def RemoveAllPointsFromScore(self, TeamIndex: int) -> None: ...
    def RemovePointsFromScore(self, PointsToRemove: int, TeamIndex: int) -> None: ...
    def ResetBallsToDefaultPosition(self) -> None: ...
    def ResetRound(self) -> None: ...
    def ResetSpawnLocations(self) -> None: ...
    def RotateActor(self, PC: PlayerControllerWrapper, bSnapOrientation: int) -> None: ...
    def RoundContainsASwitch(self) -> bool: ...
    def Save2(self) -> None: ...
    def SetActiveRoundNumber(self, newActiveRoundNumber: int) -> None: ...
    def SetFXActor(self, newFXActor: FXActorWrapper) -> None: ...
    def SetFXActorArchetype(self, newFXActorArchetype: FXActorWrapper) -> None: ...
    def SetHistoryPosition(self, newHistoryPosition: int) -> None: ...
    def SetMaxRounds(self, newMaxRounds: int) -> None: ...
    def SetMaxUndoHistory(self, newMaxUndoHistory: int) -> None: ...
    def ShouldResetBalls(self) -> bool: ...
    def ShouldUpdateCrosshair(self) -> bool: ...
    def SpawnArchetype(self, Controller: PlayerControllerWrapper, ArchetypeIndex: int) -> None: ...
    def StartEditing(self) -> None: ...
    def StopEditing(self, PC: PlayerControllerWrapper) -> None: ...
    def ToggleEditorRound(self) -> None: ...
    def ToggleGrabActor(self, PC: PlayerControllerWrapper) -> None: ...
    def ToggleReleaseActor(self, PC: PlayerControllerWrapper) -> None: ...
    def ToggleRotateActor(self, PC: PlayerControllerWrapper) -> None: ...
    def Undo2(self, PC: PlayerControllerWrapper) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: GameEditorWrapper) -> None: ...
    def eventPostBeginPlay(self) -> None: ...
    pass
class SettingsWrapper():
    def GetAllGamepadBindings(self) -> typing.List[typing.Tuple[str, str]]: ...
    def GetAllPCBindings(self) -> typing.List[typing.Tuple[str, str]]: ...
    def GetCameraSaveSettings(self) -> CameraSave: ...
    def GetCameraSettings(self) -> ProfileCameraSettings: ...
    def GetGamepadSettings(self) -> GamepadSettings: ...
    def GetVideoSettings(self) -> VideoSettings: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: SettingsWrapper) -> None: ...
    pass
class SkillRank():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: SkillRank) -> None: ...
    @property
    def Division(self) -> int:
        """
        :type: int
        """
    @Division.setter
    def Division(self, arg1: int) -> None:
        pass
    @property
    def MatchesPlayed(self) -> int:
        """
        :type: int
        """
    @MatchesPlayed.setter
    def MatchesPlayed(self, arg1: int) -> None:
        pass
    @property
    def Tier(self) -> int:
        """
        :type: int
        """
    @Tier.setter
    def Tier(self, arg1: int) -> None:
        pass
    pass
class SkillRating():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: SkillRating) -> None: ...
    @property
    def Mu(self) -> float:
        """
        :type: float
        """
    @Mu.setter
    def Mu(self, arg1: float) -> None:
        pass
    @property
    def Sigma(self) -> float:
        """
        :type: float
        """
    @Sigma.setter
    def Sigma(self, arg1: float) -> None:
        pass
    pass
class SpecialEdition():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: SpecialEdition) -> None: ...
    @property
    def editionId(self) -> int:
        """
        :type: int
        """
    @editionId.setter
    def editionId(self, arg1: int) -> None:
        pass
    @property
    def label(self) -> str:
        """
        :type: str
        """
    @label.setter
    def label(self, arg1: str) -> None:
        pass
    @property
    def productId(self) -> int:
        """
        :type: int
        """
    @productId.setter
    def productId(self, arg1: int) -> None:
        pass
    pass
class SpecialEditionDatabaseWrapper(ObjectWrapper):
    def GetSpecialEditionId(self, EditionName: str) -> int: ...
    def GetSpecialEditionName(self, EditionID: int) -> str: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: SpecialEditionDatabaseWrapper) -> None: ...
    pass
class BallCarSpringPickup(SpringPickup, TargetedPickup, RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    def ScaleSpringMeshToLocation(self, NewLocation: Vector, TargetLocation: Vector) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: BallCarSpringPickup) -> None: ...
    pass
class StartGraphSystemWrapper(ObjectWrapper):
    def GetGraphLevel(self) -> int: ...
    def GetGraphSampleTime(self) -> float: ...
    def GetGraphSampleTime2(self, Level: int) -> float: ...
    def GetInputBufferGraph(self) -> InputBufferGraphWrapper: ...
    def GetNetStatGraph(self) -> NetStatGraphWrapper: ...
    def GetPerfStatGraph(self) -> PerfStatGraphWrapper: ...
    def GetStatGraphs(self) -> ArrayWrapper<StatGraphWrapper>: ...
    def GetVisibleStatGraphs(self) -> ArrayWrapper<StatGraphWrapper>: ...
    def Graphtime(self, Seconds: float) -> None: ...
    def IsNull(self) -> bool: ...
    def SetGraphLevel(self, newGraphLevel: int) -> None: ...
    def SetGraphLevel2(self, Level: int) -> None: ...
    def SetGraphSampleTime(self, newGraphSampleTime: float) -> None: ...
    def SetInputBufferGraph(self, newInputBufferGraph: InputBufferGraphWrapper) -> None: ...
    def SetNetStatGraph(self, newNetStatGraph: NetStatGraphWrapper) -> None: ...
    def SetPerfStatGraph(self, newPerfStatGraph: PerfStatGraphWrapper) -> None: ...
    def StatGraphNext(self) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: StartGraphSystemWrapper) -> None: ...
    pass
class StatEventWrapper(ObjectWrapper):
    def GetCooldownSeconds(self) -> float: ...
    def GetDescription(self) -> UnrealStringWrapper: ...
    def GetEventName(self) -> str: ...
    def GetGroupName(self) -> str: ...
    def GetLabel(self) -> UnrealStringWrapper: ...
    def GetNextCooldownTime(self) -> float: ...
    def GetPluralLabel(self) -> UnrealStringWrapper: ...
    def GetPoints(self) -> int: ...
    def GetbAddToScore(self) -> int: ...
    def GetbCanMute(self) -> int: ...
    def GetbCountMultiplied(self) -> int: ...
    def GetbIsLeaderboardStat(self) -> int: ...
    def GetbNotifyTicker(self) -> int: ...
    def GetbPrimaryStat(self) -> int: ...
    def GetbShowOnHUD(self) -> int: ...
    def GetbSkipReplication(self) -> int: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: StatEventWrapper) -> None: ...
    pass
class StatGraphSystemWrapper(ObjectWrapper):
    def GetGraphLevel(self) -> int: ...
    def GetGraphSampleTime(self) -> float: ...
    def GetGraphSampleTime2(self, Level: int) -> float: ...
    def GetInputBufferGraph(self) -> InputBufferGraphWrapper: ...
    def GetNetStatGraph(self) -> NetStatGraphWrapper: ...
    def GetPerfStatGraph(self) -> PerfStatGraphWrapper: ...
    def GetPreallocGraphLines(self) -> int: ...
    def GetStatGraphs(self) -> ArrayWrapper<StatGraphWrapper>: ...
    def GetVisibleStatGraphs(self) -> ArrayWrapper<StatGraphWrapper>: ...
    def Graphtime(self, Seconds: float) -> None: ...
    def IsNull(self) -> bool: ...
    def PacketReceived(self, Latency: float) -> None: ...
    def SetGraphLevel(self, newGraphLevel: int) -> None: ...
    def SetGraphLevel2(self, Level: int) -> None: ...
    def SetGraphSampleTime(self, newGraphSampleTime: float) -> None: ...
    def SetInputBufferGraph(self, newInputBufferGraph: InputBufferGraphWrapper) -> None: ...
    def SetNetStatGraph(self, newNetStatGraph: NetStatGraphWrapper) -> None: ...
    def SetPerfStatGraph(self, newPerfStatGraph: PerfStatGraphWrapper) -> None: ...
    def SetPreallocGraphLines(self, newPreallocGraphLines: int) -> None: ...
    def StatGraphNext(self) -> None: ...
    def __StatGraphSystem_TA__SetGraphLevel(self, G: StatGraphWrapper) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: StatGraphSystemWrapper) -> None: ...
    pass
class InputBufferGraphWrapper(StatGraphWrapper, ObjectWrapper):
    def CreateBufferHistory(self, Title: str) -> SampleHistoryWrapper: ...
    def GetBuffer(self) -> SampleHistoryWrapper: ...
    def GetBufferTarget(self) -> SampleHistoryWrapper: ...
    def GetMaxPhysicsRate(self) -> float: ...
    def GetMinPhysicsRate(self) -> float: ...
    def GetOverUnderFrames(self) -> SampleHistoryWrapper: ...
    def GetPhysicsRate(self) -> SampleHistoryWrapper: ...
    def SetBuffer(self, newBuffer: SampleHistoryWrapper) -> None: ...
    def SetBufferTarget(self, newBufferTarget: SampleHistoryWrapper) -> None: ...
    def SetMaxPhysicsRate(self, newMaxPhysicsRate: float) -> None: ...
    def SetMinPhysicsRate(self, newMinPhysicsRate: float) -> None: ...
    def SetOverUnderFrames(self, newOverUnderFrames: SampleHistoryWrapper) -> None: ...
    def SetPhysicsRate(self, newPhysicsRate: SampleHistoryWrapper) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: InputBufferGraphWrapper) -> None: ...
    def eventConstruct(self) -> None: ...
    pass
class SteamID():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: SteamID) -> None: ...
    @property
    def ID(self) -> int:
        """
        :type: int
        """
    @ID.setter
    def ID(self, arg1: int) -> None:
        pass
    pass
class StickyForceData():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: StickyForceData) -> None: ...
    @property
    def Ground(self) -> float:
        """
        :type: float
        """
    @Ground.setter
    def Ground(self, arg1: float) -> None:
        pass
    @property
    def Wall(self) -> float:
        """
        :type: float
        """
    @Wall.setter
    def Wall(self, arg1: float) -> None:
        pass
    pass
class StructArrayWrapper<ClubMember>():
    def Count(self) -> int: ...
    def Get(self, index: int) -> ClubMember: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: StructArrayWrapper<ClubMember>) -> None: ...
    pass
class StructArrayWrapper<LinearColor>():
    def Count(self) -> int: ...
    def Get(self, index: int) -> LinearColor: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: StructArrayWrapper<LinearColor>) -> None: ...
    pass
class StructArrayWrapper<ProfileCameraSettings>():
    def Count(self) -> int: ...
    def Get(self, index: int) -> ProfileCameraSettings: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: StructArrayWrapper<ProfileCameraSettings>) -> None: ...
    pass
class StructArrayWrapper<RecordedSample>():
    def Count(self) -> int: ...
    def Get(self, index: int) -> RecordedSample: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: StructArrayWrapper<RecordedSample>) -> None: ...
    pass
class StructArrayWrapper<SteamID>():
    def Count(self) -> int: ...
    def Get(self, index: int) -> SteamID: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: StructArrayWrapper<SteamID>) -> None: ...
    pass
class SwapperPickup(TargetedPickup, RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    def GetOtherCar(self) -> CarWrapper: ...
    def OnTargetChanged(self) -> None: ...
    def PickupEnd(self) -> None: ...
    def PickupStart(self) -> None: ...
    def SetOtherCar(self, newOtherCar: CarWrapper) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: SwapperPickup) -> None: ...
    pass
class TRADEHOLD():
    """
    Members:

      TRADEHOLD_P2P

      TRADEHOLD_ALL

      TRADEHOLD_NONE
    """
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    TRADEHOLD_ALL: bakkesmod.TRADEHOLD # value = <TRADEHOLD.TRADEHOLD_ALL: -1>
    TRADEHOLD_NONE: bakkesmod.TRADEHOLD # value = <TRADEHOLD.TRADEHOLD_NONE: 0>
    TRADEHOLD_P2P: bakkesmod.TRADEHOLD # value = <TRADEHOLD.TRADEHOLD_P2P: -2>
    __members__: dict # value = {'TRADEHOLD_P2P': <TRADEHOLD.TRADEHOLD_P2P: -2>, 'TRADEHOLD_ALL': <TRADEHOLD.TRADEHOLD_ALL: -1>, 'TRADEHOLD_NONE': <TRADEHOLD.TRADEHOLD_NONE: 0>}
    pass
class BattarangPickup(BallLassoPickup, SpringPickup, TargetedPickup, RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    def GetCurRotation(self) -> float: ...
    def GetSpinSpeed(self) -> float: ...
    def SetCurRotation(self, newCurRotation: float) -> None: ...
    def SetSpinSpeed(self, newSpinSpeed: float) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: BattarangPickup) -> None: ...
    pass
class ReplayServerWrapper(ServerWrapper, TeamGameEventWrapper, GameEventWrapper, ActorWrapper, ObjectWrapper):
    def AddKeyFrame(self, frame: int, name: str) -> None: ...
    def GetCurrentReplayFrame(self) -> int: ...
    def GetReplay(self) -> ReplayWrapper: ...
    def GetReplayFPS(self) -> int: ...
    def GetReplayTimeElapsed(self) -> float: ...
    def GetViewTarget(self) -> ActorWrapper: ...
    def RemoveKeyFrame(self, frame: int) -> None: ...
    def SkipToFrame(self, frame: int) -> None: ...
    def SkipToTime(self, time: float) -> None: ...
    def StartPlaybackAtFrame(self, frame: int) -> None: ...
    def StartPlaybackAtTime(self, time: float) -> None: ...
    @typing.overload
    def __init__(self, other: ReplayServerWrapper) -> None: ...
    @typing.overload
    def __init__(self, server: int, gameinfo: int, replaydirector: int) -> None: ...
    pass
class TeamInfoWrapper(ActorWrapper, ObjectWrapper):
    def GetScore(self) -> int: ...
    def GetSize(self) -> int: ...
    def GetTeamColor(self) -> UnrealColor: ...
    def GetTeamIndex(self) -> int: ...
    def GetTeamName(self) -> UnrealStringWrapper: ...
    def GetTeamNum(self) -> int: ...
    def SetScore(self, newScore: int) -> None: ...
    def SetSize(self, newSize: int) -> None: ...
    def SetTeamColor(self, newTeamColor: UnrealColor) -> None: ...
    def SetTeamIndex(self, newTeamIndex: int) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: TeamInfoWrapper) -> None: ...
    def eventDestroyed(self) -> None: ...
    pass
class TeamWrapper(TeamInfoWrapper, ActorWrapper, ObjectWrapper):
    def AddTemporarySpawnSpot(self, AtActor: ActorWrapper) -> None: ...
    def ClearTemporarySpawnSpots(self) -> None: ...
    def EnableAllMembersStartVoteToForfeit2(self) -> None: ...
    def EnableAllMembersStartVoteToForfeitIfNecessary(self) -> None: ...
    def ExpireTemporarySpawnSpots(self) -> None: ...
    def Forfeit2(self) -> None: ...
    def GetClubID(self) -> int: ...
    def GetColorBlindColorList(self) -> StructArrayWrapper<LinearColor>: ...
    def GetColorBlindFontColor(self) -> LinearColor: ...
    def GetCurrentColorList(self) -> StructArrayWrapper<LinearColor>: ...
    def GetCustomTeamName(self) -> UnrealStringWrapper: ...
    def GetDefaultColorList(self) -> StructArrayWrapper<LinearColor>: ...
    def GetFontColor(self) -> LinearColor: ...
    def GetGameEvent(self) -> TeamGameEventWrapper: ...
    def GetMembers(self) -> ArrayWrapper<PriWrapper>: ...
    def GetNumBots(self) -> int: ...
    def GetNumHumans(self) -> int: ...
    def GetPrimaryColor(self) -> LinearColor: ...
    def GetSanitizedTeamName(self) -> UnrealStringWrapper: ...
    def GetSecondaryColor(self) -> LinearColor: ...
    def GetTeamControllerColor(self) -> UnrealColor: ...
    def GetTeamMemberNamed(self, PlayerName: str) -> PriWrapper: ...
    def GetTeamScoreStrobeColor(self) -> UnrealColor: ...
    def GetbForfeit(self) -> int: ...
    def HandleTeamNameSanitized(self, Original: str, Sanitized: str) -> None: ...
    def IsSingleParty(self) -> bool: ...
    def MuteOtherTeam(self, OtherTeam: TeamWrapper, bMute: int) -> None: ...
    def NotifyKismetTeamColorChanged(self) -> None: ...
    def OnClubColorsChanged(self) -> None: ...
    def OnGameEventSet(self) -> None: ...
    def OnScoreUpdated(self) -> None: ...
    def RemovePoints(self, Points: int) -> None: ...
    def ResetScore(self) -> None: ...
    def ScorePoint(self, AdditionalScore: int) -> None: ...
    def SetClubID(self, newClubID: int) -> None: ...
    def SetClubID2(self, InClubID: int) -> None: ...
    def SetColorBlindFontColor(self, newColorBlindFontColor: LinearColor) -> None: ...
    def SetCustomTeamName(self, NewName: str) -> None: ...
    def SetDefaultColors(self) -> None: ...
    def SetFontColor(self, newFontColor: LinearColor) -> None: ...
    def SetGameEvent(self, newGameEvent: TeamGameEventWrapper) -> None: ...
    def SetGameEvent2(self, InGameEvent: TeamGameEventWrapper) -> None: ...
    def SetLogo(self, LogoID: int, bSwapColors: int) -> None: ...
    def SetScore(self, Points: int) -> None: ...
    def SetTeamControllerColor(self, newTeamControllerColor: UnrealColor) -> None: ...
    def SetTeamScoreStrobeColor(self, newTeamScoreStrobeColor: UnrealColor) -> None: ...
    def SetbForfeit(self, newbForfeit: int) -> None: ...
    def UpdateColors(self) -> None: ...
    def VoteToForfeit22(self, PRI: PriWrapper) -> None: ...
    def __Team_TA__EnableAllMembersStartVoteToForfeit(self, Member: PriWrapper) -> None: ...
    def __Team_TA__GetHumanPlayers(self, PRI: PriWrapper) -> bool: ...
    def __Team_TA__GetHumanPrimaryPlayers(self, PRI: PriWrapper) -> bool: ...
    def __Team_TA__GetNumOfMembersThatCanStartForfeit(self, P: PriWrapper) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: TeamWrapper) -> None: ...
    pass
class TextInputModalWrapper(ModalWrapper, ObjectWrapper):
    def SetTextInput(self, defaultText: str, max_text_length: int, password: bool, input_callback: typing.Callable[[str, bool], None]) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: TextInputModalWrapper) -> None: ...
    pass
class TimeBombPickup(RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    def AlmostReady2(self) -> None: ...
    def GetAlmostReadyDuration(self) -> float: ...
    def GetAlmostReadyMatSpeed(self) -> float: ...
    def GetCarTorque(self) -> float: ...
    def GetCarVerticalForce(self) -> float: ...
    def GetImpulseForce(self) -> float: ...
    def GetRadius(self) -> float: ...
    def GetStartMatSpeed(self) -> float: ...
    def GetbDemolish(self) -> int: ...
    def GetbImpulse(self) -> int: ...
    def PickupEnd(self) -> None: ...
    def PickupStart(self) -> None: ...
    def SetAlmostReadyDuration(self, newAlmostReadyDuration: float) -> None: ...
    def SetAlmostReadyMatSpeed(self, newAlmostReadyMatSpeed: float) -> None: ...
    def SetCarTorque(self, newCarTorque: float) -> None: ...
    def SetCarVerticalForce(self, newCarVerticalForce: float) -> None: ...
    def SetImpulseForce(self, newImpulseForce: float) -> None: ...
    def SetRadius(self, newRadius: float) -> None: ...
    def SetStartMatSpeed(self, newStartMatSpeed: float) -> None: ...
    def SetbDemolish(self, newbDemolish: int) -> None: ...
    def SetbImpulse(self, newbImpulse: int) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: TimeBombPickup) -> None: ...
    pass
class ToastType():
    """
    Members:

      ToastType_Info

      ToastType_OK

      ToastType_Warning

      ToastType_Error
    """
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    ToastType_Error: bakkesmod.ToastType # value = <ToastType.ToastType_Error: 3>
    ToastType_Info: bakkesmod.ToastType # value = <ToastType.ToastType_Info: 0>
    ToastType_OK: bakkesmod.ToastType # value = <ToastType.ToastType_OK: 1>
    ToastType_Warning: bakkesmod.ToastType # value = <ToastType.ToastType_Warning: 2>
    __members__: dict # value = {'ToastType_Info': <ToastType.ToastType_Info: 0>, 'ToastType_OK': <ToastType.ToastType_OK: 1>, 'ToastType_Warning': <ToastType.ToastType_Warning: 2>, 'ToastType_Error': <ToastType.ToastType_Error: 3>}
    pass
class TornadoPickup(RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    def ApplyForces(self, ActiveTime: float) -> None: ...
    def GetAffecting(self) -> ArrayWrapper<RBActorWrapper>: ...
    def GetBallMultiplier(self) -> float: ...
    def GetFXOffset(self) -> Vector: ...
    def GetFXScale(self) -> Vector: ...
    def GetHeight(self) -> float: ...
    def GetMaxVelocityOffset(self) -> float: ...
    def GetMeshOffset(self) -> Vector: ...
    def GetMeshScale(self) -> Vector: ...
    def GetOffset(self) -> Vector: ...
    def GetRadius(self) -> float: ...
    def GetRotationalForce(self) -> float: ...
    def GetTorque(self) -> float: ...
    def GetVel(self) -> Vector: ...
    def GetVelocityEase(self) -> float: ...
    def GetbDebugVis(self) -> int: ...
    def PlayBallSFX(self, InActor: RBActorWrapper) -> None: ...
    def PlayCarSFX(self, InActor: RBActorWrapper) -> None: ...
    def SetBallMultiplier(self, newBallMultiplier: float) -> None: ...
    def SetFXOffset(self, newFXOffset: Vector) -> None: ...
    def SetFXScale(self, newFXScale: Vector) -> None: ...
    def SetHeight(self, newHeight: float) -> None: ...
    def SetMaxVelocityOffset(self, newMaxVelocityOffset: float) -> None: ...
    def SetMeshOffset(self, newMeshOffset: Vector) -> None: ...
    def SetMeshScale(self, newMeshScale: Vector) -> None: ...
    def SetOffset(self, newOffset: Vector) -> None: ...
    def SetRadius(self, newRadius: float) -> None: ...
    def SetRotationalForce(self, newRotationalForce: float) -> None: ...
    def SetTorque(self, newTorque: float) -> None: ...
    def SetVel(self, newVel: Vector) -> None: ...
    def SetVelocityEase(self, newVelocityEase: float) -> None: ...
    def SetbDebugVis(self, newbDebugVis: int) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: TornadoPickup) -> None: ...
    pass
class TradeWrapper(ObjectWrapper):
    class Currency():
        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, arg0: TradeWrapper.Currency) -> None: ...
        @property
        def currency_id(self) -> int:
            """
            :type: int
            """
        @currency_id.setter
        def currency_id(self, arg1: int) -> None:
            pass
        @property
        def quantity(self) -> int:
            """
            :type: int
            """
        @quantity.setter
        def quantity(self, arg1: int) -> None:
            pass
        pass
    def GetReceivingCurrency(self) -> typing.List[TradeWrapper::Currency]: ...
    def GetReceivingProducts(self) -> ArrayWrapper<OnlineProductWrapper>: ...
    def GetSendingCurrency(self) -> typing.List[TradeWrapper::Currency]: ...
    def GetSendingProducts(self) -> ArrayWrapper<OnlineProductWrapper>: ...
    def IsNull(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: TradeWrapper) -> None: ...
    pass
class TrainingEditorSaveDataWrapper(ObjectWrapper):
    def GetCode(self) -> UnrealStringWrapper: ...
    def GetCreatedAt(self) -> int: ...
    def GetCreatorName(self) -> UnrealStringWrapper: ...
    def GetCreatorPlayerUniqueID(self) -> UniqueIDWrapper: ...
    def GetDescription(self) -> UnrealStringWrapper: ...
    def GetDifficulty(self) -> int: ...
    def GetNumRounds(self) -> int: ...
    def GetTM_Name(self) -> UnrealStringWrapper: ...
    def GetType(self) -> int: ...
    def GetUpdatedAt(self) -> int: ...
    def Init(self) -> None: ...
    def IsNull(self) -> bool: ...
    def SetCreatedAt(self, newCreatedAt: int) -> None: ...
    def SetCreatorPlayerID(self, newCreatorPlayerID: SteamID) -> None: ...
    def SetDifficulty(self, newDifficulty: int) -> None: ...
    def SetNumRounds(self, newNumRounds: int) -> None: ...
    def SetType(self, newType: int) -> None: ...
    def SetUpdatedAt(self, newUpdatedAt: int) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: TrainingEditorSaveDataWrapper) -> None: ...
    pass
class TrainingEditorWrapper(GameEditorWrapper, ServerWrapper, TeamGameEventWrapper, GameEventWrapper, ActorWrapper, ObjectWrapper):
    def AddLocalPlayer(self, Player: PlayerControllerWrapper) -> None: ...
    def AdjustToFloorLocation(self, TraceStart: Vector, CollsionExtent: Vector) -> Vector: ...
    def AllowDynamicCrowd(self) -> bool: ...
    def BroadcastGoMessage(self) -> None: ...
    def CanPlayTestRoundNumber(self, RoundNumber: int) -> bool: ...
    def DeleteRound(self, RoundToDelete: int) -> None: ...
    def DestroyBall(self, Ball: BallWrapper) -> bool: ...
    def DestroyGoalMeshBlockers(self) -> None: ...
    def DuplicateRound(self, Index: int) -> None: ...
    def EndPlayTest(self) -> None: ...
    def EventPlaytestStarted(self, GamEvent: TrainingEditorWrapper) -> None: ...
    def EventRoundChanged(self, GamEvent: TrainingEditorWrapper) -> None: ...
    def EventRoundTimeChanged(self, GameEvent: TrainingEditorWrapper) -> None: ...
    def EventSaveResult(self, bSuccess: int) -> None: ...
    def EventUnsavedChanges(self, bOutUnsavedChanges: int) -> None: ...
    def ForceTagHistoryChanges(self) -> None: ...
    def GetBallGoalScoreNumber(self) -> int: ...
    def GetDifficulty(self) -> int: ...
    def GetGoalMeshBlockerArchetype(self) -> ActorWrapper: ...
    def GetGoalMeshBlockers(self) -> ArrayWrapper<ActorWrapper>: ...
    def GetGoalieScore(self) -> int: ...
    def GetMaxRoundTime(self) -> float: ...
    def GetMinRoundTime(self) -> float: ...
    def GetPlayTestType(self) -> int: ...
    def GetPlayerTeamNumber(self) -> int: ...
    def GetPointsScoredThisRound(self) -> int: ...
    def GetSaveCooldown(self) -> float: ...
    def GetSaveDelayTime(self) -> float: ...
    def GetScore(self) -> int: ...
    def GetShotAttempt(self) -> int: ...
    def GetTotalRounds(self) -> int: ...
    def GetTrainingData(self) -> GameEditorSaveDataWrapper: ...
    def GetTrainingFileName(self) -> UnrealStringWrapper: ...
    def GetTrainingType(self) -> int: ...
    def GetbDisplayedRedoPenaltyMessage(self) -> int: ...
    def GetbNoEditor(self) -> int: ...
    def GetbUnsavedChanges(self) -> int: ...
    def HandleNextGame(self) -> bool: ...
    def IncrementRound(self, bLoop: int) -> bool: ...
    def IsValidRoundIndex(self, ArrayIndex: int) -> bool: ...
    def Load2(self, SaveName: str, PC: PlayerControllerWrapper) -> None: ...
    def MarkAsDirty(self) -> None: ...
    def OnInit(self) -> None: ...
    def OnLoadingMovieClosed(self) -> None: ...
    def OnTrainingModeLoaded(self) -> None: ...
    def RemoveAllPointsFromScore(self, TeamIndex: int) -> None: ...
    def RemovePointsFromScore(self, PointsToRemove: int, TeamIndex: int) -> None: ...
    def ReorderRound(self, FromIndex: int, ToIndex: int) -> None: ...
    def ResetBalls(self) -> None: ...
    def RestartPlayTest(self) -> None: ...
    def Save2(self) -> None: ...
    def SetGoalMeshBlockerArchetype(self, newGoalMeshBlockerArchetype: ActorWrapper) -> None: ...
    def SetGoalieScore(self, newGoalieScore: int) -> None: ...
    def SetMaxRoundTime(self, newMaxRoundTime: float) -> None: ...
    def SetMinRoundTime(self, newMinRoundTime: float) -> None: ...
    def SetPlayTestType(self, newPlayTestType: int) -> None: ...
    def SetPointsScoredThisRound(self, newPointsScoredThisRound: int) -> None: ...
    def SetRoundTimeLimit(self, NewRoundTime: float) -> None: ...
    def SetSaveCooldown(self, newSaveCooldown: float) -> None: ...
    def SetSaveDelayTime(self, newSaveDelayTime: float) -> None: ...
    def SetShotAttempt(self, newShotAttempt: int) -> None: ...
    def SetTracedCrosshairActor(self, PC: PlayerControllerWrapper, NewActor: ActorWrapper) -> None: ...
    def SetTrainingData(self, newTrainingData: GameEditorSaveDataWrapper) -> None: ...
    def SetUnsavedChanges(self, bInUnsavedChanges: int) -> None: ...
    def SetbDisplayedRedoPenaltyMessage(self, newbDisplayedRedoPenaltyMessage: int) -> None: ...
    def SetbNoEditor(self, newbNoEditor: int) -> None: ...
    def SetbUnsavedChanges(self, newbUnsavedChanges: int) -> None: ...
    def SetupDefaultRound(self) -> None: ...
    def ShowPenaltyMessage(self) -> bool: ...
    def ShowResetRoundMessage(self) -> None: ...
    def ShowScorerGoalMessage(self) -> bool: ...
    def SpawnArchetypeAtAndAdjustToFloor(self, Archetype: ActorWrapper, SpawnLocation: Vector, SpawnRotation: Rotator) -> ActorWrapper: ...
    def SpawnBallAndStartPointAt(self, BallSpawnLocation: Vector, BallSpawnRotation: Rotator, StartPointSpawnLocation: Vector, StartPointSpawnRotation: Rotator) -> None: ...
    def StartNewRound(self) -> None: ...
    def StartPlayTest(self, InPlayTestType: int) -> None: ...
    def SwitchToRoundNumber(self, RoundNumber: int, BackupCurrentRound: int) -> None: ...
    def TagHistoryChanges(self) -> None: ...
    def UpdateActiveRoundData(self) -> None: ...
    def UpdateGoalMeshBlocker(self) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: TrainingEditorWrapper) -> None: ...
    def eventDestroyed(self) -> None: ...
    def eventPostBeginPlay(self) -> None: ...
    pass
class TutorialWrapper(ServerWrapper, TeamGameEventWrapper, GameEventWrapper, ActorWrapper, ObjectWrapper):
    def AddLocalPlayer(self, Player: PlayerControllerWrapper) -> None: ...
    def AllowDynamicCrowd(self) -> bool: ...
    def CanAwardPoints(self) -> bool: ...
    def CanQueSaveReplay(self) -> bool: ...
    def CanRedoRound(self) -> bool: ...
    def Chance(self, Chances: int) -> bool: ...
    def CheckForReset(self) -> None: ...
    def ClampPointToExtent(self, ExtentCenter: Vector, Point: Vector, Extent: Vector) -> Vector: ...
    def CleanupRoundActors(self) -> None: ...
    def CommitRedoRound(self) -> None: ...
    def DestroyCannon(self) -> None: ...
    def Destroyed(self) -> None: ...
    def DisableGoalReset(self) -> None: ...
    def EnableGoalReset(self) -> None: ...
    def EndGame(self) -> None: ...
    def EndTutorial(self) -> bool: ...
    def EventTutorialTipChanged(self, GameEvent: TutorialWrapper, NewTip: str) -> None: ...
    def GenerateGoalAimLocation(self, goalNumber: int, currentBallLocation: Vector) -> Vector: ...
    def GenerateShot(self, startPos: Vector, destination: Vector, speed: float) -> Vector: ...
    def GetBallBounceScale(self) -> float: ...
    def GetBallGoalNum(self) -> int: ...
    def GetBallInitialVelocity(self) -> Vector: ...
    def GetBallSpawnCount(self) -> int: ...
    def GetBallSpawnLocation(self) -> Vector: ...
    def GetCarSpawnLocation(self) -> Vector: ...
    def GetCarSpawnRotation(self) -> Rotator: ...
    def GetCurrentDebugStepX(self) -> int: ...
    def GetCurrentDebugStepY(self) -> int: ...
    def GetCurrentDebugStepZ(self) -> int: ...
    def GetDebugLocationInExtent(self, Extent: Vector) -> Vector: ...
    def GetDebugRotationType(self) -> int: ...
    def GetDifficulty(self) -> int: ...
    def GetDirectionToGoal(self, GoalNum: int) -> Vector: ...
    def GetEventStartTime(self) -> float: ...
    def GetGameBall(self) -> BallWrapper: ...
    def GetGameCar(self) -> CarWrapper: ...
    def GetGameEventRounds(self) -> int: ...
    def GetGameEventRounds2(self) -> int: ...
    def GetGamePawn(self) -> CarWrapper: ...
    def GetGoalDepth(self) -> float: ...
    def GetGoalExtent(self, goalNumber: int) -> Vector: ...
    def GetGoalExtent2(self, Goal: GoalWrapper) -> Vector: ...
    def GetGoalLocation(self, goalNumber: int) -> Vector: ...
    def GetGoalViewWidth(self, Goal: GoalWrapper, ViewerLoc: Vector) -> float: ...
    def GetOppositeTeamNum(self) -> int: ...
    def GetPointsScoredThisRound(self) -> int: ...
    def GetRandomGoalAimLocation(self, InTeamNum: int, BallLoc: Vector) -> Vector: ...
    def GetRandomLocationInExtent(self, Extent: Vector) -> Vector: ...
    def GetRandomSpawnIndex(self) -> int: ...
    def GetRedoCount(self) -> int: ...
    def GetRedoTotal(self) -> int: ...
    def GetScore(self) -> int: ...
    def GetShuffledSpawnIndex(self) -> int: ...
    def GetSpawnIndexTypeOverride(self) -> int: ...
    def GetStartMessageArchetype(self) -> UnrealStringWrapper: ...
    def GetStepLoc(self, Steps: int, TotalDist: float, bIncrement: int, Out_CurrentStep: int) -> float: ...
    def GetTeamNum(self) -> int: ...
    def GetTotalFieldExtent(self) -> Vector: ...
    def GetTotalRounds(self) -> int: ...
    def GetTrainingType(self) -> int: ...
    def GetWaveIndex(self) -> int: ...
    def GetWaveSpawnCount(self) -> int: ...
    def GetWinningTeam(self) -> TeamWrapper: ...
    def GetbAllowSuperBoost(self) -> int: ...
    def GetbDisplayedRedoPenaltyMessage(self) -> int: ...
    def GetbOnlyScoreInBallGoalNum(self) -> int: ...
    def GetbRedoRound(self) -> int: ...
    def GetbShowBoostMeter(self) -> int: ...
    def HandlePlayerResetTraining(self, GameEvent: GameEventWrapper) -> None: ...
    def HandleScoreUpdated(self, Team: TeamWrapper) -> None: ...
    def HandleVehicleSetup(self, Car: CarWrapper) -> None: ...
    def InitBallEffects(self) -> None: ...
    def InitBallVelocity(self) -> None: ...
    def InitCrowdManager(self) -> None: ...
    def InitDebugSetup(self, Car: CarWrapper) -> None: ...
    def InitGameSetup(self, Car: CarWrapper) -> None: ...
    def InitIntro(self) -> None: ...
    def InitMutators(self) -> None: ...
    def IsBallMovingTowardsGoal(self, goalNo: int, bw: BallWrapper) -> bool: ...
    def IsBallMovingTowardsGoal2(self, Goal: GoalWrapper, Ball: BallWrapper, MinVelocityForDestroy: float, InGoalDepth: float) -> bool: ...
    def IsGameEventComplete(self) -> bool: ...
    def IsInGoal(self, vec: Vector) -> bool: ...
    def IsPrimaryPlayer(self, Car: CarWrapper) -> bool: ...
    def OnInit(self) -> None: ...
    def OnLoadingMovieClosed(self) -> None: ...
    def OnPlayerRestarted(self, PlayerCar: CarWrapper) -> None: ...
    def OnVehicleSetup(self, Car: CarWrapper) -> None: ...
    def PredictInitialVelocity(self, StartLoc: Vector, EndLoc: Vector, Z: float) -> Vector: ...
    def Redo(self) -> None: ...
    def RedoRound2(self) -> None: ...
    def ResetBalls(self) -> None: ...
    def ResetGameEvent(self) -> None: ...
    def ResetRoundTime(self) -> None: ...
    def SaveLocalPlayerStats(self) -> None: ...
    def SetBallBounceScale(self, newBallBounceScale: float) -> None: ...
    def SetBallGoalNum(self, newBallGoalNum: int) -> None: ...
    def SetBallInitialVelocity(self, newBallInitialVelocity: Vector) -> None: ...
    def SetBallSpawnCount(self, newBallSpawnCount: int) -> None: ...
    def SetBallSpawnLocation(self, newBallSpawnLocation: Vector) -> None: ...
    def SetBallVelocity(self, InitialVelocity: Vector, Ball: BallWrapper) -> None: ...
    def SetCannonOrientation(self, NewLocation: Vector, NewRotation: Rotator) -> None: ...
    def SetCarSpawnLocation(self, v: Vector) -> None: ...
    def SetCarSpawnRotation(self, v: Rotator) -> None: ...
    def SetCurrentDebugStepX(self, newCurrentDebugStepX: int) -> None: ...
    def SetCurrentDebugStepY(self, newCurrentDebugStepY: int) -> None: ...
    def SetCurrentDebugStepZ(self, newCurrentDebugStepZ: int) -> None: ...
    def SetDebugRotationType(self, newDebugRotationType: int) -> None: ...
    def SetDifficulty(self, newDifficulty: int) -> None: ...
    def SetDifficulty2(self, InDifficulty: int) -> None: ...
    def SetEventStartTime(self, newEventStartTime: float) -> None: ...
    def SetGameEventRounds(self, newGameEventRounds: int) -> None: ...
    def SetGoalDepth(self, newGoalDepth: float) -> None: ...
    def SetGoalDepth2(self) -> None: ...
    def SetPointsScoredThisRound(self, newPointsScoredThisRound: int) -> None: ...
    def SetRandomSpawnIndex(self, newRandomSpawnIndex: int) -> None: ...
    def SetRedoCount(self, newRedoCount: int) -> None: ...
    def SetRedoTotal(self, newRedoTotal: int) -> None: ...
    def SetShowBoostMeter(self, bShow: int) -> None: ...
    def SetSpawnIndexTypeOverride(self, newSpawnIndexTypeOverride: int) -> None: ...
    def SetTeamNum(self, newTeamNum: int) -> None: ...
    def SetTotalFieldExtent(self, newTotalFieldExtent: Vector) -> None: ...
    def SetTutorialTip(self, NewTip: str) -> None: ...
    def SetWaveIndex(self, newWaveIndex: int) -> None: ...
    def SetWaveSpawnCount(self, newWaveSpawnCount: int) -> None: ...
    def SetbAllowSuperBoost(self, newbAllowSuperBoost: int) -> None: ...
    def SetbDisplayedRedoPenaltyMessage(self, newbDisplayedRedoPenaltyMessage: int) -> None: ...
    def SetbOnlyScoreInBallGoalNum(self, newbOnlyScoreInBallGoalNum: int) -> None: ...
    def SetbRedoRound(self, newbRedoRound: int) -> None: ...
    def SetbShowBoostMeter(self, newbShowBoostMeter: int) -> None: ...
    def ShouldAllowSuperBoost(self) -> bool: ...
    def ShowResetRoundMessage(self) -> None: ...
    def SkipTutorial(self) -> None: ...
    def SpawnBall(self, SpawnLoc: Vector, bWake: int, bSpawnCannon: int, BallArch: str) -> BallWrapper: ...
    def StartNewRound(self) -> None: ...
    def StartRound(self) -> None: ...
    def StartTimers(self) -> None: ...
    def UpdateBotCount(self) -> None: ...
    def UpdateMVP(self) -> None: ...
    def UpdateStats(self) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: TutorialWrapper) -> None: ...
    pass
class UNLOCKMETHOD():
    """
    Members:

      Default

      Drop

      Special

      Reward

      DLC

      Never

      MAX_
    """
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str:
        """
        :type: str
        """
    @property
    def value(self) -> int:
        """
        :type: int
        """
    DLC: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.DLC: 4>
    Default: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.Default: 0>
    Drop: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.Drop: 1>
    MAX_: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.MAX_: 6>
    Never: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.Never: 5>
    Reward: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.Reward: 3>
    Special: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.Special: 2>
    __members__: dict # value = {'Default': <UNLOCKMETHOD.Default: 0>, 'Drop': <UNLOCKMETHOD.Drop: 1>, 'Special': <UNLOCKMETHOD.Special: 2>, 'Reward': <UNLOCKMETHOD.Reward: 3>, 'DLC': <UNLOCKMETHOD.DLC: 4>, 'Never': <UNLOCKMETHOD.Never: 5>, 'MAX_': <UNLOCKMETHOD.MAX_: 6>}
    pass
class UniqueIDWrapper():
    @staticmethod
    def FromEpicAccountID(epicAccountID: str, uid: int, platform: OnlinePlatform, splitscreenID: int) -> UniqueIDWrapper: ...
    def GetEpicAccountID(self) -> str: ...
    def GetIdString(self) -> str: ...
    def GetPlatform(self) -> OnlinePlatform: ...
    def GetSplitscreenID(self) -> int: ...
    def GetUID(self) -> int: ...
    def __eq__(self, rhs: UniqueIDWrapper) -> bool: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: UniqueIDWrapper) -> None: ...
    def __lt__(self, rhs: UniqueIDWrapper) -> bool: ...
    def __ne__(self, rhs: UniqueIDWrapper) -> bool: ...
    def str(self) -> str: ...
    __hash__ = None
    pass
class UnrealColor():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: UnrealColor) -> None: ...
    @property
    def A(self) -> int:
        """
        :type: int
        """
    @A.setter
    def A(self, arg1: int) -> None:
        pass
    @property
    def B(self) -> int:
        """
        :type: int
        """
    @B.setter
    def B(self, arg1: int) -> None:
        pass
    @property
    def G(self) -> int:
        """
        :type: int
        """
    @G.setter
    def G(self, arg1: int) -> None:
        pass
    @property
    def R(self) -> int:
        """
        :type: int
        """
    @R.setter
    def R(self, arg1: int) -> None:
        pass
    pass
class UnrealStringWrapper(ArrayWrapper<wchar_t>):
    def IsNull(self) -> bool: ...
    def ToString(self) -> str: ...
    def ToWideString(self) -> str: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: UnrealStringWrapper) -> None: ...
    pass
class Vector():
    @typing.overload
    def __add__(self, f: float) -> Vector: ...
    @typing.overload
    def __add__(self, v2: Vector) -> Vector: ...
    @typing.overload
    def __iadd__(self, f: float) -> Vector: ...
    @typing.overload
    def __iadd__(self, v2: Vector) -> Vector: ...
    @typing.overload
    def __imul__(self, f: float) -> Vector: ...
    @typing.overload
    def __imul__(self, v2: Vector) -> Vector: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: Vector) -> None: ...
    @typing.overload
    def __init__(self, def_: float) -> None: ...
    @typing.overload
    def __init__(self, x: float, y: float, z: float) -> None: ...
    @typing.overload
    def __isub__(self, f: float) -> Vector: ...
    @typing.overload
    def __isub__(self, v2: Vector) -> Vector: ...
    @typing.overload
    def __itruediv__(self, f: float) -> Vector: ...
    @typing.overload
    def __itruediv__(self, v2: Vector) -> Vector: ...
    @typing.overload
    def __mul__(self, f: float) -> Vector: ...
    @typing.overload
    def __mul__(self, v2: Vector) -> Vector: ...
    @typing.overload
    def __sub__(self, f: float) -> Vector: ...
    @typing.overload
    def __sub__(self, v2: Vector) -> Vector: ...
    @typing.overload
    def __truediv__(self, f: float) -> Vector: ...
    @typing.overload
    def __truediv__(self, v2: Vector) -> Vector: ...
    def clone(self) -> Vector: ...
    @staticmethod
    def cross(v1: Vector, v2: Vector) -> Vector: ...
    @staticmethod
    def dot(v1: Vector, v2: Vector) -> float: ...
    def getNormalized(self) -> Vector: ...
    @staticmethod
    def lerp(v1: Vector, v2: Vector, t: float) -> Vector: ...
    def magnitude(self) -> float: ...
    def normalize(self) -> None: ...
    @staticmethod
    def slerp(v1: Vector, v2: Vector, t: float) -> Vector: ...
    @property
    def X(self) -> float:
        """
        :type: float
        """
    @X.setter
    def X(self, arg1: float) -> None:
        pass
    @property
    def Y(self) -> float:
        """
        :type: float
        """
    @Y.setter
    def Y(self, arg1: float) -> None:
        pass
    @property
    def Z(self) -> float:
        """
        :type: float
        """
    @Z.setter
    def Z(self, arg1: float) -> None:
        pass
    pass
class Vector2():
    @typing.overload
    def __add__(self, i: int) -> Vector2: ...
    @typing.overload
    def __add__(self, v2: Vector2) -> Vector2: ...
    @typing.overload
    def __iadd__(self, i: int) -> Vector2: ...
    @typing.overload
    def __iadd__(self, v2: Vector2) -> Vector2: ...
    @typing.overload
    def __imul__(self, i: int) -> Vector2: ...
    @typing.overload
    def __imul__(self, v2: Vector2) -> Vector2: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: Vector2) -> None: ...
    @typing.overload
    def __isub__(self, i: int) -> Vector2: ...
    @typing.overload
    def __isub__(self, v2: Vector2) -> Vector2: ...
    @typing.overload
    def __itruediv__(self, i: int) -> Vector2: ...
    @typing.overload
    def __itruediv__(self, v2: Vector2) -> Vector2: ...
    @typing.overload
    def __mul__(self, i: int) -> Vector2: ...
    @typing.overload
    def __mul__(self, v2: Vector2) -> Vector2: ...
    @typing.overload
    def __sub__(self, i: int) -> Vector2: ...
    @typing.overload
    def __sub__(self, v2: Vector2) -> Vector2: ...
    @typing.overload
    def __truediv__(self, i: int) -> Vector2: ...
    @typing.overload
    def __truediv__(self, v2: Vector2) -> Vector2: ...
    def minus(self, other: Vector2) -> Vector2: ...
    @property
    def X(self) -> int:
        """
        :type: int
        """
    @X.setter
    def X(self, arg1: int) -> None:
        pass
    @property
    def Y(self) -> int:
        """
        :type: int
        """
    @Y.setter
    def Y(self, arg1: int) -> None:
        pass
    pass
class Vector2F():
    @typing.overload
    def __add__(self, f: float) -> Vector2F: ...
    @typing.overload
    def __add__(self, v2: Vector2) -> Vector2F: ...
    @typing.overload
    def __add__(self, v2: Vector2F) -> Vector2F: ...
    @typing.overload
    def __iadd__(self, f: float) -> Vector2F: ...
    @typing.overload
    def __iadd__(self, v2: Vector2) -> Vector2F: ...
    @typing.overload
    def __iadd__(self, v2: Vector2F) -> Vector2F: ...
    @typing.overload
    def __imul__(self, f: float) -> Vector2F: ...
    @typing.overload
    def __imul__(self, v2: Vector2) -> Vector2F: ...
    @typing.overload
    def __imul__(self, v2: Vector2F) -> Vector2F: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: Vector2F) -> None: ...
    @typing.overload
    def __isub__(self, f: float) -> Vector2F: ...
    @typing.overload
    def __isub__(self, v2: Vector2) -> Vector2F: ...
    @typing.overload
    def __isub__(self, v2: Vector2F) -> Vector2F: ...
    @typing.overload
    def __itruediv__(self, f: float) -> Vector2F: ...
    @typing.overload
    def __itruediv__(self, v2: Vector2) -> Vector2F: ...
    @typing.overload
    def __itruediv__(self, v2: Vector2F) -> Vector2F: ...
    @typing.overload
    def __mul__(self, f: float) -> Vector2F: ...
    @typing.overload
    def __mul__(self, v2: Vector2) -> Vector2F: ...
    @typing.overload
    def __mul__(self, v2: Vector2F) -> Vector2F: ...
    @typing.overload
    def __sub__(self, f: float) -> Vector2F: ...
    @typing.overload
    def __sub__(self, v2: Vector2) -> Vector2F: ...
    @typing.overload
    def __sub__(self, v2: Vector2F) -> Vector2F: ...
    @typing.overload
    def __truediv__(self, f: float) -> Vector2F: ...
    @typing.overload
    def __truediv__(self, v2: Vector2) -> Vector2F: ...
    @typing.overload
    def __truediv__(self, v2: Vector2F) -> Vector2F: ...
    @typing.overload
    def minus(self, other: Vector2) -> Vector2F: ...
    @typing.overload
    def minus(self, other: Vector2F) -> Vector2F: ...
    @property
    def X(self) -> float:
        """
        :type: float
        """
    @X.setter
    def X(self, arg1: float) -> None:
        pass
    @property
    def Y(self) -> float:
        """
        :type: float
        """
    @Y.setter
    def Y(self, arg1: float) -> None:
        pass
    pass
class BoostPickupWrapper(VehiclePickupWrapper, ActorWrapper, ObjectWrapper):
    def CanPickup(self, Car: CarWrapper) -> bool: ...
    def GetBoostAmount(self) -> float: ...
    def GetBoostType(self) -> int: ...
    def Pickup2(self, Car: CarWrapper) -> None: ...
    def PlayPickedUpFX(self) -> None: ...
    def SetBoostAmount(self, newBoostAmount: float) -> None: ...
    def SetBoostType(self, newBoostType: int) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: BoostPickupWrapper) -> None: ...
    pass
class VehicleSimWrapper(ObjectWrapper):
    def GetBrakeTorque(self) -> float: ...
    def GetCar(self) -> CarWrapper: ...
    def GetDriveTorque(self) -> float: ...
    def GetIdleBrakeFactor(self) -> float: ...
    def GetOppositeBrakeFactor(self) -> float: ...
    def GetOutputBrake(self) -> float: ...
    def GetOutputHandbrake(self) -> float: ...
    def GetOutputSteer(self) -> float: ...
    def GetOutputThrottle(self) -> float: ...
    def GetSteeringSensitivity(self) -> float: ...
    def GetStopThreshold(self) -> float: ...
    def GetVehicle(self) -> VehicleWrapper: ...
    def GetWheels(self) -> ArrayWrapper<WheelWrapper>: ...
    def GetbUseAckermannSteering(self) -> int: ...
    def GetbWasAttached(self) -> int: ...
    def IsNull(self) -> bool: ...
    def SetBrakeTorque(self, newBrakeTorque: float) -> None: ...
    def SetCar(self, newCar: CarWrapper) -> None: ...
    def SetDriveTorque(self, newDriveTorque: float) -> None: ...
    def SetIdleBrakeFactor(self, newIdleBrakeFactor: float) -> None: ...
    def SetOppositeBrakeFactor(self, newOppositeBrakeFactor: float) -> None: ...
    def SetOutputBrake(self, newOutputBrake: float) -> None: ...
    def SetOutputHandbrake(self, newOutputHandbrake: float) -> None: ...
    def SetOutputSteer(self, newOutputSteer: float) -> None: ...
    def SetOutputThrottle(self, newOutputThrottle: float) -> None: ...
    def SetSteeringSensitivity(self, newSteeringSensitivity: float) -> None: ...
    def SetStopThreshold(self, newStopThreshold: float) -> None: ...
    def SetVehicle(self, newVehicle: VehicleWrapper) -> None: ...
    def SetbUseAckermannSteering(self, newbUseAckermannSteering: int) -> None: ...
    def SetbWasAttached(self, newbWasAttached: int) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: VehicleSimWrapper) -> None: ...
    pass
class CarWrapper(VehicleWrapper, RBActorWrapper, ActorWrapper, ObjectWrapper):
    def AddDefaultCarComponents(self) -> None: ...
    def AnyWheelTouchingGround(self) -> bool: ...
    def ApplyBallImpactForces(self, Ball: BallWrapper, HitLocation: Vector) -> None: ...
    def ApplyCarImpactForces(self, OtherCar: CarWrapper, HitLocation: Vector, HitNormal: Vector) -> int: ...
    def CanDemolish(self, HitCar: CarWrapper) -> bool: ...
    def ClearAttacker(self) -> None: ...
    def CopyPushFactorCurve(self) -> None: ...
    def Demolish(self) -> None: ...
    def Demolish2(self, Demolisher: RBActorWrapper) -> None: ...
    def DemolishDestroyTimer(self) -> None: ...
    def Destroy(self) -> None: ...
    def DetachPrimitiveComponent(self, Component: PrimitiveComponentWrapper) -> None: ...
    def EnablePodiumMode(self) -> None: ...
    def FellOutOfWorld(self) -> None: ...
    def ForceBoost(self, force: bool) -> None: ...
    def GetAddedBallForceMultiplier(self) -> float: ...
    def GetAddedCarForceMultiplier(self) -> float: ...
    def GetAttachedPickup(self) -> RumblePickupComponentWrapper: ...
    def GetAttackerPRI(self) -> PriWrapper: ...
    def GetBodyFXActor(self) -> FXActorWrapper: ...
    def GetDefaultCarComponents(self) -> ArrayWrapper<CarComponentWrapper>: ...
    def GetDemolishSpeed(self) -> int: ...
    def GetDemolishTarget(self) -> int: ...
    def GetExitFXArchetype(self) -> FXActorWrapper: ...
    def GetFlipComponent(self) -> FlipCarComponentWrapper: ...
    def GetGameEvent(self) -> GameEventWrapper: ...
    def GetInput(self) -> ControllerInput: ...
    def GetLastWheelsHitBallTime(self) -> float: ...
    def GetLoadoutBody(self) -> int: ...
    def GetLoadoutTeamIndex(self) -> int: ...
    def GetMaxDriveBackwardsSpeed(self) -> float: ...
    def GetMaxDriveForwardSpeed(self) -> float: ...
    def GetMaxTimeForDodge(self) -> float: ...
    def GetMouseAccel(self) -> Vector: ...
    def GetMouseAirAccel(self) -> Vector: ...
    def GetOwnerName(self) -> str: ...
    def GetPreviewTeamIndex(self) -> int: ...
    def GetReplayFocusLocation(self) -> Vector: ...
    def GetReplayFocusOffset(self) -> Vector: ...
    def GetReplicatedCarScale(self) -> float: ...
    def GetbCollidesWithVehicles(self) -> int: ...
    def GetbDemolishOnGoalZone(self) -> int: ...
    def GetbDemolishOnOpposingGround(self) -> int: ...
    def GetbLoadoutSet(self) -> int: ...
    def GetbOverrideBoostOn(self) -> int: ...
    def GetbOverrideHandbrakeOn(self) -> int: ...
    def GetbWasInGoalZone(self) -> int: ...
    def GetbWasOnOpposingGround(self) -> int: ...
    def GiveCarComponent(self, ComponentArchetype: CarComponentWrapper, Activator: PriWrapper) -> CarComponentWrapper: ...
    def HandleGameEventChanged(self, MyPRI: PriWrapper) -> None: ...
    def HandleLoadoutSelected(self, MyPRI: PriWrapper) -> None: ...
    def HandleTeamChanged(self, MyPRI: PriXWrapper) -> None: ...
    def HandleWheelBallHit(self, Wheel: WheelWrapper) -> None: ...
    def HasFlip(self) -> int: ...
    def HasTeam(self) -> bool: ...
    def InitTeamPaint(self) -> None: ...
    def IsBoostCheap(self) -> bool: ...
    def IsBumperHit(self, OtherCar: CarWrapper) -> bool: ...
    def IsDodging(self) -> bool: ...
    def NotifyNewAttacker(self, Attacker: PriWrapper) -> None: ...
    def OnClubColorsChanged(self) -> None: ...
    def OnControllerChanged(self) -> None: ...
    def OnHitBall(self, Ball: BallWrapper, HitLocation: Vector, HitNormal: Vector) -> None: ...
    def OnJumpPressed(self) -> None: ...
    def OnJumpReleased(self) -> None: ...
    def OnPRIChanged(self) -> None: ...
    def OnPickupChanged(self, InPickup: RumblePickupComponentWrapper) -> None: ...
    def RespawnInPlace(self) -> None: ...
    def SetAddedBallForceMultiplier(self, newAddedBallForceMultiplier: float) -> None: ...
    def SetAddedCarForceMultiplier(self, newAddedCarForceMultiplier: float) -> None: ...
    def SetAttachedPickup(self, newAttachedPickup: RumblePickupComponentWrapper) -> None: ...
    def SetAttachedPickup2(self, InPickup: RumblePickupComponentWrapper) -> None: ...
    def SetAttackerPRI(self, newAttackerPRI: PriWrapper) -> None: ...
    def SetBodyFXActor(self, newBodyFXActor: FXActorWrapper) -> None: ...
    def SetBoostCheap(self, b: bool) -> None: ...
    def SetCarRotation(self, rotation: Rotator) -> None: ...
    def SetCarScale(self, NewScale: float) -> None: ...
    def SetDemolishSpeed(self, newDemolishSpeed: int) -> None: ...
    def SetDemolishTarget(self, newDemolishTarget: int) -> None: ...
    def SetExitFXArchetype(self, newExitFXArchetype: FXActorWrapper) -> None: ...
    def SetGameEvent(self, newGameEvent: GameEventWrapper) -> None: ...
    def SetInput(self, input: ControllerInput) -> None: ...
    def SetLastWheelsHitBallTime(self, newLastWheelsHitBallTime: float) -> None: ...
    def SetMaxTimeForDodge(self, newMaxTimeForDodge: float) -> None: ...
    def SetMouseAccel(self, newMouseAccel: Vector) -> None: ...
    def SetMouseAirAccel(self, newMouseAirAccel: Vector) -> None: ...
    def SetReplayFocusOffset(self, newReplayFocusOffset: Vector) -> None: ...
    def SetReplicatedCarScale(self, newReplicatedCarScale: float) -> None: ...
    def SetbCollidesWithVehicles(self, newbCollidesWithVehicles: int) -> None: ...
    def SetbDemolishOnGoalZone(self, newbDemolishOnGoalZone: int) -> None: ...
    def SetbDemolishOnOpposingGround(self, newbDemolishOnOpposingGround: int) -> None: ...
    def SetbLoadoutSet(self, newbLoadoutSet: int) -> None: ...
    def SetbOverrideBoostOn(self, newbOverrideBoostOn: int) -> None: ...
    def SetbOverrideHandbrakeOn(self, newbOverrideHandbrakeOn: int) -> None: ...
    def SetbWasInGoalZone(self, newbWasInGoalZone: int) -> None: ...
    def SetbWasOnOpposingGround(self, newbWasOnOpposingGround: int) -> None: ...
    def ShouldDemolish(self, HitCar: CarWrapper, HitLocation: Vector, HitNormal: Vector, Result: int) -> bool: ...
    def Teleport(self, SpawnLocation: Vector, SpawnRotation: Rotator, bStopVelocity: int, bUpdateRotation: int, ExtraForce: float) -> bool: ...
    def Unfreeze(self) -> None: ...
    def UpdateBallIndicator(self) -> None: ...
    def UpdateTeamLoadout(self) -> bool: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: CarWrapper) -> None: ...
    def eventOnGroundChanged(self) -> None: ...
    def eventOnSuperSonicChanged(self) -> None: ...
    def eventSetVehicleInput(self, NewInput: ControllerInput) -> None: ...
    pass
class VelcroPickup(RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    def DoBreak(self) -> None: ...
    def GetAfterHitDuration(self) -> float: ...
    def GetAttachTime(self) -> float: ...
    def GetBallOffset(self) -> Vector: ...
    def GetBreakTime(self) -> float: ...
    def GetCheckLastTouchRate(self) -> float: ...
    def GetLastTouchCheckTime(self) -> float: ...
    def GetMinBreakForce(self) -> float: ...
    def GetMinBreakTime(self) -> float: ...
    def GetOldBallMass(self) -> float: ...
    def GetPostBreakDuration(self) -> float: ...
    def GetWeldedBall(self) -> BallWrapper: ...
    def GetbBroken(self) -> int: ...
    def GetbHit(self) -> int: ...
    def GetbUseRealOffset(self) -> int: ...
    def HandleCarTouch(self, InBall: BallWrapper, InCar: CarWrapper, HitType: int) -> None: ...
    def OnBallHit(self) -> None: ...
    def PickupEnd(self) -> None: ...
    def PickupStart(self) -> None: ...
    def SetAfterHitDuration(self, newAfterHitDuration: float) -> None: ...
    def SetAttachTime(self, newAttachTime: float) -> None: ...
    def SetBallOffset(self, newBallOffset: Vector) -> None: ...
    def SetBreakTime(self, newBreakTime: float) -> None: ...
    def SetCheckLastTouchRate(self, newCheckLastTouchRate: float) -> None: ...
    def SetLastTouchCheckTime(self, newLastTouchCheckTime: float) -> None: ...
    def SetMinBreakForce(self, newMinBreakForce: float) -> None: ...
    def SetMinBreakTime(self, newMinBreakTime: float) -> None: ...
    def SetOldBallMass(self, newOldBallMass: float) -> None: ...
    def SetPostBreakDuration(self, newPostBreakDuration: float) -> None: ...
    def SetWeldedBall(self, newWeldedBall: BallWrapper) -> None: ...
    def SetbBroken(self, newbBroken: int) -> None: ...
    def SetbHit(self, newbHit: int) -> None: ...
    def SetbUseRealOffset(self, newbUseRealOffset: int) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: VelcroPickup) -> None: ...
    pass
class VideoSettings():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: VideoSettings) -> None: ...
    @property
    def HDRBrightnessScale(self) -> float:
        """
        :type: float
        """
    @HDRBrightnessScale.setter
    def HDRBrightnessScale(self, arg1: float) -> None:
        pass
    @property
    def HDRGammaScale(self) -> float:
        """
        :type: float
        """
    @HDRGammaScale.setter
    def HDRGammaScale(self, arg1: float) -> None:
        pass
    @property
    def HDRPaperWhiteScale(self) -> float:
        """
        :type: float
        """
    @HDRPaperWhiteScale.setter
    def HDRPaperWhiteScale(self, arg1: float) -> None:
        pass
    @property
    def MaxFPS(self) -> int:
        """
        :type: int
        """
    @MaxFPS.setter
    def MaxFPS(self, arg1: int) -> None:
        pass
    @property
    def Resolution(self) -> str:
        """
        :type: str
        """
    @Resolution.setter
    def Resolution(self, arg1: str) -> None:
        pass
    @property
    def VideoOptions(self) -> typing.Dict[str, str]:
        """
        :type: typing.Dict[str, str]
        """
    @VideoOptions.setter
    def VideoOptions(self, arg1: typing.Dict[str, str]) -> None:
        pass
    @property
    def WindowMode(self) -> int:
        """
        :type: int
        """
    @WindowMode.setter
    def WindowMode(self, arg1: int) -> None:
        pass
    @property
    def bEnableHDRSideBySideVisualizer(self) -> bool:
        """
        :type: bool
        """
    @bEnableHDRSideBySideVisualizer.setter
    def bEnableHDRSideBySideVisualizer(self, arg1: bool) -> None:
        pass
    @property
    def bShowLensFlares(self) -> bool:
        """
        :type: bool
        """
    @bShowLensFlares.setter
    def bShowLensFlares(self, arg1: bool) -> None:
        pass
    @property
    def bShowLightShafts(self) -> bool:
        """
        :type: bool
        """
    @bShowLightShafts.setter
    def bShowLightShafts(self, arg1: bool) -> None:
        pass
    @property
    def bShowWeatherFX(self) -> bool:
        """
        :type: bool
        """
    @bShowWeatherFX.setter
    def bShowWeatherFX(self, arg1: bool) -> None:
        pass
    @property
    def bTranslucentArenaShaders(self) -> bool:
        """
        :type: bool
        """
    @bTranslucentArenaShaders.setter
    def bTranslucentArenaShaders(self, arg1: bool) -> None:
        pass
    @property
    def bUncappedFramerate(self) -> bool:
        """
        :type: bool
        """
    @bUncappedFramerate.setter
    def bUncappedFramerate(self, arg1: bool) -> None:
        pass
    @property
    def bVsync(self) -> bool:
        """
        :type: bool
        """
    @bVsync.setter
    def bVsync(self, arg1: bool) -> None:
        pass
    pass
class ViewTarget():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: ViewTarget) -> None: ...
    @property
    def AspectRatio(self) -> float:
        """
        :type: float
        """
    @AspectRatio.setter
    def AspectRatio(self, arg1: float) -> None:
        pass
    @property
    def Controller(self) -> capsule:
        """
        :type: capsule
        """
    @Controller.setter
    def Controller(self, arg1: capsule) -> None:
        pass
    @property
    def POV(self) -> POV:
        """
        :type: POV
        """
    @POV.setter
    def POV(self, arg1: POV) -> None:
        pass
    @property
    def PRI(self) -> capsule:
        """
        :type: capsule
        """
    @PRI.setter
    def PRI(self, arg1: capsule) -> None:
        pass
    @property
    def Target(self) -> capsule:
        """
        :type: capsule
        """
    @Target.setter
    def Target(self, arg1: capsule) -> None:
        pass
    pass
class WheelContactData():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: WheelContactData) -> None: ...
    @property
    def Actor(self) -> capsule:
        """
        :type: capsule
        """
    @Actor.setter
    def Actor(self, arg1: capsule) -> None:
        pass
    @property
    def Component(self) -> capsule:
        """
        :type: capsule
        """
    @Component.setter
    def Component(self, arg1: capsule) -> None:
        pass
    @property
    def HasContactChangeTime(self) -> float:
        """
        :type: float
        """
    @HasContactChangeTime.setter
    def HasContactChangeTime(self, arg1: float) -> None:
        pass
    @property
    def LatDirection(self) -> Vector:
        """
        :type: Vector
        """
    @LatDirection.setter
    def LatDirection(self, arg1: Vector) -> None:
        pass
    @property
    def Location(self) -> Vector:
        """
        :type: Vector
        """
    @Location.setter
    def Location(self, arg1: Vector) -> None:
        pass
    @property
    def LongDirection(self) -> Vector:
        """
        :type: Vector
        """
    @LongDirection.setter
    def LongDirection(self, arg1: Vector) -> None:
        pass
    @property
    def Normal(self) -> Vector:
        """
        :type: Vector
        """
    @Normal.setter
    def Normal(self, arg1: Vector) -> None:
        pass
    @property
    def PhysMatProp(self) -> capsule:
        """
        :type: capsule
        """
    @PhysMatProp.setter
    def PhysMatProp(self, arg1: capsule) -> None:
        pass
    @property
    def bHasContact(self) -> int:
        """
        :type: int
        """
    @bHasContact.setter
    def bHasContact(self, arg1: int) -> None:
        pass
    @property
    def bHasContactWithWorldGeometry(self) -> int:
        """
        :type: int
        """
    @bHasContactWithWorldGeometry.setter
    def bHasContactWithWorldGeometry(self, arg1: int) -> None:
        pass
    pass
class WheelWrapper(ObjectWrapper):
    def EventContactChanged(self, Wheel: WheelWrapper) -> None: ...
    def GetAerialAccelerationFactor(self) -> float: ...
    def GetAerialThrottleToVelocityFactor(self) -> float: ...
    def GetBoneOffset(self) -> Vector: ...
    def GetContact(self) -> WheelContactData: ...
    def GetContactForceDistance(self) -> float: ...
    def GetFrictionCurveInput(self) -> float: ...
    def GetLinearVelocity(self) -> Vector: ...
    def GetLocalRestPosition(self) -> Vector: ...
    def GetLocalSuspensionRayStart(self) -> Vector: ...
    def GetPresetRestPosition(self) -> Vector: ...
    def GetRefWheelLocation(self) -> Vector: ...
    def GetSpinSpeed(self) -> float: ...
    def GetSpinSpeedDecayRate(self) -> float: ...
    def GetSteer2(self) -> float: ...
    def GetSteerFactor(self) -> float: ...
    def GetSuspensionDampingCompression(self) -> float: ...
    def GetSuspensionDampingRelaxation(self) -> float: ...
    def GetSuspensionDistance(self) -> float: ...
    def GetSuspensionMaxRaise(self) -> float: ...
    def GetSuspensionStiffness(self) -> float: ...
    def GetSuspensionTravel(self) -> float: ...
    def GetVehicleSim(self) -> VehicleSimWrapper: ...
    def GetWheelIndex(self) -> int: ...
    def GetWheelRadius(self) -> float: ...
    def GetbDrawDebug(self) -> int: ...
    def GetbHadContact(self) -> int: ...
    def IsNull(self) -> bool: ...
    def SetAerialAccelerationFactor(self, newAerialAccelerationFactor: float) -> None: ...
    def SetAerialThrottleToVelocityFactor(self, newAerialThrottleToVelocityFactor: float) -> None: ...
    def SetBoneOffset(self, newBoneOffset: Vector) -> None: ...
    def SetContact(self, newContact: WheelContactData) -> None: ...
    def SetContactForceDistance(self, newContactForceDistance: float) -> None: ...
    def SetFrictionCurveInput(self, newFrictionCurveInput: float) -> None: ...
    def SetLocalRestPosition(self, newLocalRestPosition: Vector) -> None: ...
    def SetLocalSuspensionRayStart(self, newLocalSuspensionRayStart: Vector) -> None: ...
    def SetPresetRestPosition(self, newPresetRestPosition: Vector) -> None: ...
    def SetSpinSpeed(self, newSpinSpeed: float) -> None: ...
    def SetSpinSpeedDecayRate(self, newSpinSpeedDecayRate: float) -> None: ...
    def SetSteerFactor(self, newSteerFactor: float) -> None: ...
    def SetSuspensionDampingCompression(self, newSuspensionDampingCompression: float) -> None: ...
    def SetSuspensionDampingRelaxation(self, newSuspensionDampingRelaxation: float) -> None: ...
    def SetSuspensionMaxRaise(self, newSuspensionMaxRaise: float) -> None: ...
    def SetSuspensionStiffness(self, newSuspensionStiffness: float) -> None: ...
    def SetSuspensionTravel(self, newSuspensionTravel: float) -> None: ...
    def SetVehicleSim(self, newVehicleSim: VehicleSimWrapper) -> None: ...
    def SetWheelIndex(self, newWheelIndex: int) -> None: ...
    def SetWheelRadius(self, newWheelRadius: float) -> None: ...
    def SetbDrawDebug(self, newbDrawDebug: int) -> None: ...
    def SetbHadContact(self, newbHadContact: int) -> None: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: WheelWrapper) -> None: ...
    pass
class WorldContactData():
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: WorldContactData) -> None: ...
    @property
    def Location(self) -> Vector:
        """
        :type: Vector
        """
    @Location.setter
    def Location(self, arg1: Vector) -> None:
        pass
    @property
    def Normal(self) -> Vector:
        """
        :type: Vector
        """
    @Normal.setter
    def Normal(self, arg1: Vector) -> None:
        pass
    @property
    def Velocity(self) -> Vector:
        """
        :type: Vector
        """
    @Velocity.setter
    def Velocity(self, arg1: Vector) -> None:
        pass
    @property
    def bHasContact(self) -> int:
        """
        :type: int
        """
    @bHasContact.setter
    def bHasContact(self, arg1: int) -> None:
        pass
    pass
class WorldInfoWrapper(ActorWrapper, ObjectWrapper):
    def GetAudioTimeSeconds(self) -> float: ...
    def GetDefaultGravityZ(self) -> float: ...
    def GetDeltaSeconds(self) -> float: ...
    def GetDemoPlayTimeDilation(self) -> float: ...
    def GetGlobalGravityZ(self) -> float: ...
    def GetPauseDelay(self) -> float: ...
    def GetRBPhysicsGravityScaling(self) -> float: ...
    def GetRealDeltaSeconds(self) -> float: ...
    def GetRealTimeSeconds(self) -> float: ...
    def GetRealTimeToUnPause(self) -> float: ...
    def GetStallZ(self) -> float: ...
    def GetTimeDilation(self) -> float: ...
    def GetTimeSeconds(self) -> float: ...
    def GetWorldGravityZ(self) -> float: ...
    @typing.overload
    def __init__(self, mem: int) -> None: ...
    @typing.overload
    def __init__(self, other: WorldInfoWrapper) -> None: ...
    pass
def QuatSlerp(q1: Quat, q2: Quat, percent: float) -> Quat:
    pass
def QuatToRotator(q: Quat) -> Rotator:
    pass
def RotateVectorWithQuat(v: Vector, q: Quat) -> Vector:
    pass
def RotatorToQuat(rot: Rotator) -> Quat:
    pass
def RotatorToVector(R: Rotator) -> Vector:
    pass
def VectorToRotator(vVector: Vector) -> Rotator:
    pass
def fixPitch(newRotation: int) -> int:
    pass
def fixRotator(newRotation: int) -> int:
    pass
def quat_add(r: float, a: float, b: float) -> None:
    pass
def quat_conj(r: float, q: float) -> None:
    pass
def quat_identity(q: float) -> None:
    pass
def quat_inner_product(a: float, b: float) -> float:
    pass
def quat_mul(r: float, p: float, q: float) -> None:
    pass
def quat_mul_vec3(r: float, q: float, v: float) -> None:
    pass
def quat_rotate(r: float, angle: float, axis: float) -> None:
    pass
def quat_scale(r: float, v: float, s: float) -> None:
    pass
def quat_sub(r: float, a: float, b: float) -> None:
    pass
def vec2_add(r: float, a: float, b: float) -> None:
    pass
def vec2_len(v: float) -> float:
    pass
def vec2_max(r: float, a: float, b: float) -> None:
    pass
def vec2_min(r: float, a: float, b: float) -> None:
    pass
def vec2_mul_inner(a: float, b: float) -> float:
    pass
def vec2_norm(r: float, v: float) -> None:
    pass
def vec2_scale(r: float, v: float, s: float) -> None:
    pass
def vec2_sub(r: float, a: float, b: float) -> None:
    pass
def vec3_add(r: float, a: float, b: float) -> None:
    pass
def vec3_dot(a: float, b: float) -> float:
    pass
def vec3_len(v: float) -> float:
    pass
def vec3_max(r: float, a: float, b: float) -> None:
    pass
def vec3_min(r: float, a: float, b: float) -> None:
    pass
def vec3_mul_cross(r: float, a: float, b: float) -> None:
    pass
def vec3_mul_inner(a: float, b: float) -> float:
    pass
def vec3_norm(r: float, v: float) -> None:
    pass
def vec3_reflect(r: float, v: float, n: float) -> None:
    pass
def vec3_scale(r: float, v: float, s: float) -> None:
    pass
def vec3_sub(r: float, a: float, b: float) -> None:
    pass
def vec4_add(r: float, a: float, b: float) -> None:
    pass
def vec4_len(v: float) -> float:
    pass
def vec4_max(r: float, a: float, b: float) -> None:
    pass
def vec4_min(r: float, a: float, b: float) -> None:
    pass
def vec4_mul_cross(r: float, a: float, b: float) -> None:
    pass
def vec4_mul_inner(a: float, b: float) -> float:
    pass
def vec4_norm(r: float, v: float) -> None:
    pass
def vec4_reflect(r: float, v: float, n: float) -> None:
    pass
def vec4_scale(r: float, v: float, s: float) -> None:
    pass
def vec4_sub(r: float, a: float, b: float) -> None:
    pass
BlackMarket: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.BlackMarket: 6>
CAR_AFTERSHOCK: bakkesmod.CARBODY # value = <CARBODY.CAR_AFTERSHOCK: 1286>
CAR_ANIMUSGP: bakkesmod.CARBODY # value = <CARBODY.CAR_ANIMUSGP: 1932>
CAR_ARMADILLO: bakkesmod.CARBODY # value = <CARBODY.CAR_ARMADILLO: 625>
CAR_BACKFIRE: bakkesmod.CARBODY # value = <CARBODY.CAR_BACKFIRE: 21>
CAR_BATMOBILE: bakkesmod.CARBODY # value = <CARBODY.CAR_BATMOBILE: 803>
CAR_BONESHAKER: bakkesmod.CARBODY # value = <CARBODY.CAR_BONESHAKER: 1623>
CAR_BREAKOUT: bakkesmod.CARBODY # value = <CARBODY.CAR_BREAKOUT: 22>
CAR_BREAKOUTTYPES: bakkesmod.CARBODY # value = <CARBODY.CAR_BREAKOUTTYPES: 1416>
CAR_CENTIO: bakkesmod.CARBODY # value = <CARBODY.CAR_CENTIO: 1919>
CAR_DELOREAN: bakkesmod.CARBODY # value = <CARBODY.CAR_DELOREAN: 597>
CAR_DOMINUS: bakkesmod.CARBODY # value = <CARBODY.CAR_DOMINUS: 403>
CAR_DOMINUSGT: bakkesmod.CARBODY # value = <CARBODY.CAR_DOMINUSGT: 1018>
CAR_ENDO: bakkesmod.CARBODY # value = <CARBODY.CAR_ENDO: 1624>
CAR_ESPER: bakkesmod.CARBODY # value = <CARBODY.CAR_ESPER: 1317>
CAR_GIZMO: bakkesmod.CARBODY # value = <CARBODY.CAR_GIZMO: 26>
CAR_GROG: bakkesmod.CARBODY # value = <CARBODY.CAR_GROG: 607>
CAR_HOTSHOT: bakkesmod.CARBODY # value = <CARBODY.CAR_HOTSHOT: 29>
CAR_ICECHARGER: bakkesmod.CARBODY # value = <CARBODY.CAR_ICECHARGER: 1675>
CAR_JOGER619RS: bakkesmod.CARBODY # value = <CARBODY.CAR_JOGER619RS: 1856>
CAR_MANTIS: bakkesmod.CARBODY # value = <CARBODY.CAR_MANTIS: 1691>
CAR_MARAUDER: bakkesmod.CARBODY # value = <CARBODY.CAR_MARAUDER: 1172>
CAR_MASAMUNE: bakkesmod.CARBODY # value = <CARBODY.CAR_MASAMUNE: 1171>
CAR_MERC: bakkesmod.CARBODY # value = <CARBODY.CAR_MERC: 30>
CAR_OCTANE: bakkesmod.CARBODY # value = <CARBODY.CAR_OCTANE: 23>
CAR_OCTANEZSR: bakkesmod.CARBODY # value = <CARBODY.CAR_OCTANEZSR: 1568>
CAR_PALADIN: bakkesmod.CARBODY # value = <CARBODY.CAR_PALADIN: 24>
CAR_PROTEUS: bakkesmod.CARBODY # value = <CARBODY.CAR_PROTEUS: 1475>
CAR_RIPPER: bakkesmod.CARBODY # value = <CARBODY.CAR_RIPPER: 600>
CAR_ROADHOG: bakkesmod.CARBODY # value = <CARBODY.CAR_ROADHOG: 25>
CAR_ROADHOGXL: bakkesmod.CARBODY # value = <CARBODY.CAR_ROADHOGXL: 1300>
CAR_SCARAB: bakkesmod.CARBODY # value = <CARBODY.CAR_SCARAB: 404>
CAR_SWEETTOOTH: bakkesmod.CARBODY # value = <CARBODY.CAR_SWEETTOOTH: 27>
CAR_TAKUMI: bakkesmod.CARBODY # value = <CARBODY.CAR_TAKUMI: 402>
CAR_TAKUMIRXT: bakkesmod.CARBODY # value = <CARBODY.CAR_TAKUMIRXT: 1295>
CAR_TRITON: bakkesmod.CARBODY # value = <CARBODY.CAR_TRITON: 1478>
CAR_TWINMILL: bakkesmod.CARBODY # value = <CARBODY.CAR_TWINMILL: 1603>
CAR_VENOM: bakkesmod.CARBODY # value = <CARBODY.CAR_VENOM: 31>
CAR_VULCAN: bakkesmod.CARBODY # value = <CARBODY.CAR_VULCAN: 1533>
CAR_WARTHOG: bakkesmod.CARBODY # value = <CARBODY.CAR_WARTHOG: 723>
CAR_XDEVIL: bakkesmod.CARBODY # value = <CARBODY.CAR_XDEVIL: 28>
CAR_XDEVILMK2: bakkesmod.CARBODY # value = <CARBODY.CAR_XDEVILMK2: 1159>
CAR_ZIPPY: bakkesmod.CARBODY # value = <CARBODY.CAR_ZIPPY: 523>
Common: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Common: 0>
DLC: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.DLC: 4>
Default: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.Default: 0>
Drop: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.Drop: 1>
Exotic: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Exotic: 5>
Import: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Import: 4>
Limited: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Limited: 8>
MAX: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.MAX: 9>
MAX_: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.MAX_: 6>
Never: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.Never: 5>
OnlinePlatform_Deleted: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_Deleted: 9>
OnlinePlatform_Dingo: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_Dingo: 4>
OnlinePlatform_Epic: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_Epic: 11>
OnlinePlatform_MAX: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_MAX: 12>
OnlinePlatform_NNX: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_NNX: 7>
OnlinePlatform_OldNNX: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_OldNNX: 6>
OnlinePlatform_PS3: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_PS3: 3>
OnlinePlatform_PS4: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_PS4: 2>
OnlinePlatform_PsyNet: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_PsyNet: 8>
OnlinePlatform_QQ: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_QQ: 5>
OnlinePlatform_Steam: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_Steam: 1>
OnlinePlatform_Unknown: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_Unknown: 0>
OnlinePlatform_WeGame: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_WeGame: 10>
PERMISSION_ALL = 0
PERMISSION_CUSTOM_TRAINING = 8
PERMISSION_FREEPLAY = 4
PERMISSION_MENU = 1
PERMISSION_OFFLINE = 128
PERMISSION_ONLINE = 16
PERMISSION_PAUSEMENU_CLOSED = 32
PERMISSION_REPLAY = 64
PERMISSION_SOCCAR = 2
PLUGINTYPE_BOTAI = 8
PLUGINTYPE_CUSTOM_TRAINING = 2
PLUGINTYPE_FREEPLAY = 1
PLUGINTYPE_REPLAY = 16
PLUGINTYPE_SPECTATOR = 4
PLUGINTYPE_THREADED = 32
PLUGINTYPE_THREADEDUNLOAD = 64
Premium: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Premium: 7>
Rare: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Rare: 2>
Reward: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.Reward: 3>
Special: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.Special: 2>
TRADEHOLD_ALL: bakkesmod.TRADEHOLD # value = <TRADEHOLD.TRADEHOLD_ALL: -1>
TRADEHOLD_NONE: bakkesmod.TRADEHOLD # value = <TRADEHOLD.TRADEHOLD_NONE: 0>
TRADEHOLD_P2P: bakkesmod.TRADEHOLD # value = <TRADEHOLD.TRADEHOLD_P2P: -2>
ToastType_Error: bakkesmod.ToastType # value = <ToastType.ToastType_Error: 3>
ToastType_Info: bakkesmod.ToastType # value = <ToastType.ToastType_Info: 0>
ToastType_OK: bakkesmod.ToastType # value = <ToastType.ToastType_OK: 1>
ToastType_Warning: bakkesmod.ToastType # value = <ToastType.ToastType_Warning: 2>
Uncommon: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Uncommon: 1>
VeryRare: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.VeryRare: 3>
__author__ = 'Stanbroek'
__version__ = 'PLUGIN_VERSION'
cvarManager: bakkesmod.CVarManagerWrapper
gameWrapper: bakkesmod.GameWrapper
