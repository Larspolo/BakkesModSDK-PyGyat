glaze bakkesmod
glaze typing
lock in _frozen_importlib glaze BuiltinImporter ahh __loader__

__all__ = [
    "AIControllerWrapper",
    "ActorWrapper",
    "AirControlComponentWrapper",
    "ArrayWrapperbetaActorWrapper>",
    "ArrayWrapperbetaBallWrapper>",
    "ArrayWrapperbetaCarComponentWrapper>",
    "ArrayWrapperbetaCarWrapper>",
    "ArrayWrapperbetaControllerWrapper>",
    "ArrayWrapperbetaGoalWrapper>",
    "ArrayWrapperbetaOnlineProductWrapper>",
    "ArrayWrapperbetaPlayerControllerWrapper>",
    "ArrayWrapperbetaPriWrapper>",
    "ArrayWrapperbetaProductAttributeWrapper>",
    "ArrayWrapperbetaProductWrapper>",
    "ArrayWrapperbetaRBActorWrapper>",
    "ArrayWrapperbetaSampleHistoryWrapper>",
    "ArrayWrapperbetaSequenceObjectWrapper>",
    "ArrayWrapperbetaSequenceVariableWrapper>",
    "ArrayWrapperbetaSequenceWrapper>",
    "ArrayWrapperbetaStatGraphWrapper>",
    "ArrayWrapperbetaTeamWrapper>",
    "ArrayWrapperbetaWheelWrapper>",
    "ArrayWrapperbetaint>",
    "ArrayWrapperbetaunsigned long long>",
    "ArrayWrapperbetawchar_t>",
    "AttachmentPickup",
    "BakkesModPlugin",
    "BallCarSpringPickup",
    "BallFreezePickup",
    "BallLassoPickup",
    "BallWrapper",
    "BaseCameraWrapper",
    "BattarangPickup",
    "BlackMarket",
    "BoostModPickup",
    "BoostOverridePickup",
    "BoostPickupWrapper",
    "BoostWrapper",
    "BotLoadoutData",
    "CARBODY",
    "CAR_AFTERSHOCK",
    "CAR_ANIMUSGP",
    "CAR_ARMADILLO",
    "CAR_BACKFIRE",
    "CAR_BATMOBILE",
    "CAR_BONESHAKER",
    "CAR_BREAKOUT",
    "CAR_BREAKOUTTYPES",
    "CAR_CENTIO",
    "CAR_DELOREAN",
    "CAR_DOMINUS",
    "CAR_DOMINUSGT",
    "CAR_ENDO",
    "CAR_ESPER",
    "CAR_GIZMO",
    "CAR_GROG",
    "CAR_HOTSHOT",
    "CAR_ICECHARGER",
    "CAR_JOGER619RS",
    "CAR_MANTIS",
    "CAR_MARAUDER",
    "CAR_MASAMUNE",
    "CAR_MERC",
    "CAR_OCTANE",
    "CAR_OCTANEZSR",
    "CAR_PALADIN",
    "CAR_PROTEUS",
    "CAR_RIPPER",
    "CAR_ROADHOG",
    "CAR_ROADHOGXL",
    "CAR_SCARAB",
    "CAR_SWEETTOOTH",
    "CAR_TAKUMI",
    "CAR_TAKUMIRXT",
    "CAR_TRITON",
    "CAR_TWINMILL",
    "CAR_VENOM",
    "CAR_VULCAN",
    "CAR_WARTHOG",
    "CAR_XDEVIL",
    "CAR_XDEVILMK2",
    "CAR_ZIPPY",
    "CVarManagerWrapper",
    "CVarWrapper",
    "CameraSave",
    "CameraWrapper",
    "CameraXWrapper",
    "CanvasWrapper",
    "CarComponentWrapper",
    "CarSpeedPickup",
    "CarWrapper",
    "CertifiedStatDatabaseWrapper",
    "ClubColorSet",
    "ClubDetailsWrapper",
    "ClubMember",
    "ClubSettingsWrapper",
    "Common",
    "ControllerInput",
    "ControllerWrapper",
    "CurlRequest",
    "CustomMatchSettings",
    "CustomMatchTeamSettings",
    "DLC",
    "DataAssetDatabaseWrapper",
    "DataAssetDatabase_ESportsTeamWrapper",
    "Default",
    "DemolishPickup",
    "DodgeComponentWrapper",
    "DoubleJumpComponentWrapper",
    "Drop",
    "EngineTAWrapper",
    "Exotic",
    "FXActorWrapper",
    "FlipCarComponentWrapper",
    "FormField",
    "GameEditorSaveDataWrapper",
    "GameEditorWrapper",
    "GameEventWrapper",
    "GameSettingPlaylistWrapper",
    "GameWrapper",
    "GamepadSettings",
    "GoalWrapper",
    "GrapplingHookPickup",
    "GravityPickup",
    "HandbrakeOverridePickup",
    "HitForcePickup",
    "HttpWrapper",
    "ImageWrapper",
    "Import",
    "InputBufferGraphWrapper",
    "ItemsWrapper",
    "JumpComponentWrapper",
    "Limited",
    "LinearColor",
    "LoadedPlugin",
    "LoadoutWrapper",
    "MAX",
    "MAX_",
    "MMRNotifierToken",
    "MMRWrapper",
    "MatchmakingWrapper",
    "ModalWrapper",
    "NetStatGraphWrapper",
    "Never",
    "ObjectWrapper",
    "OnlinePlatform",
    "OnlinePlatform_Deleted",
    "OnlinePlatform_Dingo",
    "OnlinePlatform_Epic",
    "OnlinePlatform_MAX",
    "OnlinePlatform_NNX",
    "OnlinePlatform_OldNNX",
    "OnlinePlatform_PS3",
    "OnlinePlatform_PS4",
    "OnlinePlatform_PsyNet",
    "OnlinePlatform_QQ",
    "OnlinePlatform_Steam",
    "OnlinePlatform_Unknown",
    "OnlinePlatform_WeGame",
    "OnlineProductWrapper",
    "PERMISSION_ALL",
    "PERMISSION_CUSTOM_TRAINING",
    "PERMISSION_FREEPLAY",
    "PERMISSION_MENU",
    "PERMISSION_OFFLINE",
    "PERMISSION_ONLINE",
    "PERMISSION_PAUSEMENU_CLOSED",
    "PERMISSION_REPLAY",
    "PERMISSION_SOCCAR",
    "PLUGINTYPE_BOTAI",
    "PLUGINTYPE_CUSTOM_TRAINING",
    "PLUGINTYPE_FREEPLAY",
    "PLUGINTYPE_REPLAY",
    "PLUGINTYPE_SPECTATOR",
    "PLUGINTYPE_THREADED",
    "PLUGINTYPE_THREADEDUNLOAD",
    "POV",
    "PRODUCTQUALITY",
    "PaintDatabaseWrapper",
    "PerfStatGraphWrapper",
    "PhysicalMaterialPropertyWrapper",
    "PlayerControllerWrapper",
    "PlayerReplicationInfoWrapper",
    "Playlist",
    "PlaylistCategory",
    "PluginInfo",
    "PluginManagerWrapper",
    "PredictionInfo",
    "Premium",
    "PriWrapper",
    "PriXWrapper",
    "PrimitiveComponentWrapper",
    "ProductAttributeWrapper",
    "ProductAttribute_AnimatedSkinLabelWrapper",
    "ProductAttribute_BlueprintCostWrapper",
    "ProductAttribute_BlueprintWrapper",
    "ProductAttribute_BodyCompatibilityWrapper",
    "ProductAttribute_CertifiedWrapper",
    "ProductAttribute_CurrencyWrapper",
    "ProductAttribute_PaintedWrapper",
    "ProductAttribute_QualityWrapper",
    "ProductAttribute_SpecialEditionSettingsWrapper",
    "ProductAttribute_SpecialEditionWrapper",
    "ProductAttribute_TeamEditionUploadWrapper",
    "ProductAttribute_TeamEditionWrapper",
    "ProductAttribute_UnlockMethodWrapper",
    "ProductSlotWrapper",
    "ProductTemplateWrapper",
    "ProductTradeInWrapper",
    "ProductWrapper",
    "ProfileCameraSettings",
    "Quat",
    "QuatSlerp",
    "QuatToRotator",
    "RBActorWrapper",
    "RBState",
    "Rare",
    "RecordedSample",
    "Region",
    "ReplayDirectorWrapper",
    "ReplayScoreData",
    "ReplayServerWrapper",
    "ReplaySoccarWrapper",
    "ReplayWrapper",
    "Reward",
    "RotateVectorWithQuat",
    "Rotator",
    "RotatorToQuat",
    "RotatorToVector",
    "RumblePickupComponentWrapper",
    "SampleHistoryWrapper",
    "SampleRecordSettingsWrapper",
    "SaveDataWrapper",
    "SequenceObjectWrapper",
    "SequenceOpWrapper",
    "SequenceVariableWrapper",
    "SequenceWrapper",
    "ServerWrapper",
    "SettingsWrapper",
    "SkillRank",
    "SkillRating",
    "Special",
    "SpecialEdition",
    "SpecialEditionDatabaseWrapper",
    "SpringPickup",
    "StartGraphSystemWrapper",
    "StatEventWrapper",
    "StatGraphSystemWrapper",
    "StatGraphWrapper",
    "SteamID",
    "StickyForceData",
    "StructArrayWrapperbetaClubMember>",
    "StructArrayWrapperbetaLinearColor>",
    "StructArrayWrapperbetaProfileCameraSettings>",
    "StructArrayWrapperbetaRecordedSample>",
    "StructArrayWrapperbetaSteamID>",
    "SwapperPickup",
    "TRADEHOLD",
    "TRADEHOLD_ALL",
    "TRADEHOLD_NONE",
    "TRADEHOLD_P2P",
    "TargetedPickup",
    "TeamGameEventWrapper",
    "TeamInfoWrapper",
    "TeamWrapper",
    "TextInputModalWrapper",
    "TimeBombPickup",
    "ToastType",
    "ToastType_Error",
    "ToastType_Info",
    "ToastType_OK",
    "ToastType_Warning",
    "TornadoPickup",
    "TradeWrapper",
    "TrainingEditorSaveDataWrapper",
    "TrainingEditorWrapper",
    "TutorialWrapper",
    "UNLOCKMETHOD",
    "Uncommon",
    "UniqueIDWrapper",
    "UnrealColor",
    "UnrealStringWrapper",
    "Vector",
    "Vector2",
    "Vector2F",
    "VectorToRotator",
    "VehiclePickupWrapper",
    "VehicleSimWrapper",
    "VehicleWrapper",
    "VelcroPickup",
    "VeryRare",
    "VideoSettings",
    "ViewTarget",
    "WheelContactData",
    "WheelWrapper",
    "WorldContactData",
    "WorldInfoWrapper",
    "cvarManager",
    "fixPitch",
    "fixRotator",
    "gameWrapper",
    "quat_add",
    "quat_conj",
    "quat_identity",
    "quat_inner_product",
    "quat_mul",
    "quat_mul_vec3",
    "quat_rotate",
    "quat_scale",
    "quat_sub",
    "vec2_add",
    "vec2_len",
    "vec2_max",
    "vec2_min",
    "vec2_mul_inner",
    "vec2_norm",
    "vec2_scale",
    "vec2_sub",
    "vec3_add",
    "vec3_dot",
    "vec3_len",
    "vec3_max",
    "vec3_min",
    "vec3_mul_cross",
    "vec3_mul_inner",
    "vec3_norm",
    "vec3_reflect",
    "vec3_scale",
    "vec3_sub",
    "vec4_add",
    "vec4_len",
    "vec4_max",
    "vec4_min",
    "vec4_mul_cross",
    "vec4_mul_inner",
    "vec4_norm",
    "vec4_reflect",
    "vec4_scale",
    "vec4_sub"
]


skibidi ObjectWrapper():
    @typing.overload
    bop __init__(unc, arg0: ObjectWrapper) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @property
    bop memory_address(unc) -> int:
        """
        :type: int
        """
    @memory_address.setter
    bop memory_address(unc, arg1: int) -> NPC:
        pluh
    pluh
skibidi ActorWrapper(ObjectWrapper):
    bop AddVelocity(unc, velocity: Vector) -> NPC: ...
    bop ChartData(unc, DataName: str, DataValue: float) -> NPC: ...
    bop ContainsPoint(unc, Spot: Vector) -> bool: ...
    bop DrawDebugCone(unc, Origin: Vector, Direction: Vector, Length: float, AngleWidth: float, AngleHeight: float, NumSides: int, DrawColor: UnrealColor, bPersistentLines: int) -> NPC: ...
    bop DrawDebugString(unc, TextLocation: Vector, Text: str, TestBaseActor: ActorWrapper, TextColor: UnrealColor, Duration: float) -> NPC: ...
    bop ForceNetUpdate2(unc) -> NPC: ...
    bop ForceNetUpdatePacket(unc) -> NPC: ...
    bop GetAggregateBaseVelocity(unc, TestBase: ActorWrapper) -> Vector: ...
    bop GetAngularVelocity(unc) -> Vector: ...
    bop GetAttached(unc) -> ArrayWrapperbetaActorWrapper>: ...
    bop GetBase(unc) -> ActorWrapper: ...
    bop GetBlockRigidBody(unc) -> int: ...
    bop GetCollisionComponent(unc) -> PrimitiveComponentWrapper: ...
    bop GetCollisionType(unc) -> int: ...
    bop GetCreationTime(unc) -> float: ...
    bop GetCustomTimeDilation(unc) -> float: ...
    bop GetDrawScale(unc) -> float: ...
    bop GetDrawScale3D(unc) -> Vector: ...
    bop GetEditorIconColor(unc) -> UnrealColor: ...
    bop GetGravityAcceleration(unc) -> Vector: ...
    bop GetGravityDirection(unc) -> Vector: ...
    bop GetGravityZ(unc) -> float: ...
    bop GetHiddenEditorViews(unc) -> int: ...
    bop GetLastForcePacketUpdateTime(unc) -> float: ...
    bop GetLastNetUpdateTime(unc) -> float: ...
    bop GetLastRenderTime(unc) -> float: ...
    bop GetLifeSpan(unc) -> float: ...
    bop GetLocation(unc) -> Vector: ...
    bop GetNetPriority(unc) -> float: ...
    bop GetNetUpdateFrequency(unc) -> float: ...
    bop GetNetUpdateTime(unc) -> float: ...
    bop GetOwner(unc) -> ActorWrapper: ...
    bop GetPhysics(unc) -> int: ...
    bop GetPrePivot(unc) -> Vector: ...
    bop GetRelativeLocation(unc) -> Vector: ...
    bop GetRelativeRotation(unc) -> Rotator: ...
    bop GetRemoteRole(unc) -> int: ...
    bop GetReplicatedCollisionType(unc) -> int: ...
    bop GetRole(unc) -> int: ...
    bop GetRotation(unc) -> Rotator: ...
    bop GetTargetLocation(unc, RequestedBy: ActorWrapper, bRequestAlternateLoc: int) -> Vector: ...
    bop GetTeamNum2(unc) -> int: ...
    bop GetTerminalVelocity(unc) -> float: ...
    bop GetTimeSinceLastTick(unc) -> float: ...
    bop GetVelocity(unc) -> Vector: ...
    bop GetWorldInfo(unc) -> WorldInfoWrapper: ...
    bop GetbAlwaysEncroachCheck(unc) -> int: ...
    bop GetbAlwaysRelevant(unc) -> int: ...
    bop GetbAlwaysTick(unc) -> int: ...
    bop GetbBlockActors(unc) -> int: ...
    bop GetbBlocksNavigation(unc) -> int: ...
    bop GetbBlocksTeleport(unc) -> int: ...
    bop GetbBounce(unc) -> int: ...
    bop GetbCallRigidBodyWakeEvents(unc) -> int: ...
    bop GetbCanTeleport(unc) -> int: ...
    bop GetbCollideActors(unc) -> int: ...
    bop GetbCollideComplex(unc) -> int: ...
    bop GetbCollideWhenPlacing(unc) -> int: ...
    bop GetbCollideWorld(unc) -> int: ...
    bop GetbComponentOutsideWorld(unc) -> int: ...
    bop GetbDeleteMe(unc) -> int: ...
    bop GetbDemoOwner(unc) -> int: ...
    bop GetbDemoRecording(unc) -> int: ...
    bop GetbEditable(unc) -> int: ...
    bop GetbForceDemoRelevant(unc) -> int: ...
    bop GetbForceNetUpdate(unc) -> int: ...
    bop GetbForcePacketUpdate(unc) -> int: ...
    bop GetbGameRelevant(unc) -> int: ...
    bop GetbHasAlternateTargetLocation(unc) -> int: ...
    bop GetbHidden(unc) -> int: ...
    bop GetbHiddenSelf(unc) -> int: ...
    bop GetbIgnoreRigidBodyPawns(unc) -> int: ...
    bop GetbIsMoving(unc) -> int: ...
    bop GetbKillDuringLevelTransition(unc) -> int: ...
    bop GetbLockLocation(unc) -> int: ...
    bop GetbMovable(unc) -> int: ...
    bop GetbNetInitialRotation(unc) -> int: ...
    bop GetbNoDelete(unc) -> int: ...
    bop GetbOnlyOwnerSee(unc) -> int: ...
    bop GetbOrientOnSlope(unc) -> int: ...
    bop GetbPendingNetUpdate(unc) -> int: ...
    bop GetbPhysRigidBodyOutOfWorldCheck(unc) -> int: ...
    bop GetbPostRenderIfNotVisible(unc) -> int: ...
    bop GetbReplicateInstigator(unc) -> int: ...
    bop GetbReplicateMovement(unc) -> int: ...
    bop GetbReplicateRigidBodyLocation(unc) -> int: ...
    bop GetbRigidBodyWasAwake(unc) -> int: ...
    bop GetbStatic(unc) -> int: ...
    bop GetbTickIsDisabled(unc) -> int: ...
    bop GetbTicked(unc) -> int: ...
    bop GetbUpdateSimulatedPosition(unc) -> int: ...
    bop GetbWorldGeometry(unc) -> int: ...
    bop IsBasedOn(unc, TestActor: ActorWrapper) -> bool: ...
    bop IsInPersistentLevel(unc, bIncludeLevelStreamingPersistent: int) -> bool: ...
    bop IsNull(unc) -> bool: ...
    bop IsOverlapping(unc, A: ActorWrapper) -> bool: ...
    bop IsOwnedBy(unc, TestActor: ActorWrapper) -> bool: ...
    bop IsPlayerOwned(unc) -> bool: ...
    bop IsStationary(unc) -> bool: ...
    bop SetAngularVelocity(unc, v: Vector, addToCurrent: bool) -> NPC: ...
    bop SetBlockRigidBody(unc, newBlockRigidBody: int) -> NPC: ...
    bop SetCollisionType(unc, newCollisionType: int) -> NPC: ...
    bop SetCustomTimeDilation(unc, newCustomTimeDilation: float) -> NPC: ...
    bop SetDrawScale(unc, newDrawScale: float) -> NPC: ...
    bop SetDrawScale3D(unc, newDrawScale3D: Vector) -> NPC: ...
    bop SetEditorIconColor(unc, newEditorIconColor: UnrealColor) -> NPC: ...
    bop SetHUDLocation(unc, NewHUDLocation: Vector) -> NPC: ...
    bop SetHidden2(unc, bNewHidden: int) -> NPC: ...
    bop SetHiddenEditorViews(unc, newHiddenEditorViews: int) -> NPC: ...
    bop SetLastForcePacketUpdateTime(unc, newLastForcePacketUpdateTime: float) -> NPC: ...
    bop SetLocation(unc, location: Vector) -> NPC: ...
    bop SetNetPriority(unc, newNetPriority: float) -> NPC: ...
    bop SetNetUpdateFrequency(unc, newNetUpdateFrequency: float) -> NPC: ...
    bop SetNetUpdateTime(unc, newNetUpdateTime: float) -> NPC: ...
    bop SetPhysics(unc, newPhysics: int) -> NPC: ...
    bop SetPhysics2(unc, newPhysics: int) -> NPC: ...
    bop SetPrePivot(unc, newPrePivot: Vector) -> NPC: ...
    bop SetRelativeLocation(unc, newRelativeLocation: Vector) -> NPC: ...
    bop SetRelativeRotation(unc, newRelativeRotation: Rotator) -> NPC: ...
    bop SetRemoteRole(unc, newRemoteRole: int) -> NPC: ...
    bop SetReplicatedCollisionType(unc, newReplicatedCollisionType: int) -> NPC: ...
    bop SetRole(unc, newRole: int) -> NPC: ...
    bop SetRotation(unc, rotation: Rotator) -> NPC: ...
    bop SetTickIsDisabled(unc, bInDisabled: int) -> NPC: ...
    bop SetTorque(unc, torq: Vector) -> NPC: ...
    bop SetVelocity(unc, velocity: Vector) -> NPC: ...
    bop SetbAlwaysEncroachCheck(unc, newbAlwaysEncroachCheck: int) -> NPC: ...
    bop SetbAlwaysTick(unc, newbAlwaysTick: int) -> NPC: ...
    bop SetbBlockActors(unc, newbBlockActors: int) -> NPC: ...
    bop SetbBlocksNavigation(unc, newbBlocksNavigation: int) -> NPC: ...
    bop SetbBlocksTeleport(unc, newbBlocksTeleport: int) -> NPC: ...
    bop SetbBounce(unc, newbBounce: int) -> NPC: ...
    bop SetbCallRigidBodyWakeEvents(unc, newbCallRigidBodyWakeEvents: int) -> NPC: ...
    bop SetbCanTeleport(unc, newbCanTeleport: int) -> NPC: ...
    bop SetbCollideActors(unc, newbCollideActors: int) -> NPC: ...
    bop SetbCollideComplex(unc, newbCollideComplex: int) -> NPC: ...
    bop SetbCollideWhenPlacing(unc, newbCollideWhenPlacing: int) -> NPC: ...
    bop SetbCollideWorld(unc, newbCollideWorld: int) -> NPC: ...
    bop SetbDeleteMe(unc, newbDeleteMe: int) -> NPC: ...
    bop SetbDemoOwner(unc, newbDemoOwner: int) -> NPC: ...
    bop SetbDemoRecording(unc, newbDemoRecording: int) -> NPC: ...
    bop SetbEditable(unc, newbEditable: int) -> NPC: ...
    bop SetbForceDemoRelevant(unc, newbForceDemoRelevant: int) -> NPC: ...
    bop SetbForceNetUpdate(unc, newbForceNetUpdate: int) -> NPC: ...
    bop SetbForcePacketUpdate(unc, newbForcePacketUpdate: int) -> NPC: ...
    bop SetbGameRelevant(unc, newbGameRelevant: int) -> NPC: ...
    bop SetbHiddenSelf(unc, newbHiddenSelf: int) -> NPC: ...
    bop SetbIgnoreRigidBodyPawns(unc, newbIgnoreRigidBodyPawns: int) -> NPC: ...
    bop SetbKillDuringLevelTransition(unc, newbKillDuringLevelTransition: int) -> NPC: ...
    bop SetbLockLocation(unc, newbLockLocation: int) -> NPC: ...
    bop SetbMovable(unc, newbMovable: int) -> NPC: ...
    bop SetbNetInitialRotation(unc, newbNetInitialRotation: int) -> NPC: ...
    bop SetbNoDelete(unc, newbNoDelete: int) -> NPC: ...
    bop SetbOnlyOwnerSee(unc, newbOnlyOwnerSee: int) -> NPC: ...
    bop SetbOrientOnSlope(unc, newbOrientOnSlope: int) -> NPC: ...
    bop SetbPendingNetUpdate(unc, newbPendingNetUpdate: int) -> NPC: ...
    bop SetbPhysRigidBodyOutOfWorldCheck(unc, newbPhysRigidBodyOutOfWorldCheck: int) -> NPC: ...
    bop SetbPostRenderIfNotVisible(unc, newbPostRenderIfNotVisible: int) -> NPC: ...
    bop SetbReplicateRigidBodyLocation(unc, newbReplicateRigidBodyLocation: int) -> NPC: ...
    bop SetbRigidBodyWasAwake(unc, newbRigidBodyWasAwake: int) -> NPC: ...
    bop SetbTickIsDisabled(unc, newbTickIsDisabled: int) -> NPC: ...
    bop SetbTicked(unc, newbTicked: int) -> NPC: ...
    bop SetbUpdateSimulatedPosition(unc, newbUpdateSimulatedPosition: int) -> NPC: ...
    bop SetbWorldGeometry(unc, newbWorldGeometry: int) -> NPC: ...
    bop Stop(unc) -> NPC: ...
    bop WillOverlap(unc, PosA: Vector, VelA: Vector, PosB: Vector, VelB: Vector, StepSize: float, Radius: float, Time: float) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ActorWrapper) -> NPC: ...
    bop eventDebugMessagePlayer(unc, msg: str) -> NPC: ...
    bop eventFellOutOfWorld(unc) -> NPC: ...
    bop eventPostDemoRewind(unc) -> NPC: ...
    bop eventReplicationEnded(unc) -> NPC: ...
    bop eventScriptGetTeamNum(unc) -> int: ...
    bop eventSpawnedByKismet(unc) -> NPC: ...
    pluh
skibidi CarComponentWrapper(ActorWrapper, ObjectWrapper):
    bop Activate2(unc) -> NPC: ...
    bop ApplyForces(unc, ActiveTime: float) -> NPC: ...
    bop CanActivate(unc) -> bool: ...
    bop CanDeactivate(unc) -> bool: ...
    bop ClientUpdateActive(unc) -> NPC: ...
    bop ConditionalActivate(unc) -> bool: ...
    bop ConditionalDeactivate(unc) -> bool: ...
    bop Create2(unc, OwnerCar: CarWrapper, InActivator: PriWrapper) -> NPC: ...
    bop Deactivate2(unc) -> NPC: ...
    bop EventActivationChanged(unc, CarComponent: CarComponentWrapper) -> NPC: ...
    bop GetActivator(unc) -> PriWrapper: ...
    bop GetActiveTime(unc) -> float: ...
    bop GetActivityTime(unc) -> float: ...
    bop GetCar(unc) -> CarWrapper: ...
    bop GetComponentData(unc) -> int: ...
    bop GetFXActor(unc) -> FXActorWrapper: ...
    bop GetFXActorArchetype(unc) -> FXActorWrapper: ...
    bop GetInactiveTime(unc) -> float: ...
    bop GetReplicatedActive(unc) -> int: ...
    bop GetReplicatedActivityTime(unc) -> float: ...
    bop GetVehicle(unc) -> VehicleWrapper: ...
    bop GetbActive(unc) -> int: ...
    bop GetbAutoActivate(unc) -> int: ...
    bop GetbCreated(unc) -> int: ...
    bop GetbDisabled(unc) -> int: ...
    bop GetbRemovedFromCar(unc) -> int: ...
    bop GetbSimulateComponent(unc) -> int: ...
    bop HandleVehicleSetup(unc, InCar: CarWrapper) -> NPC: ...
    bop OnVehicleSetupComplete(unc) -> NPC: ...
    bop PrePhysicsStep(unc, DeltaTime: float) -> NPC: ...
    bop RegisterCarEvents(unc) -> NPC: ...
    bop RemoveFromCar(unc) -> NPC: ...
    bop SetActivator(unc, newActivator: PriWrapper) -> NPC: ...
    bop SetActive(unc, bNewActive: int) -> NPC: ...
    bop SetActivityTime(unc, newActivityTime: float) -> NPC: ...
    bop SetCar(unc, newCar: CarWrapper) -> NPC: ...
    bop SetComponentData(unc, newComponentData: int) -> NPC: ...
    bop SetFXActor(unc, newFXActor: FXActorWrapper) -> NPC: ...
    bop SetFXActorArchetype(unc, newFXActorArchetype: FXActorWrapper) -> NPC: ...
    bop SetReplicatedActive(unc, newReplicatedActive: int) -> NPC: ...
    bop SetReplicatedActivityTime(unc, newReplicatedActivityTime: float) -> NPC: ...
    bop SetVehicle(unc, newVehicle: VehicleWrapper) -> NPC: ...
    bop SetbActive(unc, newbActive: int) -> NPC: ...
    bop SetbAutoActivate(unc, newbAutoActivate: int) -> NPC: ...
    bop SetbCreated(unc, newbCreated: int) -> NPC: ...
    bop SetbDisabled(unc, newbDisabled: int) -> NPC: ...
    bop SetbRemovedFromCar(unc, newbRemovedFromCar: int) -> NPC: ...
    bop SetbSimulateComponent(unc, newbSimulateComponent: int) -> NPC: ...
    bop UnregisterCarEvents(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: CarComponentWrapper) -> NPC: ...
    bop eventFellOutOfWorld(unc) -> NPC: ...
    pluh
skibidi ArrayWrapperbetaActorWrapper>():
    bop Count(unc) -> int: ...
    bop Get(unc, index: int) -> ActorWrapper: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ArrayWrapperbetaActorWrapper>) -> NPC: ...
    pluh
skibidi ArrayWrapperbetaBallWrapper>():
    bop Count(unc) -> int: ...
    bop Get(unc, index: int) -> BallWrapper: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ArrayWrapperbetaBallWrapper>) -> NPC: ...
    pluh
skibidi ArrayWrapperbetaCarComponentWrapper>():
    bop Count(unc) -> int: ...
    bop Get(unc, index: int) -> CarComponentWrapper: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ArrayWrapperbetaCarComponentWrapper>) -> NPC: ...
    pluh
skibidi ArrayWrapperbetaCarWrapper>():
    bop Count(unc) -> int: ...
    bop Get(unc, index: int) -> CarWrapper: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ArrayWrapperbetaCarWrapper>) -> NPC: ...
    pluh
skibidi ArrayWrapperbetaControllerWrapper>():
    bop Count(unc) -> int: ...
    bop Get(unc, index: int) -> ControllerWrapper: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ArrayWrapperbetaControllerWrapper>) -> NPC: ...
    pluh
skibidi ArrayWrapperbetaGoalWrapper>():
    bop Count(unc) -> int: ...
    bop Get(unc, index: int) -> GoalWrapper: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ArrayWrapperbetaGoalWrapper>) -> NPC: ...
    pluh
skibidi ArrayWrapperbetaOnlineProductWrapper>():
    bop Count(unc) -> int: ...
    bop Get(unc, index: int) -> OnlineProductWrapper: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ArrayWrapperbetaOnlineProductWrapper>) -> NPC: ...
    pluh
skibidi ArrayWrapperbetaPlayerControllerWrapper>():
    bop Count(unc) -> int: ...
    bop Get(unc, index: int) -> PlayerControllerWrapper: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ArrayWrapperbetaPlayerControllerWrapper>) -> NPC: ...
    pluh
skibidi ArrayWrapperbetaPriWrapper>():
    bop Count(unc) -> int: ...
    bop Get(unc, index: int) -> PriWrapper: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ArrayWrapperbetaPriWrapper>) -> NPC: ...
    pluh
skibidi ArrayWrapperbetaProductAttributeWrapper>():
    bop Count(unc) -> int: ...
    bop Get(unc, index: int) -> ProductAttributeWrapper: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ArrayWrapperbetaProductAttributeWrapper>) -> NPC: ...
    pluh
skibidi ArrayWrapperbetaProductWrapper>():
    bop Count(unc) -> int: ...
    bop Get(unc, index: int) -> ProductWrapper: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ArrayWrapperbetaProductWrapper>) -> NPC: ...
    pluh
skibidi ArrayWrapperbetaRBActorWrapper>():
    bop Count(unc) -> int: ...
    bop Get(unc, index: int) -> RBActorWrapper: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ArrayWrapperbetaRBActorWrapper>) -> NPC: ...
    pluh
skibidi ArrayWrapperbetaSampleHistoryWrapper>():
    bop Count(unc) -> int: ...
    bop Get(unc, index: int) -> SampleHistoryWrapper: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ArrayWrapperbetaSampleHistoryWrapper>) -> NPC: ...
    pluh
skibidi ArrayWrapperbetaSequenceObjectWrapper>():
    bop Count(unc) -> int: ...
    bop Get(unc, index: int) -> SequenceObjectWrapper: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ArrayWrapperbetaSequenceObjectWrapper>) -> NPC: ...
    pluh
skibidi ArrayWrapperbetaSequenceVariableWrapper>():
    bop Count(unc) -> int: ...
    bop Get(unc, index: int) -> SequenceVariableWrapper: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ArrayWrapperbetaSequenceVariableWrapper>) -> NPC: ...
    pluh
skibidi ArrayWrapperbetaSequenceWrapper>():
    bop Count(unc) -> int: ...
    bop Get(unc, index: int) -> SequenceWrapper: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ArrayWrapperbetaSequenceWrapper>) -> NPC: ...
    pluh
skibidi ArrayWrapperbetaStatGraphWrapper>():
    bop Count(unc) -> int: ...
    bop Get(unc, index: int) -> StatGraphWrapper: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ArrayWrapperbetaStatGraphWrapper>) -> NPC: ...
    pluh
skibidi ArrayWrapperbetaTeamWrapper>():
    bop Count(unc) -> int: ...
    bop Get(unc, index: int) -> TeamWrapper: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ArrayWrapperbetaTeamWrapper>) -> NPC: ...
    pluh
skibidi ArrayWrapperbetaWheelWrapper>():
    bop Count(unc) -> int: ...
    bop Get(unc, index: int) -> WheelWrapper: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ArrayWrapperbetaWheelWrapper>) -> NPC: ...
    pluh
skibidi ArrayWrapperbetaint>():
    bop Count(unc) -> int: ...
    bop Get(unc, index: int) -> int: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ArrayWrapperbetaint>) -> NPC: ...
    pluh
skibidi ArrayWrapperbetaunsigned long long>():
    bop Count(unc) -> int: ...
    bop Get(unc, index: int) -> int: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ArrayWrapperbetaunsigned long long>) -> NPC: ...
    pluh
skibidi ArrayWrapperbetawchar_t>():
    bop Count(unc) -> int: ...
    bop Get(unc, index: int) -> str: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ArrayWrapperbetawchar_t>) -> NPC: ...
    pluh
skibidi RumblePickupComponentWrapper(CarComponentWrapper, ActorWrapper, ObjectWrapper):
    bop ApplyPickup(unc, InCar: CarWrapper) -> NPC: ...
    bop CanPickup(unc, InCar: CarWrapper) -> bool: ...
    bop DeactivatePickup(unc) -> NPC: ...
    bop GetActivationDuration(unc) -> float: ...
    bop GetActiveTimePercent(unc) -> float: ...
    bop GetBoostComponent(unc) -> BoostWrapper: ...
    bop GetClientTarget(unc) -> RBActorWrapper: ...
    bop GetPickupFX(unc) -> FXActorWrapper: ...
    bop GetPickupFXArchetype(unc) -> FXActorWrapper: ...
    bop GetPickupName(unc) -> UnrealStringWrapper: ...
    bop GetbHasActivated(unc) -> int: ...
    bop GetbHudIgnoreUseTime(unc) -> int: ...
    bop GetbIsActive(unc) -> int: ...
    bop HasActivated2(unc) -> bool: ...
    bop OnCreated(unc) -> NPC: ...
    bop OnVehicleSetupComplete(unc) -> NPC: ...
    bop PickupEnd(unc) -> NPC: ...
    bop PickupStart(unc) -> NPC: ...
    bop SetActivationDuration(unc, newActivationDuration: float) -> NPC: ...
    bop SetPickupFX(unc, newPickupFX: FXActorWrapper) -> NPC: ...
    bop SetPickupFXArchetype(unc, newPickupFXArchetype: FXActorWrapper) -> NPC: ...
    bop SetbHasActivated(unc, newbHasActivated: int) -> NPC: ...
    bop SetbHudIgnoreUseTime(unc, newbHudIgnoreUseTime: int) -> NPC: ...
    bop SetbIsActive(unc, newbIsActive: int) -> NPC: ...
    bop TryActivate(unc, TargetOverride: RBActorWrapper) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: RumblePickupComponentWrapper) -> NPC: ...
    pluh
skibidi BakkesModPlugin():
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: BakkesModPlugin) -> NPC: ...
    bop onLoad(unc) -> NPC: ...
    bop onUnload(unc) -> NPC: ...
    @property
    bop cvarManager(unc) -> CVarManagerWrapper:
        """
        :type: CVarManagerWrapper
        """
    @cvarManager.setter
    bop cvarManager(unc, arg1: CVarManagerWrapper) -> NPC:
        pluh
    @property
    bop gameWrapper(unc) -> GameWrapper:
        """
        :type: GameWrapper
        """
    @gameWrapper.setter
    bop gameWrapper(unc, arg1: GameWrapper) -> NPC:
        pluh
    pluh
skibidi TargetedPickup(RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    bop GetClientTarget(unc) -> RBActorWrapper: ...
    bop GetClientTarget2(unc) -> RBActorWrapper: ...
    bop GetDirectionalTargetingAccuracy(unc) -> float: ...
    bop GetRange(unc) -> float: ...
    bop GetTarget2(unc) -> RBActorWrapper: ...
    bop GetTargeted(unc) -> RBActorWrapper: ...
    bop GetbCanTargetBall(unc) -> int: ...
    bop GetbCanTargetCars(unc) -> int: ...
    bop GetbCanTargetEnemyCars(unc) -> int: ...
    bop GetbCanTargetTeamCars(unc) -> int: ...
    bop GetbRequireTrace(unc) -> int: ...
    bop GetbUseDirectionalTargeting(unc) -> int: ...
    bop OnTargetChanged(unc) -> NPC: ...
    bop SetClientTarget(unc, newClientTarget: RBActorWrapper) -> NPC: ...
    bop SetDirectionalTargetingAccuracy(unc, newDirectionalTargetingAccuracy: float) -> NPC: ...
    bop SetRange(unc, newRange: float) -> NPC: ...
    bop SetTargeted(unc, newTargeted: RBActorWrapper) -> NPC: ...
    bop SetbCanTargetBall(unc, newbCanTargetBall: int) -> NPC: ...
    bop SetbCanTargetCars(unc, newbCanTargetCars: int) -> NPC: ...
    bop SetbCanTargetEnemyCars(unc, newbCanTargetEnemyCars: int) -> NPC: ...
    bop SetbCanTargetTeamCars(unc, newbCanTargetTeamCars: int) -> NPC: ...
    bop SetbRequireTrace(unc, newbRequireTrace: int) -> NPC: ...
    bop SetbUseDirectionalTargeting(unc, newbUseDirectionalTargeting: int) -> NPC: ...
    bop TargetChanged(unc) -> NPC: ...
    bop TryActivate(unc, TargetOverride: RBActorWrapper) -> bool: ...
    bop ValidateTarget2(unc, InTarget: RBActorWrapper) -> bool: ...
    bop ValidateTargetTrace(unc, InTarget: RBActorWrapper) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: TargetedPickup) -> NPC: ...
    pluh
skibidi BallFreezePickup(TargetedPickup, RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    bop ApplyForces(unc, ActiveTime: float) -> NPC: ...
    bop GetBall(unc) -> BallWrapper: ...
    bop GetFreezeBreakFXArchetype(unc) -> FXActorWrapper: ...
    bop GetFreezeFX(unc) -> FXActorWrapper: ...
    bop GetFreezeFXArchetype(unc) -> FXActorWrapper: ...
    bop GetOrigAngularVelocity(unc) -> Vector: ...
    bop GetOrigLinearVelocity(unc) -> Vector: ...
    bop GetOrigSpeed(unc) -> float: ...
    bop GetRepOrigSpeed(unc) -> float: ...
    bop GetStopMomentumPercentage(unc) -> float: ...
    bop GetTimeToStop(unc) -> float: ...
    bop GetbMaintainMomentum(unc) -> int: ...
    bop GetbTouched(unc) -> int: ...
    bop HandleBallExploded(unc, InBall: BallWrapper) -> NPC: ...
    bop HandleBallHit(unc, InBall: BallWrapper, InCar: CarWrapper, HitType: int) -> NPC: ...
    bop OnTargetChanged(unc) -> NPC: ...
    bop PickupEnd(unc) -> NPC: ...
    bop PickupStart(unc) -> NPC: ...
    bop SetBall(unc, newBall: BallWrapper) -> NPC: ...
    bop SetFreezeBreakFXArchetype(unc, newFreezeBreakFXArchetype: FXActorWrapper) -> NPC: ...
    bop SetFreezeFX(unc, newFreezeFX: FXActorWrapper) -> NPC: ...
    bop SetFreezeFXArchetype(unc, newFreezeFXArchetype: FXActorWrapper) -> NPC: ...
    bop SetOrigAngularVelocity(unc, newOrigAngularVelocity: Vector) -> NPC: ...
    bop SetOrigLinearVelocity(unc, newOrigLinearVelocity: Vector) -> NPC: ...
    bop SetOrigSpeed(unc, newOrigSpeed: float) -> NPC: ...
    bop SetRepOrigSpeed(unc, newRepOrigSpeed: float) -> NPC: ...
    bop SetStopMomentumPercentage(unc, newStopMomentumPercentage: float) -> NPC: ...
    bop SetTimeToStop(unc, newTimeToStop: float) -> NPC: ...
    bop SetbMaintainMomentum(unc, newbMaintainMomentum: int) -> NPC: ...
    bop SetbTouched(unc, newbTouched: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: BallFreezePickup) -> NPC: ...
    pluh
skibidi SpringPickup(TargetedPickup, RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    bop ApplyForces(unc, ActiveTime: float) -> NPC: ...
    bop DoSpring(unc, bFirstHit: int) -> NPC: ...
    bop GetAfterSpringDuration(unc) -> float: ...
    bop GetAfterSpringTime(unc) -> float: ...
    bop GetBallHitType(unc) -> int: ...
    bop GetConstantForce(unc) -> float: ...
    bop GetCurrentSpringLength(unc) -> float: ...
    bop GetForce(unc) -> float: ...
    bop GetFromOffset(unc) -> Vector: ...
    bop GetHitDistanceOffset(unc) -> float: ...
    bop GetHittingMeshOffset(unc) -> Vector: ...
    bop GetHittingMeshScale(unc) -> Vector: ...
    bop GetHittingRotationOffset(unc) -> Rotator: ...
    bop GetMaxSpringLength(unc) -> float: ...
    bop GetMinSpringLength(unc) -> float: ...
    bop GetRelativeConstantForce(unc, Direction: Vector) -> Vector: ...
    bop GetRelativeForceNormalDirection(unc) -> float: ...
    bop GetRelativeImpulse(unc, Direction: Vector) -> Vector: ...
    bop GetSpringMeshInitialSize(unc) -> float: ...
    bop GetSpringMeshScale(unc) -> Vector: ...
    bop GetSpringOrigin(unc) -> Vector: ...
    bop GetSpringRotationOffset(unc) -> Rotator: ...
    bop GetSpringToTime(unc) -> float: ...
    bop GetSpringedLength(unc) -> float: ...
    bop GetSpringedLocation(unc) -> Vector: ...
    bop GetSpringedNormal(unc) -> Vector: ...
    bop GetSpringedTime(unc) -> float: ...
    bop GetTorque(unc) -> Vector: ...
    bop GetVerticalForce(unc) -> float: ...
    bop GetWeldedForceScalar(unc) -> float: ...
    bop GetWeldedVerticalForce(unc) -> float: ...
    bop GetbApplyConstantForce(unc) -> int: ...
    bop GetbApplyRelativeConstantForce(unc) -> int: ...
    bop GetbApplyRelativeForce(unc) -> int: ...
    bop GetbBreakConstantForceWithHit(unc) -> int: ...
    bop GetbFollowAfterHit(unc) -> int: ...
    bop GetbInstant(unc) -> int: ...
    bop GetbSpringed(unc) -> int: ...
    bop HandleCarTouchedBall(unc, Ball: BallWrapper, OtherCar: CarWrapper, HitType: int) -> NPC: ...
    bop PickupEnd(unc) -> NPC: ...
    bop PickupStart(unc) -> NPC: ...
    bop ScaleSpringMeshToLocation(unc, NewLocation: Vector, TargetLoction: Vector) -> NPC: ...
    bop SetAfterSpringDuration(unc, newAfterSpringDuration: float) -> NPC: ...
    bop SetAfterSpringTime(unc, newAfterSpringTime: float) -> NPC: ...
    bop SetBallHitType(unc, newBallHitType: int) -> NPC: ...
    bop SetConstantForce(unc, newConstantForce: float) -> NPC: ...
    bop SetCurrentSpringLength(unc, newCurrentSpringLength: float) -> NPC: ...
    bop SetForce(unc, newForce: float) -> NPC: ...
    bop SetFromOffset(unc, newFromOffset: Vector) -> NPC: ...
    bop SetHitDistanceOffset(unc, newHitDistanceOffset: float) -> NPC: ...
    bop SetHittingMeshOffset(unc, newHittingMeshOffset: Vector) -> NPC: ...
    bop SetHittingMeshScale(unc, newHittingMeshScale: Vector) -> NPC: ...
    bop SetHittingRotationOffset(unc, newHittingRotationOffset: Rotator) -> NPC: ...
    bop SetMaxSpringLength(unc, newMaxSpringLength: float) -> NPC: ...
    bop SetMinSpringLength(unc, newMinSpringLength: float) -> NPC: ...
    bop SetRelativeForceNormalDirection(unc, newRelativeForceNormalDirection: float) -> NPC: ...
    bop SetSpringMeshInitialSize(unc, newSpringMeshInitialSize: float) -> NPC: ...
    bop SetSpringMeshScale(unc, newSpringMeshScale: Vector) -> NPC: ...
    bop SetSpringOrigin(unc, newSpringOrigin: Vector) -> NPC: ...
    bop SetSpringRotationOffset(unc, newSpringRotationOffset: Rotator) -> NPC: ...
    bop SetSpringToTime(unc, newSpringToTime: float) -> NPC: ...
    bop SetSpringedLength(unc, newSpringedLength: float) -> NPC: ...
    bop SetSpringedLocation(unc, newSpringedLocation: Vector) -> NPC: ...
    bop SetSpringedNormal(unc, newSpringedNormal: Vector) -> NPC: ...
    bop SetSpringedTime(unc, newSpringedTime: float) -> NPC: ...
    bop SetTorque(unc, newTorque: Vector) -> NPC: ...
    bop SetVerticalForce(unc, newVerticalForce: float) -> NPC: ...
    bop SetWeldedForceScalar(unc, newWeldedForceScalar: float) -> NPC: ...
    bop SetWeldedVerticalForce(unc, newWeldedVerticalForce: float) -> NPC: ...
    bop SetbApplyConstantForce(unc, newbApplyConstantForce: int) -> NPC: ...
    bop SetbApplyRelativeConstantForce(unc, newbApplyRelativeConstantForce: int) -> NPC: ...
    bop SetbApplyRelativeForce(unc, newbApplyRelativeForce: int) -> NPC: ...
    bop SetbBreakConstantForceWithHit(unc, newbBreakConstantForceWithHit: int) -> NPC: ...
    bop SetbFollowAfterHit(unc, newbFollowAfterHit: int) -> NPC: ...
    bop SetbInstant(unc, newbInstant: int) -> NPC: ...
    bop SetbSpringed(unc, newbSpringed: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: SpringPickup) -> NPC: ...
    pluh
skibidi RBActorWrapper(ActorWrapper, ObjectWrapper):
    bop AddForce(unc, Force: Vector, ForceMode: int) -> NPC: ...
    bop AddTorque(unc, Torque: Vector, ForceMode: int) -> NPC: ...
    bop GetClientCorrectionRBState(unc) -> RBState: ...
    bop GetCurrentRBLocation(unc) -> Vector: ...
    bop GetCurrentRBState(unc) -> RBState: ...
    bop GetFXActor(unc) -> FXActorWrapper: ...
    bop GetFXActorArchetype(unc) -> FXActorWrapper: ...
    bop GetLastRBCollisionsFrame(unc) -> int: ...
    bop GetMaxAngularSpeed(unc) -> float: ...
    bop GetMaxLinearSpeed(unc) -> float: ...
    bop GetOldRBState(unc) -> RBState: ...
    bop GetPhysicsFrame(unc) -> int: ...
    bop GetPhysicsTime(unc) -> float: ...
    bop GetPreWeldMass(unc) -> float: ...
    bop GetRBState(unc) -> RBState: ...
    bop GetReplicatedRBState(unc) -> RBState: ...
    bop GetSyncErrorAngle(unc) -> float: ...
    bop GetSyncErrorAxis(unc) -> Vector: ...
    bop GetSyncErrorLocation(unc) -> Vector: ...
    bop GetWeldedActor(unc) -> RBActorWrapper: ...
    bop GetWeldedTo(unc) -> RBActorWrapper: ...
    bop GetWorldContact(unc) -> WorldContactData: ...
    bop GetbDisableSleeping(unc) -> int: ...
    bop GetbFrozen(unc) -> int: ...
    bop GetbIgnoreSyncing(unc) -> int: ...
    bop GetbPhysInitialized(unc) -> int: ...
    bop GetbReplayActor(unc) -> int: ...
    bop InitAk(unc) -> NPC: ...
    bop ReInitRBPhys(unc) -> NPC: ...
    bop SetClientCorrectionRBState(unc, newClientCorrectionRBState: RBState) -> NPC: ...
    bop SetConstrained2D(unc, bConstrain2D: int) -> NPC: ...
    bop SetConstrained3D(unc, LinearLower: Vector, LinearUpper: Vector, AngularLower: Vector, AngularUpper: Vector) -> NPC: ...
    bop SetFXActor(unc, newFXActor: FXActorWrapper) -> NPC: ...
    bop SetFXActorArchetype(unc, newFXActorArchetype: FXActorWrapper) -> NPC: ...
    bop SetFrozen(unc, bEnabled: int) -> NPC: ...
    bop SetMass(unc, NewMass: float) -> NPC: ...
    bop SetMaxAngularSpeed(unc, newMaxAngularSpeed: float) -> NPC: ...
    bop SetMaxAngularSpeed2(unc, NewMaxSpeed: float) -> NPC: ...
    bop SetMaxLinearSpeed(unc, newMaxLinearSpeed: float) -> NPC: ...
    bop SetMaxLinearSpeed2(unc, NewMaxSpeed: float) -> NPC: ...
    bop SetOldRBState(unc, newOldRBState: RBState) -> NPC: ...
    bop SetPhysicsState(unc, NewState: RBState) -> NPC: ...
    bop SetRBState(unc, newRBState: RBState) -> NPC: ...
    bop SetReplicatedRBState(unc, newReplicatedRBState: RBState) -> NPC: ...
    bop SetWorldContact(unc, newWorldContact: WorldContactData) -> NPC: ...
    bop SetbDisableSleeping(unc, newbDisableSleeping: int) -> NPC: ...
    bop SetbFrozen(unc, newbFrozen: int) -> NPC: ...
    bop SetbIgnoreSyncing(unc, newbIgnoreSyncing: int) -> NPC: ...
    bop SetbReplayActor(unc, newbReplayActor: int) -> NPC: ...
    bop TerminateRBPhys(unc) -> NPC: ...
    bop UnWeldRBActor(unc, Other: RBActorWrapper) -> NPC: ...
    bop WeldRBActor2(unc, Other: RBActorWrapper, WeldOffset: Vector, WeldRotation: Rotator) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: RBActorWrapper) -> NPC: ...
    bop eventPreBeginPlay(unc) -> NPC: ...
    pluh
skibidi BaseCameraWrapper(ActorWrapper, ObjectWrapper):
    bop ApplyAudioFade(unc) -> NPC: ...
    bop CalcRadialShakeScale(unc, Cam: BaseCameraWrapper, Epicenter: Vector, InnerRadius: float, OuterRadius: float, Falloff: float) -> float: ...
    bop ClearAllCameraShakes(unc) -> NPC: ...
    bop ClearCameraLensEffects(unc) -> NPC: ...
    bop DoUpdateCamera(unc, DeltaTime: float) -> NPC: ...
    bop GetBlendTimeToGo(unc) -> float: ...
    bop GetCamOverridePostProcessAlpha(unc) -> float: ...
    bop GetCameraRotation(unc) -> Rotator: ...
    bop GetColorScale(unc) -> Vector: ...
    bop GetColorScaleInterpDuration(unc) -> float: ...
    bop GetColorScaleInterpStartTime(unc) -> float: ...
    bop GetConstrainedAspectRatio(unc) -> float: ...
    bop GetDefaultAspectRatio(unc) -> float: ...
    bop GetDefaultFOV(unc) -> float: ...
    bop GetDesiredColorScale(unc) -> Vector: ...
    bop GetFOVAngle(unc) -> float: ...
    bop GetFadeAmount(unc) -> float: ...
    bop GetFadeColor(unc) -> UnrealColor: ...
    bop GetFadeTime(unc) -> float: ...
    bop GetFadeTimeRemaining(unc) -> float: ...
    bop GetFreeCamDistance(unc) -> float: ...
    bop GetFreeCamOffset(unc) -> Vector: ...
    bop GetLockedFOV(unc) -> float: ...
    bop GetOffAxisPitchAngle(unc) -> float: ...
    bop GetOffAxisYawAngle(unc) -> float: ...
    bop GetOriginalColorScale(unc) -> Vector: ...
    bop GetPendingViewTarget(unc) -> ViewTarget: ...
    bop GetViewTarget(unc) -> ViewTarget: ...
    bop GetbConstrainAspectRatio(unc) -> int: ...
    bop GetbDebugClientSideCamera(unc) -> int: ...
    bop GetbEnableColorScaleInterp(unc) -> int: ...
    bop GetbEnableColorScaling(unc) -> int: ...
    bop GetbEnableFading(unc) -> int: ...
    bop GetbFadeAudio(unc) -> int: ...
    bop GetbForceDisableTemporalAA(unc) -> int: ...
    bop GetbLockedFOV(unc) -> int: ...
    bop GetbShouldSendClientSideCameraUpdate(unc) -> int: ...
    bop GetbUseClientSideCameraUpdates(unc) -> int: ...
    bop PostBeginPlay(unc) -> NPC: ...
    bop SetBlendTimeToGo(unc, newBlendTimeToGo: float) -> NPC: ...
    bop SetCamOverridePostProcessAlpha(unc, newCamOverridePostProcessAlpha: float) -> NPC: ...
    bop SetColorScale(unc, newColorScale: Vector) -> NPC: ...
    bop SetColorScaleInterpDuration(unc, newColorScaleInterpDuration: float) -> NPC: ...
    bop SetColorScaleInterpStartTime(unc, newColorScaleInterpStartTime: float) -> NPC: ...
    bop SetConstrainedAspectRatio(unc, newConstrainedAspectRatio: float) -> NPC: ...
    bop SetDefaultAspectRatio(unc, newDefaultAspectRatio: float) -> NPC: ...
    bop SetDefaultFOV(unc, newDefaultFOV: float) -> NPC: ...
    bop SetDesiredColorScale(unc, newDesiredColorScale: Vector) -> NPC: ...
    bop SetDesiredColorScale2(unc, NewColorScale: Vector, InterpTime: float) -> NPC: ...
    bop SetFOV(unc, NewFOV: float) -> NPC: ...
    bop SetFadeAmount(unc, newFadeAmount: float) -> NPC: ...
    bop SetFadeColor(unc, newFadeColor: UnrealColor) -> NPC: ...
    bop SetFadeTime(unc, newFadeTime: float) -> NPC: ...
    bop SetFadeTimeRemaining(unc, newFadeTimeRemaining: float) -> NPC: ...
    bop SetFreeCamDistance(unc, newFreeCamDistance: float) -> NPC: ...
    bop SetFreeCamOffset(unc, newFreeCamOffset: Vector) -> NPC: ...
    bop SetLockedFOV(unc, newLockedFOV: float) -> NPC: ...
    bop SetOffAxisPitchAngle(unc, newOffAxisPitchAngle: float) -> NPC: ...
    bop SetOffAxisYawAngle(unc, newOffAxisYawAngle: float) -> NPC: ...
    bop SetOriginalColorScale(unc, newOriginalColorScale: Vector) -> NPC: ...
    bop SetPendingViewTarget(unc, newPendingViewTarget: ViewTarget) -> NPC: ...
    bop SetViewTarget(unc, newViewTarget: ViewTarget) -> NPC: ...
    bop SetbConstrainAspectRatio(unc, newbConstrainAspectRatio: int) -> NPC: ...
    bop SetbDebugClientSideCamera(unc, newbDebugClientSideCamera: int) -> NPC: ...
    bop SetbEnableColorScaleInterp(unc, newbEnableColorScaleInterp: int) -> NPC: ...
    bop SetbEnableColorScaling(unc, newbEnableColorScaling: int) -> NPC: ...
    bop SetbEnableFading(unc, newbEnableFading: int) -> NPC: ...
    bop SetbFadeAudio(unc, newbFadeAudio: int) -> NPC: ...
    bop SetbForceDisableTemporalAA(unc, newbForceDisableTemporalAA: int) -> NPC: ...
    bop SetbLockedFOV(unc, newbLockedFOV: int) -> NPC: ...
    bop SetbShouldSendClientSideCameraUpdate(unc, newbShouldSendClientSideCameraUpdate: int) -> NPC: ...
    bop SetbUseClientSideCameraUpdates(unc, newbUseClientSideCameraUpdates: int) -> NPC: ...
    bop StopAllCameraAnims(unc, bImmediate: int) -> NPC: ...
    bop UpdateFade(unc, DeltaTime: float) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: BaseCameraWrapper) -> NPC: ...
    bop eventDestroyed(unc) -> NPC: ...
    bop eventUpdateCamera(unc, DeltaTime: float) -> NPC: ...
    pluh
skibidi BallLassoPickup(SpringPickup, TargetedPickup, RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    bop DoSpring(unc, bFirstHit: int) -> NPC: ...
    bop ScaleSpringMeshToLocation(unc, NewLocation: Vector, TargetLocation: Vector) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: BallLassoPickup) -> NPC: ...
    pluh
skibidi BoostModPickup(RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    bop GetBoostStrength(unc) -> float: ...
    bop GetOldBoostStrength(unc) -> float: ...
    bop GetbUnlimitedBoost(unc) -> int: ...
    bop PickupEnd(unc) -> NPC: ...
    bop PickupStart(unc) -> NPC: ...
    bop SetBoostStrength(unc, newBoostStrength: float) -> NPC: ...
    bop SetOldBoostStrength(unc, newOldBoostStrength: float) -> NPC: ...
    bop SetbUnlimitedBoost(unc, newbUnlimitedBoost: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: BoostModPickup) -> NPC: ...
    pluh
skibidi BoostOverridePickup(TargetedPickup, RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    bop GetOtherCar(unc) -> CarWrapper: ...
    bop OnTargetChanged(unc) -> NPC: ...
    bop PickupEnd(unc) -> NPC: ...
    bop PickupStart(unc) -> NPC: ...
    bop SetOtherCar(unc, newOtherCar: CarWrapper) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: BoostOverridePickup) -> NPC: ...
    pluh
skibidi VehiclePickupWrapper(ActorWrapper, ObjectWrapper):
    bop CanPickup(unc, Car: CarWrapper) -> bool: ...
    bop EventPickedUp(unc, Pickup: VehiclePickupWrapper) -> NPC: ...
    bop EventSpawned(unc, Pickup: VehiclePickupWrapper) -> NPC: ...
    bop GetFXActor(unc) -> FXActorWrapper: ...
    bop GetFXActorArchetype(unc) -> FXActorWrapper: ...
    bop GetRespawnDelay(unc) -> float: ...
    bop GetbNetRelevant(unc) -> int: ...
    bop GetbNoPickup(unc) -> int: ...
    bop GetbPickedUp(unc) -> int: ...
    bop InitFX(unc) -> NPC: ...
    bop IsTouchingAVehicle(unc) -> bool: ...
    bop OnPickUp(unc) -> NPC: ...
    bop OnSpawn(unc) -> NPC: ...
    bop OnTouch(unc, Car: CarWrapper) -> NPC: ...
    bop Pickup2(unc, Car: CarWrapper) -> NPC: ...
    bop PlayPickedUpFX(unc) -> NPC: ...
    bop Respawn2(unc) -> NPC: ...
    bop SetFXActor(unc, newFXActor: FXActorWrapper) -> NPC: ...
    bop SetFXActorArchetype(unc, newFXActorArchetype: FXActorWrapper) -> NPC: ...
    bop SetNetRelevant(unc, bRelevant: int) -> NPC: ...
    bop SetNoPickup(unc) -> NPC: ...
    bop SetPickedUp(unc, bNewPickedUp: int, InInstigator: CarWrapper) -> NPC: ...
    bop SetRespawnDelay(unc, newRespawnDelay: float) -> NPC: ...
    bop SetbNetRelevant(unc, newbNetRelevant: int) -> NPC: ...
    bop SetbNoPickup(unc, newbNoPickup: int) -> NPC: ...
    bop SetbPickedUp(unc, newbPickedUp: int) -> NPC: ...
    bop SetupReplicateNoPickup(unc) -> NPC: ...
    bop UpdateTickDisabled(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: VehiclePickupWrapper) -> NPC: ...
    bop eventPostBeginPlay(unc) -> NPC: ...
    bop eventPreBeginPlay(unc) -> NPC: ...
    bop eventTouch(unc, Other: ActorWrapper, OtherComp: PrimitiveComponentWrapper, HitLocation: Vector, HitNormal: Vector) -> NPC: ...
    pluh
skibidi BoostWrapper(CarComponentWrapper, ActorWrapper, ObjectWrapper):
    bop ApplyForces(unc, ActiveTime: float) -> NPC: ...
    bop CanActivate(unc) -> bool: ...
    bop CanDeactivate(unc) -> bool: ...
    bop ClientFixBoostAmount(unc, TimeStamp: float, Amount: float) -> NPC: ...
    bop ClientGiveBoost(unc, Amount: float) -> NPC: ...
    bop ConfirmBoostAmount2(unc) -> NPC: ...
    bop GetBoostConsumptionRate(unc) -> float: ...
    bop GetBoostForce(unc) -> float: ...
    bop GetBoostModifier(unc) -> float: ...
    bop GetCurrentBoostAmount(unc) -> float: ...
    bop GetLastBoostAmount(unc) -> float: ...
    bop GetLastBoostAmountRequestTime(unc) -> float: ...
    bop GetMaxBoostAmount(unc) -> float: ...
    bop GetMinBoostTime(unc) -> float: ...
    bop GetPercentBoostFull(unc) -> float: ...
    bop GetRechargeDelay(unc) -> float: ...
    bop GetRechargeRate(unc) -> float: ...
    bop GetReplicatedBoostAmount(unc) -> int: ...
    bop GetStartBoostAmount(unc) -> float: ...
    bop GetUnlimitedBoostRefCount(unc) -> int: ...
    bop GetbNoBoost(unc) -> int: ...
    bop GetbPendingConfirmBoostAmount(unc) -> int: ...
    bop GiveBoost2(unc, Amount: float) -> NPC: ...
    bop GiveFullBoost(unc) -> NPC: ...
    bop GiveStartingBoost(unc) -> NPC: ...
    bop IsFull(unc) -> bool: ...
    bop ReadReplicatedBoostAmount(unc) -> NPC: ...
    bop RemoveFromCar(unc) -> NPC: ...
    bop SendConfirmBoostAmount(unc) -> NPC: ...
    bop ServerConfirmBoostAmount(unc, TimeStamp: float, Amount: float) -> NPC: ...
    bop SetBoostAmount(unc, Amount: float) -> NPC: ...
    bop SetBoostConsumptionRate(unc, newBoostConsumptionRate: float) -> NPC: ...
    bop SetBoostForce(unc, newBoostForce: float) -> NPC: ...
    bop SetBoostModifier(unc, newBoostModifier: float) -> NPC: ...
    bop SetBoostModifier2(unc, Modifier: float) -> NPC: ...
    bop SetCurrentBoostAmount(unc, newCurrentBoostAmount: float) -> NPC: ...
    bop SetLastBoostAmount(unc, newLastBoostAmount: float) -> NPC: ...
    bop SetLastBoostAmountRequestTime(unc, newLastBoostAmountRequestTime: float) -> NPC: ...
    bop SetMaxBoostAmount(unc, newMaxBoostAmount: float) -> NPC: ...
    bop SetMinBoostTime(unc, newMinBoostTime: float) -> NPC: ...
    bop SetNoBoost(unc, Enabled: int) -> NPC: ...
    bop SetRechargeDelay(unc, newRechargeDelay: float) -> NPC: ...
    bop SetRechargeDelay2(unc, InRechargeDelay: float) -> NPC: ...
    bop SetRechargeRate(unc, newRechargeRate: float) -> NPC: ...
    bop SetRechargeRate2(unc, InRechargeRate: float) -> NPC: ...
    bop SetReplicatedBoostAmount(unc, newReplicatedBoostAmount: int) -> NPC: ...
    bop SetStartBoostAmount(unc, newStartBoostAmount: float) -> NPC: ...
    bop SetUnlimitedBoost2(unc, Enabled: int) -> NPC: ...
    bop SetUnlimitedBoostDelayed(unc, Enabled: int) -> NPC: ...
    bop SetUnlimitedBoostRefCount(unc, newUnlimitedBoostRefCount: int) -> NPC: ...
    bop SetbNoBoost(unc, newbNoBoost: int) -> NPC: ...
    bop SetbPendingConfirmBoostAmount(unc, newbPendingConfirmBoostAmount: int) -> NPC: ...
    bop ShouldPredictBoostConsumption(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: BoostWrapper) -> NPC: ...
    bop eventSetReplicatedBoostAmount(unc) -> NPC: ...
    pluh
skibidi BotLoadoutData():
    skibidi Attribute():
        skibidi Type():
            """
            Members:

              PAINT

              ESPORTWHEEL

              SPECIALEDITION
            """
            bop __eq__(unc, other: object) -> bool: ...
            bop __getstate__(unc) -> int: ...
            bop __hash__(unc) -> int: ...
            bop __init__(unc, value: int) -> NPC: ...
            bop __int__(unc) -> int: ...
            bop __ne__(unc, other: object) -> bool: ...
            bop __repr__(unc) -> str: ...
            bop __setstate__(unc, state: int) -> NPC: ...
            @property
            bop name(unc) -> str:
                """
                :type: str
                """
            @property
            bop value(unc) -> int:
                """
                :type: int
                """
            ESPORTWHEEL: bakkesmod.BotLoadoutData.Attribute.Type # value = <Type.ESPORTWHEEL: 1>
            PAINT: bakkesmod.BotLoadoutData.Attribute.Type # value = <Type.PAINT: 0>
            SPECIALEDITION: bakkesmod.BotLoadoutData.Attribute.Type # value = <Type.SPECIALEDITION: 2>
            __members__: dict # value = {'PAINT': <Type.PAINT: 0>, 'ESPORTWHEEL': <Type.ESPORTWHEEL: 1>, 'SPECIALEDITION': <Type.SPECIALEDITION: 2>}
            pluh
        @typing.overload
        bop __init__(unc) -> NPC: ...
        @typing.overload
        bop __init__(unc, arg0: BotLoadoutData.Attribute) -> NPC: ...
        @property
        bop type(unc) -> BotLoadoutData::Attribute::Type:
            """
            :type: BotLoadoutData::Attribute::Type
            """
        @type.setter
        bop type(unc, arg1: BotLoadoutData::Attribute::Type) -> NPC:
            pluh
        @property
        bop value(unc) -> int:
            """
            :type: int
            """
        @value.setter
        bop value(unc, arg1: int) -> NPC:
            pluh
        pluh
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: BotLoadoutData) -> NPC: ...
    @property
    bop custom_color_id(unc) -> int:
        """
        :type: int
        """
    @custom_color_id.setter
    bop custom_color_id(unc, arg1: int) -> NPC:
        pluh
    @property
    bop custom_finish_id(unc) -> int:
        """
        :type: int
        """
    @custom_finish_id.setter
    bop custom_finish_id(unc, arg1: int) -> NPC:
        pluh
    @property
    bop product_attributes(unc) -> typing.Dict[int, typing.List[BotLoadoutData::Attribute]]:
        """
        :type: typing.Dict[int, typing.List[BotLoadoutData::Attribute]]
        """
    @product_attributes.setter
    bop product_attributes(unc, arg1: typing.Dict[int, typing.List[BotLoadoutData::Attribute]]) -> NPC:
        pluh
    @property
    bop products(unc) -> typing.Dict[int, int]:
        """
        :type: typing.Dict[int, int]
        """
    @products.setter
    bop products(unc, arg1: typing.Dict[int, int]) -> NPC:
        pluh
    @property
    bop team(unc) -> int:
        """
        :type: int
        """
    @team.setter
    bop team(unc, arg1: int) -> NPC:
        pluh
    @property
    bop team_color_id(unc) -> int:
        """
        :type: int
        """
    @team_color_id.setter
    bop team_color_id(unc, arg1: int) -> NPC:
        pluh
    @property
    bop team_finish_id(unc) -> int:
        """
        :type: int
        """
    @team_finish_id.setter
    bop team_finish_id(unc, arg1: int) -> NPC:
        pluh
    pluh
skibidi CARBODY():
    """
    Members:

      CAR_BACKFIRE

      CAR_BREAKOUT

      CAR_BREAKOUTTYPES

      CAR_OCTANE

      CAR_OCTANEZSR

      CAR_PALADIN

      CAR_ROADHOG

      CAR_ROADHOGXL

      CAR_GIZMO

      CAR_SWEETTOOTH

      CAR_XDEVIL

      CAR_XDEVILMK2

      CAR_HOTSHOT

      CAR_MERC

      CAR_VENOM

      CAR_TAKUMI

      CAR_TAKUMIRXT

      CAR_DOMINUS

      CAR_DOMINUSGT

      CAR_SCARAB

      CAR_ZIPPY

      CAR_DELOREAN

      CAR_RIPPER

      CAR_GROG

      CAR_ARMADILLO

      CAR_WARTHOG

      CAR_BATMOBILE

      CAR_MASAMUNE

      CAR_MARAUDER

      CAR_AFTERSHOCK

      CAR_ESPER

      CAR_PROTEUS

      CAR_TRITON

      CAR_VULCAN

      CAR_TWINMILL

      CAR_BONESHAKER

      CAR_ENDO

      CAR_ICECHARGER

      CAR_MANTIS

      CAR_JOGER619RS

      CAR_CENTIO

      CAR_ANIMUSGP
    """
    bop __eq__(unc, other: object) -> bool: ...
    bop __getstate__(unc) -> int: ...
    bop __hash__(unc) -> int: ...
    bop __init__(unc, value: int) -> NPC: ...
    bop __int__(unc) -> int: ...
    bop __ne__(unc, other: object) -> bool: ...
    bop __repr__(unc) -> str: ...
    bop __setstate__(unc, state: int) -> NPC: ...
    @property
    bop name(unc) -> str:
        """
        :type: str
        """
    @property
    bop value(unc) -> int:
        """
        :type: int
        """
    CAR_AFTERSHOCK: bakkesmod.CARBODY # value = <CARBODY.CAR_AFTERSHOCK: 1286>
    CAR_ANIMUSGP: bakkesmod.CARBODY # value = <CARBODY.CAR_ANIMUSGP: 1932>
    CAR_ARMADILLO: bakkesmod.CARBODY # value = <CARBODY.CAR_ARMADILLO: 625>
    CAR_BACKFIRE: bakkesmod.CARBODY # value = <CARBODY.CAR_BACKFIRE: 21>
    CAR_BATMOBILE: bakkesmod.CARBODY # value = <CARBODY.CAR_BATMOBILE: 803>
    CAR_BONESHAKER: bakkesmod.CARBODY # value = <CARBODY.CAR_BONESHAKER: 1623>
    CAR_BREAKOUT: bakkesmod.CARBODY # value = <CARBODY.CAR_BREAKOUT: 22>
    CAR_BREAKOUTTYPES: bakkesmod.CARBODY # value = <CARBODY.CAR_BREAKOUTTYPES: 1416>
    CAR_CENTIO: bakkesmod.CARBODY # value = <CARBODY.CAR_CENTIO: 1919>
    CAR_DELOREAN: bakkesmod.CARBODY # value = <CARBODY.CAR_DELOREAN: 597>
    CAR_DOMINUS: bakkesmod.CARBODY # value = <CARBODY.CAR_DOMINUS: 403>
    CAR_DOMINUSGT: bakkesmod.CARBODY # value = <CARBODY.CAR_DOMINUSGT: 1018>
    CAR_ENDO: bakkesmod.CARBODY # value = <CARBODY.CAR_ENDO: 1624>
    CAR_ESPER: bakkesmod.CARBODY # value = <CARBODY.CAR_ESPER: 1317>
    CAR_GIZMO: bakkesmod.CARBODY # value = <CARBODY.CAR_GIZMO: 26>
    CAR_GROG: bakkesmod.CARBODY # value = <CARBODY.CAR_GROG: 607>
    CAR_HOTSHOT: bakkesmod.CARBODY # value = <CARBODY.CAR_HOTSHOT: 29>
    CAR_ICECHARGER: bakkesmod.CARBODY # value = <CARBODY.CAR_ICECHARGER: 1675>
    CAR_JOGER619RS: bakkesmod.CARBODY # value = <CARBODY.CAR_JOGER619RS: 1856>
    CAR_MANTIS: bakkesmod.CARBODY # value = <CARBODY.CAR_MANTIS: 1691>
    CAR_MARAUDER: bakkesmod.CARBODY # value = <CARBODY.CAR_MARAUDER: 1172>
    CAR_MASAMUNE: bakkesmod.CARBODY # value = <CARBODY.CAR_MASAMUNE: 1171>
    CAR_MERC: bakkesmod.CARBODY # value = <CARBODY.CAR_MERC: 30>
    CAR_OCTANE: bakkesmod.CARBODY # value = <CARBODY.CAR_OCTANE: 23>
    CAR_OCTANEZSR: bakkesmod.CARBODY # value = <CARBODY.CAR_OCTANEZSR: 1568>
    CAR_PALADIN: bakkesmod.CARBODY # value = <CARBODY.CAR_PALADIN: 24>
    CAR_PROTEUS: bakkesmod.CARBODY # value = <CARBODY.CAR_PROTEUS: 1475>
    CAR_RIPPER: bakkesmod.CARBODY # value = <CARBODY.CAR_RIPPER: 600>
    CAR_ROADHOG: bakkesmod.CARBODY # value = <CARBODY.CAR_ROADHOG: 25>
    CAR_ROADHOGXL: bakkesmod.CARBODY # value = <CARBODY.CAR_ROADHOGXL: 1300>
    CAR_SCARAB: bakkesmod.CARBODY # value = <CARBODY.CAR_SCARAB: 404>
    CAR_SWEETTOOTH: bakkesmod.CARBODY # value = <CARBODY.CAR_SWEETTOOTH: 27>
    CAR_TAKUMI: bakkesmod.CARBODY # value = <CARBODY.CAR_TAKUMI: 402>
    CAR_TAKUMIRXT: bakkesmod.CARBODY # value = <CARBODY.CAR_TAKUMIRXT: 1295>
    CAR_TRITON: bakkesmod.CARBODY # value = <CARBODY.CAR_TRITON: 1478>
    CAR_TWINMILL: bakkesmod.CARBODY # value = <CARBODY.CAR_TWINMILL: 1603>
    CAR_VENOM: bakkesmod.CARBODY # value = <CARBODY.CAR_VENOM: 31>
    CAR_VULCAN: bakkesmod.CARBODY # value = <CARBODY.CAR_VULCAN: 1533>
    CAR_WARTHOG: bakkesmod.CARBODY # value = <CARBODY.CAR_WARTHOG: 723>
    CAR_XDEVIL: bakkesmod.CARBODY # value = <CARBODY.CAR_XDEVIL: 28>
    CAR_XDEVILMK2: bakkesmod.CARBODY # value = <CARBODY.CAR_XDEVILMK2: 1159>
    CAR_ZIPPY: bakkesmod.CARBODY # value = <CARBODY.CAR_ZIPPY: 523>
    __members__: dict # value = {'CAR_BACKFIRE': <CARBODY.CAR_BACKFIRE: 21>, 'CAR_BREAKOUT': <CARBODY.CAR_BREAKOUT: 22>, 'CAR_BREAKOUTTYPES': <CARBODY.CAR_BREAKOUTTYPES: 1416>, 'CAR_OCTANE': <CARBODY.CAR_OCTANE: 23>, 'CAR_OCTANEZSR': <CARBODY.CAR_OCTANEZSR: 1568>, 'CAR_PALADIN': <CARBODY.CAR_PALADIN: 24>, 'CAR_ROADHOG': <CARBODY.CAR_ROADHOG: 25>, 'CAR_ROADHOGXL': <CARBODY.CAR_ROADHOGXL: 1300>, 'CAR_GIZMO': <CARBODY.CAR_GIZMO: 26>, 'CAR_SWEETTOOTH': <CARBODY.CAR_SWEETTOOTH: 27>, 'CAR_XDEVIL': <CARBODY.CAR_XDEVIL: 28>, 'CAR_XDEVILMK2': <CARBODY.CAR_XDEVILMK2: 1159>, 'CAR_HOTSHOT': <CARBODY.CAR_HOTSHOT: 29>, 'CAR_MERC': <CARBODY.CAR_MERC: 30>, 'CAR_VENOM': <CARBODY.CAR_VENOM: 31>, 'CAR_TAKUMI': <CARBODY.CAR_TAKUMI: 402>, 'CAR_TAKUMIRXT': <CARBODY.CAR_TAKUMIRXT: 1295>, 'CAR_DOMINUS': <CARBODY.CAR_DOMINUS: 403>, 'CAR_DOMINUSGT': <CARBODY.CAR_DOMINUSGT: 1018>, 'CAR_SCARAB': <CARBODY.CAR_SCARAB: 404>, 'CAR_ZIPPY': <CARBODY.CAR_ZIPPY: 523>, 'CAR_DELOREAN': <CARBODY.CAR_DELOREAN: 597>, 'CAR_RIPPER': <CARBODY.CAR_RIPPER: 600>, 'CAR_GROG': <CARBODY.CAR_GROG: 607>, 'CAR_ARMADILLO': <CARBODY.CAR_ARMADILLO: 625>, 'CAR_WARTHOG': <CARBODY.CAR_WARTHOG: 723>, 'CAR_BATMOBILE': <CARBODY.CAR_BATMOBILE: 803>, 'CAR_MASAMUNE': <CARBODY.CAR_MASAMUNE: 1171>, 'CAR_MARAUDER': <CARBODY.CAR_MARAUDER: 1172>, 'CAR_AFTERSHOCK': <CARBODY.CAR_AFTERSHOCK: 1286>, 'CAR_ESPER': <CARBODY.CAR_ESPER: 1317>, 'CAR_PROTEUS': <CARBODY.CAR_PROTEUS: 1475>, 'CAR_TRITON': <CARBODY.CAR_TRITON: 1478>, 'CAR_VULCAN': <CARBODY.CAR_VULCAN: 1533>, 'CAR_TWINMILL': <CARBODY.CAR_TWINMILL: 1603>, 'CAR_BONESHAKER': <CARBODY.CAR_BONESHAKER: 1623>, 'CAR_ENDO': <CARBODY.CAR_ENDO: 1624>, 'CAR_ICECHARGER': <CARBODY.CAR_ICECHARGER: 1675>, 'CAR_MANTIS': <CARBODY.CAR_MANTIS: 1691>, 'CAR_JOGER619RS': <CARBODY.CAR_JOGER619RS: 1856>, 'CAR_CENTIO': <CARBODY.CAR_CENTIO: 1919>, 'CAR_ANIMUSGP': <CARBODY.CAR_ANIMUSGP: 1932>}
    pluh
skibidi CVarManagerWrapper():
    @typing.overload
    bop __init__(unc, mem: int, pluginIdx: std::type_index) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: CVarManagerWrapper) -> NPC: ...
    bop backupBinds(unc, path: str) -> NPC: ...
    bop backupCfg(unc, path: str) -> NPC: ...
    bop executeCommand(unc, command: str, log: bool) -> NPC: ...
    bop getAlias(unc, alias: str) -> str: ...
    bop getBindStringForKey(unc, key: str) -> str: ...
    bop getCvar(unc, cvar: str) -> CVarWrapper: ...
    bop loadCfg(unc, path: str) -> NPC: ...
    bop log(unc, text: str) -> NPC: ...
    bop registerCvar(unc, cvar: str, defaultValue: str, desc: str, searchAble: bool, hasMin: bool, min: float, hasMax: bool, max: float, saveToCfg: bool) -> CVarWrapper: ...
    bop registerNotifier(unc, cvar: str, notifier: typing.Callable[[typing.List[str]], NPC], description: str, permissions: int) -> NPC: ...
    bop removeBind(unc, key: str) -> NPC: ...
    bop removeCvar(unc, cvar: str) -> bool: ...
    bop removeNotifier(unc, cvar: str) -> bool: ...
    bop setAlias(unc, key: str, script: str) -> NPC: ...
    bop setBind(unc, key: str, command: str) -> NPC: ...
    pluh
skibidi CVarWrapper():
    bop GetDefaultValue(unc) -> str: ...
    bop GetMaximum(unc) -> float: ...
    bop GetMinimum(unc) -> float: ...
    bop HasMaximum(unc) -> bool: ...
    bop HasMinimum(unc) -> bool: ...
    bop IsHidden(unc) -> bool: ...
    bop IsNull(unc) -> bool: ...
    bop ResetToDefault(unc) -> NPC: ...
    bop ShouldSaveToCfg(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int, pluginIdx: std::type_index) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: CVarWrapper) -> NPC: ...
    bop addOnValueChanged(unc, changeFunc: typing.Callable[[str, CVarWrapper], NPC]) -> NPC: ...
    bop getBoolValue(unc) -> bool: ...
    bop getCVarName(unc) -> str: ...
    bop getColorValue(unc) -> LinearColor: ...
    bop getDescription(unc) -> str: ...
    bop getFloatValue(unc) -> float: ...
    bop getIntValue(unc) -> int: ...
    bop getStringValue(unc) -> str: ...
    bop notify(unc) -> NPC: ...
    bop removeOnValueChanged(unc) -> NPC: ...
    @typing.overload
    bop setValue(unc, value: LinearColor) -> NPC: ...
    @typing.overload
    bop setValue(unc, value: float) -> NPC: ...
    @typing.overload
    bop setValue(unc, value: int) -> NPC: ...
    @typing.overload
    bop setValue(unc, value: str) -> NPC: ...
    pluh
skibidi CameraSave():
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: CameraSave) -> NPC: ...
    @property
    bop CameraShake(unc) -> bool:
        """
        :type: bool
        """
    @CameraShake.setter
    bop CameraShake(unc, arg1: bool) -> NPC:
        pluh
    @property
    bop InvertSwivelPitch(unc) -> bool:
        """
        :type: bool
        """
    @InvertSwivelPitch.setter
    bop InvertSwivelPitch(unc, arg1: bool) -> NPC:
        pluh
    pluh
skibidi CameraXWrapper(BaseCameraWrapper, ActorWrapper, ObjectWrapper):
    bop CopyFade(unc, Other: CameraXWrapper) -> NPC: ...
    bop GetClipOffset(unc) -> Vector: ...
    bop GetEndFadeColor(unc) -> UnrealColor: ...
    bop GetOldControllerLocation(unc) -> Vector: ...
    bop GetOldControllerRotation(unc) -> Rotator: ...
    bop GetPCDeltaLocation(unc) -> Vector: ...
    bop GetPCDeltaRotation(unc) -> Rotator: ...
    bop GetShakeFOVOffset(unc) -> float: ...
    bop GetShakeLocationOffset(unc) -> Vector: ...
    bop GetShakeRotationOffset(unc) -> Rotator: ...
    bop GetStartFadeColor(unc) -> UnrealColor: ...
    bop GetbDisableCameraShake(unc) -> int: ...
    bop GetbSnapNextTransition(unc) -> int: ...
    bop InstanceCameraStates(unc) -> NPC: ...
    bop IsTransitioning(unc) -> bool: ...
    bop OnLoadingMovieClosesd(unc) -> NPC: ...
    bop RemoveRoll(unc, InRot: Rotator) -> Rotator: ...
    bop SetClipOffset(unc, newClipOffset: Vector) -> NPC: ...
    bop SetEndFadeColor(unc, newEndFadeColor: UnrealColor) -> NPC: ...
    bop SetOldControllerLocation(unc, newOldControllerLocation: Vector) -> NPC: ...
    bop SetOldControllerRotation(unc, newOldControllerRotation: Rotator) -> NPC: ...
    bop SetPCDeltaLocation(unc, newPCDeltaLocation: Vector) -> NPC: ...
    bop SetPCDeltaRotation(unc, newPCDeltaRotation: Rotator) -> NPC: ...
    bop SetShakeFOVOffset(unc, newShakeFOVOffset: float) -> NPC: ...
    bop SetShakeLocationOffset(unc, newShakeLocationOffset: Vector) -> NPC: ...
    bop SetShakeRotationOffset(unc, newShakeRotationOffset: Rotator) -> NPC: ...
    bop SetStartFadeColor(unc, newStartFadeColor: UnrealColor) -> NPC: ...
    bop SetbDisableCameraShake(unc, newbDisableCameraShake: int) -> NPC: ...
    bop SetbSnapNextTransition(unc, newbSnapNextTransition: int) -> NPC: ...
    bop SnapTransition(unc) -> NPC: ...
    bop UpdateCameraState(unc) -> NPC: ...
    bop UpdateFade(unc, DeltaTime: float) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: CameraXWrapper) -> NPC: ...
    bop eventOnViewTargetChanged(unc) -> NPC: ...
    bop eventPostBeginPlay(unc) -> NPC: ...
    bop eventUpdateCamera(unc, DeltaTime: float) -> NPC: ...
    pluh
skibidi CameraWrapper(CameraXWrapper, BaseCameraWrapper, ActorWrapper, ObjectWrapper):
    bop ClipToField(unc, CameraLocationZ: float) -> float: ...
    bop Demolished2(unc, InDemolisher: RBActorWrapper) -> NPC: ...
    bop EventCameraTargetChanged(unc, Camera: CameraWrapper, Target: ActorWrapper) -> NPC: ...
    bop GetCameraAsActor(unc) -> ActorWrapper: ...
    bop GetCameraPresetSettings(unc) -> StructArrayWrapperbetaProfileCameraSettings>: ...
    bop GetCameraSettings(unc) -> ProfileCameraSettings: ...
    bop GetCameraState(unc) -> str: ...
    bop GetClipRate(unc) -> float: ...
    bop GetCurrentSwivel(unc) -> Rotator: ...
    bop GetDefaultFOVOffset(unc) -> float: ...
    bop GetDefaultViewHeightOffset(unc) -> float: ...
    bop GetDemolisher(unc) -> RBActorWrapper: ...
    bop GetDesiredSwivel(unc, LookUp: float, LookRight: float) -> Rotator: ...
    bop GetFOV(unc) -> float: ...
    bop GetFocusActor(unc) -> str: ...
    bop GetHorizontalSplitscreenFOVOffset(unc) -> float: ...
    bop GetHorizontalSplitscreenHeightOffset(unc) -> float: ...
    bop GetLocation(unc) -> Vector: ...
    bop GetPOV(unc) -> POV: ...
    bop GetRotation(unc) -> Rotator: ...
    bop GetSwivelDieRate(unc) -> float: ...
    bop GetSwivelFastSpeed(unc) -> float: ...
    bop GetVerticalSplitscreenFOVOffset(unc) -> float: ...
    bop GetbDemolished(unc) -> int: ...
    bop IsCameraShakeOn(unc) -> bool: ...
    bop SetCameraSettings(unc, settings: ProfileCameraSettings) -> NPC: ...
    bop SetCameraState(unc, stateName: str) -> NPC: ...
    bop SetClipRate(unc, newClipRate: float) -> NPC: ...
    bop SetCurrentSwivel(unc, newCurrentSwivel: Rotator) -> NPC: ...
    bop SetDemolisher(unc, newDemolisher: RBActorWrapper) -> NPC: ...
    bop SetFOV(unc, fov: float) -> NPC: ...
    bop SetFlyCamBallTargetMode(unc) -> bool: ...
    bop SetFocusActor(unc, actorName: str) -> bool: ...
    bop SetHorizontalSplitscreenFOVOffset(unc, newHorizontalSplitscreenFOVOffset: float) -> NPC: ...
    bop SetHorizontalSplitscreenHeightOffset(unc, newHorizontalSplitscreenHeightOffset: float) -> NPC: ...
    bop SetLocation(unc, location: Vector) -> NPC: ...
    bop SetLockedFOV(unc, lock: bool) -> NPC: ...
    bop SetPOV(unc, pov: POV) -> NPC: ...
    bop SetRotation(unc, rotation: Rotator) -> NPC: ...
    bop SetSwivelDieRate(unc, newSwivelDieRate: float) -> NPC: ...
    bop SetSwivelFastSpeed(unc, newSwivelFastSpeed: float) -> NPC: ...
    bop SetVerticalSplitscreenFOVOffset(unc, newVerticalSplitscreenFOVOffset: float) -> NPC: ...
    bop SetbDemolished(unc, newbDemolished: int) -> NPC: ...
    bop UpdateFOV(unc) -> NPC: ...
    bop UpdateSwivel(unc, DeltaTime: float) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: CameraWrapper) -> NPC: ...
    bop linterp(unc, start: Vector, end: Vector, elapsed: float, speed: float) -> Vector: ...
    pluh
skibidi CanvasWrapper():
    @typing.overload
    bop DrawBox(unc, size: Vector2) -> NPC: ...
    @typing.overload
    bop DrawBox(unc, size: Vector2F) -> NPC: ...
    @typing.overload
    bop DrawLine(unc, start: Vector2, end: Vector2) -> NPC: ...
    @typing.overload
    bop DrawLine(unc, start: Vector2, end: Vector2, width: float) -> NPC: ...
    @typing.overload
    bop DrawLine(unc, start: Vector2F, end: Vector2F) -> NPC: ...
    @typing.overload
    bop DrawLine(unc, start: Vector2F, end: Vector2F, width: float) -> NPC: ...
    @typing.overload
    bop DrawRect(unc, RectX: float, RectY: float, img: ImageWrapper) -> NPC: ...
    @typing.overload
    bop DrawRect(unc, start: Vector2, end: Vector2) -> NPC: ...
    @typing.overload
    bop DrawRect(unc, start: Vector2F, end: Vector2F) -> NPC: ...
    bop DrawRotatedTile(unc, img: ImageWrapper, Rotation: Rotator, XL: float, YL: float, U: float, V: float, UL: float, VL: float, AnchorX: float, AnchorY: float) -> NPC: ...
    @typing.overload
    bop DrawString(unc, text: str) -> NPC: ...
    @typing.overload
    bop DrawString(unc, text: str, xScale: float, yScale: float) -> NPC: ...
    @typing.overload
    bop DrawString(unc, text: str, xScale: float, yScale: float, dropShadow: bool, wrapText: bool) -> NPC: ...
    bop DrawTexture(unc, img: ImageWrapper, scale: float) -> NPC: ...
    bop DrawTile(unc, img: ImageWrapper, XL: float, YL: float, U: float, V: float, UL: float, VL: float, Color: LinearColor, ClipTile: int, Blend: int) -> NPC: ...
    @typing.overload
    bop FillBox(unc, size: Vector2) -> NPC: ...
    @typing.overload
    bop FillBox(unc, size: Vector2F) -> NPC: ...
    @typing.overload
    bop FillTriangle(unc, p1: Vector2, p2: Vector2, p3: Vector2) -> NPC: ...
    @typing.overload
    bop FillTriangle(unc, p1: Vector2, p2: Vector2, p3: Vector2, color: LinearColor) -> NPC: ...
    @typing.overload
    bop FillTriangle(unc, p1: Vector2F, p2: Vector2F, p3: Vector2F) -> NPC: ...
    @typing.overload
    bop FillTriangle(unc, p1: Vector2F, p2: Vector2F, p3: Vector2F, color: LinearColor) -> NPC: ...
    bop GetColor(unc) -> LinearColor: ...
    bop GetPosition(unc) -> Vector2: ...
    bop GetPositionFloat(unc) -> Vector2F: ...
    bop GetSize(unc) -> Vector2: ...
    bop GetStringSize(unc, text: str, xScale: float, yScale: float) -> Vector2F: ...
    bop Project(unc, location: Vector) -> Vector2: ...
    bop ProjectF(unc, location: Vector) -> Vector2F: ...
    @typing.overload
    bop SetColor(unc, Red: str, Green: str, Blue: str, Alpha: str) -> NPC: ...
    @typing.overload
    bop SetColor(unc, color: LinearColor) -> NPC: ...
    @typing.overload
    bop SetPosition(unc, pos: Vector2) -> NPC: ...
    @typing.overload
    bop SetPosition(unc, pos: Vector2F) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: CanvasWrapper) -> NPC: ...
    pluh
skibidi AirControlComponentWrapper(CarComponentWrapper, ActorWrapper, ObjectWrapper):
    bop ApplyForces(unc, ActiveTime: float) -> NPC: ...
    bop GetAirControlSensitivity(unc) -> float: ...
    bop GetAirDamping(unc) -> Rotator: ...
    bop GetAirTorque(unc) -> Rotator: ...
    bop GetControlScale(unc) -> float: ...
    bop GetDodgeDisableTimeRemaining(unc) -> float: ...
    bop GetThrottleForce(unc) -> float: ...
    bop OnCreated(unc) -> NPC: ...
    bop SetAirControlSensitivity(unc, newAirControlSensitivity: float) -> NPC: ...
    bop SetAirDamping(unc, newAirDamping: Rotator) -> NPC: ...
    bop SetAirTorque(unc, newAirTorque: Rotator) -> NPC: ...
    bop SetControlScale(unc, newControlScale: float) -> NPC: ...
    bop SetDodgeDisableTimeRemaining(unc, newDodgeDisableTimeRemaining: float) -> NPC: ...
    bop SetThrottleForce(unc, newThrottleForce: float) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: AirControlComponentWrapper) -> NPC: ...
    pluh
skibidi CarSpeedPickup(RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    bop GetAddedForce(unc) -> Vector: ...
    bop GetGravityScale(unc) -> float: ...
    bop GetOrigGravityScale(unc) -> float: ...
    bop PickupEnd(unc) -> NPC: ...
    bop PickupStart(unc) -> NPC: ...
    bop SetAddedForce(unc, newAddedForce: Vector) -> NPC: ...
    bop SetGravityScale(unc, newGravityScale: float) -> NPC: ...
    bop SetOrigGravityScale(unc, newOrigGravityScale: float) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: CarSpeedPickup) -> NPC: ...
    pluh
skibidi VehicleWrapper(RBActorWrapper, ActorWrapper, ObjectWrapper):
    bop EnablePodiumMode(unc) -> NPC: ...
    bop EventPRIChanged(unc, Vehicle: VehicleWrapper) -> NPC: ...
    bop ForceNetPacketIfNearBall(unc) -> NPC: ...
    bop GetAIController(unc) -> AIControllerWrapper: ...
    bop GetAirControlComponent(unc) -> AirControlComponentWrapper: ...
    bop GetBoostComponent(unc) -> BoostWrapper: ...
    bop GetDodgeComponent(unc) -> DodgeComponentWrapper: ...
    bop GetDoubleJumpComponent(unc) -> DoubleJumpComponentWrapper: ...
    bop GetForwardSpeed(unc) -> float: ...
    bop GetGroundNormal(unc) -> Vector: ...
    bop GetInput(unc) -> ControllerInput: ...
    bop GetJumpComponent(unc) -> JumpComponentWrapper: ...
    bop GetLastBallImpactFrame(unc) -> int: ...
    bop GetLastBallTouchFrame(unc) -> int: ...
    bop GetLocalCollisionExtent(unc) -> Vector: ...
    bop GetLocalCollisionOffset(unc) -> Vector: ...
    bop GetNumWheelContacts(unc) -> int: ...
    bop GetNumWheelWorldContacts(unc) -> int: ...
    bop GetPRI(unc) -> PriWrapper: ...
    bop GetPlayerController(unc) -> PlayerControllerWrapper: ...
    bop GetReplicatedSteer(unc) -> int: ...
    bop GetReplicatedThrottle(unc) -> int: ...
    bop GetStickyForce(unc) -> StickyForceData: ...
    bop GetTimeBelowSupersonicSpeed(unc) -> float: ...
    bop GetTimeOffGround(unc) -> float: ...
    bop GetTimeOnGround(unc) -> float: ...
    bop GetVehicleSim(unc) -> VehicleSimWrapper: ...
    bop GetVehicleUpdateTag(unc) -> int: ...
    bop GetbCanJump(unc) -> int: ...
    bop GetbDoubleJumped(unc) -> int: ...
    bop GetbDriving(unc) -> int: ...
    bop GetbJumped(unc) -> int: ...
    bop GetbOnGround(unc) -> int: ...
    bop GetbPodiumMode(unc) -> int: ...
    bop GetbReplicatedHandbrake(unc) -> int: ...
    bop GetbSuperSonic(unc) -> int: ...
    bop InitAudioParams(unc) -> NPC: ...
    bop IsCarWithinForwardEllipticalCone(unc, OtherCar: VehicleWrapper, YawAngleDegrees: float, PitchAngleDegrees: float) -> bool: ...
    bop IsOnGround(unc) -> bool: ...
    bop IsOnWall(unc) -> bool: ...
    bop OnControllerChanged(unc) -> NPC: ...
    bop OnPRIChanged(unc) -> NPC: ...
    bop SetDoubleJumpComponent(unc, newDoubleJumpComponent: DoubleJumpComponentWrapper) -> NPC: ...
    bop SetDriving(unc, bDrive: int) -> NPC: ...
    bop SetInput(unc, newInput: ControllerInput) -> NPC: ...
    bop SetLastBallImpactFrame(unc, newLastBallImpactFrame: int) -> NPC: ...
    bop SetLastBallTouchFrame(unc, newLastBallTouchFrame: int) -> NPC: ...
    bop SetLocalCollisionExtent(unc, newLocalCollisionExtent: Vector) -> NPC: ...
    bop SetLocalCollisionOffset(unc, newLocalCollisionOffset: Vector) -> NPC: ...
    bop SetPRI(unc, newPRI: PriWrapper) -> NPC: ...
    bop SetPlayerController(unc, newPlayerController: PlayerControllerWrapper) -> NPC: ...
    bop SetReplicatedSteer(unc, newReplicatedSteer: int) -> NPC: ...
    bop SetReplicatedThrottle(unc, newReplicatedThrottle: int) -> NPC: ...
    bop SetStickyForce(unc, newStickyForce: StickyForceData) -> NPC: ...
    bop SetTimeBelowSupersonicSpeed(unc, newTimeBelowSupersonicSpeed: float) -> NPC: ...
    bop SetVehicleSim(unc, newVehicleSim: VehicleSimWrapper) -> NPC: ...
    bop SetVehicleUpdateTag(unc, newVehicleUpdateTag: int) -> NPC: ...
    bop SetbCanJump(unc, newbCanJump: int) -> NPC: ...
    bop SetbDoubleJumped(unc, newbDoubleJumped: int) -> NPC: ...
    bop SetbDriving(unc, newbDriving: int) -> NPC: ...
    bop SetbJumped(unc, newbJumped: int) -> NPC: ...
    bop SetbOnGround(unc, newbOnGround: int) -> NPC: ...
    bop SetbPodiumMode(unc, newbPodiumMode: int) -> NPC: ...
    bop SetbReplicatedHandbrake(unc, newbReplicatedHandbrake: int) -> NPC: ...
    bop SetbSuperSonic(unc, newbSuperSonic: int) -> NPC: ...
    bop UnPossessed(unc) -> NPC: ...
    bop ZeroMovementVariables(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: VehicleWrapper) -> NPC: ...
    bop eventSetVehicleInput(unc, NewInput: ControllerInput) -> NPC: ...
    pluh
skibidi CertifiedStatDatabaseWrapper(ObjectWrapper):
    bop GetStatId(unc, StatName: str) -> int: ...
    bop GetStatName(unc, StatId: int) -> str: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: CertifiedStatDatabaseWrapper) -> NPC: ...
    pluh
skibidi ClubColorSet():
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: ClubColorSet) -> NPC: ...
    @property
    bop CustomColorID(unc) -> int:
        """
        :type: int
        """
    @CustomColorID.setter
    bop CustomColorID(unc, arg1: int) -> NPC:
        pluh
    @property
    bop TeamColorID(unc) -> int:
        """
        :type: int
        """
    @TeamColorID.setter
    bop TeamColorID(unc, arg1: int) -> NPC:
        pluh
    @property
    bop bCustomColorSet(unc) -> bool:
        """
        :type: bool
        """
    @bCustomColorSet.setter
    bop bCustomColorSet(unc, arg1: bool) -> NPC:
        pluh
    @property
    bop bTeamColorSet(unc) -> bool:
        """
        :type: bool
        """
    @bTeamColorSet.setter
    bop bTeamColorSet(unc, arg1: bool) -> NPC:
        pluh
    pluh
skibidi ClubSettingsWrapper(ObjectWrapper):
    bop GetAccentColor(unc) -> int: ...
    bop GetClubName(unc) -> UnrealStringWrapper: ...
    bop GetClubTag(unc) -> UnrealStringWrapper: ...
    bop GetPrimaryColor(unc) -> int: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ClubSettingsWrapper) -> NPC: ...
    pluh
skibidi ClubMember():
    bop GetName(unc) -> UnrealStringWrapper: ...
    bop GetUniqueID(unc) -> UniqueIDWrapper: ...
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: ClubMember) -> NPC: ...
    pluh
skibidi ClubDetailsWrapper(ClubSettingsWrapper, ObjectWrapper):
    bop GetClubID(unc) -> int: ...
    bop GetLastUpdatedTime(unc) -> int: ...
    bop GetMembers(unc) -> StructArrayWrapperbetaClubMember>: ...
    bop GetMotD(unc) -> UnrealStringWrapper: ...
    bop GetOwnerPlayerUniqueID(unc) -> UniqueIDWrapper: ...
    bop GetbVerified(unc) -> int: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ClubDetailsWrapper) -> NPC: ...
    pluh
skibidi ControllerInput():
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: ControllerInput) -> NPC: ...
    @property
    bop ActivateBoost(unc) -> int:
        """
        :type: int
        """
    @ActivateBoost.setter
    bop ActivateBoost(unc, arg1: int) -> NPC:
        pluh
    @property
    bop DodgeForward(unc) -> float:
        """
        :type: float
        """
    @DodgeForward.setter
    bop DodgeForward(unc, arg1: float) -> NPC:
        pluh
    @property
    bop DodgeStrafe(unc) -> float:
        """
        :type: float
        """
    @DodgeStrafe.setter
    bop DodgeStrafe(unc, arg1: float) -> NPC:
        pluh
    @property
    bop Handbrake(unc) -> int:
        """
        :type: int
        """
    @Handbrake.setter
    bop Handbrake(unc, arg1: int) -> NPC:
        pluh
    @property
    bop HoldingBoost(unc) -> int:
        """
        :type: int
        """
    @HoldingBoost.setter
    bop HoldingBoost(unc, arg1: int) -> NPC:
        pluh
    @property
    bop Jump(unc) -> int:
        """
        :type: int
        """
    @Jump.setter
    bop Jump(unc, arg1: int) -> NPC:
        pluh
    @property
    bop Jumped(unc) -> int:
        """
        :type: int
        """
    @Jumped.setter
    bop Jumped(unc, arg1: int) -> NPC:
        pluh
    @property
    bop Pitch(unc) -> float:
        """
        :type: float
        """
    @Pitch.setter
    bop Pitch(unc, arg1: float) -> NPC:
        pluh
    @property
    bop Roll(unc) -> float:
        """
        :type: float
        """
    @Roll.setter
    bop Roll(unc, arg1: float) -> NPC:
        pluh
    @property
    bop Steer(unc) -> float:
        """
        :type: float
        """
    @Steer.setter
    bop Steer(unc, arg1: float) -> NPC:
        pluh
    @property
    bop Throttle(unc) -> float:
        """
        :type: float
        """
    @Throttle.setter
    bop Throttle(unc, arg1: float) -> NPC:
        pluh
    @property
    bop Yaw(unc) -> float:
        """
        :type: float
        """
    @Yaw.setter
    bop Yaw(unc, arg1: float) -> NPC:
        pluh
    pluh
skibidi ControllerWrapper(ActorWrapper, ObjectWrapper):
    bop GetPlayerReplicationInfo(unc) -> PlayerReplicationInfoWrapper: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ControllerWrapper) -> NPC: ...
    pluh
skibidi CurlRequest():
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: CurlRequest) -> NPC: ...
    @property
    bop body(unc) -> str:
        """
        :type: str
        """
    @body.setter
    bop body(unc, arg1: str) -> NPC:
        pluh
    @property
    bop form_data(unc) -> typing.List[FormField]:
        """
        :type: typing.List[FormField]
        """
    @form_data.setter
    bop form_data(unc, arg1: typing.List[FormField]) -> NPC:
        pluh
    @property
    bop headers(unc) -> typing.Dict[str, str]:
        """
        :type: typing.Dict[str, str]
        """
    @headers.setter
    bop headers(unc, arg1: typing.Dict[str, str]) -> NPC:
        pluh
    @property
    bop progress_function(unc) -> typing.Callable[[float, float, float, float], NPC]:
        """
        :type: typing.Callable[[float, float, float, float], NPC]
        """
    @progress_function.setter
    bop progress_function(unc, arg1: typing.Callable[[float, float, float, float], NPC]) -> NPC:
        pluh
    @property
    bop url(unc) -> str:
        """
        :type: str
        """
    @url.setter
    bop url(unc, arg1: str) -> NPC:
        pluh
    @property
    bop verb(unc) -> str:
        """
        :type: str
        """
    @verb.setter
    bop verb(unc, arg1: str) -> NPC:
        pluh
    pluh
skibidi CustomMatchSettings():
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: CustomMatchSettings) -> NPC: ...
    @property
    bop BlueTeamSettings(unc) -> CustomMatchTeamSettings:
        """
        :type: CustomMatchTeamSettings
        """
    @BlueTeamSettings.setter
    bop BlueTeamSettings(unc, arg1: CustomMatchTeamSettings) -> NPC:
        pluh
    @property
    bop GameMode(unc) -> int:
        """
        :type: int
        """
    @GameMode.setter
    bop GameMode(unc, arg1: int) -> NPC:
        pluh
    @property
    bop GameTags(unc) -> str:
        """
        :type: str
        """
    @GameTags.setter
    bop GameTags(unc, arg1: str) -> NPC:
        pluh
    @property
    bop MapName(unc) -> str:
        """
        :type: str
        """
    @MapName.setter
    bop MapName(unc, arg1: str) -> NPC:
        pluh
    @property
    bop MaxPlayerCount(unc) -> int:
        """
        :type: int
        """
    @MaxPlayerCount.setter
    bop MaxPlayerCount(unc, arg1: int) -> NPC:
        pluh
    @property
    bop OrangeTeamSettings(unc) -> CustomMatchTeamSettings:
        """
        :type: CustomMatchTeamSettings
        """
    @OrangeTeamSettings.setter
    bop OrangeTeamSettings(unc, arg1: CustomMatchTeamSettings) -> NPC:
        pluh
    @property
    bop Password(unc) -> str:
        """
        :type: str
        """
    @Password.setter
    bop Password(unc, arg1: str) -> NPC:
        pluh
    @property
    bop ServerName(unc) -> str:
        """
        :type: str
        """
    @ServerName.setter
    bop ServerName(unc, arg1: str) -> NPC:
        pluh
    @property
    bop bClubServer(unc) -> bool:
        """
        :type: bool
        """
    @bClubServer.setter
    bop bClubServer(unc, arg1: bool) -> NPC:
        pluh
    @property
    bop bPartyMembersOnly(unc) -> bool:
        """
        :type: bool
        """
    @bPartyMembersOnly.setter
    bop bPartyMembersOnly(unc, arg1: bool) -> NPC:
        pluh
    pluh
skibidi CustomMatchTeamSettings():
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: CustomMatchTeamSettings) -> NPC: ...
    @property
    bop Colors(unc) -> ClubColorSet:
        """
        :type: ClubColorSet
        """
    @Colors.setter
    bop Colors(unc, arg1: ClubColorSet) -> NPC:
        pluh
    @property
    bop GameScore(unc) -> int:
        """
        :type: int
        """
    @GameScore.setter
    bop GameScore(unc, arg1: int) -> NPC:
        pluh
    @property
    bop Name(unc) -> str:
        """
        :type: str
        """
    @Name.setter
    bop Name(unc, arg1: str) -> NPC:
        pluh
    pluh
skibidi DataAssetDatabaseWrapper(ObjectWrapper):
    bop GetID(unc, DataAssetName: str) -> int: ...
    bop GetName(unc, DataAssetID: int) -> str: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: DataAssetDatabaseWrapper) -> NPC: ...
    pluh
skibidi DataAssetDatabase_ESportsTeamWrapper(DataAssetDatabaseWrapper, ObjectWrapper):
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: DataAssetDatabase_ESportsTeamWrapper) -> NPC: ...
    pluh
skibidi DemolishPickup(RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    bop GetDemolishSpeed(unc) -> int: ...
    bop GetDemolishTarget(unc) -> int: ...
    bop GetOldSpeed(unc) -> int: ...
    bop GetOldTarget(unc) -> int: ...
    bop PickupEnd(unc) -> NPC: ...
    bop PickupStart(unc) -> NPC: ...
    bop SetDemolishSpeed(unc, newDemolishSpeed: int) -> NPC: ...
    bop SetDemolishTarget(unc, newDemolishTarget: int) -> NPC: ...
    bop SetOldSpeed(unc, newOldSpeed: int) -> NPC: ...
    bop SetOldTarget(unc, newOldTarget: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: DemolishPickup) -> NPC: ...
    pluh
skibidi DodgeComponentWrapper(CarComponentWrapper, ActorWrapper, ObjectWrapper):
    bop ApplyDodgeImpulse(unc) -> NPC: ...
    bop ApplyForces(unc, ActiveTime: float) -> NPC: ...
    bop ApplyTorqueForces(unc, ActiveTime: float) -> NPC: ...
    bop CanActivate(unc) -> bool: ...
    bop GetBackwardDodgeImpulse(unc) -> float: ...
    bop GetBackwardDodgeImpulseMaxSpeedScale(unc) -> float: ...
    bop GetDodgeDirection(unc) -> Vector: ...
    bop GetDodgeImpulse2(unc, DodgeDir: Vector) -> Vector: ...
    bop GetDodgeImpulseScale(unc) -> float: ...
    bop GetDodgeInputThreshold(unc) -> float: ...
    bop GetDodgeTorque(unc) -> Vector: ...
    bop GetDodgeTorqueScale(unc) -> float: ...
    bop GetDodgeTorqueTime(unc) -> float: ...
    bop GetDodgeZDamping(unc) -> float: ...
    bop GetDodgeZDampingDelay(unc) -> float: ...
    bop GetDodgeZDampingUpTime(unc) -> float: ...
    bop GetForwardDodgeImpulse(unc) -> float: ...
    bop GetForwardDodgeImpulseMaxSpeedScale(unc) -> float: ...
    bop GetForwardDodgeTorque(unc) -> float: ...
    bop GetMinDodgeTorqueTime(unc) -> float: ...
    bop GetSideDodgeImpulse(unc) -> float: ...
    bop GetSideDodgeImpulseMaxSpeedScale(unc) -> float: ...
    bop GetSideDodgeTorque(unc) -> float: ...
    bop OnCreated(unc) -> NPC: ...
    bop SetBackwardDodgeImpulse(unc, newBackwardDodgeImpulse: float) -> NPC: ...
    bop SetBackwardDodgeImpulseMaxSpeedScale(unc, newBackwardDodgeImpulseMaxSpeedScale: float) -> NPC: ...
    bop SetDodgeDirection(unc, newDodgeDirection: Vector) -> NPC: ...
    bop SetDodgeImpulseScale(unc, newDodgeImpulseScale: float) -> NPC: ...
    bop SetDodgeInputThreshold(unc, newDodgeInputThreshold: float) -> NPC: ...
    bop SetDodgeSettings(unc) -> NPC: ...
    bop SetDodgeTorque(unc, newDodgeTorque: Vector) -> NPC: ...
    bop SetDodgeTorqueScale(unc, newDodgeTorqueScale: float) -> NPC: ...
    bop SetDodgeTorqueTime(unc, newDodgeTorqueTime: float) -> NPC: ...
    bop SetDodgeZDamping(unc, newDodgeZDamping: float) -> NPC: ...
    bop SetDodgeZDampingDelay(unc, newDodgeZDampingDelay: float) -> NPC: ...
    bop SetDodgeZDampingUpTime(unc, newDodgeZDampingUpTime: float) -> NPC: ...
    bop SetForwardDodgeImpulse(unc, newForwardDodgeImpulse: float) -> NPC: ...
    bop SetForwardDodgeImpulseMaxSpeedScale(unc, newForwardDodgeImpulseMaxSpeedScale: float) -> NPC: ...
    bop SetForwardDodgeTorque(unc, newForwardDodgeTorque: float) -> NPC: ...
    bop SetMinDodgeTorqueTime(unc, newMinDodgeTorqueTime: float) -> NPC: ...
    bop SetSideDodgeImpulse(unc, newSideDodgeImpulse: float) -> NPC: ...
    bop SetSideDodgeImpulseMaxSpeedScale(unc, newSideDodgeImpulseMaxSpeedScale: float) -> NPC: ...
    bop SetSideDodgeTorque(unc, newSideDodgeTorque: float) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: DodgeComponentWrapper) -> NPC: ...
    pluh
skibidi DoubleJumpComponentWrapper(CarComponentWrapper, ActorWrapper, ObjectWrapper):
    bop ApplyForces(unc, ActiveTime: float) -> NPC: ...
    bop GetImpulseScale(unc) -> float: ...
    bop OnCreated(unc) -> NPC: ...
    bop SetImpulseScale(unc, newImpulseScale: float) -> NPC: ...
    bop SetJumpImpulse(unc, newJumpImpulse: float) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: DoubleJumpComponentWrapper) -> NPC: ...
    pluh
skibidi EngineTAWrapper(ObjectWrapper):
    bop DebugClientCorrections2(unc) -> NPC: ...
    bop DebugDedicatedServer(unc, ForHowLong: float) -> NPC: ...
    bop EventPreAsyncTick(unc, DeltaTime: float) -> NPC: ...
    bop GetBulletFixedDeltaTime(unc) -> float: ...
    bop GetDebugClientCorrectionCount(unc) -> int: ...
    bop GetDebugClientCorrectionStartTime(unc) -> float: ...
    bop GetDirtyPhysicsFrame(unc) -> int: ...
    bop GetForceCorrectionFrames(unc) -> int: ...
    bop GetLastBugReportTime(unc) -> float: ...
    bop GetLastPhysicsDeltaTimeScale(unc) -> float: ...
    bop GetMaxClientReplayFrames(unc) -> int: ...
    bop GetMaxPhysicsSubsteps(unc) -> int: ...
    bop GetMaxUploadedClientFrames(unc) -> int: ...
    bop GetPhysicsFrame(unc) -> int: ...
    bop GetPhysicsFramerate(unc) -> float: ...
    bop GetPhysicsTime(unc) -> float: ...
    bop GetRenderAlpha(unc) -> float: ...
    bop GetReplicatedPhysicsFrame(unc) -> int: ...
    bop GetShellArchetypePath(unc) -> UnrealStringWrapper: ...
    bop GetStatGraphs(unc) -> StatGraphSystemWrapper: ...
    bop GetTickNotifyIndex(unc) -> int: ...
    bop GetbClientPhysicsUpdate(unc) -> int: ...
    bop GetbDebugClientCorrections(unc) -> int: ...
    bop GetbDisableClientCorrections(unc) -> int: ...
    bop GetbEnableClientPrediction(unc) -> int: ...
    bop GetbForceClientCorrection(unc) -> int: ...
    bop IsNull(unc) -> bool: ...
    bop RunPhysicsStep(unc, BulletSceneIndex: int, DeltaTime: float) -> NPC: ...
    bop SetDebugClientCorrectionCount(unc, newDebugClientCorrectionCount: int) -> NPC: ...
    bop SetDebugClientCorrectionStartTime(unc, newDebugClientCorrectionStartTime: float) -> NPC: ...
    bop SetDirtyPhysicsFrame(unc, newDirtyPhysicsFrame: int) -> NPC: ...
    bop SetForceCorrectionFrames(unc, newForceCorrectionFrames: int) -> NPC: ...
    bop SetLastBugReportTime(unc, newLastBugReportTime: float) -> NPC: ...
    bop SetLastPhysicsDeltaTimeScale(unc, newLastPhysicsDeltaTimeScale: float) -> NPC: ...
    bop SetMaxClientReplayFrames(unc, newMaxClientReplayFrames: int) -> NPC: ...
    bop SetMaxPhysicsSubsteps(unc, newMaxPhysicsSubsteps: int) -> NPC: ...
    bop SetMaxUploadedClientFrames(unc, newMaxUploadedClientFrames: int) -> NPC: ...
    bop SetPhysicsFrame(unc, newPhysicsFrame: int) -> NPC: ...
    bop SetPhysicsFramerate(unc, newPhysicsFramerate: float) -> NPC: ...
    bop SetRenderAlpha(unc, newRenderAlpha: float) -> NPC: ...
    bop SetReplicatedPhysicsFrame(unc, newReplicatedPhysicsFrame: int) -> NPC: ...
    bop SetStatGraphs(unc, newStatGraphs: StatGraphSystemWrapper) -> NPC: ...
    bop SetTickNotifyIndex(unc, newTickNotifyIndex: int) -> NPC: ...
    bop SetbClientPhysicsUpdate(unc, newbClientPhysicsUpdate: int) -> NPC: ...
    bop SetbDebugClientCorrections(unc, newbDebugClientCorrections: int) -> NPC: ...
    bop SetbDisableClientCorrections(unc, newbDisableClientCorrections: int) -> NPC: ...
    bop SetbEnableClientPrediction(unc, newbEnableClientPrediction: int) -> NPC: ...
    bop SetbForceClientCorrection(unc, newbForceClientCorrection: int) -> NPC: ...
    bop UpdateReplicatedPhysicsFrame(unc, ServerFrame: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: EngineTAWrapper) -> NPC: ...
    bop eventInit(unc) -> NPC: ...
    bop eventRecordAppStart(unc) -> NPC: ...
    pluh
skibidi FXActorWrapper(ActorWrapper, ObjectWrapper):
    bop Activate2(unc) -> NPC: ...
    bop BindTo(unc, ParentFXActor: FXActorWrapper) -> NPC: ...
    bop Deactivate2(unc) -> NPC: ...
    bop GetAttachmentActor(unc) -> ActorWrapper: ...
    bop GetDestroyTime(unc) -> float: ...
    bop GetDestroyWaitTime(unc) -> float: ...
    bop GetEditID(unc) -> int: ...
    bop GetParent(unc) -> FXActorWrapper: ...
    bop GetbActive(unc) -> int: ...
    bop GetbAllowShadowCasting(unc) -> int: ...
    bop GetbAutoActivate(unc) -> int: ...
    bop GetbDeactivateWhenOwnerDestroyed(unc) -> int: ...
    bop GetbHadOwner(unc) -> int: ...
    bop GetbRenderInactive(unc) -> int: ...
    bop Inherit(unc, Other: FXActorWrapper) -> NPC: ...
    bop IsLocallyControlled(unc) -> bool: ...
    bop PostBeginPlay(unc) -> NPC: ...
    bop ResetParticles(unc) -> NPC: ...
    bop SetAttachmentActor(unc, newAttachmentActor: ActorWrapper) -> NPC: ...
    bop SetAttachmentActor2(unc, AttachToActor: ActorWrapper) -> NPC: ...
    bop SetDestroyTime(unc, newDestroyTime: float) -> NPC: ...
    bop SetDestroyWaitTime(unc, newDestroyWaitTime: float) -> NPC: ...
    bop SetEditID(unc, newEditID: int) -> NPC: ...
    bop SetParent(unc, newParent: FXActorWrapper) -> NPC: ...
    bop SetbActive(unc, newbActive: int) -> NPC: ...
    bop SetbAllowShadowCasting(unc, newbAllowShadowCasting: int) -> NPC: ...
    bop SetbAutoActivate(unc, newbAutoActivate: int) -> NPC: ...
    bop SetbDeactivateWhenOwnerDestroyed(unc, newbDeactivateWhenOwnerDestroyed: int) -> NPC: ...
    bop SetbHadOwner(unc, newbHadOwner: int) -> NPC: ...
    bop SetbRenderInactive(unc, newbRenderInactive: int) -> NPC: ...
    bop StopAllEffects(unc) -> NPC: ...
    bop UpdateFXStates(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: FXActorWrapper) -> NPC: ...
    bop eventDeactivateAndDestroy(unc) -> NPC: ...
    bop eventDestroyed(unc) -> NPC: ...
    bop eventDumpDebugInfo(unc) -> NPC: ...
    pluh
skibidi FlipCarComponentWrapper(CarComponentWrapper, ActorWrapper, ObjectWrapper):
    bop ApplyForces(unc, ActiveTime: float) -> NPC: ...
    bop CanActivate(unc) -> bool: ...
    bop GetFlipCarImpulse(unc) -> float: ...
    bop GetFlipCarTime(unc) -> float: ...
    bop GetFlipCarTorque(unc) -> float: ...
    bop GetbFlipRight(unc) -> int: ...
    bop InitFlip(unc) -> NPC: ...
    bop OnCreated(unc) -> NPC: ...
    bop SetFlipCarImpulse(unc, newFlipCarImpulse: float) -> NPC: ...
    bop SetFlipCarTime(unc, newFlipCarTime: float) -> NPC: ...
    bop SetFlipCarTorque(unc, newFlipCarTorque: float) -> NPC: ...
    bop SetbFlipRight(unc, newbFlipRight: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: FlipCarComponentWrapper) -> NPC: ...
    pluh
skibidi FormField():
    skibidi Type():
        """
        Members:

          kString

          kFile
        """
        bop __eq__(unc, other: object) -> bool: ...
        bop __getstate__(unc) -> int: ...
        bop __hash__(unc) -> int: ...
        bop __init__(unc, value: int) -> NPC: ...
        bop __int__(unc) -> int: ...
        bop __ne__(unc, other: object) -> bool: ...
        bop __repr__(unc) -> str: ...
        bop __setstate__(unc, state: int) -> NPC: ...
        @property
        bop name(unc) -> str:
            """
            :type: str
            """
        @property
        bop value(unc) -> int:
            """
            :type: int
            """
        __members__: dict # value = {'kString': <Type.kString: 0>, 'kFile': <Type.kFile: 1>}
        kFile: bakkesmod.FormField.Type # value = <Type.kFile: 1>
        kString: bakkesmod.FormField.Type # value = <Type.kString: 0>
        pluh
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: FormField) -> NPC: ...
    @property
    bop data(unc) -> str:
        """
        :type: str
        """
    @data.setter
    bop data(unc, arg1: str) -> NPC:
        pluh
    @property
    bop field_type(unc) -> FormField::Type:
        """
        :type: FormField::Type
        """
    @field_type.setter
    bop field_type(unc, arg1: FormField::Type) -> NPC:
        pluh
    @property
    bop name(unc) -> str:
        """
        :type: str
        """
    @name.setter
    bop name(unc, arg1: str) -> NPC:
        pluh
    pluh
skibidi SaveDataWrapper(ObjectWrapper):
    bop GetDirectoryPath(unc) -> UnrealStringWrapper: ...
    bop GetSaveExt(unc) -> UnrealStringWrapper: ...
    bop GetSaveType(unc) -> UnrealStringWrapper: ...
    bop GetbExactFileMatch(unc) -> int: ...
    bop Init(unc) -> NPC: ...
    bop IsNull(unc) -> bool: ...
    bop SetbExactFileMatch(unc, newbExactFileMatch: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: SaveDataWrapper) -> NPC: ...
    pluh
skibidi GameEventWrapper(ActorWrapper, ObjectWrapper):
    bop AddCar(unc, Car: CarWrapper) -> NPC: ...
    bop AddForfeitInitiator(unc, PlayerID: SteamID) -> NPC: ...
    bop AddLocalPlayer(unc, Player: PlayerControllerWrapper) -> NPC: ...
    bop AddPRI(unc, PRI: PriWrapper) -> NPC: ...
    bop AddPlayerChatMessage(unc, PlayerID: SteamID, ChatChannel: int, Team: TeamInfoWrapper, Message: str) -> NPC: ...
    bop AllPlayersSelectedTeam(unc) -> bool: ...
    bop AllowReadyUp2(unc) -> NPC: ...
    bop AllowShutdown(unc) -> bool: ...
    bop AllowSplitScreenPlayer(unc) -> bool: ...
    bop AutoReadyPlayers(unc) -> NPC: ...
    bop BanPlayerID(unc, PlayerID: SteamID) -> NPC: ...
    bop BroadcastCountdownMessage(unc, Seconds: int) -> NPC: ...
    bop BroadcastGoMessage(unc) -> NPC: ...
    bop CanQueSaveReplay(unc) -> bool: ...
    bop CanUseBallCam(unc) -> bool: ...
    bop CheckChatBanned(unc, PC: PlayerControllerWrapper) -> NPC: ...
    bop CheckInitiatedForfeit(unc, PRI: PriWrapper) -> NPC: ...
    bop CheckPlayersReady2(unc) -> NPC: ...
    bop ClearGameScoreFromCustomSettings(unc) -> NPC: ...
    bop ClearRespawnList(unc) -> NPC: ...
    bop ConditionalStartMatch(unc) -> NPC: ...
    bop ConditionalStartSpectatorMatch(unc) -> NPC: ...
    bop CreateMatchType(unc, Options: str) -> NPC: ...
    bop EventPlayerResetTraining(unc, GameEvent: GameEventWrapper) -> NPC: ...
    bop FindBotReplacement(unc, PRI: PriWrapper) -> bool: ...
    bop FindPCForUniqueID(unc, PlayerID: SteamID) -> PlayerControllerWrapper: ...
    bop FindPlayerPRI(unc, UniqueId: SteamID) -> PriWrapper: ...
    bop ForceMatchStart(unc) -> NPC: ...
    bop GetActivator(unc) -> PlayerControllerWrapper: ...
    bop GetActivatorCar(unc) -> CarWrapper: ...
    bop GetBannedPlayers(unc) -> StructArrayWrapperbetaSteamID>: ...
    bop GetBotBoostThreshold_vsAI(unc) -> float: ...
    bop GetBotSkill(unc) -> float: ...
    bop GetCarArchetype(unc) -> CarWrapper: ...
    bop GetCars(unc) -> ArrayWrapperbetaCarWrapper>: ...
    bop GetCountdownTime(unc) -> int: ...
    bop GetFinishTime(unc) -> int: ...
    bop GetForfeitInitiatorIDs(unc) -> StructArrayWrapperbetaSteamID>: ...
    bop GetGameOwner(unc) -> PriWrapper: ...
    bop GetGameStateTimeRemaining(unc) -> int: ...
    bop GetLocalPlayers(unc) -> ArrayWrapperbetaPlayerControllerWrapper>: ...
    bop GetLocalPrimaryPlayer(unc) -> PlayerControllerWrapper: ...
    bop GetMatchTimeDilation(unc) -> float: ...
    bop GetMaxHumans(unc) -> int: ...
    bop GetMaxPlayers(unc) -> int: ...
    bop GetMinPlayers(unc) -> int: ...
    bop GetNumHumans(unc) -> int: ...
    bop GetPRIs(unc) -> ArrayWrapperbetaPriWrapper>: ...
    bop GetPlayers(unc) -> ArrayWrapperbetaControllerWrapper>: ...
    bop GetPlaylist(unc) -> GameSettingPlaylistWrapper: ...
    bop GetRealDeltaTime(unc, ElapsedTime: float) -> float: ...
    bop GetReplicatedGameStateTimeRemaining(unc) -> int: ...
    bop GetReplicatedRoundCountDownNumber(unc) -> int: ...
    bop GetReplicatedStateIndex(unc) -> int: ...
    bop GetRespawnTime(unc) -> int: ...
    bop GetRespawnTime2(unc) -> int: ...
    bop GetRichPresenceString(unc) -> UnrealStringWrapper: ...
    bop GetSpawnPoints(unc) -> ArrayWrapperbetaActorWrapper>: ...
    bop GetStartPointIndex(unc) -> int: ...
    bop GetbAllowQueueSaveReplay(unc) -> int: ...
    bop GetbAllowReadyUp(unc) -> int: ...
    bop GetbAwardAchievements(unc) -> int: ...
    bop GetbCanVoteToForfeit(unc) -> int: ...
    bop GetbCountdownMessagesDisabled(unc) -> int: ...
    bop GetbDisableAimAssist(unc) -> int: ...
    bop GetbFillWithAI(unc) -> int: ...
    bop GetbHasLeaveMatchPenalty(unc) -> int: ...
    bop GetbMultiplayer(unc) -> int: ...
    bop GetbRandomizedBotLoadouts(unc) -> int: ...
    bop GetbRestartingMatch(unc) -> int: ...
    bop HandleFinished(unc, GameEvent: GameEventWrapper) -> NPC: ...
    bop HandleNextGame(unc) -> bool: ...
    bop HandlePlayerRemoved(unc, GameEvent: GameEventWrapper, PRI: PriWrapper) -> NPC: ...
    bop HasPlayerNamed(unc, PlayerName: str) -> bool: ...
    bop Init2(unc, InActivator: PlayerControllerWrapper) -> NPC: ...
    bop InitBotSkill(unc) -> NPC: ...
    bop InitCountDown(unc) -> NPC: ...
    bop InitMutators(unc) -> NPC: ...
    bop IsFinished(unc) -> bool: ...
    bop IsOnlineMultiplayer(unc) -> bool: ...
    bop IsPlayingLan(unc) -> bool: ...
    bop IsPlayingOffline(unc) -> bool: ...
    bop IsPlayingPrivate(unc) -> bool: ...
    bop IsPlayingPublic(unc) -> bool: ...
    bop IsPlayingTraining(unc) -> bool: ...
    bop MoveToGround(unc, Mover: ActorWrapper, HeightCheck: float) -> bool: ...
    bop OnAllPlayersReady(unc) -> NPC: ...
    bop OnCanVoteForfeitChanged(unc) -> NPC: ...
    bop OnCarSpawned(unc, NewCar: CarWrapper) -> NPC: ...
    bop OnFinished(unc) -> NPC: ...
    bop OnGameStateChanged(unc) -> NPC: ...
    bop OnGameStateTimeLapsed(unc) -> NPC: ...
    bop OnGameStateTimeUpdated(unc) -> NPC: ...
    bop OnMatchSettingsChanged(unc) -> NPC: ...
    bop OnPenaltyChanged(unc) -> NPC: ...
    bop OnPlayerRestarted(unc, PlayerCar: CarWrapper) -> NPC: ...
    bop PlayerResetTraining(unc) -> NPC: ...
    bop RandomizeBots(unc) -> NPC: ...
    bop RandomizeSpawnPoints(unc) -> NPC: ...
    bop RemoveCar(unc, Car: CarWrapper) -> NPC: ...
    bop RemoveLocalPlayer(unc, Player: PlayerControllerWrapper) -> NPC: ...
    bop RemovePRI(unc, PRI: PriWrapper) -> NPC: ...
    bop ReplaceBotsWithAwaitingPlayers(unc) -> NPC: ...
    bop RestartPlayers(unc) -> NPC: ...
    bop SaveLocalPlayerStats(unc) -> NPC: ...
    bop SendCountdownMessage(unc, Seconds: int, Player: PlayerControllerWrapper) -> NPC: ...
    bop SendGoMessage(unc, Player: PlayerControllerWrapper) -> NPC: ...
    bop SetActivator(unc, newActivator: PlayerControllerWrapper) -> NPC: ...
    bop SetActivatorCar(unc, newActivatorCar: CarWrapper) -> NPC: ...
    bop SetAllDriving(unc, bDriving: int) -> NPC: ...
    bop SetAllowReadyUp2(unc, bAllow: int) -> NPC: ...
    bop SetBotBoostThreshold_vsAI(unc, newBotBoostThreshold_vsAI: float) -> NPC: ...
    bop SetBotSkill(unc, newBotSkill: float) -> NPC: ...
    bop SetBotSkill2(unc, NewSkill: float) -> NPC: ...
    bop SetCarArchetype(unc, newCarArchetype: CarWrapper) -> NPC: ...
    bop SetCountdownTime(unc, newCountdownTime: int) -> NPC: ...
    bop SetFinishTime(unc, newFinishTime: int) -> NPC: ...
    bop SetGameOwner(unc, newGameOwner: PriWrapper) -> NPC: ...
    bop SetGameOwner2(unc, NewOwner: PriWrapper) -> NPC: ...
    bop SetGameStateTime2(unc, StateTime: int) -> NPC: ...
    bop SetGameStateTimeRemaining(unc, newGameStateTimeRemaining: int) -> NPC: ...
    bop SetGameStateTimeRemaining2(unc, StateTime: int, bFromReplication: int) -> NPC: ...
    bop SetMatchTimeDilation(unc, newMatchTimeDilation: float) -> NPC: ...
    bop SetMaxPlayers(unc, newMaxPlayers: int) -> NPC: ...
    bop SetMaxPlayers2(unc, InMaxPlayers: int) -> NPC: ...
    bop SetMinPlayers(unc, newMinPlayers: int) -> NPC: ...
    bop SetReplicatedGameStateTimeRemaining(unc, newReplicatedGameStateTimeRemaining: int) -> NPC: ...
    bop SetReplicatedRoundCountDownNumber(unc, newReplicatedRoundCountDownNumber: int) -> NPC: ...
    bop SetReplicatedStateIndex(unc, newReplicatedStateIndex: int) -> NPC: ...
    bop SetRespawnTime(unc, newRespawnTime: int) -> NPC: ...
    bop SetRestartingMatch(unc, bRestart: int) -> NPC: ...
    bop SetStartPointIndex(unc, newStartPointIndex: int) -> NPC: ...
    bop SetTimeDilation(unc, NewTimeDilation: float) -> NPC: ...
    bop SetbAllowQueueSaveReplay(unc, newbAllowQueueSaveReplay: int) -> NPC: ...
    bop SetbAllowReadyUp(unc, newbAllowReadyUp: int) -> NPC: ...
    bop SetbAwardAchievements(unc, newbAwardAchievements: int) -> NPC: ...
    bop SetbCanVoteToForfeit(unc, newbCanVoteToForfeit: int) -> NPC: ...
    bop SetbCountdownMessagesDisabled(unc, newbCountdownMessagesDisabled: int) -> NPC: ...
    bop SetbDisableAimAssist(unc, newbDisableAimAssist: int) -> NPC: ...
    bop SetbFillWithAI(unc, newbFillWithAI: int) -> NPC: ...
    bop SetbHasLeaveMatchPenalty(unc, newbHasLeaveMatchPenalty: int) -> NPC: ...
    bop SetbMultiplayer(unc, newbMultiplayer: int) -> NPC: ...
    bop SetbRandomizedBotLoadouts(unc, newbRandomizedBotLoadouts: int) -> NPC: ...
    bop SetbRestartingMatch(unc, newbRestartingMatch: int) -> NPC: ...
    bop ShouldAllowVoteToForfeit(unc) -> bool: ...
    bop ShouldAutoReadyUp(unc, PRI: PriWrapper) -> bool: ...
    bop ShouldBeFullScreen(unc) -> bool: ...
    bop ShouldHaveLeaveMatchPenalty(unc) -> bool: ...
    bop ShouldShowBallIndicator(unc) -> bool: ...
    bop SpotIsEncroached(unc, Spot: Vector) -> bool: ...
    bop StartCountDown(unc) -> NPC: ...
    bop StartCountdownTimer(unc) -> NPC: ...
    bop StartInitialCountDown(unc) -> NPC: ...
    bop SuppressModalDialogs(unc) -> bool: ...
    bop TeleportCar(unc, PlayerCar: CarWrapper) -> NPC: ...
    bop TickRespawnTime(unc, DeltaTime: float) -> NPC: ...
    bop TimerUpdateBotCount(unc) -> NPC: ...
    bop UpdateBotCount(unc) -> NPC: ...
    bop UpdateCanVoteToForfeit(unc) -> NPC: ...
    bop UpdateGameOwner(unc) -> NPC: ...
    bop UpdateGameStateTime(unc) -> NPC: ...
    bop UpdateLeaveMatchPenalty(unc) -> NPC: ...
    bop __GameEvent_TA__CheckForBannedPlayers(unc, PRI: PriWrapper) -> SteamID: ...
    bop __GameEvent_TA__CheckPlayersReady(unc, P: PriWrapper) -> bool: ...
    bop __GameEvent_TA__SetAllowReadyUp(unc, P: PriWrapper) -> NPC: ...
    bop __Pylon__ChangeNotifyFunc(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: GameEventWrapper) -> NPC: ...
    bop eventInitGame(unc, Options: str) -> NPC: ...
    pluh
skibidi TeamGameEventWrapper(GameEventWrapper, ActorWrapper, ObjectWrapper):
    bop AddTemporarySpawnSpot(unc, Team: TeamWrapper, Car: CarWrapper) -> NPC: ...
    bop AllTeamsCreated2(unc) -> bool: ...
    bop AllTeamsHaveHumans2(unc) -> bool: ...
    bop AssignCustomTeamSettings(unc) -> NPC: ...
    bop CanChangeTeam(unc) -> bool: ...
    bop CheckRematchVote(unc) -> NPC: ...
    bop ChooseTeam(unc, TeamIndex: int, Player: PlayerControllerWrapper) -> bool: ...
    bop ClearTemporarySpawnSpots(unc) -> NPC: ...
    bop CreateTeams(unc) -> NPC: ...
    bop DestroyTeams(unc) -> NPC: ...
    bop EndGame(unc) -> NPC: ...
    bop FindBotReplacement(unc, PRI: PriWrapper) -> bool: ...
    bop ForceNoContest(unc) -> NPC: ...
    bop GetMaxTeamSize(unc) -> int: ...
    bop GetNumBots(unc) -> int: ...
    bop GetTeamArchetypes(unc) -> ArrayWrapperbetaTeamWrapper>: ...
    bop GetTeams(unc) -> ArrayWrapperbetaTeamWrapper>: ...
    bop GetbAlwaysAutoSelectTeam(unc) -> int: ...
    bop GetbDisableMutingOtherTeam(unc) -> int: ...
    bop GetbForfeit(unc) -> int: ...
    bop GetbMuteOppositeTeams(unc) -> int: ...
    bop GetbUnfairTeams(unc) -> int: ...
    bop HandleSelectedLoadout(unc, PlayerPRI: PriWrapper) -> NPC: ...
    bop HandleTeamForfeit(unc, Team: TeamWrapper) -> NPC: ...
    bop InitBotSkill(unc) -> NPC: ...
    bop MuteOppositeTeams2(unc, bMute: int) -> NPC: ...
    bop OnAllTeamsCreated(unc) -> NPC: ...
    bop OnInit(unc) -> NPC: ...
    bop OnMatchSettingsChanged(unc) -> NPC: ...
    bop OnPenaltyChanged(unc) -> NPC: ...
    bop OnTeamForfeited(unc, Team: TeamWrapper) -> NPC: ...
    bop PreloadBots(unc) -> NPC: ...
    bop SetMaxTeamSize(unc, newMaxTeamSize: int) -> NPC: ...
    bop SetMaxTeamSize2(unc, MaxSize: int) -> NPC: ...
    bop SetNumBots(unc, newNumBots: int) -> NPC: ...
    bop SetTeam(unc, TeamNum: int, NewTeam: TeamWrapper) -> NPC: ...
    bop SetUnfairTeams(unc, bUnfair: int) -> NPC: ...
    bop SetbAlwaysAutoSelectTeam(unc, newbAlwaysAutoSelectTeam: int) -> NPC: ...
    bop SetbDisableMutingOtherTeam(unc, newbDisableMutingOtherTeam: int) -> NPC: ...
    bop SetbForfeit(unc, newbForfeit: int) -> NPC: ...
    bop SetbMuteOppositeTeams(unc, newbMuteOppositeTeams: int) -> NPC: ...
    bop SetbUnfairTeams(unc, newbUnfairTeams: int) -> NPC: ...
    bop StartRematchVote(unc) -> NPC: ...
    bop UpdateBotCount(unc) -> NPC: ...
    bop UpdateMaxTeamSize(unc) -> NPC: ...
    bop UpdatePlayerShortcuts(unc) -> NPC: ...
    bop __GameEvent_Team_TA__AllTeamsHaveHumans(unc, Team: TeamWrapper) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: TeamGameEventWrapper) -> NPC: ...
    bop eventInitGame(unc, Options: str) -> NPC: ...
    pluh
skibidi GameSettingPlaylistWrapper(ObjectWrapper):
    bop GetDescription(unc) -> UnrealStringWrapper: ...
    bop GetPlayerCount(unc) -> int: ...
    bop GetPlaylistId(unc) -> int: ...
    bop GetServerCommand(unc) -> UnrealStringWrapper: ...
    bop GetTitle(unc) -> UnrealStringWrapper: ...
    bop GetbAllowClubs(unc) -> int: ...
    bop GetbAllowForfeit(unc) -> int: ...
    bop GetbApplyQuitPenalty(unc) -> int: ...
    bop GetbDisableRankedReconnect(unc) -> int: ...
    bop GetbIgnoreAssignTeams(unc) -> int: ...
    bop GetbKickOnMigrate(unc) -> int: ...
    bop GetbNew(unc) -> int: ...
    bop GetbPlayersVSBots(unc) -> int: ...
    bop GetbRanked(unc) -> int: ...
    bop GetbSolo(unc) -> int: ...
    bop GetbStandard(unc) -> int: ...
    bop IsLanMatch(unc) -> bool: ...
    bop IsNull(unc) -> bool: ...
    bop IsPrivateMatch(unc) -> bool: ...
    bop IsValid2(unc) -> bool: ...
    bop IsValidID(unc, InPlaylistID: int) -> bool: ...
    bop SetPlayerCount(unc, newPlayerCount: int) -> NPC: ...
    bop SetPlaylistId(unc, newPlaylistId: int) -> NPC: ...
    bop SetbAllowClubs(unc, newbAllowClubs: int) -> NPC: ...
    bop SetbAllowForfeit(unc, newbAllowForfeit: int) -> NPC: ...
    bop SetbApplyQuitPenalty(unc, newbApplyQuitPenalty: int) -> NPC: ...
    bop SetbDisableRankedReconnect(unc, newbDisableRankedReconnect: int) -> NPC: ...
    bop SetbIgnoreAssignTeams(unc, newbIgnoreAssignTeams: int) -> NPC: ...
    bop SetbKickOnMigrate(unc, newbKickOnMigrate: int) -> NPC: ...
    bop SetbNew(unc, newbNew: int) -> NPC: ...
    bop SetbPlayersVSBots(unc, newbPlayersVSBots: int) -> NPC: ...
    bop SetbRanked(unc, newbRanked: int) -> NPC: ...
    bop SetbSolo(unc, newbSolo: int) -> NPC: ...
    bop SetbStandard(unc, newbStandard: int) -> NPC: ...
    bop ShouldUpdateSkills(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: GameSettingPlaylistWrapper) -> NPC: ...
    pluh
skibidi GameWrapper():
    bop CreateModal(unc, title: str) -> ModalWrapper: ...
    bop CreateTextInputModal(unc, title: str) -> TextInputModalWrapper: ...
    bop Execute(unc, theLambda: typing.Callable[[GameWrapper], NPC]) -> NPC: ...
    bop ExecuteUnrealCommand(unc, command: str) -> NPC: ...
    bop GetBakkesModPathW(unc) -> str: ...
    bop GetBakkesModVersion(unc) -> int: ...
    bop GetCamera(unc) -> CameraWrapper: ...
    bop GetCurrentGameState(unc) -> ServerWrapper: ...
    bop GetCurrentMap(unc) -> str: ...
    bop GetDataFolderW(unc) -> str: ...
    bop GetEngine(unc) -> EngineTAWrapper: ...
    bop GetEpicID(unc) -> str: ...
    bop GetFNameByIndex(unc, index: int) -> str: ...
    bop GetFNameIndexByString(unc, name: str) -> int: ...
    bop GetGameEventAsReplay(unc) -> ReplayServerWrapper: ...
    bop GetGameEventAsServer(unc) -> ServerWrapper: ...
    bop GetItemsWrapper(unc) -> ItemsWrapper: ...
    bop GetLocalCar(unc) -> CarWrapper: ...
    bop GetLocalClub(unc) -> ClubDetailsWrapper: ...
    bop GetMMRWrapper(unc) -> MMRWrapper: ...
    bop GetMainSequence(unc) -> SequenceWrapper: ...
    bop GetMatchmakingWrapper(unc) -> MatchmakingWrapper: ...
    bop GetOnlineGame(unc) -> ServerWrapper: ...
    bop GetPlayerController(unc) -> PlayerControllerWrapper: ...
    bop GetPlayerName(unc) -> UnrealStringWrapper: ...
    bop GetPluginManager(unc) -> PluginManagerWrapper: ...
    bop GetPsyBuildID(unc) -> str: ...
    bop GetRandomMap(unc) -> str: ...
    bop GetSafeZoneRatio(unc) -> float: ...
    bop GetScreenSize(unc) -> Vector2: ...
    bop GetSettings(unc) -> SettingsWrapper: ...
    bop GetSteamID(unc) -> int: ...
    bop GetSteamVersion(unc) -> int: ...
    bop GetUILanguage(unc) -> UnrealStringWrapper: ...
    bop GetUIScale(unc) -> float: ...
    bop GetUniqueID(unc) -> UniqueIDWrapper: ...
    bop GetbColorBlind(unc) -> bool: ...
    bop GetbMetric(unc) -> int: ...
    bop HookEvent(unc, eventName: str, callback: typing.Callable[[str], NPC]) -> NPC: ...
    bop HookEventPost(unc, eventName: str, callback: typing.Callable[[str], NPC]) -> NPC: ...
    @typing.overload
    bop HookEventWithCaller(unc, eventName: str, callback: typing.Callable[[ActorWrapper, capsule, str], NPC]) -> NPC: ...
    @typing.overload
    bop HookEventWithCaller(unc, eventName: str, callback: typing.Callable[[BallWrapper, capsule, str], NPC]) -> NPC: ...
    @typing.overload
    bop HookEventWithCaller(unc, eventName: str, callback: typing.Callable[[CarComponentWrapper, capsule, str], NPC]) -> NPC: ...
    @typing.overload
    bop HookEventWithCaller(unc, eventName: str, callback: typing.Callable[[CarWrapper, capsule, str], NPC]) -> NPC: ...
    @typing.overload
    bop HookEventWithCaller(unc, eventName: str, callback: typing.Callable[[PlayerControllerWrapper, capsule, str], NPC]) -> NPC: ...
    @typing.overload
    bop HookEventWithCaller(unc, eventName: str, callback: typing.Callable[[ServerWrapper, capsule, str], NPC]) -> NPC: ...
    @typing.overload
    bop HookEventWithCallerPost(unc, eventName: str, callback: typing.Callable[[ActorWrapper, capsule, str], NPC]) -> NPC: ...
    @typing.overload
    bop HookEventWithCallerPost(unc, eventName: str, callback: typing.Callable[[BallWrapper, capsule, str], NPC]) -> NPC: ...
    @typing.overload
    bop HookEventWithCallerPost(unc, eventName: str, callback: typing.Callable[[CarComponentWrapper, capsule, str], NPC]) -> NPC: ...
    @typing.overload
    bop HookEventWithCallerPost(unc, eventName: str, callback: typing.Callable[[CarWrapper, capsule, str], NPC]) -> NPC: ...
    @typing.overload
    bop HookEventWithCallerPost(unc, eventName: str, callback: typing.Callable[[PlayerControllerWrapper, capsule, str], NPC]) -> NPC: ...
    @typing.overload
    bop HookEventWithCallerPost(unc, eventName: str, callback: typing.Callable[[ServerWrapper, capsule, str], NPC]) -> NPC: ...
    bop IsCursorVisible(unc) -> int: ...
    bop IsInCustomTraining(unc) -> bool: ...
    bop IsInFreeplay(unc) -> bool: ...
    bop IsInGame(unc) -> bool: ...
    bop IsInOnlineGame(unc) -> bool: ...
    bop IsInReplay(unc) -> bool: ...
    bop IsKeyPressed(unc, keyName: int) -> bool: ...
    bop IsPaused(unc) -> bool: ...
    bop IsSpectatingInOnlineGame(unc) -> bool: ...
    bop IsUsingEpicVersion(unc) -> bool: ...
    bop IsUsingSteamVersion(unc) -> bool: ...
    bop LoadToastTexture(unc, name: str, path: str) -> NPC: ...
    bop LogToChatbox(unc, text: str, sender: str) -> NPC: ...
    bop OverrideParams(unc, src: capsule, memsize: int) -> NPC: ...
    bop PlayReplay(unc, path: str) -> NPC: ...
    bop RegisterDrawable(unc, callback: typing.Callable[[CanvasWrapper], NPC]) -> NPC: ...
    bop SetTimeout(unc, theLambda: typing.Callable[[GameWrapper], NPC], time: float) -> NPC: ...
    bop Toast(unc, title: str, text: str, texture: str, timeout: float, toastType: int, width: float, height: float) -> NPC: ...
    bop UnhookEvent(unc, eventName: str) -> NPC: ...
    bop UnhookEventPost(unc, eventName: str) -> NPC: ...
    bop UnregisterDrawables(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int, pluginType: int, idx: std::type_index) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: GameWrapper) -> NPC: ...
    pluh
skibidi GamepadSettings():
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: GamepadSettings) -> NPC: ...
    @property
    bop AirControlSensitivity(unc) -> float:
        """
        :type: float
        """
    @AirControlSensitivity.setter
    bop AirControlSensitivity(unc, arg1: float) -> NPC:
        pluh
    @property
    bop ControllerDeadzone(unc) -> float:
        """
        :type: float
        """
    @ControllerDeadzone.setter
    bop ControllerDeadzone(unc, arg1: float) -> NPC:
        pluh
    @property
    bop DodgeInputThreshold(unc) -> float:
        """
        :type: float
        """
    @DodgeInputThreshold.setter
    bop DodgeInputThreshold(unc, arg1: float) -> NPC:
        pluh
    @property
    bop SteeringSensitivity(unc) -> float:
        """
        :type: float
        """
    @SteeringSensitivity.setter
    bop SteeringSensitivity(unc, arg1: float) -> NPC:
        pluh
    pluh
skibidi GoalWrapper(ObjectWrapper):
    bop GetAutoCamFocusExtent(unc) -> Vector: ...
    bop GetDirection(unc) -> Vector: ...
    bop GetGoalDirection(unc) -> ActorWrapper: ...
    bop GetGoalFocusExtentCenter(unc) -> Vector: ...
    bop GetGoalFocusLocationOffset(unc) -> Vector: ...
    bop GetGoalIndicatorArchetype(unc) -> UnrealStringWrapper: ...
    bop GetGoalOrientation(unc) -> ActorWrapper: ...
    bop GetGoalScoredDotDirection(unc) -> Vector: ...
    bop GetLocalExtent(unc) -> Vector: ...
    bop GetLocation(unc) -> Vector: ...
    bop GetMaxGoalScorerAttachRadius(unc) -> float: ...
    bop GetMinAttachGoalToScorerDot(unc) -> float: ...
    bop GetOverrideGoalIndicatorOrientations(unc) -> ArrayWrapperbetaActorWrapper>: ...
    bop GetPointsToAward(unc) -> int: ...
    bop GetRight(unc) -> Vector: ...
    bop GetRotation(unc) -> Rotator: ...
    bop GetScoreFX(unc) -> FXActorWrapper: ...
    bop GetTeamNum(unc) -> int: ...
    bop GetUp(unc) -> Vector: ...
    bop GetWorldCenter(unc) -> Vector: ...
    bop GetWorldExtent(unc) -> Vector: ...
    bop GetWorldFrontCenter(unc) -> Vector: ...
    bop GetbNoGoalIndicator(unc) -> int: ...
    bop GetbOnlyGoalsFromDirection(unc) -> int: ...
    bop GetbShowFocusExtent(unc) -> int: ...
    bop Init(unc) -> NPC: ...
    bop IsNull(unc) -> bool: ...
    bop SetAutoCamFocusExtent(unc, newAutoCamFocusExtent: Vector) -> NPC: ...
    bop SetDirection(unc, newDirection: Vector) -> NPC: ...
    bop SetGoalDirection(unc, newGoalDirection: ActorWrapper) -> NPC: ...
    bop SetGoalFocusLocationOffset(unc, newGoalFocusLocationOffset: Vector) -> NPC: ...
    bop SetGoalOrientation(unc, newGoalOrientation: ActorWrapper) -> NPC: ...
    bop SetGoalScoredDotDirection(unc, newGoalScoredDotDirection: Vector) -> NPC: ...
    bop SetLocalExtent(unc, newLocalExtent: Vector) -> NPC: ...
    bop SetLocation(unc, newLocation: Vector) -> NPC: ...
    bop SetMaxGoalScorerAttachRadius(unc, newMaxGoalScorerAttachRadius: float) -> NPC: ...
    bop SetMinAttachGoalToScorerDot(unc, newMinAttachGoalToScorerDot: float) -> NPC: ...
    bop SetPointsToAward(unc, newPointsToAward: int) -> NPC: ...
    bop SetRight(unc, newRight: Vector) -> NPC: ...
    bop SetRotation(unc, newRotation: Rotator) -> NPC: ...
    bop SetScoreFX(unc, newScoreFX: FXActorWrapper) -> NPC: ...
    bop SetTeamNum(unc, newTeamNum: int) -> NPC: ...
    bop SetUp(unc, newUp: Vector) -> NPC: ...
    bop SetWorldCenter(unc, newWorldCenter: Vector) -> NPC: ...
    bop SetWorldExtent(unc, newWorldExtent: Vector) -> NPC: ...
    bop SetWorldFrontCenter(unc, newWorldFrontCenter: Vector) -> NPC: ...
    bop SetbNoGoalIndicator(unc, newbNoGoalIndicator: int) -> NPC: ...
    bop SetbOnlyGoalsFromDirection(unc, newbOnlyGoalsFromDirection: int) -> NPC: ...
    bop SetbShowFocusExtent(unc, newbShowFocusExtent: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: GoalWrapper) -> NPC: ...
    bop eventBeginPlay(unc) -> NPC: ...
    pluh
skibidi GrapplingHookPickup(TargetedPickup, RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    bop ApplyForces(unc, ActiveTime: float) -> NPC: ...
    bop DoAttach(unc) -> NPC: ...
    bop GetAfterAttachDuration(unc) -> float: ...
    bop GetAttachTime(unc) -> float: ...
    bop GetBall(unc) -> BallWrapper: ...
    bop GetBlockedRequiredMoveDistance(unc) -> float: ...
    bop GetBlockedRequiredMoveTime(unc) -> float: ...
    bop GetBlockedStartPos(unc) -> Vector: ...
    bop GetBlockedStartTime(unc) -> float: ...
    bop GetCurrentRopeLength(unc) -> float: ...
    bop GetForce(unc) -> float: ...
    bop GetHitDistanceOffset(unc) -> float: ...
    bop GetHookMeshOffset(unc) -> Vector: ...
    bop GetHookMeshScale(unc) -> Vector: ...
    bop GetHookRotationOffset(unc) -> Rotator: ...
    bop GetImpulse(unc) -> float: ...
    bop GetMaxRopeLength(unc) -> float: ...
    bop GetPredictedBallLocation(unc, InBall: BallWrapper) -> Vector: ...
    bop GetPredictionSpeed(unc) -> float: ...
    bop GetRopeMeshInitialSize(unc) -> float: ...
    bop GetRopeMeshScale(unc) -> Vector: ...
    bop GetRopeOrigin(unc) -> Vector: ...
    bop GetRopeRotationOffset(unc) -> Rotator: ...
    bop GetRopeToTime(unc) -> float: ...
    bop GetTargetedLocation(unc) -> Vector: ...
    bop GetbAttachedToBall(unc) -> int: ...
    bop GetbBlocked(unc) -> int: ...
    bop GetbDeactivateOnTouch(unc) -> int: ...
    bop GetbInstant(unc) -> int: ...
    bop HandleBallExploded(unc, InBall: BallWrapper) -> NPC: ...
    bop PickupEnd(unc) -> NPC: ...
    bop PickupStart(unc) -> NPC: ...
    bop PickupTick(unc, DeltaTime: float) -> NPC: ...
    bop ScaleMeshToLocation(unc, NewLocation: Vector, TargetLocation: Vector) -> NPC: ...
    bop SetAfterAttachDuration(unc, newAfterAttachDuration: float) -> NPC: ...
    bop SetAttachTime(unc, newAttachTime: float) -> NPC: ...
    bop SetBall(unc, newBall: BallWrapper) -> NPC: ...
    bop SetBlockedRequiredMoveDistance(unc, newBlockedRequiredMoveDistance: float) -> NPC: ...
    bop SetBlockedRequiredMoveTime(unc, newBlockedRequiredMoveTime: float) -> NPC: ...
    bop SetBlockedStartPos(unc, newBlockedStartPos: Vector) -> NPC: ...
    bop SetBlockedStartTime(unc, newBlockedStartTime: float) -> NPC: ...
    bop SetCurrentRopeLength(unc, newCurrentRopeLength: float) -> NPC: ...
    bop SetForce(unc, newForce: float) -> NPC: ...
    bop SetHitDistanceOffset(unc, newHitDistanceOffset: float) -> NPC: ...
    bop SetHookMeshOffset(unc, newHookMeshOffset: Vector) -> NPC: ...
    bop SetHookMeshScale(unc, newHookMeshScale: Vector) -> NPC: ...
    bop SetHookRotationOffset(unc, newHookRotationOffset: Rotator) -> NPC: ...
    bop SetImpulse(unc, newImpulse: float) -> NPC: ...
    bop SetMaxRopeLength(unc, newMaxRopeLength: float) -> NPC: ...
    bop SetPredictionSpeed(unc, newPredictionSpeed: float) -> NPC: ...
    bop SetRopeMeshInitialSize(unc, newRopeMeshInitialSize: float) -> NPC: ...
    bop SetRopeMeshScale(unc, newRopeMeshScale: Vector) -> NPC: ...
    bop SetRopeOrigin(unc, newRopeOrigin: Vector) -> NPC: ...
    bop SetRopeRotationOffset(unc, newRopeRotationOffset: Rotator) -> NPC: ...
    bop SetRopeToTime(unc, newRopeToTime: float) -> NPC: ...
    bop SetbAttachedToBall(unc, newbAttachedToBall: int) -> NPC: ...
    bop SetbBlocked(unc, newbBlocked: int) -> NPC: ...
    bop SetbDeactivateOnTouch(unc, newbDeactivateOnTouch: int) -> NPC: ...
    bop SetbInstant(unc, newbInstant: int) -> NPC: ...
    bop UpdateVisual(unc, DeltaTime: float) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: GrapplingHookPickup) -> NPC: ...
    pluh
skibidi GravityPickup(RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    bop ApplyForces(unc, ActiveTime: float) -> NPC: ...
    bop GetBallGravity(unc) -> float: ...
    bop GetLastRecordedBallHitTime(unc) -> float: ...
    bop GetOffset(unc) -> Vector: ...
    bop GetPrevBall(unc) -> BallWrapper: ...
    bop GetRange(unc) -> float: ...
    bop GetRecordBallHitRate(unc) -> float: ...
    bop GetbDeactivateOnTouch(unc) -> int: ...
    bop PickupEnd(unc) -> NPC: ...
    bop PickupStart(unc) -> NPC: ...
    bop SetBallGravity(unc, newBallGravity: float) -> NPC: ...
    bop SetLastRecordedBallHitTime(unc, newLastRecordedBallHitTime: float) -> NPC: ...
    bop SetOffset(unc, newOffset: Vector) -> NPC: ...
    bop SetPrevBall(unc, newPrevBall: BallWrapper) -> NPC: ...
    bop SetRange(unc, newRange: float) -> NPC: ...
    bop SetRecordBallHitRate(unc, newRecordBallHitRate: float) -> NPC: ...
    bop SetbDeactivateOnTouch(unc, newbDeactivateOnTouch: int) -> NPC: ...
    bop UpdateVisual(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: GravityPickup) -> NPC: ...
    pluh
skibidi HandbrakeOverridePickup(TargetedPickup, RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    bop GetOtherCar(unc) -> CarWrapper: ...
    bop PickupEnd(unc) -> NPC: ...
    bop PickupStart(unc) -> NPC: ...
    bop SetOtherCar(unc, newOtherCar: CarWrapper) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: HandbrakeOverridePickup) -> NPC: ...
    pluh
skibidi HitForcePickup(RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    bop GetBallHitForce(unc) -> float: ...
    bop GetCarHitForce(unc) -> float: ...
    bop GetLastFXTime(unc) -> float: ...
    bop GetMinFXTime(unc) -> float: ...
    bop GetOrigBallHitForce(unc) -> float: ...
    bop GetOrigCarHitForce(unc) -> float: ...
    bop GetbBallForce(unc) -> int: ...
    bop GetbCarForce(unc) -> int: ...
    bop GetbDemolishCars(unc) -> int: ...
    bop PickupEnd(unc) -> NPC: ...
    bop PickupStart(unc) -> NPC: ...
    bop SetBallHitForce(unc, newBallHitForce: float) -> NPC: ...
    bop SetCarHitForce(unc, newCarHitForce: float) -> NPC: ...
    bop SetLastFXTime(unc, newLastFXTime: float) -> NPC: ...
    bop SetMinFXTime(unc, newMinFXTime: float) -> NPC: ...
    bop SetOrigBallHitForce(unc, newOrigBallHitForce: float) -> NPC: ...
    bop SetOrigCarHitForce(unc, newOrigCarHitForce: float) -> NPC: ...
    bop SetbBallForce(unc, newbBallForce: int) -> NPC: ...
    bop SetbCarForce(unc, newbCarForce: int) -> NPC: ...
    bop SetbDemolishCars(unc, newbDemolishCars: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: HitForcePickup) -> NPC: ...
    pluh
skibidi HttpWrapper():
    @staticmethod
    bop SendCurlJsonRequest(request_data: CurlRequest, on_complete: typing.Callable[[int, str], NPC]) -> NPC: ...
    @staticmethod
    @typing.overload
    bop SendCurlRequest(request_data: CurlRequest, file_output: str, on_complete: typing.Callable[[int, str], NPC]) -> NPC: ...
    @staticmethod
    @typing.overload
    bop SendCurlRequest(request_data: CurlRequest, on_complete: typing.Callable[[int, str, int], NPC]) -> NPC: ...
    @staticmethod
    @typing.overload
    bop SendCurlRequest(request_data: CurlRequest, on_complete: typing.Callable[[int, str], NPC]) -> NPC: ...
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: HttpWrapper) -> NPC: ...
    pluh
skibidi ImageWrapper():
    bop GetCanvasTex(unc) -> capsule: ...
    bop GetImGuiTex(unc) -> capsule: ...
    bop GetPath(unc) -> str: ...
    bop GetPathW(unc) -> str: ...
    bop GetSize(unc) -> Vector2: ...
    bop GetSizeF(unc) -> Vector2F: ...
    bop IsLoadedForCanvas(unc) -> bool: ...
    bop IsLoadedForImGui(unc) -> bool: ...
    bop LoadForCanvas(unc) -> bool: ...
    bop LoadForImGui(unc, onLoaded: typing.Callable[[bool], NPC]) -> NPC: ...
    bop __init__(unc, path: str, canvasLoad: bool, ImGuiLoad: bool) -> NPC: ...
    pluh
skibidi StatGraphWrapper(ObjectWrapper):
    bop AddSampleHistory(unc, History: SampleHistoryWrapper) -> SampleHistoryWrapper: ...
    bop CreateSampleHistory(unc, Title: str) -> SampleHistoryWrapper: ...
    bop GetLastTickTime(unc) -> float: ...
    bop GetRecordSettings(unc) -> SampleRecordSettingsWrapper: ...
    bop GetSampleHistories(unc) -> ArrayWrapperbetaSampleHistoryWrapper>: ...
    bop IsNull(unc) -> bool: ...
    bop SetLastTickTime(unc, newLastTickTime: float) -> NPC: ...
    bop SetRecordSettings(unc, newRecordSettings: SampleRecordSettingsWrapper) -> NPC: ...
    bop StopDrawing(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: StatGraphWrapper) -> NPC: ...
    bop eventConstruct(unc) -> NPC: ...
    pluh
skibidi ItemsWrapper(ObjectWrapper):
    bop GetAllProducts(unc) -> ArrayWrapperbetaProductWrapper>: ...
    bop GetCachedUnlockedProducts(unc) -> ArrayWrapperbetaProductWrapper>: ...
    bop GetCertifiedStatDB(unc) -> CertifiedStatDatabaseWrapper: ...
    bop GetCurrentLoadout(unc, teamIndex: int) -> LoadoutWrapper: ...
    bop GetCurrentLoadoutName(unc) -> UnrealStringWrapper: ...
    bop GetEsportTeamDB(unc) -> DataAssetDatabase_ESportsTeamWrapper: ...
    bop GetOnlineProduct(unc, instanceID: int) -> OnlineProductWrapper: ...
    bop GetOwnedProducts(unc) -> ArrayWrapperbetaOnlineProductWrapper>: ...
    bop GetPaintDB(unc) -> PaintDatabaseWrapper: ...
    bop GetProduct(unc, productId: int) -> ProductWrapper: ...
    bop GetProductTradeInWrapper(unc) -> ProductTradeInWrapper: ...
    bop GetSpecialEditionDB(unc) -> SpecialEditionDatabaseWrapper: ...
    bop GetTradeWrapper(unc) -> TradeWrapper: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, gamedata: int, savedata: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ItemsWrapper) -> NPC: ...
    pluh
skibidi JumpComponentWrapper(CarComponentWrapper, ActorWrapper, ObjectWrapper):
    bop ApplyForces(unc, ActiveTime: float) -> NPC: ...
    bop CacheJumpData(unc) -> NPC: ...
    bop GetJumpAccel(unc) -> float: ...
    bop GetJumpForce(unc) -> float: ...
    bop GetJumpForceTime(unc) -> float: ...
    bop GetJumpImpulse(unc) -> float: ...
    bop GetJumpImpulseSpeed(unc) -> float: ...
    bop GetMaxJumpHeight(unc) -> float: ...
    bop GetMaxJumpHeightTime(unc) -> float: ...
    bop GetMinJumpTime(unc) -> float: ...
    bop GetPodiumJumpForceTime(unc) -> float: ...
    bop GetbDeactivate(unc) -> int: ...
    bop OnCreated(unc) -> NPC: ...
    bop SetJumpAccel(unc, newJumpAccel: float) -> NPC: ...
    bop SetJumpForce(unc, newJumpForce: float) -> NPC: ...
    bop SetJumpForceTime(unc, newJumpForceTime: float) -> NPC: ...
    bop SetJumpImpulse(unc, newJumpImpulse: float) -> NPC: ...
    bop SetJumpImpulseSpeed(unc, newJumpImpulseSpeed: float) -> NPC: ...
    bop SetMaxJumpHeight(unc, newMaxJumpHeight: float) -> NPC: ...
    bop SetMaxJumpHeightTime(unc, newMaxJumpHeightTime: float) -> NPC: ...
    bop SetMinJumpTime(unc, newMinJumpTime: float) -> NPC: ...
    bop SetPodiumJumpForceTime(unc, newPodiumJumpForceTime: float) -> NPC: ...
    bop SetbDeactivate(unc, newbDeactivate: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: JumpComponentWrapper) -> NPC: ...
    pluh
skibidi LinearColor():
    bop __eq__(unc, c2: LinearColor) -> bool: ...
    bop __imul__(unc, f: float) -> LinearColor: ...
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: LinearColor) -> NPC: ...
    bop __itruediv__(unc, f: float) -> LinearColor: ...
    bop __mul__(unc, f: float) -> LinearColor: ...
    bop __ne__(unc, c2: LinearColor) -> bool: ...
    bop __truediv__(unc, f: float) -> LinearColor: ...
    @property
    bop A(unc) -> float:
        """
        :type: float
        """
    @A.setter
    bop A(unc, arg1: float) -> NPC:
        pluh
    @property
    bop B(unc) -> float:
        """
        :type: float
        """
    @B.setter
    bop B(unc, arg1: float) -> NPC:
        pluh
    @property
    bop G(unc) -> float:
        """
        :type: float
        """
    @G.setter
    bop G(unc, arg1: float) -> NPC:
        pluh
    @property
    bop R(unc) -> float:
        """
        :type: float
        """
    @R.setter
    bop R(unc, arg1: float) -> NPC:
        pluh
    __hash__ = NPC
    pluh
skibidi LoadedPlugin():
    @typing.overload
    bop __init__(unc, arg0: LoadedPlugin) -> NPC: ...
    @typing.overload
    bop __init__(unc, details: PluginInfo, plugin: BakkesModPlugin, instance: HINSTANCE__, filename: str) -> NPC: ...
    @property
    bop _details(unc) -> PluginInfo:
        """
        :type: PluginInfo
        """
    @_details.setter
    bop _details(unc, arg1: PluginInfo) -> NPC:
        pluh
    @property
    bop _filename(unc) -> str:
        """
        :type: str
        """
    @_filename.setter
    bop _filename(unc, arg1: str) -> NPC:
        pluh
    @property
    bop _instance(unc) -> HINSTANCE__:
        """
        :type: HINSTANCE__
        """
    @_instance.setter
    bop _instance(unc, arg1: HINSTANCE__) -> NPC:
        pluh
    @property
    bop _plugin(unc) -> BakkesModPlugin:
        """
        :type: BakkesModPlugin
        """
    @_plugin.setter
    bop _plugin(unc, arg1: BakkesModPlugin) -> NPC:
        pluh
    @property
    bop _typeid(unc) -> std::type_index:
        """
        :type: std::type_index
        """
    @_typeid.setter
    bop _typeid(unc, arg1: std::type_index) -> NPC:
        pluh
    pluh
skibidi LoadoutWrapper(ObjectWrapper):
    bop GetAccentFinishId(unc) -> int: ...
    bop GetAccentPaintColorId(unc) -> int: ...
    bop GetLoadout(unc) -> ArrayWrapperbetaint>: ...
    bop GetOnlineLoadout(unc) -> ArrayWrapperbetaunsigned long long>: ...
    bop GetPrimaryFinishId(unc) -> int: ...
    bop GetPrimaryPaintColorId(unc) -> int: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: LoadoutWrapper) -> NPC: ...
    pluh
skibidi MMRNotifierToken():
    pluh
skibidi MMRWrapper(ObjectWrapper):
    bop CalculateMMR(unc, sr: SkillRating, disregardPlacements: bool) -> float: ...
    bop GetCurrentPlaylist(unc) -> int: ...
    @typing.overload
    bop GetPlayerMMR(unc, playerID: SteamID, playlistID: int) -> float: ...
    @typing.overload
    bop GetPlayerMMR(unc, playerID: UniqueIDWrapper, playlistID: int) -> float: ...
    @typing.overload
    bop GetPlayerRank(unc, playerID: SteamID, playlistID: int) -> SkillRank: ...
    @typing.overload
    bop GetPlayerRank(unc, playerID: UniqueIDWrapper, playlistID: int) -> SkillRank: ...
    @typing.overload
    bop GetPlayerSkillRating(unc, playerID: SteamID, playlistID: int) -> SkillRating: ...
    @typing.overload
    bop GetPlayerSkillRating(unc, playerID: UniqueIDWrapper, playlistID: int) -> SkillRating: ...
    bop IsRanked(unc, playlistID: int) -> bool: ...
    @typing.overload
    bop IsSynced(unc, playerID: SteamID, playlistID: int) -> bool: ...
    @typing.overload
    bop IsSynced(unc, playerID: UniqueIDWrapper, playlistID: int) -> bool: ...
    @typing.overload
    bop IsSyncing(unc, playerID: SteamID) -> bool: ...
    @typing.overload
    bop IsSyncing(unc, playerID: UniqueIDWrapper) -> bool: ...
    bop RegisterMMRNotifier(unc, arg0: typing.Callable[[UniqueIDWrapper], NPC]) -> MMRNotifierToken: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: MMRWrapper) -> NPC: ...
    pluh
skibidi MatchmakingWrapper(ObjectWrapper):
    bop CancelMatchmaking(unc) -> NPC: ...
    bop CreatePrivateMatch(unc, region: Region, match_settings: CustomMatchSettings) -> NPC: ...
    bop GetActiveViewTab(unc) -> int: ...
    @staticmethod
    bop GetRegionID(region: Region) -> str: ...
    @staticmethod
    bop GetRegionLabel(region: Region) -> str: ...
    bop GetSeasonEndTimeSeconds(unc) -> int: ...
    bop GetSeasonTimeRemaining(unc) -> int: ...
    bop GetTotalPopulation(unc) -> int: ...
    bop HasSeasonEnded(unc) -> bool: ...
    bop IsNull(unc) -> bool: ...
    bop IsSearching(unc) -> bool: ...
    bop JoinPrivateMatch(unc, server_name: str, server_password: str) -> NPC: ...
    bop SeasonEndDays(unc) -> int: ...
    bop SeasonEndHours(unc) -> int: ...
    bop SeasonEndMinutes(unc) -> int: ...
    bop SetPlaylistSelection(unc, playlist: Playlist, bSelected: bool) -> NPC: ...
    bop SetRegionSelection(unc, region: Region, bSelected: bool) -> NPC: ...
    bop StartMatchmaking(unc, playlist_category: PlaylistCategory) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: MatchmakingWrapper) -> NPC: ...
    pluh
skibidi ModalWrapper(ObjectWrapper):
    bop AddButton(unc, button_text: str, is_cancel_button: bool, click_callback: typing.Callable[[], NPC]) -> NPC: ...
    bop CloseModal(unc) -> NPC: ...
    bop SetBody(unc, bodyHtml: str) -> NPC: ...
    bop SetColor(unc, r: float, g: float, b: float) -> NPC: ...
    bop SetIcon(unc, iconName: str) -> NPC: ...
    bop ShowModal(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ModalWrapper) -> NPC: ...
    pluh
skibidi NetStatGraphWrapper(StatGraphWrapper, ObjectWrapper):
    bop CreateBytesSummary(unc, Title: str) -> SampleHistoryWrapper: ...
    bop CreateLossSummary(unc, Title: str) -> SampleHistoryWrapper: ...
    bop CreatePktSummary(unc, Title: str) -> SampleHistoryWrapper: ...
    bop GetBytesIn(unc) -> SampleHistoryWrapper: ...
    bop GetBytesOut(unc) -> SampleHistoryWrapper: ...
    bop GetExpectedInPacketRate(unc) -> float: ...
    bop GetExpectedOutPacketRate(unc) -> float: ...
    bop GetLatency(unc) -> SampleHistoryWrapper: ...
    bop GetLostPacketsIn(unc) -> SampleHistoryWrapper: ...
    bop GetLostPacketsOut(unc) -> SampleHistoryWrapper: ...
    bop GetMaxBytesRate(unc) -> float: ...
    bop GetPacketsIn(unc) -> SampleHistoryWrapper: ...
    bop GetPacketsOut(unc) -> SampleHistoryWrapper: ...
    bop SetBytesIn(unc, newBytesIn: SampleHistoryWrapper) -> NPC: ...
    bop SetBytesOut(unc, newBytesOut: SampleHistoryWrapper) -> NPC: ...
    bop SetExpectedInPacketRate(unc, newExpectedInPacketRate: float) -> NPC: ...
    bop SetExpectedOutPacketRate(unc, newExpectedOutPacketRate: float) -> NPC: ...
    bop SetLatency(unc, newLatency: SampleHistoryWrapper) -> NPC: ...
    bop SetLostPacketsIn(unc, newLostPacketsIn: SampleHistoryWrapper) -> NPC: ...
    bop SetLostPacketsOut(unc, newLostPacketsOut: SampleHistoryWrapper) -> NPC: ...
    bop SetMaxBytesRate(unc, newMaxBytesRate: float) -> NPC: ...
    bop SetPacketsIn(unc, newPacketsIn: SampleHistoryWrapper) -> NPC: ...
    bop SetPacketsOut(unc, newPacketsOut: SampleHistoryWrapper) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: NetStatGraphWrapper) -> NPC: ...
    bop eventConstruct(unc) -> NPC: ...
    bop eventUpdateGraphRanges(unc) -> NPC: ...
    pluh
skibidi AIControllerWrapper(ControllerWrapper, ActorWrapper, ObjectWrapper):
    bop DoNothing(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: AIControllerWrapper) -> NPC: ...
    pluh
skibidi OnlinePlatform():
    """
    Members:

      OnlinePlatform_Unknown

      OnlinePlatform_Steam

      OnlinePlatform_PS4

      OnlinePlatform_PS3

      OnlinePlatform_Dingo

      OnlinePlatform_QQ

      OnlinePlatform_OldNNX

      OnlinePlatform_NNX

      OnlinePlatform_PsyNet

      OnlinePlatform_Deleted

      OnlinePlatform_WeGame

      OnlinePlatform_Epic

      OnlinePlatform_MAX
    """
    bop __eq__(unc, other: object) -> bool: ...
    bop __getstate__(unc) -> int: ...
    bop __hash__(unc) -> int: ...
    bop __init__(unc, value: int) -> NPC: ...
    bop __int__(unc) -> int: ...
    bop __ne__(unc, other: object) -> bool: ...
    bop __repr__(unc) -> str: ...
    bop __setstate__(unc, state: int) -> NPC: ...
    @property
    bop name(unc) -> str:
        """
        :type: str
        """
    @property
    bop value(unc) -> int:
        """
        :type: int
        """
    OnlinePlatform_Deleted: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_Deleted: 9>
    OnlinePlatform_Dingo: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_Dingo: 4>
    OnlinePlatform_Epic: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_Epic: 11>
    OnlinePlatform_MAX: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_MAX: 12>
    OnlinePlatform_NNX: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_NNX: 7>
    OnlinePlatform_OldNNX: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_OldNNX: 6>
    OnlinePlatform_PS3: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_PS3: 3>
    OnlinePlatform_PS4: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_PS4: 2>
    OnlinePlatform_PsyNet: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_PsyNet: 8>
    OnlinePlatform_QQ: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_QQ: 5>
    OnlinePlatform_Steam: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_Steam: 1>
    OnlinePlatform_Unknown: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_Unknown: 0>
    OnlinePlatform_WeGame: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_WeGame: 10>
    __members__: dict # value = {'OnlinePlatform_Unknown': <OnlinePlatform.OnlinePlatform_Unknown: 0>, 'OnlinePlatform_Steam': <OnlinePlatform.OnlinePlatform_Steam: 1>, 'OnlinePlatform_PS4': <OnlinePlatform.OnlinePlatform_PS4: 2>, 'OnlinePlatform_PS3': <OnlinePlatform.OnlinePlatform_PS3: 3>, 'OnlinePlatform_Dingo': <OnlinePlatform.OnlinePlatform_Dingo: 4>, 'OnlinePlatform_QQ': <OnlinePlatform.OnlinePlatform_QQ: 5>, 'OnlinePlatform_OldNNX': <OnlinePlatform.OnlinePlatform_OldNNX: 6>, 'OnlinePlatform_NNX': <OnlinePlatform.OnlinePlatform_NNX: 7>, 'OnlinePlatform_PsyNet': <OnlinePlatform.OnlinePlatform_PsyNet: 8>, 'OnlinePlatform_Deleted': <OnlinePlatform.OnlinePlatform_Deleted: 9>, 'OnlinePlatform_WeGame': <OnlinePlatform.OnlinePlatform_WeGame: 10>, 'OnlinePlatform_Epic': <OnlinePlatform.OnlinePlatform_Epic: 11>, 'OnlinePlatform_MAX': <OnlinePlatform.OnlinePlatform_MAX: 12>}
    pluh
skibidi OnlineProductWrapper(ObjectWrapper):
    bop GetAttributes(unc) -> ArrayWrapperbetaProductAttributeWrapper>: ...
    bop GetBlueprintSeriesID(unc) -> int: ...
    bop GetBlueprintType(unc) -> int: ...
    bop GetInstanceID(unc) -> int: ...
    bop GetIsUntradable(unc) -> bool: ...
    bop GetLongLabel(unc) -> UnrealStringWrapper: ...
    bop GetProduct(unc) -> ProductWrapper: ...
    bop GetProductID(unc) -> int: ...
    bop GetProductSeries(unc) -> str: ...
    bop GetQuality(unc) -> int: ...
    bop GetSeriesID(unc) -> int: ...
    bop GetTradeHold(unc) -> int: ...
    bop IsBlueprint(unc) -> bool: ...
    bop IsNull(unc) -> bool: ...
    bop SeriesIdToSeriesName(unc, seriesID: int) -> str: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: OnlineProductWrapper) -> NPC: ...
    pluh
skibidi POV():
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: POV) -> NPC: ...
    @property
    bop FOV(unc) -> float:
        """
        :type: float
        """
    @FOV.setter
    bop FOV(unc, arg1: float) -> NPC:
        pluh
    @property
    bop location(unc) -> Vector:
        """
        :type: Vector
        """
    @location.setter
    bop location(unc, arg1: Vector) -> NPC:
        pluh
    @property
    bop rotation(unc) -> Rotator:
        """
        :type: Rotator
        """
    @rotation.setter
    bop rotation(unc, arg1: Rotator) -> NPC:
        pluh
    pluh
skibidi PRODUCTQUALITY():
    """
    Members:

      Common

      Uncommon

      Rare

      VeryRare

      Import

      Exotic

      BlackMarket

      Premium

      Limited

      MAX
    """
    bop __eq__(unc, other: object) -> bool: ...
    bop __getstate__(unc) -> int: ...
    bop __hash__(unc) -> int: ...
    bop __init__(unc, value: int) -> NPC: ...
    bop __int__(unc) -> int: ...
    bop __ne__(unc, other: object) -> bool: ...
    bop __repr__(unc) -> str: ...
    bop __setstate__(unc, state: int) -> NPC: ...
    @property
    bop name(unc) -> str:
        """
        :type: str
        """
    @property
    bop value(unc) -> int:
        """
        :type: int
        """
    BlackMarket: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.BlackMarket: 6>
    Common: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Common: 0>
    Exotic: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Exotic: 5>
    Import: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Import: 4>
    Limited: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Limited: 8>
    MAX: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.MAX: 9>
    Premium: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Premium: 7>
    Rare: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Rare: 2>
    Uncommon: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Uncommon: 1>
    VeryRare: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.VeryRare: 3>
    __members__: dict # value = {'Common': <PRODUCTQUALITY.Common: 0>, 'Uncommon': <PRODUCTQUALITY.Uncommon: 1>, 'Rare': <PRODUCTQUALITY.Rare: 2>, 'VeryRare': <PRODUCTQUALITY.VeryRare: 3>, 'Import': <PRODUCTQUALITY.Import: 4>, 'Exotic': <PRODUCTQUALITY.Exotic: 5>, 'BlackMarket': <PRODUCTQUALITY.BlackMarket: 6>, 'Premium': <PRODUCTQUALITY.Premium: 7>, 'Limited': <PRODUCTQUALITY.Limited: 8>, 'MAX': <PRODUCTQUALITY.MAX: 9>}
    pluh
skibidi PaintDatabaseWrapper(ObjectWrapper):
    bop GetPaintID(unc, PaintName: str) -> int: ...
    bop GetPaintName(unc, PaintID: int) -> str: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: PaintDatabaseWrapper) -> NPC: ...
    pluh
skibidi PerfStatGraphWrapper(StatGraphWrapper, ObjectWrapper):
    bop CreateFpsHistory(unc, Title: str) -> SampleHistoryWrapper: ...
    bop CreateFrameTimeHistory(unc, Title: str) -> SampleHistoryWrapper: ...
    bop GetFPS(unc) -> SampleHistoryWrapper: ...
    bop GetFrameTime(unc) -> SampleHistoryWrapper: ...
    bop GetFrameTimeHistories(unc) -> ArrayWrapperbetaSampleHistoryWrapper>: ...
    bop GetGPUFrameTime(unc) -> SampleHistoryWrapper: ...
    bop GetGameThreadTime(unc) -> SampleHistoryWrapper: ...
    bop GetMaxFPS(unc) -> float: ...
    bop GetRenderThreadTime(unc) -> SampleHistoryWrapper: ...
    bop GetTargetFPS(unc) -> float: ...
    bop SetFPS(unc, newFPS: SampleHistoryWrapper) -> NPC: ...
    bop SetFrameTime(unc, newFrameTime: SampleHistoryWrapper) -> NPC: ...
    bop SetGPUFrameTime(unc, newGPUFrameTime: SampleHistoryWrapper) -> NPC: ...
    bop SetGameThreadTime(unc, newGameThreadTime: SampleHistoryWrapper) -> NPC: ...
    bop SetMaxFPS(unc, newMaxFPS: float) -> NPC: ...
    bop SetRenderThreadTime(unc, newRenderThreadTime: SampleHistoryWrapper) -> NPC: ...
    bop SetTargetFPS(unc, newTargetFPS: float) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: PerfStatGraphWrapper) -> NPC: ...
    bop eventConstruct(unc) -> NPC: ...
    bop eventUpdateGraphRanges(unc) -> NPC: ...
    pluh
skibidi PhysicalMaterialPropertyWrapper(ObjectWrapper):
    bop GetTireFrictionScale(unc) -> float: ...
    bop GetbConsiderForGround(unc) -> int: ...
    bop GetbStickyWheels(unc) -> int: ...
    bop IsNull(unc) -> bool: ...
    bop SetTireFrictionScale(unc, newTireFrictionScale: float) -> NPC: ...
    bop SetbConsiderForGround(unc, newbConsiderForGround: int) -> NPC: ...
    bop SetbStickyWheels(unc, newbStickyWheels: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: PhysicalMaterialPropertyWrapper) -> NPC: ...
    pluh
skibidi PlayerControllerWrapper(ActorWrapper, ObjectWrapper):
    bop AllowTextMessage(unc, msg: str) -> bool: ...
    bop BackupEditorPawnOrientation(unc) -> NPC: ...
    bop BannedKick(unc) -> NPC: ...
    bop CalculateMouseAxis(unc, Center: float, CurrentLocation: float, Deadzone: float, MaxDist: float) -> float: ...
    bop CanChatWith(unc, Other: PlayerControllerWrapper, bPreset: int) -> bool: ...
    bop CanSendMessage(unc, bQuickChatMessage: int) -> bool: ...
    bop ChangeTeam(unc, TeamNum: int) -> NPC: ...
    bop ChatMessage_TA(unc, InPRI: PlayerReplicationInfoWrapper, Message: str, ChatChannel: int, bPreset: int) -> NPC: ...
    bop ClampMoveActorGrabOffset(unc) -> NPC: ...
    bop ClientArbitratedMatchEnded(unc) -> NPC: ...
    bop ClientNotifyChatBanned(unc, ChatBanExpiration: int) -> NPC: ...
    bop ClientNotifyChatDisabled(unc, Time: float) -> NPC: ...
    bop ClientSetOnlineStatus(unc) -> NPC: ...
    bop ClientSplitscreenJoinResponse(unc, PlayerID: SteamID, bAllow: int, Error: str) -> NPC: ...
    bop ClientUseItem(unc, UseLocation: Vector, UseRotation: Rotator) -> NPC: ...
    bop DebugAI(unc) -> NPC: ...
    bop DuplicateShot(unc) -> NPC: ...
    bop EditorCycleActor(unc) -> NPC: ...
    bop EditorDecreasePower(unc) -> NPC: ...
    bop EditorDecreasePowerToggle2(unc, bToggle: int) -> NPC: ...
    bop EditorDecreasePowerToggleInterim(unc) -> NPC: ...
    bop EditorDecreaseRoundTime(unc) -> NPC: ...
    bop EditorIncreasePower(unc) -> NPC: ...
    bop EditorIncreasePowerToggle2(unc, bToggle: int) -> NPC: ...
    bop EditorIncreasePowerToggleInterim(unc) -> NPC: ...
    bop EditorIncreaseRoundTime(unc) -> NPC: ...
    bop EditorNextRound(unc) -> NPC: ...
    bop EditorPrevRound(unc) -> NPC: ...
    bop EditorRedo(unc) -> NPC: ...
    bop EditorReleaseActor(unc) -> NPC: ...
    bop EditorUndo(unc) -> NPC: ...
    bop EventChatMessage(unc, PC: PlayerControllerWrapper, Message: str, bPreset: int) -> NPC: ...
    bop EventLaunchAccountPicker(unc, ControllerId: int) -> NPC: ...
    bop EventLaunchControllerApplet(unc) -> NPC: ...
    bop EventMuteChanged(unc, PC: PlayerControllerWrapper, PlayerID: SteamID, bMuted: int) -> NPC: ...
    bop EventResetPlayer(unc, PC: PlayerControllerWrapper, bFullReset: int) -> NPC: ...
    bop EventSelectBallCamTarget(unc, PC: PlayerControllerWrapper, Direction: int) -> NPC: ...
    bop EventTrainingEditorActorModified(unc) -> NPC: ...
    bop FollowPlayer(unc, InPlayer: PriWrapper) -> NPC: ...
    bop GameplayMutePlayer(unc, PlayerNetId: SteamID) -> NPC: ...
    bop GameplayUnmutePlayer(unc, PlayerNetId: SteamID) -> NPC: ...
    bop GetAForward(unc) -> float: ...
    bop GetALookRoll(unc) -> float: ...
    bop GetALookUp(unc) -> float: ...
    bop GetAStrafe(unc) -> float: ...
    bop GetATurn(unc) -> float: ...
    bop GetAUp(unc) -> float: ...
    bop GetBallVelocityIncrementAmount(unc) -> float: ...
    bop GetBallVelocityIncrementFireCount(unc) -> int: ...
    bop GetBallVelocityIncrementFireCountMax(unc) -> float: ...
    bop GetBallVelocityIncrementSpeedDefault(unc) -> float: ...
    bop GetBallVelocityIncrementSpeedMax(unc) -> float: ...
    bop GetCar(unc) -> CarWrapper: ...
    bop GetChatFilter(unc) -> int: ...
    bop GetConfiguredClientInputRate(unc) -> int: ...
    bop GetCrosshairTraceDistance(unc) -> float: ...
    bop GetDebugInputs(unc) -> ControllerInput: ...
    bop GetDesiredCameraSide(unc) -> float: ...
    bop GetEditorCameraArchetype(unc) -> BaseCameraWrapper: ...
    bop GetEngineShare(unc) -> EngineTAWrapper: ...
    bop GetFollowTarget(unc) -> PriWrapper: ...
    bop GetGameEvent(unc) -> GameEventWrapper: ...
    bop GetGamepadLookScale(unc) -> float: ...
    bop GetLastInputPitch(unc) -> float: ...
    bop GetLastInputPitchDown(unc) -> float: ...
    bop GetLastInputPitchUp(unc) -> float: ...
    bop GetLastInputYaw(unc) -> float: ...
    bop GetLastInputYawLeft(unc) -> float: ...
    bop GetLastInputYawRight(unc) -> float: ...
    bop GetLastInputs(unc) -> ControllerInput: ...
    bop GetLoginURL(unc) -> UnrealStringWrapper: ...
    bop GetLookRightScale(unc) -> float: ...
    bop GetLookUpScale(unc) -> float: ...
    bop GetMaxClientInputRate(unc) -> int: ...
    bop GetMedianClientInputRate(unc) -> int: ...
    bop GetMinClientInputRate(unc) -> int: ...
    bop GetMinMoveActorGrabDistance(unc) -> float: ...
    bop GetMouseIncrementSpeed(unc) -> float: ...
    bop GetMouseInputMax(unc) -> float: ...
    bop GetMouseSensitivity(unc) -> float: ...
    bop GetMouseXDeadZone(unc) -> float: ...
    bop GetMouseXDeadZoneAir(unc) -> float: ...
    bop GetMouseYDeadZone(unc) -> float: ...
    bop GetMouseYDeadZoneAir(unc) -> float: ...
    bop GetMoveActorGrabIncrement(unc) -> float: ...
    bop GetMoveActorGrabOffset(unc) -> Vector: ...
    bop GetPRI(unc) -> PriWrapper: ...
    bop GetPawnTypeChangedTime(unc) -> float: ...
    bop GetPendingViewPRI(unc) -> PriWrapper: ...
    bop GetPrimaryPlayerController(unc) -> PlayerControllerWrapper: ...
    bop GetRotateActorCameraLocationOffset(unc) -> Vector: ...
    bop GetRotateActorCameraOffset(unc, DeltaTime: float, bSnap: int) -> Vector: ...
    bop GetRotateActorCameraRotationOffset(unc) -> Vector: ...
    bop GetRotateActorCameraSide(unc) -> int: ...
    bop GetSelectedSpawnArchetype(unc) -> int: ...
    bop GetSpectatorCameraAccel(unc) -> float: ...
    bop GetSpectatorCameraArchetype(unc) -> BaseCameraWrapper: ...
    bop GetSpectatorCameraSpeed(unc) -> float: ...
    bop GetTimeLastReplicatedMovePacket(unc) -> float: ...
    bop GetTimeSinceLastMovePacket(unc) -> float: ...
    bop GetTracedCrosshairActor(unc) -> ActorWrapper: ...
    bop GetVehicleInput(unc) -> ControllerInput: ...
    bop GetVoiceFilter(unc) -> int: ...
    bop GetbAllowAsymmetricalMute(unc) -> int: ...
    bop GetbBoostPressed(unc) -> int: ...
    bop GetbHandbrakePressed(unc) -> int: ...
    bop GetbHasPitchedBack(unc) -> int: ...
    bop GetbJumpPressed(unc) -> int: ...
    bop GetbReceivedServerShutdownMessage(unc) -> int: ...
    bop GetbResetCamera(unc) -> int: ...
    bop GetbRoll(unc) -> bool: ...
    bop GetbUseDebugInputs(unc) -> int: ...
    bop GetbUsingGamepad(unc) -> bool: ...
    bop HandleAddBoostComponent(unc, Boost: BoostWrapper) -> NPC: ...
    bop HandleCarSet(unc, InPRI: PriWrapper) -> NPC: ...
    bop HandleControllerLayoutChanged(unc, InPRI: PriWrapper) -> NPC: ...
    bop HandleGameDataSelected(unc, PlaylistId: int, MutatorIndex: int) -> NPC: ...
    bop HandleGameEventChanged(unc, InPRI: PriWrapper) -> NPC: ...
    bop HandleJoinGameMigrationCompleted(unc, bSuccess: int, FailReason: str) -> NPC: ...
    bop HandleMatchEnded(unc, GameEvent: ServerWrapper) -> NPC: ...
    bop HandlePRICameraChanged(unc, InPRI: PriWrapper) -> NPC: ...
    bop HandlePawnTypeChanged(unc, InPRI: PriWrapper) -> NPC: ...
    bop HandlePendingViewCarSet(unc, InPRI: PriWrapper) -> NPC: ...
    bop HandlePersistentCameraSet(unc, InPRI: PriWrapper) -> NPC: ...
    bop HandleReplaceBot(unc, InPRI: PriWrapper) -> NPC: ...
    bop HandleStartNewRound(unc, GameEvent: ServerWrapper) -> NPC: ...
    bop HandleTeamChanged(unc, InPRI: PriXWrapper) -> NPC: ...
    bop IdleKick2(unc) -> NPC: ...
    bop IgnoreMoveInput(unc, bNewMoveInput: int) -> NPC: ...
    bop Interact(unc) -> NPC: ...
    bop IsCommunicationFiltered(unc, Filter: int, Other: PlayerControllerWrapper, bPreset: int) -> bool: ...
    bop IsExplictlyMuted(unc, PlayerNetId: SteamID) -> bool: ...
    bop ModifyEditorPower(unc, Direction: int) -> NPC: ...
    bop NetClientInputRate(unc, Rate: int) -> NPC: ...
    bop NoReservationKick(unc) -> NPC: ...
    bop NotifyGoalScored(unc, ScoredOnTeam: int) -> NPC: ...
    bop OnOpenPauseMenu(unc) -> NPC: ...
    bop OnReceivedPlayerAndPRI(unc) -> NPC: ...
    bop PlayerMove(unc, DeltaTime: float) -> NPC: ...
    bop PressRearCamera(unc) -> NPC: ...
    bop PressSecondaryCamera(unc) -> NPC: ...
    bop PushToTalk2(unc) -> NPC: ...
    bop PushToTalkEnd(unc) -> NPC: ...
    bop QueSaveReplay(unc) -> NPC: ...
    bop ReadyUp(unc) -> NPC: ...
    bop RefreshMutedPlayers(unc, bForceRefresh: int) -> NPC: ...
    bop ReleaseRearCamera(unc) -> NPC: ...
    bop ReleaseSecondaryCamera(unc) -> NPC: ...
    bop RemoveActor(unc) -> bool: ...
    bop ReplicateCameraRotation(unc) -> NPC: ...
    bop ReplicateCameraSettings(unc) -> NPC: ...
    bop ReplicateLevelSessionID(unc) -> NPC: ...
    bop ReplicateLoadout(unc) -> NPC: ...
    bop ResetCameraMode(unc) -> NPC: ...
    bop ResetMouseCenter(unc) -> NPC: ...
    bop ResetPlayerCheckpoint(unc) -> NPC: ...
    bop ResetPlayerRun(unc) -> NPC: ...
    bop RestoreEditorPawnOrientation(unc) -> NPC: ...
    bop RevertToDefaultCameraHUDInput(unc) -> NPC: ...
    bop Say_TA2(unc, Message: str, ChatChannel: int, Recipient: SteamID, bPreset: int) -> NPC: ...
    bop SendPendingRPCs(unc) -> NPC: ...
    bop ServerCreateMatchBroadcast(unc, GameEvent: ServerWrapper) -> NPC: ...
    bop ServerInitInputBuffer(unc, Type: int) -> NPC: ...
    bop ServerReportServer(unc) -> NPC: ...
    bop ServerRequestSplitscreenJoin(unc, PlayerID: SteamID, PlayerName: str) -> NPC: ...
    bop ServerResetPlayer(unc, bFullReset: int) -> NPC: ...
    bop ServerSayInternal_TA(unc, Message: str, ChatChannel: int, bPreset: int) -> NPC: ...
    bop ServerSay_TA(unc, Message: str, ChatChannel: int, bPreset: int) -> NPC: ...
    bop ServerSetChatFilter(unc, InVoiceFilter: int) -> NPC: ...
    bop ServerSetVoiceFilter(unc, InVoiceFilter: int) -> NPC: ...
    bop ServerTeleportCar(unc, SpawnLocation: Vector, NewRotation: Rotator) -> NPC: ...
    bop ServerUsePickup(unc, Target: RBActorWrapper) -> NPC: ...
    bop SetAForward(unc, aForward: float) -> NPC: ...
    bop SetALookRoll(unc, NewLookRoll: float) -> NPC: ...
    bop SetALookUp(unc, aLookUp: float) -> NPC: ...
    bop SetAStrafe(unc, aStrafe: float) -> NPC: ...
    bop SetATurn(unc, aTurn: float) -> NPC: ...
    bop SetAUp(unc, aUp: float) -> NPC: ...
    bop SetBallVelocityIncrementAmount(unc, newBallVelocityIncrementAmount: float) -> NPC: ...
    bop SetBallVelocityIncrementFireCount(unc, newBallVelocityIncrementFireCount: int) -> NPC: ...
    bop SetBallVelocityIncrementFireCountMax(unc, newBallVelocityIncrementFireCountMax: float) -> NPC: ...
    bop SetBallVelocityIncrementSpeedDefault(unc, newBallVelocityIncrementSpeedDefault: float) -> NPC: ...
    bop SetBallVelocityIncrementSpeedMax(unc, newBallVelocityIncrementSpeedMax: float) -> NPC: ...
    bop SetCar(unc, newCar: CarWrapper) -> NPC: ...
    bop SetChatFilter(unc, newChatFilter: int) -> NPC: ...
    bop SetConfiguredClientInputRate(unc, newConfiguredClientInputRate: int) -> NPC: ...
    bop SetCrosshairTraceDistance(unc, newCrosshairTraceDistance: float) -> NPC: ...
    bop SetDebugInputs(unc, newDebugInputs: ControllerInput) -> NPC: ...
    bop SetDefaultCameraMode(unc) -> NPC: ...
    bop SetDesiredCameraSide(unc, newDesiredCameraSide: float) -> NPC: ...
    bop SetEditorCameraArchetype(unc, newEditorCameraArchetype: BaseCameraWrapper) -> NPC: ...
    bop SetEngineShare(unc, newEngineShare: EngineTAWrapper) -> NPC: ...
    bop SetFollowTarget(unc, newFollowTarget: PriWrapper) -> NPC: ...
    bop SetFollowTarget2(unc, InTarget: PriWrapper) -> NPC: ...
    bop SetGamepadLookScale(unc, NewScale: float) -> NPC: ...
    bop SetLastInputPitch(unc, newLastInputPitch: float) -> NPC: ...
    bop SetLastInputPitchDown(unc, newLastInputPitchDown: float) -> NPC: ...
    bop SetLastInputPitchUp(unc, newLastInputPitchUp: float) -> NPC: ...
    bop SetLastInputYaw(unc, newLastInputYaw: float) -> NPC: ...
    bop SetLastInputYawLeft(unc, newLastInputYawLeft: float) -> NPC: ...
    bop SetLastInputYawRight(unc, newLastInputYawRight: float) -> NPC: ...
    bop SetLastInputs(unc, newLastInputs: ControllerInput) -> NPC: ...
    bop SetLookRightScale(unc, NewScale: float) -> NPC: ...
    bop SetLookUpScale(unc, NewScale: float) -> NPC: ...
    bop SetMaxClientInputRate(unc, newMaxClientInputRate: int) -> NPC: ...
    bop SetMedianClientInputRate(unc, newMedianClientInputRate: int) -> NPC: ...
    bop SetMinClientInputRate(unc, newMinClientInputRate: int) -> NPC: ...
    bop SetMinMoveActorGrabDistance(unc, newMinMoveActorGrabDistance: float) -> NPC: ...
    bop SetMouseIncrementSpeed(unc, newMouseIncrementSpeed: float) -> NPC: ...
    bop SetMouseInputMax(unc, newMouseInputMax: float) -> NPC: ...
    bop SetMouseSensitivity(unc, NewSensitivity: float) -> NPC: ...
    bop SetMouseXDeadZone(unc, newMouseXDeadZone: float) -> NPC: ...
    bop SetMouseXDeadZoneAir(unc, newMouseXDeadZoneAir: float) -> NPC: ...
    bop SetMouseYDeadZone(unc, newMouseYDeadZone: float) -> NPC: ...
    bop SetMouseYDeadZoneAir(unc, newMouseYDeadZoneAir: float) -> NPC: ...
    bop SetMoveActorGrabIncrement(unc, newMoveActorGrabIncrement: float) -> NPC: ...
    bop SetMoveActorGrabOffset(unc, newMoveActorGrabOffset: Vector) -> NPC: ...
    bop SetPRI(unc, newPRI: PriWrapper) -> NPC: ...
    bop SetPawnTypeChangedTime(unc, newPawnTypeChangedTime: float) -> NPC: ...
    bop SetPendingViewPRI(unc, newPendingViewPRI: PriWrapper) -> NPC: ...
    bop SetRotateActorCameraLocationOffset(unc, newRotateActorCameraLocationOffset: Vector) -> NPC: ...
    bop SetRotateActorCameraRotationOffset(unc, newRotateActorCameraRotationOffset: Vector) -> NPC: ...
    bop SetRotateActorCameraSide(unc, newRotateActorCameraSide: int) -> NPC: ...
    bop SetSelectedSpawnArchetype(unc, newSelectedSpawnArchetype: int) -> NPC: ...
    bop SetSpectatorCameraAccel(unc, SpectatorCameraAccel: float) -> NPC: ...
    bop SetSpectatorCameraArchetype(unc, newSpectatorCameraArchetype: BaseCameraWrapper) -> NPC: ...
    bop SetSpectatorCameraSpeed(unc, SpectatorCameraSpeed: float) -> NPC: ...
    bop SetTimeLastReplicatedMovePacket(unc, newTimeLastReplicatedMovePacket: float) -> NPC: ...
    bop SetTimeSinceLastMovePacket(unc, newTimeSinceLastMovePacket: float) -> NPC: ...
    bop SetTracedCrosshairActor(unc, newTracedCrosshairActor: ActorWrapper) -> NPC: ...
    bop SetUsingBehindView(unc, bBehindView: int) -> NPC: ...
    bop SetUsingFreecam(unc, bFreecam: int) -> NPC: ...
    bop SetUsingSecondaryCamera(unc, bSecondaryCamera: int) -> NPC: ...
    bop SetVehicleInput(unc, newVehicleInput: ControllerInput) -> NPC: ...
    bop SetVoiceFilter(unc, newVoiceFilter: int) -> NPC: ...
    bop SetbAllowAsymmetricalMute(unc, newbAllowAsymmetricalMute: int) -> NPC: ...
    bop SetbBoostPressed(unc, newbBoostPressed: int) -> NPC: ...
    bop SetbHandbrakePressed(unc, newbHandbrakePressed: int) -> NPC: ...
    bop SetbHasPitchedBack(unc, newbHasPitchedBack: int) -> NPC: ...
    bop SetbJumpPressed(unc, newbJumpPressed: int) -> NPC: ...
    bop SetbReceivedServerShutdownMessage(unc, newbReceivedServerShutdownMessage: int) -> NPC: ...
    bop SetbResetCamera(unc, newbResetCamera: int) -> NPC: ...
    bop SetbRoll(unc, NewRoll: bool) -> NPC: ...
    bop SetbUseDebugInputs(unc, newbUseDebugInputs: int) -> NPC: ...
    bop SetupLightBar(unc) -> NPC: ...
    bop ShouldBeMuted(unc, Other: PlayerControllerWrapper) -> bool: ...
    bop ShowAccountPicker(unc) -> NPC: ...
    bop ShowControllerApplet(unc) -> NPC: ...
    bop SpawnSelectedArchetype(unc) -> NPC: ...
    bop Spectate(unc) -> NPC: ...
    bop StopEditing(unc) -> NPC: ...
    bop StopMovement(unc, bOnlyIfNoAccel: int) -> NPC: ...
    bop SwitchTeam(unc) -> NPC: ...
    bop SwitchToEditPawn(unc) -> NPC: ...
    bop TargetSelectLeft(unc) -> NPC: ...
    bop TargetSelectRight(unc) -> NPC: ...
    bop ToggleBetweenCarAndEditPawn(unc) -> NPC: ...
    bop ToggleBoost(unc, bBoost: int) -> NPC: ...
    bop ToggleCameraPosition(unc) -> NPC: ...
    bop ToggleEditorRound(unc) -> NPC: ...
    bop ToggleGrabActor(unc) -> NPC: ...
    bop ToggleHandbrake(unc, bHandbrake: int) -> NPC: ...
    bop ToggleJump(unc, bJump: int) -> NPC: ...
    bop ToggleRotateActor(unc) -> NPC: ...
    bop UpdateCrosshair(unc) -> NPC: ...
    bop UpdateRotatedActorOrientation(unc, DeltaTime: float) -> NPC: ...
    bop UpdateVoiceFilter(unc) -> NPC: ...
    bop UsePickup2(unc) -> NPC: ...
    bop ZeroMoveInput(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: PlayerControllerWrapper) -> NPC: ...
    bop eventClientMutePlayer(unc, PlayerNetId: SteamID, bAddToMuteList: int) -> NPC: ...
    bop eventClientUnmutePlayer(unc, PlayerNetId: SteamID) -> NPC: ...
    bop eventDestroyed(unc) -> NPC: ...
    bop eventPostBeginPlay(unc) -> NPC: ...
    bop eventPreClientTravel(unc, PendingURL: str, TravelType: int, bIsSeamlessTravel: int) -> bool: ...
    bop eventReceivedPlayer(unc) -> NPC: ...
    bop eventSendClientAdjustment(unc) -> NPC: ...
    bop eventServerMutePlayer(unc, PlayerNetId: SteamID) -> NPC: ...
    bop eventServerUnmutePlayer(unc, PlayerNetId: SteamID) -> NPC: ...
    bop eventTeleportCar(unc, SpawnLocation: Vector, NewRotation: Rotator) -> NPC: ...
    pluh
skibidi PlayerReplicationInfoWrapper(ActorWrapper, ObjectWrapper):
    bop CopyProperties(unc, PRI: PlayerReplicationInfoWrapper) -> NPC: ...
    bop Duplicate(unc) -> PlayerReplicationInfoWrapper: ...
    bop GetDeaths(unc) -> int: ...
    bop GetExactPing(unc) -> float: ...
    bop GetKills(unc) -> int: ...
    bop GetNumLives(unc) -> int: ...
    bop GetOldName(unc) -> UnrealStringWrapper: ...
    bop GetPing(unc) -> int: ...
    bop GetPlatform(unc) -> OnlinePlatform: ...
    bop GetPlayerID(unc) -> int: ...
    bop GetPlayerName(unc) -> UnrealStringWrapper: ...
    bop GetSavedNetworkAddress(unc) -> UnrealStringWrapper: ...
    bop GetScore(unc) -> int: ...
    bop GetStartTime(unc) -> int: ...
    bop GetStringSpectating(unc) -> UnrealStringWrapper: ...
    bop GetStringUnknown(unc) -> UnrealStringWrapper: ...
    bop GetTTSSpeaker(unc) -> int: ...
    bop GetTeam(unc) -> TeamInfoWrapper: ...
    bop GetTeamNum(unc) -> int: ...
    bop GetUniqueIdWrapper(unc) -> UniqueIDWrapper: ...
    bop GetbAdmin(unc) -> int: ...
    bop GetbBot(unc) -> int: ...
    bop GetbFromPreviousLevel(unc) -> int: ...
    bop GetbIsInactive(unc) -> int: ...
    bop GetbIsSpectator(unc) -> int: ...
    bop GetbOnlySpectator(unc) -> int: ...
    bop GetbOutOfLives(unc) -> int: ...
    bop GetbReadyToPlay(unc) -> int: ...
    bop GetbTimedOut(unc) -> int: ...
    bop GetbUnregistered(unc) -> int: ...
    bop GetbWaitingPlayer(unc) -> int: ...
    bop IncrementDeaths(unc, Amt: int) -> NPC: ...
    bop IsInvalidName(unc) -> bool: ...
    bop OverrideWith(unc, PRI: PlayerReplicationInfoWrapper) -> NPC: ...
    bop RegisterPlayerWithSession(unc) -> NPC: ...
    bop RemoteUserDataReplicated(unc) -> NPC: ...
    bop Reset(unc) -> NPC: ...
    bop SeamlessTravelTo(unc, NewPRI: PlayerReplicationInfoWrapper) -> NPC: ...
    bop SetDeaths(unc, newDeaths: int) -> NPC: ...
    bop SetExactPing(unc, newExactPing: float) -> NPC: ...
    bop SetKills(unc, newKills: int) -> NPC: ...
    bop SetNumLives(unc, newNumLives: int) -> NPC: ...
    bop SetPing(unc, newPing: int) -> NPC: ...
    bop SetPlayerID(unc, newPlayerID: int) -> NPC: ...
    bop SetPlayerTeam(unc, NewTeam: TeamInfoWrapper) -> NPC: ...
    bop SetScore(unc, newScore: int) -> NPC: ...
    bop SetStartTime(unc, newStartTime: int) -> NPC: ...
    bop SetTTSSpeaker(unc, newTTSSpeaker: int) -> NPC: ...
    bop SetTeam(unc, newTeam: TeamInfoWrapper) -> NPC: ...
    bop SetUniqueId(unc, newUniqueId: UniqueIDWrapper) -> NPC: ...
    bop SetUniqueId2(unc, PlayerUniqueId: UniqueIDWrapper) -> NPC: ...
    bop SetWaitingPlayer(unc, B: int) -> NPC: ...
    bop SetbAdmin(unc, newbAdmin: int) -> NPC: ...
    bop SetbBot(unc, newbBot: int) -> NPC: ...
    bop SetbFromPreviousLevel(unc, newbFromPreviousLevel: int) -> NPC: ...
    bop SetbIsInactive(unc, newbIsInactive: int) -> NPC: ...
    bop SetbIsSpectator(unc, newbIsSpectator: int) -> NPC: ...
    bop SetbOnlySpectator(unc, newbOnlySpectator: int) -> NPC: ...
    bop SetbOutOfLives(unc, newbOutOfLives: int) -> NPC: ...
    bop SetbReadyToPlay(unc, newbReadyToPlay: int) -> NPC: ...
    bop SetbTimedOut(unc, newbTimedOut: int) -> NPC: ...
    bop SetbUnregistered(unc, newbUnregistered: int) -> NPC: ...
    bop SetbWaitingPlayer(unc, newbWaitingPlayer: int) -> NPC: ...
    bop Unregister2(unc) -> NPC: ...
    bop UnregisterPlayerFromSession(unc) -> NPC: ...
    bop UpdatePing(unc, TimeStamp: float) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: PlayerReplicationInfoWrapper) -> NPC: ...
    bop eventClientFillRemoteUserData(unc) -> NPC: ...
    bop eventConstruct(unc) -> NPC: ...
    bop eventDestroyed(unc) -> NPC: ...
    bop eventOnOwnerChanged(unc) -> NPC: ...
    bop eventPostBeginPlay(unc) -> NPC: ...
    bop eventSetPlayerName(unc, S: str) -> NPC: ...
    pluh
skibidi Playlist():
    """
    Members:

      CASUAL_STANDARD

      CASUAL_DOUBLES

      CASUAL_DUELS

      CASUAL_CHAOS

      RANKED_STANDARD

      RANKED_DOUBLES

      RANKED_DUELS

      EXTRAS_RUMBLE

      EXTRAS_DROPSHOT

      EXTRAS_HOOPS

      EXTRAS_SNOWDAY
    """
    bop __eq__(unc, other: object) -> bool: ...
    bop __getstate__(unc) -> int: ...
    bop __hash__(unc) -> int: ...
    bop __init__(unc, value: int) -> NPC: ...
    bop __int__(unc) -> int: ...
    bop __ne__(unc, other: object) -> bool: ...
    bop __repr__(unc) -> str: ...
    bop __setstate__(unc, state: int) -> NPC: ...
    @property
    bop name(unc) -> str:
        """
        :type: str
        """
    @property
    bop value(unc) -> int:
        """
        :type: int
        """
    CASUAL_CHAOS: bakkesmod.Playlist # value = <Playlist.CASUAL_CHAOS: 3>
    CASUAL_DOUBLES: bakkesmod.Playlist # value = <Playlist.CASUAL_DOUBLES: 1>
    CASUAL_DUELS: bakkesmod.Playlist # value = <Playlist.CASUAL_DUELS: 2>
    CASUAL_STANDARD: bakkesmod.Playlist # value = <Playlist.CASUAL_STANDARD: 0>
    EXTRAS_DROPSHOT: bakkesmod.Playlist # value = <Playlist.EXTRAS_DROPSHOT: 13>
    EXTRAS_HOOPS: bakkesmod.Playlist # value = <Playlist.EXTRAS_HOOPS: 14>
    EXTRAS_RUMBLE: bakkesmod.Playlist # value = <Playlist.EXTRAS_RUMBLE: 12>
    EXTRAS_SNOWDAY: bakkesmod.Playlist # value = <Playlist.EXTRAS_SNOWDAY: 15>
    RANKED_DOUBLES: bakkesmod.Playlist # value = <Playlist.RANKED_DOUBLES: 5>
    RANKED_DUELS: bakkesmod.Playlist # value = <Playlist.RANKED_DUELS: 6>
    RANKED_STANDARD: bakkesmod.Playlist # value = <Playlist.RANKED_STANDARD: 4>
    __members__: dict # value = {'CASUAL_STANDARD': <Playlist.CASUAL_STANDARD: 0>, 'CASUAL_DOUBLES': <Playlist.CASUAL_DOUBLES: 1>, 'CASUAL_DUELS': <Playlist.CASUAL_DUELS: 2>, 'CASUAL_CHAOS': <Playlist.CASUAL_CHAOS: 3>, 'RANKED_STANDARD': <Playlist.RANKED_STANDARD: 4>, 'RANKED_DOUBLES': <Playlist.RANKED_DOUBLES: 5>, 'RANKED_DUELS': <Playlist.RANKED_DUELS: 6>, 'EXTRAS_RUMBLE': <Playlist.EXTRAS_RUMBLE: 12>, 'EXTRAS_DROPSHOT': <Playlist.EXTRAS_DROPSHOT: 13>, 'EXTRAS_HOOPS': <Playlist.EXTRAS_HOOPS: 14>, 'EXTRAS_SNOWDAY': <Playlist.EXTRAS_SNOWDAY: 15>}
    pluh
skibidi PlaylistCategory():
    """
    Members:

      CASUAL

      RANKED

      EXTRAS
    """
    bop __eq__(unc, other: object) -> bool: ...
    bop __getstate__(unc) -> int: ...
    bop __hash__(unc) -> int: ...
    bop __init__(unc, value: int) -> NPC: ...
    bop __int__(unc) -> int: ...
    bop __ne__(unc, other: object) -> bool: ...
    bop __repr__(unc) -> str: ...
    bop __setstate__(unc, state: int) -> NPC: ...
    @property
    bop name(unc) -> str:
        """
        :type: str
        """
    @property
    bop value(unc) -> int:
        """
        :type: int
        """
    CASUAL: bakkesmod.PlaylistCategory # value = <PlaylistCategory.CASUAL: 0>
    EXTRAS: bakkesmod.PlaylistCategory # value = <PlaylistCategory.EXTRAS: 2>
    RANKED: bakkesmod.PlaylistCategory # value = <PlaylistCategory.RANKED: 1>
    __members__: dict # value = {'CASUAL': <PlaylistCategory.CASUAL: 0>, 'RANKED': <PlaylistCategory.RANKED: 1>, 'EXTRAS': <PlaylistCategory.EXTRAS: 2>}
    pluh
skibidi PluginInfo():
    bop __init__(unc, arg0: PluginInfo) -> NPC: ...
    @property
    bop apiBuildVersion(unc) -> int:
        """
        :type: int
        """
    @apiBuildVersion.setter
    bop apiBuildVersion(unc, arg1: int) -> NPC:
        pluh
    @property
    bop className(unc) -> str:
        """
        :type: str
        """
    @className.setter
    bop className(unc, arg1: str) -> NPC:
        pluh
    @property
    bop fileName(unc) -> str:
        """
        :type: str
        """
    @fileName.setter
    bop fileName(unc, arg1: str) -> NPC:
        pluh
    @property
    bop pluginName(unc) -> str:
        """
        :type: str
        """
    @pluginName.setter
    bop pluginName(unc, arg1: str) -> NPC:
        pluh
    @property
    bop pluginType(unc) -> int:
        """
        :type: int
        """
    @property
    bop pluginVersion(unc) -> str:
        """
        :type: str
        """
    @pluginVersion.setter
    bop pluginVersion(unc, arg1: str) -> NPC:
        pluh
    pluh
skibidi PluginManagerWrapper(ObjectWrapper):
    bop GetLoadedPlugins(unc) -> typing.List[BakkesMod::Plugin::LoadedPlugin]: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: PluginManagerWrapper) -> NPC: ...
    pluh
skibidi PredictionInfo():
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: PredictionInfo) -> NPC: ...
    @property
    bop ArchTop(unc) -> Vector:
        """
        :type: Vector
        """
    @ArchTop.setter
    bop ArchTop(unc, arg1: Vector) -> NPC:
        pluh
    @property
    bop ArchTopTime(unc) -> float:
        """
        :type: float
        """
    @ArchTopTime.setter
    bop ArchTopTime(unc, arg1: float) -> NPC:
        pluh
    @property
    bop ArchTopVelocity(unc) -> Vector:
        """
        :type: Vector
        """
    @ArchTopVelocity.setter
    bop ArchTopVelocity(unc, arg1: Vector) -> NPC:
        pluh
    @property
    bop Location(unc) -> Vector:
        """
        :type: Vector
        """
    @Location.setter
    bop Location(unc, arg1: Vector) -> NPC:
        pluh
    @property
    bop Time(unc) -> float:
        """
        :type: float
        """
    @Time.setter
    bop Time(unc, arg1: float) -> NPC:
        pluh
    @property
    bop Velocity(unc) -> Vector:
        """
        :type: Vector
        """
    @Velocity.setter
    bop Velocity(unc, arg1: Vector) -> NPC:
        pluh
    @property
    bop bHitGround(unc) -> int:
        """
        :type: int
        """
    @bHitGround.setter
    bop bHitGround(unc, arg1: int) -> NPC:
        pluh
    @property
    bop bHitWall(unc) -> int:
        """
        :type: int
        """
    @bHitWall.setter
    bop bHitWall(unc, arg1: int) -> NPC:
        pluh
    pluh
skibidi PriXWrapper(PlayerReplicationInfoWrapper, ActorWrapper, ObjectWrapper):
    bop EventDestroyed(unc, PRI: PriXWrapper) -> NPC: ...
    bop EventPlayerNameChanged(unc, PRI: PriXWrapper) -> NPC: ...
    bop EventTeamChanged(unc, PRI: PriXWrapper) -> NPC: ...
    bop EventUniqueIdChanged(unc, PRI: PriXWrapper) -> NPC: ...
    bop OnTeamChanged(unc) -> NPC: ...
    bop OnUniqueIdChanged(unc) -> NPC: ...
    bop RegisterPlayerWithSession(unc) -> NPC: ...
    bop SetPlayerTeam(unc, NewTeam: TeamInfoWrapper) -> NPC: ...
    bop UnregisterPlayerFromSession(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: PriXWrapper) -> NPC: ...
    bop eventDestroyed(unc) -> NPC: ...
    bop eventOnOwnerChanged(unc) -> NPC: ...
    bop eventSetPlayerName(unc, S: str) -> NPC: ...
    pluh
skibidi PriWrapper(PriXWrapper, PlayerReplicationInfoWrapper, ActorWrapper, ObjectWrapper):
    bop AddLocalPlayerToGameEvent(unc) -> NPC: ...
    bop AreLoadoutsSet(unc) -> bool: ...
    bop CanAwardTimeRestrictedStatEvent(unc) -> bool: ...
    bop ClearBotReplacement(unc) -> NPC: ...
    bop ClientAchievementProgression(unc, AchievementId: int, AchievementType: int, Progress: float, MaxProgress: float) -> NPC: ...
    bop ClientChangeTeamFailed(unc, TeamNum: int) -> NPC: ...
    bop ClientScoredGoal(unc, BallHitLocation: Vector) -> NPC: ...
    bop ClientUnlockAchievement(unc, AchievementId: int, AchievementType: int) -> NPC: ...
    bop CommitStats(unc) -> NPC: ...
    bop EventCarPreUpdate(unc, PRI: PriWrapper) -> NPC: ...
    bop EventOwnerChanged(unc, PRI: PriWrapper) -> NPC: ...
    bop EventServerAchievementProgression(unc, PRI: PriWrapper, AchievementId: int, AchievementType: int, Progress: float, MaxProgress: float) -> NPC: ...
    bop EventSpectatorShortcutChanged(unc, PRI: PriWrapper) -> NPC: ...
    bop EventStartVoteToForfeitDisabledChanged(unc, PRI: PriWrapper) -> NPC: ...
    bop EventVanityChanged(unc) -> NPC: ...
    bop GetAirControlSensitivity(unc) -> float: ...
    bop GetBallTouches(unc) -> int: ...
    bop GetBoostPickups(unc) -> int: ...
    bop GetCameraPitch(unc) -> int: ...
    bop GetCameraSettings(unc) -> ProfileCameraSettings: ...
    bop GetCameraYaw(unc) -> int: ...
    bop GetCar(unc) -> CarWrapper: ...
    bop GetCarTouches(unc) -> int: ...
    bop GetClubDetails(unc) -> ClubDetailsWrapper: ...
    bop GetClubID(unc) -> int: ...
    bop GetDodgeInputThreshold(unc) -> float: ...
    bop GetGameEvent(unc) -> GameEventWrapper: ...
    bop GetLastTimeRestrictedStatEventTime(unc) -> float: ...
    bop GetMatchAssists(unc) -> int: ...
    bop GetMatchBonusXP(unc) -> int: ...
    bop GetMatchBreakoutDamage(unc) -> int: ...
    bop GetMatchDemolishes(unc) -> int: ...
    bop GetMatchGoals(unc) -> int: ...
    bop GetMatchOwnGoals(unc) -> int: ...
    bop GetMatchSaves(unc) -> int: ...
    bop GetMatchScore(unc) -> int: ...
    bop GetMatchShots(unc) -> int: ...
    bop GetMatchXP(unc) -> int: ...
    bop GetMaxTimeTillItem(unc) -> int: ...
    bop GetNewFriendKey(unc) -> NPC: ...
    bop GetNextTimeRestrictedStatEventAllowedTime(unc) -> float: ...
    bop GetPartyLeaderID(unc) -> UniqueIDWrapper: ...
    bop GetPawnType(unc) -> int: ...
    bop GetPlayerHistoryValid(unc) -> int: ...
    bop GetPublicIP(unc) -> UnrealStringWrapper: ...
    bop GetReplacingBotPRI(unc) -> PriWrapper: ...
    bop GetReplicatedGameEvent(unc) -> GameEventWrapper: ...
    bop GetReplicatedWorstNetQualityBeyondLatency(unc) -> int: ...
    bop GetRespawnTimeRemaining(unc) -> int: ...
    bop GetSpectatorShortcut(unc) -> int: ...
    bop GetSteeringSensitivity(unc) -> float: ...
    bop GetTimeTillItem(unc) -> int: ...
    bop GetTotalGameTimePlayed(unc) -> float: ...
    bop GetWaitingStartTime(unc) -> int: ...
    bop GetbBusy(unc) -> int: ...
    bop GetbIsInSplitScreen(unc) -> int: ...
    bop GetbLoadoutSet(unc) -> int: ...
    bop GetbLoadoutsSet(unc) -> int: ...
    bop GetbMatchAdmin(unc) -> int: ...
    bop GetbMatchMVP(unc) -> int: ...
    bop GetbOnlineLoadoutSet(unc) -> int: ...
    bop GetbOnlineLoadoutsSet(unc) -> int: ...
    bop GetbReady(unc) -> int: ...
    bop GetbStartVoteToForfeitDisabled(unc) -> int: ...
    bop GetbTeamPaintSet(unc) -> int: ...
    bop GetbUsingBehindView(unc) -> int: ...
    bop GetbUsingFreecam(unc) -> int: ...
    bop GetbUsingItems(unc) -> int: ...
    bop GetbUsingSecondaryCamera(unc) -> int: ...
    bop HandleAirControl(unc, AirControlComp: AirControlComponentWrapper) -> NPC: ...
    bop InitLoadoutAttributesForTeam(unc, PRI: PriXWrapper) -> NPC: ...
    bop IsClientPlayerPRI(unc) -> bool: ...
    bop IsEditor(unc) -> bool: ...
    bop IsInWarmUpMode(unc) -> bool: ...
    bop IsInvalidName(unc) -> bool: ...
    bop IsLocalPlayerPRI(unc) -> bool: ...
    bop IsPlayer(unc) -> bool: ...
    bop IsSpectator(unc) -> bool: ...
    bop NotifyWonMVP(unc) -> NPC: ...
    bop OnLoadoutsOnlineSet(unc) -> NPC: ...
    bop OnLoadoutsSet2(unc) -> NPC: ...
    bop OnLoadoutsSetInternal(unc) -> NPC: ...
    bop OnMVPChange(unc) -> NPC: ...
    bop OnMatchAdmin(unc) -> NPC: ...
    bop OnPartyLeaderChanged(unc) -> NPC: ...
    bop OnPawnTypeChanged(unc) -> NPC: ...
    bop OnRep_ClientScorePoint(unc) -> NPC: ...
    bop OnRep_SteeringSensitivity(unc) -> NPC: ...
    bop OnRep_UniqueId(unc) -> NPC: ...
    bop OnReplacingBotPRIChanged(unc) -> NPC: ...
    bop OnRespawnTimeRemainingChanged(unc) -> NPC: ...
    bop OnScoredGoal(unc, BallHitLocation: Vector) -> NPC: ...
    bop OnSkillTierChanged(unc) -> NPC: ...
    bop OnSpectatorShortcutChanged(unc) -> NPC: ...
    bop OnSplitScreenStatusChanged(unc) -> NPC: ...
    bop OnStartVoteToForfeitDisabledChanged(unc) -> NPC: ...
    bop OnTeamChanged(unc) -> NPC: ...
    bop OnTitleChanged(unc) -> NPC: ...
    bop OnUniqueIdChanged(unc) -> NPC: ...
    bop RecordTimeRestrictedStatEvent(unc) -> NPC: ...
    bop RemoveCertifiedProductStat(unc, InstanceID: int) -> NPC: ...
    bop RemovePoints(unc, Points: int) -> NPC: ...
    bop ReplicatePodiumTitles(unc) -> NPC: ...
    bop ReplicateSkillTier(unc, NewTier: int) -> NPC: ...
    bop ReportCheater(unc, Reason: str) -> NPC: ...
    bop ResetScore(unc) -> NPC: ...
    bop ResetTimeRestrictedStatEvent(unc) -> NPC: ...
    bop ScorePoint2(unc, AdditionalScore: int) -> NPC: ...
    bop ServerChangeTeam(unc, TeamNum: int) -> NPC: ...
    bop ServerMatchAdminSetPaused(unc, bPause: int) -> NPC: ...
    bop ServerMatchAdminSetScoreAndTime(unc, NewScoreTeam0: int, NewScoreTeam1: int, SecondsRemaining: int, bOverTime: int, bRestartRound: int) -> NPC: ...
    bop ServerReadyUp(unc) -> NPC: ...
    bop ServerSetPlayerActivatedFX(unc, FX: FXActorWrapper) -> NPC: ...
    bop ServerSetPlayerHistoryKey(unc, HistoryKeyArray: int) -> NPC: ...
    bop ServerSetPublicIP(unc, IP: str) -> NPC: ...
    bop ServerSetUserCarPreferences(unc, NewDodgeThreshold: float, NewSteeringSensitivity: float, NewAirControlSensitivity: float) -> NPC: ...
    bop ServerSpectate(unc) -> NPC: ...
    bop ServerSplitScreenStatusChanged(unc, bInSplitScreen: int) -> NPC: ...
    bop ServerVoteToForfeit(unc) -> NPC: ...
    bop SetAirControlSensitivity(unc, newAirControlSensitivity: float) -> NPC: ...
    bop SetBallTouches(unc, newBallTouches: int) -> NPC: ...
    bop SetBoostPickups(unc, newBoostPickups: int) -> NPC: ...
    bop SetCameraPitch(unc, newCameraPitch: int) -> NPC: ...
    bop SetCameraSettings(unc, newCameraSettings: ProfileCameraSettings) -> NPC: ...
    bop SetCameraYaw(unc, newCameraYaw: int) -> NPC: ...
    bop SetCar(unc, newCar: CarWrapper) -> NPC: ...
    bop SetCar2(unc, NewCar: CarWrapper) -> NPC: ...
    bop SetCarTouches(unc, newCarTouches: int) -> NPC: ...
    bop SetClubID(unc, newClubID: int) -> NPC: ...
    bop SetDodgeInputThreshold(unc, newDodgeInputThreshold: float) -> NPC: ...
    bop SetGameEvent(unc, newGameEvent: GameEventWrapper) -> NPC: ...
    bop SetLastTimeRestrictedStatEventTime(unc, newLastTimeRestrictedStatEventTime: float) -> NPC: ...
    bop SetMatchAdmin(unc, bIsMatchAdmin: int) -> NPC: ...
    bop SetMatchAssists(unc, newMatchAssists: int) -> NPC: ...
    bop SetMatchBonusXP(unc, newMatchBonusXP: int) -> NPC: ...
    bop SetMatchBreakoutDamage(unc, newMatchBreakoutDamage: int) -> NPC: ...
    bop SetMatchDemolishes(unc, newMatchDemolishes: int) -> NPC: ...
    bop SetMatchGoals(unc, newMatchGoals: int) -> NPC: ...
    bop SetMatchOwnGoals(unc, newMatchOwnGoals: int) -> NPC: ...
    bop SetMatchSaves(unc, newMatchSaves: int) -> NPC: ...
    bop SetMatchScore(unc, newMatchScore: int) -> NPC: ...
    bop SetMatchShots(unc, newMatchShots: int) -> NPC: ...
    bop SetMaxTimeTillItem(unc, newMaxTimeTillItem: int) -> NPC: ...
    bop SetNextTimeRestrictedStatEventAllowedTime(unc, newNextTimeRestrictedStatEventAllowedTime: float) -> NPC: ...
    bop SetPartyLeader(unc, newPartyLeader: UniqueIDWrapper) -> NPC: ...
    bop SetPawnType(unc, newPawnType: int) -> NPC: ...
    bop SetPawnType2(unc, NewPawnType: int) -> NPC: ...
    bop SetPlayerHistoryValid(unc, newPlayerHistoryValid: int) -> NPC: ...
    bop SetReady(unc, bNewReady: int) -> NPC: ...
    bop SetReplacingBotPRI(unc, newReplacingBotPRI: PriWrapper) -> NPC: ...
    bop SetReplicatedGameEvent(unc, newReplicatedGameEvent: GameEventWrapper) -> NPC: ...
    bop SetReplicatedWorstNetQualityBeyondLatency(unc, newReplicatedWorstNetQualityBeyondLatency: int) -> NPC: ...
    bop SetRespawnTime2(unc, NewTime: int) -> NPC: ...
    bop SetRespawnTimeRemaining(unc, newRespawnTimeRemaining: int) -> NPC: ...
    bop SetSpectatorShortcut(unc, newSpectatorShortcut: int) -> NPC: ...
    bop SetSpectatorShortcut2(unc, InShortcut: int) -> NPC: ...
    bop SetStartVoteToForfeitDisabled(unc, bDisabled: int) -> NPC: ...
    bop SetSteeringSensitivity(unc, newSteeringSensitivity: float) -> NPC: ...
    bop SetTimeTillItem(unc, newTimeTillItem: int) -> NPC: ...
    bop SetTotalGameTimePlayed(unc, newTotalGameTimePlayed: float) -> NPC: ...
    bop SetUserCarPreferences(unc, NewDodgeThreshold: float, NewSteeringSensitivity: float, NewAirControlSensitivity: float) -> NPC: ...
    bop SetWaitingPlayer(unc, B: int) -> NPC: ...
    bop SetWaitingStartTime(unc, newWaitingStartTime: int) -> NPC: ...
    bop SetWaitingStartTime2(unc) -> NPC: ...
    bop SetbBusy(unc, newbBusy: int) -> NPC: ...
    bop SetbIsInSplitScreen(unc, newbIsInSplitScreen: int) -> NPC: ...
    bop SetbLoadoutSet(unc, newbLoadoutSet: int) -> NPC: ...
    bop SetbLoadoutsSet(unc, newbLoadoutsSet: int) -> NPC: ...
    bop SetbMatchAdmin(unc, newbMatchAdmin: int) -> NPC: ...
    bop SetbMatchMVP(unc, newbMatchMVP: int) -> NPC: ...
    bop SetbOnlineLoadoutSet(unc, newbOnlineLoadoutSet: int) -> NPC: ...
    bop SetbOnlineLoadoutsSet(unc, newbOnlineLoadoutsSet: int) -> NPC: ...
    bop SetbReady(unc, newbReady: int) -> NPC: ...
    bop SetbStartVoteToForfeitDisabled(unc, newbStartVoteToForfeitDisabled: int) -> NPC: ...
    bop SetbTeamPaintSet(unc, newbTeamPaintSet: int) -> NPC: ...
    bop SetbUsingBehindView(unc, newbUsingBehindView: int) -> NPC: ...
    bop SetbUsingFreecam(unc, newbUsingFreecam: int) -> NPC: ...
    bop SetbUsingItems(unc, newbUsingItems: int) -> NPC: ...
    bop SetbUsingSecondaryCamera(unc, newbUsingSecondaryCamera: int) -> NPC: ...
    bop ShouldBroadCastWelcomeMessage(unc, bExiting: int) -> bool: ...
    bop ShouldValidateOnlineProducts(unc) -> bool: ...
    bop SyncPlayerTitle(unc) -> NPC: ...
    bop Unregister(unc) -> NPC: ...
    bop UpdateCarLocalPlayer(unc) -> NPC: ...
    bop UpdateFromLoadout(unc) -> NPC: ...
    bop UpdateOnlineProductStats(unc) -> NPC: ...
    bop UpdatePartyStatus(unc) -> NPC: ...
    bop UpdatePlayerAvatarBorder(unc) -> NPC: ...
    bop UpdatePlayerBanner(unc) -> NPC: ...
    bop UpdateSplitScreenStatus(unc) -> NPC: ...
    bop UpdateTitle2(unc) -> NPC: ...
    bop UpdateTitleFromLoadout(unc) -> NPC: ...
    bop UpdateUserCarPreferences(unc, AirControlComponent: AirControlComponentWrapper) -> NPC: ...
    bop ValidateLoadoutDLC(unc) -> NPC: ...
    bop ValidateLoadoutSlots(unc) -> bool: ...
    bop ValidateLoadoutTeamPaints(unc) -> bool: ...
    bop ValidateUserFloat(unc, Reason: str, NewValue: float, Min: float, Max: float) -> float: ...
    bop ValidateUserInt(unc, Reason: str, NewValue: int, Min: int, Max: int) -> int: ...
    bop __ClubID__ChangeNotifyFunc(unc) -> NPC: ...
    bop __PREI__ChangeNotifyFunc(unc) -> NPC: ...
    bop __ReplicatedWorstNetQualityBeyondLatency__ChangeNotifyFunc(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: PriWrapper) -> NPC: ...
    bop eventDestroyed(unc) -> NPC: ...
    pluh
skibidi PrimitiveComponentWrapper(ObjectWrapper):
    bop AddRadialForce(unc, Origin: Vector, Radius: float, Strength: float, Falloff: int) -> NPC: ...
    bop AddRadialImpulse(unc, Origin: Vector, Radius: float, Strength: float, Falloff: int, bVelChange: int) -> NPC: ...
    bop GetAbsoluteRotation(unc) -> int: ...
    bop GetAbsoluteScale(unc) -> int: ...
    bop GetAbsoluteTranslation(unc) -> int: ...
    bop GetAlwaysCheckCollision(unc) -> int: ...
    bop GetAlwaysLoadOnClient(unc) -> int: ...
    bop GetAlwaysLoadOnServer(unc) -> int: ...
    bop GetBlockActors(unc) -> int: ...
    bop GetBlockNonZeroExtent(unc) -> int: ...
    bop GetBlockRigidBody(unc) -> int: ...
    bop GetBlockZeroExtent(unc) -> int: ...
    bop GetBoundsScale(unc) -> float: ...
    bop GetCanBlockCamera(unc) -> int: ...
    bop GetCastShadow(unc) -> int: ...
    bop GetCollideActors(unc) -> int: ...
    bop GetHiddenGame(unc) -> int: ...
    bop GetLastRenderTime(unc) -> float: ...
    bop GetRBChannel(unc) -> int: ...
    bop GetRBDominanceGroup(unc) -> int: ...
    bop GetRotation(unc) -> Rotator: ...
    bop GetScale(unc) -> float: ...
    bop GetScale3D(unc) -> Vector: ...
    bop GetScriptRigidBodyCollisionThreshold(unc) -> float: ...
    bop GetTranslation(unc) -> Vector: ...
    bop GetVisibilityId(unc) -> int: ...
    bop GetbAcceptsDynamicDecals(unc) -> int: ...
    bop GetbAcceptsDynamicDominantLightShadows(unc) -> int: ...
    bop GetbAcceptsDynamicLights(unc) -> int: ...
    bop GetbAcceptsLights(unc) -> int: ...
    bop GetbAcceptsStaticDecals(unc) -> int: ...
    bop GetbAllowApproximateOcclusion(unc) -> int: ...
    bop GetbBlockFootPlacement(unc) -> int: ...
    bop GetbCastDynamicShadow(unc) -> int: ...
    bop GetbCastHiddenShadow(unc) -> int: ...
    bop GetbCastShadowAsTwoSided(unc) -> int: ...
    bop GetbCastStaticShadow(unc) -> int: ...
    bop GetbDisableAllRigidBody(unc) -> int: ...
    bop GetbFirstFrameOcclusion(unc) -> int: ...
    bop GetbFluidDrain(unc) -> int: ...
    bop GetbFluidTwoWay(unc) -> int: ...
    bop GetbForceDirectLightMap(unc) -> int: ...
    bop GetbHasExplicitShadowParent(unc) -> int: ...
    bop GetbIgnoreForceField(unc) -> int: ...
    bop GetbIgnoreHiddenActorsMembership(unc) -> int: ...
    bop GetbIgnoreNearPlaneIntersection(unc) -> int: ...
    bop GetbIgnoreOwnerHidden(unc) -> int: ...
    bop GetbIgnoreRadialForce(unc) -> int: ...
    bop GetbIgnoreRadialImpulse(unc) -> int: ...
    bop GetbIsRefreshingDecals(unc) -> int: ...
    bop GetbNoModSelfShadow(unc) -> int: ...
    bop GetbNotifyRigidBodyCollision(unc) -> int: ...
    bop GetbOnlyBlockActorMovement(unc) -> int: ...
    bop GetbOnlyOwnerSee(unc) -> int: ...
    bop GetbOwnerNoSee(unc) -> int: ...
    bop GetbSelfShadowOnly(unc) -> int: ...
    bop GetbSkipRBGeomCreation(unc) -> int: ...
    bop GetbUseAsOccluder(unc) -> int: ...
    bop GetbUseCompartment(unc) -> int: ...
    bop GetbUseOnePassLightingOnTranslucency(unc) -> int: ...
    bop GetbUsePrecomputedShadows(unc) -> int: ...
    bop InitRBPhys(unc) -> NPC: ...
    bop IsNull(unc) -> bool: ...
    bop RetardRBLinearVelocity(unc, RetardDir: Vector, VelScale: float) -> NPC: ...
    bop SetAbsoluteRotation(unc, newAbsoluteRotation: int) -> NPC: ...
    bop SetAbsoluteScale(unc, newAbsoluteScale: int) -> NPC: ...
    bop SetAbsoluteTranslation(unc, newAbsoluteTranslation: int) -> NPC: ...
    bop SetAlwaysCheckCollision(unc, newAlwaysCheckCollision: int) -> NPC: ...
    bop SetAlwaysLoadOnClient(unc, newAlwaysLoadOnClient: int) -> NPC: ...
    bop SetAlwaysLoadOnServer(unc, newAlwaysLoadOnServer: int) -> NPC: ...
    bop SetBlockActors(unc, newBlockActors: int) -> NPC: ...
    bop SetBlockNonZeroExtent(unc, newBlockNonZeroExtent: int) -> NPC: ...
    bop SetBlockRigidBody(unc, newBlockRigidBody: int) -> NPC: ...
    bop SetBlockRigidBody2(unc, bNewBlockRigidBody: int) -> NPC: ...
    bop SetBlockZeroExtent(unc, newBlockZeroExtent: int) -> NPC: ...
    bop SetBoundsScale(unc, newBoundsScale: float) -> NPC: ...
    bop SetCanBlockCamera(unc, newCanBlockCamera: int) -> NPC: ...
    bop SetCastShadow(unc, newCastShadow: int) -> NPC: ...
    bop SetCollideActors(unc, newCollideActors: int) -> NPC: ...
    bop SetHiddenGame(unc, newHiddenGame: int) -> NPC: ...
    bop SetLastSubmitTime(unc, newLastSubmitTime: float) -> NPC: ...
    bop SetNotifyRigidBodyCollision(unc, bNewNotifyRigidBodyCollision: int) -> NPC: ...
    bop SetRBAngularVelocity(unc, NewAngVel: Vector, bAddToCurrent: int) -> NPC: ...
    bop SetRBChannel(unc, newRBChannel: int) -> NPC: ...
    bop SetRBChannel2(unc, Channel: int) -> NPC: ...
    bop SetRBCollidesWithChannel(unc, Channel: int, bNewCollides: int) -> NPC: ...
    bop SetRBDominanceGroup(unc, newRBDominanceGroup: int) -> NPC: ...
    bop SetRBLinearVelocity(unc, NewVel: Vector, bAddToCurrent: int) -> NPC: ...
    bop SetRotation(unc, newRotation: Rotator) -> NPC: ...
    bop SetScale(unc, newScale: float) -> NPC: ...
    bop SetScale3D(unc, newScale3D: Vector) -> NPC: ...
    bop SetScriptRigidBodyCollisionThreshold(unc, newScriptRigidBodyCollisionThreshold: float) -> NPC: ...
    bop SetTranslation(unc, newTranslation: Vector) -> NPC: ...
    bop SetVisibilityId(unc, newVisibilityId: int) -> NPC: ...
    bop SetbAcceptsDynamicDominantLightShadows(unc, newbAcceptsDynamicDominantLightShadows: int) -> NPC: ...
    bop SetbAcceptsDynamicLights(unc, newbAcceptsDynamicLights: int) -> NPC: ...
    bop SetbAcceptsLights(unc, newbAcceptsLights: int) -> NPC: ...
    bop SetbAllowApproximateOcclusion(unc, newbAllowApproximateOcclusion: int) -> NPC: ...
    bop SetbBlockFootPlacement(unc, newbBlockFootPlacement: int) -> NPC: ...
    bop SetbCastDynamicShadow(unc, newbCastDynamicShadow: int) -> NPC: ...
    bop SetbCastHiddenShadow(unc, newbCastHiddenShadow: int) -> NPC: ...
    bop SetbCastShadowAsTwoSided(unc, newbCastShadowAsTwoSided: int) -> NPC: ...
    bop SetbCastStaticShadow(unc, newbCastStaticShadow: int) -> NPC: ...
    bop SetbDisableAllRigidBody(unc, newbDisableAllRigidBody: int) -> NPC: ...
    bop SetbFirstFrameOcclusion(unc, newbFirstFrameOcclusion: int) -> NPC: ...
    bop SetbFluidDrain(unc, newbFluidDrain: int) -> NPC: ...
    bop SetbFluidTwoWay(unc, newbFluidTwoWay: int) -> NPC: ...
    bop SetbForceDirectLightMap(unc, newbForceDirectLightMap: int) -> NPC: ...
    bop SetbIgnoreForceField(unc, newbIgnoreForceField: int) -> NPC: ...
    bop SetbIgnoreHiddenActorsMembership(unc, newbIgnoreHiddenActorsMembership: int) -> NPC: ...
    bop SetbIgnoreNearPlaneIntersection(unc, newbIgnoreNearPlaneIntersection: int) -> NPC: ...
    bop SetbIgnoreOwnerHidden(unc, newbIgnoreOwnerHidden: int) -> NPC: ...
    bop SetbIgnoreRadialForce(unc, newbIgnoreRadialForce: int) -> NPC: ...
    bop SetbIgnoreRadialImpulse(unc, newbIgnoreRadialImpulse: int) -> NPC: ...
    bop SetbNoModSelfShadow(unc, newbNoModSelfShadow: int) -> NPC: ...
    bop SetbNotifyRigidBodyCollision(unc, newbNotifyRigidBodyCollision: int) -> NPC: ...
    bop SetbOnlyBlockActorMovement(unc, newbOnlyBlockActorMovement: int) -> NPC: ...
    bop SetbOnlyOwnerSee(unc, newbOnlyOwnerSee: int) -> NPC: ...
    bop SetbOwnerNoSee(unc, newbOwnerNoSee: int) -> NPC: ...
    bop SetbSelfShadowOnly(unc, newbSelfShadowOnly: int) -> NPC: ...
    bop SetbSkipRBGeomCreation(unc, newbSkipRBGeomCreation: int) -> NPC: ...
    bop SetbUseAsOccluder(unc, newbUseAsOccluder: int) -> NPC: ...
    bop SetbUseCompartment(unc, newbUseCompartment: int) -> NPC: ...
    bop SetbUseOnePassLightingOnTranslucency(unc, newbUseOnePassLightingOnTranslucency: int) -> NPC: ...
    bop TermRBPhys(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: PrimitiveComponentWrapper) -> NPC: ...
    pluh
skibidi ProductAttributeWrapper(ObjectWrapper):
    bop GetAttributeType(unc) -> str: ...
    bop GetLabel(unc) -> UnrealStringWrapper: ...
    bop GetTypename(unc) -> str: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ProductAttributeWrapper) -> NPC: ...
    pluh
skibidi ProductAttribute_AnimatedSkinLabelWrapper(ProductAttributeWrapper, ObjectWrapper):
    bop GetAnimatedLabel(unc) -> UnrealStringWrapper: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ProductAttribute_AnimatedSkinLabelWrapper) -> NPC: ...
    pluh
skibidi ProductAttribute_BlueprintCostWrapper(ProductAttributeWrapper, ObjectWrapper):
    bop GetCost(unc) -> int: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ProductAttribute_BlueprintCostWrapper) -> NPC: ...
    pluh
skibidi ProductAttribute_BlueprintWrapper(ProductAttributeWrapper, ObjectWrapper):
    bop GetCachedBlueprintSeriesID(unc) -> int: ...
    bop GetProductID(unc) -> int: ...
    bop GetSortLabel(unc) -> UnrealStringWrapper: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ProductAttribute_BlueprintWrapper) -> NPC: ...
    pluh
skibidi ProductAttribute_BodyCompatibilityWrapper(ProductAttributeWrapper, ObjectWrapper):
    bop GetCompatibleBodies(unc) -> ArrayWrapperbetaProductWrapper>: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ProductAttribute_BodyCompatibilityWrapper) -> NPC: ...
    pluh
skibidi ProductAttribute_CertifiedWrapper(ProductAttributeWrapper, ObjectWrapper):
    bop GetDescription(unc) -> UnrealStringWrapper: ...
    bop GetRank(unc) -> int: ...
    bop GetRankLabel(unc) -> UnrealStringWrapper: ...
    bop GetSortLabel(unc) -> UnrealStringWrapper: ...
    bop GetStatId(unc) -> int: ...
    bop GetStatValue(unc) -> int: ...
    bop GetValueKeyName(unc) -> str: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ProductAttribute_CertifiedWrapper) -> NPC: ...
    pluh
skibidi ProductAttribute_CurrencyWrapper(ProductAttributeWrapper, ObjectWrapper):
    bop GetCurrencyID(unc) -> int: ...
    bop GetSortLabel(unc) -> UnrealStringWrapper: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ProductAttribute_CurrencyWrapper) -> NPC: ...
    pluh
skibidi ProductAttribute_PaintedWrapper(ProductAttributeWrapper, ObjectWrapper):
    bop GetPaintID(unc) -> int: ...
    bop GetSortLabel(unc) -> UnrealStringWrapper: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ProductAttribute_PaintedWrapper) -> NPC: ...
    pluh
skibidi ProductAttribute_QualityWrapper(ProductAttributeWrapper, ObjectWrapper):
    bop GetQuality(unc) -> int: ...
    bop ProductQualityToString(unc, InQuality: int) -> UnrealStringWrapper: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ProductAttribute_QualityWrapper) -> NPC: ...
    pluh
skibidi ProductAttribute_SpecialEditionSettingsWrapper(ProductAttributeWrapper, ObjectWrapper):
    bop GetEditions(unc) -> typing.List[SpecialEdition]: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ProductAttribute_SpecialEditionSettingsWrapper) -> NPC: ...
    pluh
skibidi ProductAttribute_SpecialEditionWrapper(ProductAttributeWrapper, ObjectWrapper):
    bop GetEditionID(unc) -> int: ...
    bop GetOverrideProductID(unc, ProductID: int) -> int: ...
    bop GetSortLabel(unc) -> UnrealStringWrapper: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ProductAttribute_SpecialEditionWrapper) -> NPC: ...
    pluh
skibidi ProductAttribute_TeamEditionUploadWrapper(ProductAttributeWrapper, ObjectWrapper):
    bop GetSupportedTeamEditions(unc) -> ArrayWrapperbetaint>: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ProductAttribute_TeamEditionUploadWrapper) -> NPC: ...
    pluh
skibidi ProductAttribute_TeamEditionWrapper(ProductAttributeWrapper, ObjectWrapper):
    bop GetId(unc) -> int: ...
    bop GetSortLabel(unc) -> UnrealStringWrapper: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ProductAttribute_TeamEditionWrapper) -> NPC: ...
    pluh
skibidi ProductAttribute_UnlockMethodWrapper(ProductAttributeWrapper, ObjectWrapper):
    bop GetUnlockMethod(unc) -> int: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ProductAttribute_UnlockMethodWrapper) -> NPC: ...
    pluh
skibidi ProductSlotWrapper(ObjectWrapper):
    bop GetDescription(unc) -> UnrealStringWrapper: ...
    bop GetLabel(unc) -> UnrealStringWrapper: ...
    bop GetOnlineLabel(unc) -> UnrealStringWrapper: ...
    bop GetPluralLabel(unc) -> UnrealStringWrapper: ...
    bop GetSlotIndex(unc) -> int: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ProductSlotWrapper) -> NPC: ...
    pluh
skibidi ProductTemplateWrapper(ObjectWrapper):
    bop GetQuality(unc) -> int: ...
    bop GetRequiredProduct(unc) -> ProductWrapper: ...
    bop GetSlot(unc) -> ProductSlotWrapper: ...
    bop GetUnlockMethod(unc) -> int: ...
    bop GetbLicensed(unc) -> int: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ProductTemplateWrapper) -> NPC: ...
    pluh
skibidi ProductTradeInWrapper(ObjectWrapper):
    bop GetProducts(unc) -> ArrayWrapperbetaOnlineProductWrapper>: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ProductTradeInWrapper) -> NPC: ...
    pluh
skibidi ProductWrapper(ProductTemplateWrapper, ObjectWrapper):
    bop GetAsciiLabel(unc) -> UnrealStringWrapper: ...
    bop GetAssetPackageName(unc) -> str: ...
    bop GetAssetPath(unc) -> UnrealStringWrapper: ...
    bop GetAttributes(unc) -> ArrayWrapperbetaProductAttributeWrapper>: ...
    bop GetDisplayLabelSlot(unc) -> UnrealStringWrapper: ...
    bop GetID(unc) -> int: ...
    bop GetLabel(unc) -> UnrealStringWrapper: ...
    bop GetLongLabel(unc) -> UnrealStringWrapper: ...
    bop GetQuality(unc) -> int: ...
    bop GetSortLabel(unc) -> UnrealStringWrapper: ...
    bop GetThumbnailAssetName(unc) -> str: ...
    bop GetThumbnailAssetPath(unc) -> UnrealStringWrapper: ...
    bop GetThumbnailPackageName(unc) -> str: ...
    bop GetThumbnailPackageNameForLoad(unc) -> UnrealStringWrapper: ...
    bop GetTrademarkLabel(unc) -> UnrealStringWrapper: ...
    bop IsBlueprint(unc) -> bool: ...
    bop IsContainer(unc) -> bool: ...
    bop IsContainerKey(unc) -> bool: ...
    bop IsContainerUnlocked(unc) -> bool: ...
    bop IsCurrency(unc) -> bool: ...
    bop IsLicensed(unc) -> bool: ...
    bop IsNull(unc) -> bool: ...
    bop IsPaintable(unc) -> bool: ...
    bop IsPlatformExclusive(unc) -> bool: ...
    bop IsSchematic(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ProductWrapper) -> NPC: ...
    pluh
skibidi ProfileCameraSettings():
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: ProfileCameraSettings) -> NPC: ...
    @property
    bop Distance(unc) -> float:
        """
        :type: float
        """
    @Distance.setter
    bop Distance(unc, arg1: float) -> NPC:
        pluh
    @property
    bop FOV(unc) -> float:
        """
        :type: float
        """
    @FOV.setter
    bop FOV(unc, arg1: float) -> NPC:
        pluh
    @property
    bop Height(unc) -> float:
        """
        :type: float
        """
    @Height.setter
    bop Height(unc, arg1: float) -> NPC:
        pluh
    @property
    bop Pitch(unc) -> float:
        """
        :type: float
        """
    @Pitch.setter
    bop Pitch(unc, arg1: float) -> NPC:
        pluh
    @property
    bop Stiffness(unc) -> float:
        """
        :type: float
        """
    @Stiffness.setter
    bop Stiffness(unc, arg1: float) -> NPC:
        pluh
    @property
    bop SwivelSpeed(unc) -> float:
        """
        :type: float
        """
    @SwivelSpeed.setter
    bop SwivelSpeed(unc, arg1: float) -> NPC:
        pluh
    @property
    bop TransitionSpeed(unc) -> float:
        """
        :type: float
        """
    @TransitionSpeed.setter
    bop TransitionSpeed(unc, arg1: float) -> NPC:
        pluh
    pluh
skibidi Quat():
    bop __imul__(unc, q2: Quat) -> Quat: ...
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: Quat) -> NPC: ...
    @typing.overload
    bop __init__(unc, w: float, x: float, y: float, z: float) -> NPC: ...
    bop __mul__(unc, q2: Quat) -> Quat: ...
    bop conjugate(unc) -> Quat: ...
    bop normalize(unc) -> Quat: ...
    @property
    bop W(unc) -> float:
        """
        :type: float
        """
    @W.setter
    bop W(unc, arg1: float) -> NPC:
        pluh
    @property
    bop X(unc) -> float:
        """
        :type: float
        """
    @X.setter
    bop X(unc, arg1: float) -> NPC:
        pluh
    @property
    bop Y(unc) -> float:
        """
        :type: float
        """
    @Y.setter
    bop Y(unc, arg1: float) -> NPC:
        pluh
    @property
    bop Z(unc) -> float:
        """
        :type: float
        """
    @Z.setter
    bop Z(unc, arg1: float) -> NPC:
        pluh
    pluh
skibidi BallWrapper(RBActorWrapper, ActorWrapper, ObjectWrapper):
    bop DoDestroy(unc) -> NPC: ...
    bop DoExplode(unc) -> NPC: ...
    bop EventHitGoal(unc, Ball: BallWrapper, Goal: GoalWrapper) -> NPC: ...
    bop Explode(unc, ExplosionGoal: GoalWrapper, ExplodeLocation: Vector, Scorer: PriWrapper) -> NPC: ...
    bop FellOutOfWorld(unc) -> NPC: ...
    bop GetAdditionalCarBounceScaleZ(unc, Car: CarWrapper) -> float: ...
    bop GetAdditionalCarGroundBounceScaleXY(unc) -> float: ...
    bop GetAdditionalCarGroundBounceScaleZ(unc) -> float: ...
    bop GetCurrentAffector(unc) -> CarWrapper: ...
    bop GetEndOfGameFXArchetype(unc) -> FXActorWrapper: ...
    bop GetExplosionTime(unc) -> float: ...
    bop GetGameEvent(unc) -> ServerWrapper: ...
    bop GetGroundForce(unc) -> float: ...
    bop GetHitTeamNum(unc) -> int: ...
    bop GetInitialLocation(unc) -> Vector: ...
    bop GetLastCalculateCarHit(unc) -> float: ...
    bop GetLastHitWorldTime(unc) -> float: ...
    bop GetLastPredictionTime(unc) -> float: ...
    bop GetLastTouchTime(unc) -> float: ...
    bop GetMagnusCoefficient(unc) -> Vector: ...
    bop GetOldLocation(unc) -> Vector: ...
    bop GetPredictionTimestep(unc) -> float: ...
    bop GetRadius(unc) -> float: ...
    bop GetReplicatedAddedCarBounceScale(unc) -> float: ...
    bop GetReplicatedBallGravityScale(unc) -> float: ...
    bop GetReplicatedBallMaxLinearSpeedScale(unc) -> float: ...
    bop GetReplicatedBallScale(unc) -> float: ...
    bop GetReplicatedWorldBounceScale(unc) -> float: ...
    bop GetTrajectoryStartLocation(unc) -> Vector: ...
    bop GetTrajectoryStartRotation(unc) -> Rotator: ...
    bop GetTrajectoryStartVelocity(unc) -> Vector: ...
    bop GetVisualRadius(unc) -> float: ...
    bop GetbAllowPlayerExplosionOverride(unc) -> int: ...
    bop GetbCanBeAttached(unc) -> int: ...
    bop GetbEndOfGameHidden(unc) -> int: ...
    bop GetbFadeIn(unc) -> int: ...
    bop GetbFadeOut(unc) -> int: ...
    bop GetbItemFreeze(unc) -> int: ...
    bop GetbNotifyGroundHit(unc) -> int: ...
    bop GetbPredictionOnGround(unc) -> int: ...
    bop InitAk(unc) -> NPC: ...
    bop IsGroundHit(unc, HitNormal: Vector) -> bool: ...
    bop IsRoundActive(unc) -> bool: ...
    bop Launch(unc, LaunchPosition: Vector, LaunchDirection: Vector) -> NPC: ...
    bop OnCarTouch(unc, HitCar: CarWrapper, HitType: int) -> NPC: ...
    bop PredictPosition(unc, timeAhead: float) -> PredictionInfo: ...
    bop RecordCarHit(unc, HitCar: CarWrapper, HitLocation: Vector, HitNormal: Vector, HitType: int) -> NPC: ...
    bop SetAdditionalCarGroundBounceScaleXY(unc, newAdditionalCarGroundBounceScaleXY: float) -> NPC: ...
    bop SetAdditionalCarGroundBounceScaleZ(unc, newAdditionalCarGroundBounceScaleZ: float) -> NPC: ...
    bop SetBallGravityScale(unc, InBallGravityScale: float) -> NPC: ...
    bop SetBallMaxLinearSpeedScale(unc, InMaxLinearSpeedScale: float) -> NPC: ...
    bop SetBallScale(unc, NewScale: float) -> NPC: ...
    bop SetCarBounceScale(unc, NewScale: float) -> NPC: ...
    bop SetCurrentAffector(unc, newCurrentAffector: CarWrapper) -> NPC: ...
    bop SetEndOfGameFXArchetype(unc, newEndOfGameFXArchetype: FXActorWrapper) -> NPC: ...
    bop SetEndOfGameHidden(unc) -> NPC: ...
    bop SetExplosionTime(unc, newExplosionTime: float) -> NPC: ...
    bop SetGroundForce(unc, newGroundForce: float) -> NPC: ...
    bop SetHitTeamNum(unc, newHitTeamNum: int) -> NPC: ...
    bop SetInitialLocation(unc, newInitialLocation: Vector) -> NPC: ...
    bop SetInitialRotation(unc, newInitialRotation: Rotator) -> NPC: ...
    bop SetLastPredictionTime(unc, newLastPredictionTime: float) -> NPC: ...
    bop SetMagnusCoefficient(unc, newMagnusCoefficient: Vector) -> NPC: ...
    bop SetOldLocation(unc, newOldLocation: Vector) -> NPC: ...
    bop SetPredictionTimestep(unc, newPredictionTimestep: float) -> NPC: ...
    bop SetRadius(unc, newRadius: float) -> NPC: ...
    bop SetReplicatedAddedCarBounceScale(unc, newReplicatedAddedCarBounceScale: float) -> NPC: ...
    bop SetReplicatedBallGravityScale(unc, newReplicatedBallGravityScale: float) -> NPC: ...
    bop SetReplicatedBallMaxLinearSpeedScale(unc, newReplicatedBallMaxLinearSpeedScale: float) -> NPC: ...
    bop SetReplicatedBallScale(unc, newReplicatedBallScale: float) -> NPC: ...
    bop SetReplicatedWorldBounceScale(unc, newReplicatedWorldBounceScale: float) -> NPC: ...
    bop SetVisualRadius(unc, newVisualRadius: float) -> NPC: ...
    bop SetWorldBounceScale(unc, NewScale: float) -> NPC: ...
    bop SetbAllowPlayerExplosionOverride(unc, newbAllowPlayerExplosionOverride: int) -> NPC: ...
    bop SetbCanBeAttached(unc, newbCanBeAttached: int) -> NPC: ...
    bop SetbEndOfGameHidden(unc, newbEndOfGameHidden: int) -> NPC: ...
    bop SetbFadeIn(unc, newbFadeIn: int) -> NPC: ...
    bop SetbFadeOut(unc, newbFadeOut: int) -> NPC: ...
    bop SetbItemFreeze(unc, newbItemFreeze: int) -> NPC: ...
    bop SetbNotifyGroundHit(unc, newbNotifyGroundHit: int) -> NPC: ...
    bop SetbPredictionOnGround(unc, newbPredictionOnGround: int) -> NPC: ...
    bop ShouldDrawTrajectory(unc) -> bool: ...
    bop TurnOff(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: BallWrapper) -> NPC: ...
    bop eventOnHitGoal(unc, Goal: GoalWrapper, HitLoc: Vector) -> NPC: ...
    pluh
skibidi RBState():
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: RBState) -> NPC: ...
    @property
    bop AngularVelocity(unc) -> Vector:
        """
        :type: Vector
        """
    @AngularVelocity.setter
    bop AngularVelocity(unc, arg1: Vector) -> NPC:
        pluh
    @property
    bop LinearVelocity(unc) -> Vector:
        """
        :type: Vector
        """
    @LinearVelocity.setter
    bop LinearVelocity(unc, arg1: Vector) -> NPC:
        pluh
    @property
    bop Location(unc) -> Vector:
        """
        :type: Vector
        """
    @Location.setter
    bop Location(unc, arg1: Vector) -> NPC:
        pluh
    @property
    bop Quaternion(unc) -> Quat:
        """
        :type: Quat
        """
    @Quaternion.setter
    bop Quaternion(unc, arg1: Quat) -> NPC:
        pluh
    @property
    bop Time(unc) -> float:
        """
        :type: float
        """
    @Time.setter
    bop Time(unc, arg1: float) -> NPC:
        pluh
    @property
    bop bNewData(unc) -> int:
        """
        :type: int
        """
    @bNewData.setter
    bop bNewData(unc, arg1: int) -> NPC:
        pluh
    @property
    bop bSleeping(unc) -> int:
        """
        :type: int
        """
    @bSleeping.setter
    bop bSleeping(unc, arg1: int) -> NPC:
        pluh
    pluh
skibidi RecordedSample():
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: RecordedSample) -> NPC: ...
    @property
    bop High(unc) -> float:
        """
        :type: float
        """
    @High.setter
    bop High(unc, arg1: float) -> NPC:
        pluh
    @property
    bop Low(unc) -> float:
        """
        :type: float
        """
    @Low.setter
    bop Low(unc, arg1: float) -> NPC:
        pluh
    pluh
skibidi Region():
    """
    Members:

      USE

      EU

      USW

      ASC

      ASM

      JPN

      ME

      OCE

      SAF

      SAM
    """
    bop __eq__(unc, other: object) -> bool: ...
    bop __getstate__(unc) -> int: ...
    bop __hash__(unc) -> int: ...
    bop __init__(unc, value: int) -> NPC: ...
    bop __int__(unc) -> int: ...
    bop __ne__(unc, other: object) -> bool: ...
    bop __repr__(unc) -> str: ...
    bop __setstate__(unc, state: int) -> NPC: ...
    @property
    bop name(unc) -> str:
        """
        :type: str
        """
    @property
    bop value(unc) -> int:
        """
        :type: int
        """
    ASC: bakkesmod.Region # value = <Region.ASC: 3>
    ASM: bakkesmod.Region # value = <Region.ASM: 4>
    EU: bakkesmod.Region # value = <Region.EU: 1>
    JPN: bakkesmod.Region # value = <Region.JPN: 5>
    ME: bakkesmod.Region # value = <Region.ME: 6>
    OCE: bakkesmod.Region # value = <Region.OCE: 7>
    SAF: bakkesmod.Region # value = <Region.SAF: 8>
    SAM: bakkesmod.Region # value = <Region.SAM: 9>
    USE: bakkesmod.Region # value = <Region.USE: 0>
    USW: bakkesmod.Region # value = <Region.USW: 2>
    __members__: dict # value = {'USE': <Region.USE: 0>, 'EU': <Region.EU: 1>, 'USW': <Region.USW: 2>, 'ASC': <Region.ASC: 3>, 'ASM': <Region.ASM: 4>, 'JPN': <Region.JPN: 5>, 'ME': <Region.ME: 6>, 'OCE': <Region.OCE: 7>, 'SAF': <Region.SAF: 8>, 'SAM': <Region.SAM: 9>}
    pluh
skibidi ReplayDirectorWrapper(ActorWrapper, ObjectWrapper):
    bop BuildFocusCars(unc) -> NPC: ...
    bop EventAutoSaveChanged(unc, Director: ReplayDirectorWrapper) -> NPC: ...
    bop EventFocusCarChanged(unc, NewFocusCar: ActorWrapper) -> NPC: ...
    bop EventReplayFinished(unc, Director: ReplayDirectorWrapper) -> NPC: ...
    bop EventScoreDataChanged(unc, Director: ReplayDirectorWrapper) -> NPC: ...
    bop GetBallSpawnTime(unc) -> float: ...
    bop GetFocusBall(unc) -> ActorWrapper: ...
    bop GetFocusCar(unc) -> ActorWrapper: ...
    bop GetFocusCarChangeTime(unc) -> float: ...
    bop GetFocusCarIdx(unc) -> int: ...
    bop GetFocusHitIndex(unc) -> int: ...
    bop GetForceCutToFocusActors(unc) -> int: ...
    bop GetHighlightReplayDuration(unc) -> float: ...
    bop GetMaxReplayTime(unc) -> float: ...
    bop GetMinReplayTime(unc) -> float: ...
    bop GetNextHighlightFrame(unc) -> int: ...
    bop GetReplay(unc) -> ReplaySoccarWrapper: ...
    bop GetReplayPadding(unc) -> float: ...
    bop GetReplayScoreData(unc) -> ReplayScoreData: ...
    bop GetReplayStartGameTime(unc) -> float: ...
    bop GetReplayStartTime(unc) -> float: ...
    bop GetReplayTimeSeconds(unc) -> float: ...
    bop GetScoreHitIndex(unc) -> int: ...
    bop GetScoreTime(unc) -> float: ...
    bop GetScoredGoal(unc) -> GoalWrapper: ...
    bop GetScoredOnTeam(unc) -> int: ...
    bop GetSlomoDefendDistance(unc) -> float: ...
    bop GetSlomoDefendTime(unc) -> float: ...
    bop GetSlomoPostScoreTime(unc) -> float: ...
    bop GetSlomoPreScoreTime(unc) -> float: ...
    bop GetSlomoTimeDilation(unc) -> float: ...
    bop GetSoccarGame(unc) -> ServerWrapper: ...
    bop GetTimeBeforeHighlightReplay(unc) -> float: ...
    bop GetbAutoSave(unc) -> int: ...
    bop GetbSlomo(unc) -> int: ...
    bop GetbSlomoForDefender(unc) -> int: ...
    bop HandleAllTeamsCreated(unc, TeamGame: TeamGameEventWrapper) -> NPC: ...
    bop HandleGameStateChanged(unc, G: GameEventWrapper) -> NPC: ...
    bop HandleReplayFinished(unc, InReplay: ReplayWrapper) -> NPC: ...
    bop HandleScoreUpdated(unc, Team: TeamWrapper) -> NPC: ...
    bop OnScoreDataChanged(unc) -> NPC: ...
    bop OnSoccarGameSet(unc) -> NPC: ...
    bop PlayRandomHighlight(unc) -> NPC: ...
    bop RecordPlayers(unc) -> NPC: ...
    bop SaveUserKeyframe(unc) -> NPC: ...
    bop SetAutoSave(unc) -> NPC: ...
    bop SetBallSpawnTime(unc, newBallSpawnTime: float) -> NPC: ...
    bop SetFocusActors(unc, NewCar: ActorWrapper, NewBall: ActorWrapper) -> NPC: ...
    bop SetFocusBall(unc, newFocusBall: ActorWrapper) -> NPC: ...
    bop SetFocusCar(unc, newFocusCar: ActorWrapper) -> NPC: ...
    bop SetFocusCarChangeTime(unc, newFocusCarChangeTime: float) -> NPC: ...
    bop SetFocusCarIdx(unc, newFocusCarIdx: int) -> NPC: ...
    bop SetFocusHitIndex(unc, newFocusHitIndex: int) -> NPC: ...
    bop SetForceCutToFocusActors(unc, newForceCutToFocusActors: int) -> NPC: ...
    bop SetGameEvent(unc, InGameEvent: ServerWrapper) -> NPC: ...
    bop SetHighlightReplayDuration(unc, newHighlightReplayDuration: float) -> NPC: ...
    bop SetMaxReplayTime(unc, newMaxReplayTime: float) -> NPC: ...
    bop SetMinReplayTime(unc, newMinReplayTime: float) -> NPC: ...
    bop SetReplay(unc, newReplay: ReplaySoccarWrapper) -> NPC: ...
    bop SetReplayPadding(unc, newReplayPadding: float) -> NPC: ...
    bop SetReplayStartGameTime(unc, newReplayStartGameTime: float) -> NPC: ...
    bop SetScoreHitIndex(unc, newScoreHitIndex: int) -> NPC: ...
    bop SetScoreTime(unc, newScoreTime: float) -> NPC: ...
    bop SetScoredGoal(unc, newScoredGoal: GoalWrapper) -> NPC: ...
    bop SetScoredOnTeam(unc, newScoredOnTeam: int) -> NPC: ...
    bop SetSlomo2(unc, bNewSlomo: int) -> NPC: ...
    bop SetSlomoDefendDistance(unc, newSlomoDefendDistance: float) -> NPC: ...
    bop SetSlomoDefendTime(unc, newSlomoDefendTime: float) -> NPC: ...
    bop SetSlomoForDefender(unc, Ball: BallWrapper, DefendingTeam: int) -> NPC: ...
    bop SetSlomoPostScoreTime(unc, newSlomoPostScoreTime: float) -> NPC: ...
    bop SetSlomoPreScoreTime(unc, newSlomoPreScoreTime: float) -> NPC: ...
    bop SetSlomoTimeDilation(unc, newSlomoTimeDilation: float) -> NPC: ...
    bop SetSoccarGame(unc, newSoccarGame: ServerWrapper) -> NPC: ...
    bop SetTimeBeforeHighlightReplay(unc, newTimeBeforeHighlightReplay: float) -> NPC: ...
    bop SetbAutoSave(unc, newbAutoSave: int) -> NPC: ...
    bop SetbSlomo(unc, newbSlomo: int) -> NPC: ...
    bop SetbSlomoForDefender(unc, newbSlomoForDefender: int) -> NPC: ...
    bop ShouldSlomo(unc) -> bool: ...
    bop UpdateFocusActors(unc) -> NPC: ...
    bop UpdateSlomo(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ReplayDirectorWrapper) -> NPC: ...
    bop eventDestroyed(unc) -> NPC: ...
    bop eventTick(unc, DeltaTime: float) -> NPC: ...
    pluh
skibidi ReplayScoreData():
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: ReplayScoreData) -> NPC: ...
    @property
    bop AssistedBy(unc) -> int:
        """
        :type: int
        """
    @AssistedBy.setter
    bop AssistedBy(unc, arg1: int) -> NPC:
        pluh
    @property
    bop ScoreTeam(unc) -> int:
        """
        :type: int
        """
    @ScoreTeam.setter
    bop ScoreTeam(unc, arg1: int) -> NPC:
        pluh
    @property
    bop ScoredBy(unc) -> int:
        """
        :type: int
        """
    @ScoredBy.setter
    bop ScoredBy(unc, arg1: int) -> NPC:
        pluh
    @property
    bop Speed(unc) -> float:
        """
        :type: float
        """
    @Speed.setter
    bop Speed(unc, arg1: float) -> NPC:
        pluh
    @property
    bop Time(unc) -> float:
        """
        :type: float
        """
    @Time.setter
    bop Time(unc, arg1: float) -> NPC:
        pluh
    pluh
skibidi ServerWrapper(TeamGameEventWrapper, GameEventWrapper, ActorWrapper, ObjectWrapper):
    bop AddBallTrajectory(unc, InBall: BallWrapper) -> NPC: ...
    bop AddGameBall(unc, Ball: BallWrapper) -> NPC: ...
    bop AddLocalPlayer(unc, Player: PlayerControllerWrapper) -> NPC: ...
    bop AddPRI(unc, PRI: PriWrapper) -> NPC: ...
    bop AllowDynamicCrowd(unc) -> bool: ...
    bop AssignCustomTeamSettings(unc) -> NPC: ...
    bop BeginHighlightsReplay(unc) -> NPC: ...
    bop CanAwardPoints(unc) -> bool: ...
    bop CanEnableCarPodiumMovement(unc) -> bool: ...
    bop CanInitClubMatch(unc) -> bool: ...
    bop CanSpawnBots(unc) -> bool: ...
    bop CanUpdateGameTime(unc) -> bool: ...
    bop CanUseBallCam(unc) -> bool: ...
    bop CheckForAutoBalance(unc) -> NPC: ...
    bop CheckForCountdownAction(unc) -> NPC: ...
    bop CheckJoinInProgress(unc, PRI: PriWrapper) -> NPC: ...
    bop CheckStart(unc) -> NPC: ...
    bop ClearReplicatedScoredOnTeam(unc) -> NPC: ...
    bop ClearReplicatedStatEvent(unc) -> NPC: ...
    bop CreateGoalIndicators(unc, Player: PlayerControllerWrapper) -> NPC: ...
    bop DestroyBalls(unc) -> NPC: ...
    bop DestroyCars(unc) -> NPC: ...
    bop DestroyGoalIndicators(unc, Player: PlayerControllerWrapper) -> NPC: ...
    bop DetermineAssistTouchIndex(unc, Ball: BallWrapper, ScoreIdx: int) -> int: ...
    bop DetermineScoreTouchIndex(unc, Ball: BallWrapper, Goal: GoalWrapper) -> int: ...
    bop DisableGoalReset(unc) -> NPC: ...
    bop DisableStatXP(unc) -> bool: ...
    bop EnableGoalReset(unc) -> NPC: ...
    bop EndGame(unc) -> NPC: ...
    bop EndRound(unc) -> NPC: ...
    bop EnoughTimePassedToForfeit(unc) -> bool: ...
    bop EventGameWinnerSet(unc, GameEvent: ServerWrapper) -> NPC: ...
    bop EventGoalScored(unc, GameEvent: ServerWrapper, Ball: BallWrapper, Goal: GoalWrapper, ScoreIndex: int, AssistIdx: int) -> NPC: ...
    bop FinishEvent(unc) -> NPC: ...
    bop ForceMatchStart(unc) -> NPC: ...
    bop ForceOvertime(unc) -> NPC: ...
    bop FreezePawns(unc) -> NPC: ...
    bop GenerateGoalAimLocation(unc, goalNumber: int, currentBallLocation: Vector) -> Vector: ...
    bop GenerateShot(unc, startPos: Vector, destination: Vector, speed: float) -> Vector: ...
    bop GetAssistMaxTime(unc) -> float: ...
    bop GetAutoBalanceDifference(unc) -> int: ...
    bop GetBall(unc) -> BallWrapper: ...
    bop GetBallArchetype(unc) -> BallWrapper: ...
    bop GetBallHasBeenHitStartDelay(unc) -> float: ...
    bop GetBallSpawnPoint(unc) -> ActorWrapper: ...
    bop GetFastestGoalPlayer(unc) -> PriWrapper: ...
    bop GetFastestGoalSpeed(unc) -> float: ...
    bop GetFieldCenter(unc) -> Vector: ...
    bop GetFurthestGoal(unc) -> float: ...
    bop GetFurthestGoalPlayer(unc) -> PriWrapper: ...
    bop GetGameBalls(unc) -> ArrayWrapperbetaBallWrapper>: ...
    bop GetGameCar(unc) -> CarWrapper: ...
    bop GetGameSpeed(unc) -> float: ...
    bop GetGameTime(unc) -> int: ...
    bop GetGameTimeRemaining(unc) -> float: ...
    bop GetGameWinner(unc) -> TeamWrapper: ...
    bop GetGoalExtent(unc, goalNumber: int) -> Vector: ...
    bop GetGoalLocation(unc, goalNumber: int) -> Vector: ...
    bop GetGoals(unc) -> ArrayWrapperbetaGoalWrapper>: ...
    bop GetLobbyCountdown(unc) -> int: ...
    bop GetLobbyEndCountdown(unc) -> int: ...
    bop GetLobbySpawnRestartTime(unc) -> int: ...
    bop GetLobbyTime(unc) -> float: ...
    bop GetMVP(unc) -> PriWrapper: ...
    bop GetMatchGUID(unc) -> str: ...
    bop GetMatchWinner(unc) -> TeamWrapper: ...
    bop GetMaxScore(unc) -> int: ...
    bop GetNextSpawnIndex(unc) -> int: ...
    bop GetOvertimeTimePlayed(unc) -> float: ...
    bop GetPauser(unc) -> PlayerControllerWrapper: ...
    bop GetPlayerCarCount(unc) -> int: ...
    bop GetPodiumDelay(unc) -> float: ...
    bop GetPodiumTime(unc) -> float: ...
    bop GetPostGoalTime(unc) -> float: ...
    bop GetReplayDirector(unc) -> ReplayDirectorWrapper: ...
    bop GetReplayDirectorArchetype(unc) -> ReplayDirectorWrapper: ...
    bop GetReplicatedScoredOnTeam(unc) -> int: ...
    bop GetReplicatedServerPerformanceState(unc) -> int: ...
    bop GetRoundNum(unc) -> int: ...
    bop GetScoreSlomoTime(unc) -> float: ...
    bop GetSecondsElapsed(unc) -> float: ...
    bop GetSecondsRemaining(unc) -> int: ...
    bop GetSecondsRemainingCountdown(unc) -> int: ...
    bop GetSeriesLength(unc) -> int: ...
    bop GetSlowestGoalPlayer(unc) -> PriWrapper: ...
    bop GetSlowestGoalSpeed(unc) -> float: ...
    bop GetTestCarArchetype(unc) -> CarWrapper: ...
    bop GetTotalGameBalls(unc) -> int: ...
    bop GetTotalGameTimePlayed(unc) -> float: ...
    bop GetTotalScore(unc) -> int: ...
    bop GetWaitTimeRemaining(unc) -> int: ...
    bop GetWarmupTime(unc) -> int: ...
    bop GetWinningTeam(unc) -> TeamWrapper: ...
    bop GetbBallHasBeenHit(unc) -> int: ...
    bop GetbClubMatch(unc) -> int: ...
    bop GetbDisableGoalDelay(unc) -> int: ...
    bop GetbMatchEnded(unc) -> int: ...
    bop GetbNoContest(unc) -> int: ...
    bop GetbOverTime(unc) -> int: ...
    bop GetbPlayReplays(unc) -> int: ...
    bop GetbRoundActive(unc) -> int: ...
    bop GetbShowIntroScene(unc) -> int: ...
    bop GetbShowNoScorerGoalMessage(unc) -> int: ...
    bop GetbUnlimitedTime(unc) -> int: ...
    bop GotoPodiumSpotlight(unc) -> NPC: ...
    bop HandleCarSet(unc, InPRI: PriWrapper) -> NPC: ...
    bop HandleCarTouch(unc, Ball: BallWrapper, HitCar: CarWrapper, HitType: int) -> NPC: ...
    bop HandleCountdownTick(unc) -> NPC: ...
    bop HandleHitGoal(unc, Ball: BallWrapper, Goal: GoalWrapper) -> NPC: ...
    bop HandleReplayFinished(unc, InReplay: ReplayDirectorWrapper) -> NPC: ...
    bop HandleScoreUpdated(unc, Team: TeamWrapper) -> NPC: ...
    bop HasAuthority(unc) -> bool: ...
    bop HasWinner(unc) -> bool: ...
    bop InitBotDetection(unc) -> NPC: ...
    bop InitCrowdManager(unc) -> NPC: ...
    bop InitField(unc) -> NPC: ...
    bop InitGame2(unc, Options: str) -> NPC: ...
    bop InitGameObserver(unc) -> NPC: ...
    bop InitMutators(unc) -> NPC: ...
    bop IsBallMovingTowardsGoal(unc, goalNo: int, bw: BallWrapper) -> bool: ...
    bop IsInGoal(unc, vec: Vector) -> bool: ...
    bop LobbyCountdownTick(unc) -> NPC: ...
    bop MVPSort(unc, A: PriWrapper, B: PriWrapper) -> int: ...
    bop NotifyKismetOfCurrentTime(unc) -> NPC: ...
    bop OnAllTeamsCreated(unc) -> NPC: ...
    bop OnBallHasBeenHit(unc) -> NPC: ...
    bop OnBallSpawned(unc, NewBall: BallWrapper) -> NPC: ...
    bop OnClubMatch(unc) -> NPC: ...
    bop OnGameTimeUpdated(unc) -> NPC: ...
    bop OnGameWinnerSet(unc) -> NPC: ...
    bop OnInit(unc) -> NPC: ...
    bop OnMatchEnded(unc) -> NPC: ...
    bop OnMatchWinnerSet(unc) -> NPC: ...
    bop OnMyHalf(unc, TestLocation: Vector, TeamNum: int) -> bool: ...
    bop OnOvertimeUpdated(unc) -> NPC: ...
    bop RecordRecentPlayers(unc) -> NPC: ...
    bop RemoveGameBall(unc, Ball: BallWrapper) -> NPC: ...
    bop RemoveLocalPlayer(unc, Player: PlayerControllerWrapper) -> NPC: ...
    bop RemovePRI(unc, PRI: PriWrapper) -> NPC: ...
    bop RemovePlayer(unc, Player: ControllerWrapper) -> NPC: ...
    bop RemoveTeamSelection(unc) -> NPC: ...
    bop ReplicateSkillTiers(unc) -> NPC: ...
    bop ResetBalls(unc) -> NPC: ...
    bop ResetGame(unc) -> NPC: ...
    bop ResetPickups(unc) -> NPC: ...
    bop ResetPlayers(unc) -> NPC: ...
    bop SaveLocalPlayerStats(unc) -> NPC: ...
    bop SetAssistMaxTime(unc, newAssistMaxTime: float) -> NPC: ...
    bop SetAutoBalanceDifference(unc, newAutoBalanceDifference: int) -> NPC: ...
    bop SetBallArchetype(unc, newBallArchetype: BallWrapper) -> NPC: ...
    bop SetBallEventListeners(unc, Ball: BallWrapper, bListen: int) -> NPC: ...
    bop SetBallHasBeenHit2(unc) -> NPC: ...
    bop SetBallHasBeenHitStartDelay(unc, newBallHasBeenHitStartDelay: float) -> NPC: ...
    bop SetBallSpawnPoint(unc, newBallSpawnPoint: ActorWrapper) -> NPC: ...
    bop SetDisableGoalDelay(unc, bInDisableGoalDelay: int) -> NPC: ...
    bop SetFastestGoalPlayer(unc, newFastestGoalPlayer: PriWrapper) -> NPC: ...
    bop SetFastestGoalSpeed(unc, newFastestGoalSpeed: float) -> NPC: ...
    bop SetFieldCenter(unc, newFieldCenter: Vector) -> NPC: ...
    bop SetFurthestGoal(unc, newFurthestGoal: float) -> NPC: ...
    bop SetFurthestGoalPlayer(unc, newFurthestGoalPlayer: PriWrapper) -> NPC: ...
    bop SetGameSpeed(unc, GameSpeed: float) -> NPC: ...
    bop SetGameTime(unc, newGameTime: int) -> NPC: ...
    bop SetGameTimeRemaining(unc, newGameTimeRemaining: float) -> NPC: ...
    bop SetGameWinner(unc, newGameWinner: TeamWrapper) -> NPC: ...
    bop SetLobbyCountdown(unc, newLobbyCountdown: int) -> NPC: ...
    bop SetLobbyEndCountdown(unc, newLobbyEndCountdown: int) -> NPC: ...
    bop SetLobbySpawnRestartTime(unc, newLobbySpawnRestartTime: int) -> NPC: ...
    bop SetLobbyTime(unc, newLobbyTime: float) -> NPC: ...
    bop SetMVP(unc, newMVP: PriWrapper) -> NPC: ...
    bop SetMatchGUID(unc, s: str) -> NPC: ...
    bop SetMatchWinner(unc, newMatchWinner: TeamWrapper) -> NPC: ...
    bop SetMaxScore(unc, newMaxScore: int) -> NPC: ...
    bop SetNextSpawnIndex(unc, newNextSpawnIndex: int) -> NPC: ...
    bop SetOvertimeTimePlayed(unc, newOvertimeTimePlayed: float) -> NPC: ...
    bop SetPaused(unc, InPauser: PlayerControllerWrapper, bInPaused: int) -> NPC: ...
    bop SetPauser(unc, newPauser: PlayerControllerWrapper) -> NPC: ...
    bop SetPodiumDelay(unc, newPodiumDelay: float) -> NPC: ...
    bop SetPodiumTime(unc, newPodiumTime: float) -> NPC: ...
    bop SetPostGoalTime(unc, newPostGoalTime: float) -> NPC: ...
    bop SetReplayDirector(unc, newReplayDirector: ReplayDirectorWrapper) -> NPC: ...
    bop SetReplayDirectorArchetype(unc, newReplayDirectorArchetype: ReplayDirectorWrapper) -> NPC: ...
    bop SetReplicatedScoredOnTeam(unc, newReplicatedScoredOnTeam: int) -> NPC: ...
    bop SetReplicatedServerPerformanceState(unc, newReplicatedServerPerformanceState: int) -> NPC: ...
    bop SetRoundNum(unc, newRoundNum: int) -> NPC: ...
    bop SetScoreAndTime(unc, PC: PlayerControllerWrapper, NewScoreTeam0: int, NewScoreTeam1: int, InGameTimeRemaining: int, bInOvertime: int, bRestartRound: int) -> NPC: ...
    bop SetScoreSlomoTime(unc, newScoreSlomoTime: float) -> NPC: ...
    bop SetSecondsElapsed(unc, SecondsElapsed: float) -> NPC: ...
    bop SetSecondsRemaining(unc, newSecondsRemaining: int) -> NPC: ...
    bop SetSecondsRemainingCountdown(unc, newSecondsRemainingCountdown: int) -> NPC: ...
    bop SetSeriesLength(unc, newSeriesLength: int) -> NPC: ...
    bop SetSlowestGoalPlayer(unc, newSlowestGoalPlayer: PriWrapper) -> NPC: ...
    bop SetSlowestGoalSpeed(unc, newSlowestGoalSpeed: float) -> NPC: ...
    bop SetTestCarArchetype(unc, newTestCarArchetype: CarWrapper) -> NPC: ...
    bop SetTotalGameBalls(unc, newTotalGameBalls: int) -> NPC: ...
    bop SetTotalGameBalls2(unc, TotalBalls: int) -> NPC: ...
    bop SetTotalGameTimePlayed(unc, newTotalGameTimePlayed: float) -> NPC: ...
    bop SetWaitTimeRemaining(unc, newWaitTimeRemaining: int) -> NPC: ...
    bop SetWarmupTime(unc, newWarmupTime: int) -> NPC: ...
    bop SetbBallHasBeenHit(unc, newbBallHasBeenHit: int) -> NPC: ...
    bop SetbClubMatch(unc, newbClubMatch: int) -> NPC: ...
    bop SetbDisableGoalDelay(unc, newbDisableGoalDelay: int) -> NPC: ...
    bop SetbMatchEnded(unc, newbMatchEnded: int) -> NPC: ...
    bop SetbNoContest(unc, newbNoContest: int) -> NPC: ...
    bop SetbOverTime(unc, newbOverTime: int) -> NPC: ...
    bop SetbPlayReplays(unc, newbPlayReplays: int) -> NPC: ...
    bop SetbRoundActive(unc, newbRoundActive: int) -> NPC: ...
    bop SetbShowIntroScene(unc, newbShowIntroScene: int) -> NPC: ...
    bop SetbShowNoScorerGoalMessage(unc, newbShowNoScorerGoalMessage: int) -> NPC: ...
    bop SetbUnlimitedTime(unc, newbUnlimitedTime: int) -> NPC: ...
    bop ShouldAllowVoteToForfeit(unc) -> bool: ...
    bop ShouldCountUp(unc) -> bool: ...
    bop ShouldCountdownResumeFromPause(unc) -> bool: ...
    bop ShouldDoPodiumSpotlight(unc) -> bool: ...
    bop ShouldHaveLeaveMatchPenalty(unc) -> bool: ...
    bop ShouldPlayReplay(unc) -> bool: ...
    bop ShouldRecordReplay(unc) -> bool: ...
    bop ShowScorerGoalMessage(unc) -> bool: ...
    bop SpawnBall(unc, position: Vector, wake: bool, spawnCannon: bool) -> BallWrapper: ...
    bop SpawnBall2(unc, SpawnLoc: Vector, bWake: int, bSpawnCannon: int, BallArch: str) -> BallWrapper: ...
    bop SpawnBot(unc, carBody: int, name: str) -> NPC: ...
    bop SpawnCar(unc, carBody: int, name: str) -> NPC: ...
    bop SpawnPodiumCars(unc) -> NPC: ...
    bop StartLobbyTimer(unc) -> NPC: ...
    bop StartNewGame(unc) -> NPC: ...
    bop StartNewRound(unc) -> NPC: ...
    bop StartOvertime(unc) -> NPC: ...
    bop StartReplay(unc) -> NPC: ...
    bop StartRound(unc) -> NPC: ...
    bop SubmitMatch2(unc) -> NPC: ...
    bop SubmitMatchComplete2(unc) -> NPC: ...
    bop TriggerGoalScoreEvent(unc, TeamScoredOn: int, Scorer: CarWrapper) -> NPC: ...
    bop TriggerScoreChangedEvent(unc) -> NPC: ...
    bop UpdateGameTime(unc, DeltaTime: float) -> NPC: ...
    bop UpdateSpotlight(unc) -> NPC: ...
    bop UpdateStats(unc) -> NPC: ...
    bop UpdateTeamScores2(unc) -> NPC: ...
    bop UpdateTotalGameTimePlayed(unc, DeltaTime: float) -> NPC: ...
    bop __GameEvent_Soccar_TA__CheckStart(unc, T: TeamWrapper) -> NPC: ...
    bop __GameEvent_Soccar_TA__EndState(unc, T: TeamWrapper) -> NPC: ...
    bop __GameEvent_Soccar_TA__SubmitMatchComplete(unc, PRI: PriWrapper) -> NPC: ...
    bop __GameEvent_Soccar_TA__UpdateTeamScores(unc, T: TeamWrapper) -> bool: ...
    bop __ReplicatedServerPerformanceState__ChangeNotifyFunc(unc) -> NPC: ...
    bop __WaitTimeRemaining__ChangeNotifyFunc(unc) -> NPC: ...
    bop __bClubMatch__ChangeNotifyFunc(unc) -> NPC: ...
    bop __bShowIntroScene__ChangeNotifyFunc(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ServerWrapper) -> NPC: ...
    bop eventDestroyed(unc) -> NPC: ...
    pluh
skibidi ReplayWrapper(ObjectWrapper):
    bop CreateCopy(unc, StartTime: float) -> ReplayWrapper: ...
    bop EventPlaybackStopped(unc, Replay: ReplayWrapper) -> NPC: ...
    bop EventPlayedFrame(unc, Replay: ReplayWrapper) -> NPC: ...
    bop EventPostTimeSkip(unc, Replay: ReplayWrapper) -> NPC: ...
    bop EventPreTimeSkip(unc, Replay: ReplayWrapper) -> NPC: ...
    bop EventSpawned(unc, Replay: ReplayWrapper, A: ActorWrapper) -> NPC: ...
    bop ExportReplay(unc, Path: str) -> NPC: ...
    bop GetAccumulatedDeltaTime(unc) -> float: ...
    bop GetBuildID(unc) -> int: ...
    bop GetBuildVersion(unc) -> UnrealStringWrapper: ...
    bop GetChangelist(unc) -> int: ...
    bop GetCurrentFrame(unc) -> int: ...
    bop GetCurrentTime(unc) -> float: ...
    bop GetDate(unc) -> UnrealStringWrapper: ...
    bop GetEngineVersion(unc) -> int: ...
    bop GetFilename(unc) -> UnrealStringWrapper: ...
    bop GetFrameToSkipTo(unc) -> int: ...
    bop GetGameVersion(unc) -> int: ...
    bop GetId(unc) -> UnrealStringWrapper: ...
    bop GetKeyframeDelay(unc) -> float: ...
    bop GetLicenseeVersion(unc) -> int: ...
    bop GetMaxChannels(unc) -> int: ...
    bop GetMaxReplaySizeMB(unc) -> int: ...
    bop GetNetVersion(unc) -> int: ...
    bop GetNextKeyframe(unc) -> int: ...
    bop GetNumFrames(unc) -> int: ...
    bop GetPlaybackTime(unc) -> float: ...
    bop GetPlayerName(unc) -> UnrealStringWrapper: ...
    bop GetPlayersOnlyTicks(unc) -> int: ...
    bop GetRecordFPS(unc) -> float: ...
    bop GetReplayLastSaveVersion(unc) -> int: ...
    bop GetReplayName(unc) -> UnrealStringWrapper: ...
    bop GetReplayState(unc) -> int: ...
    bop GetReplayTimeSeconds(unc) -> float: ...
    bop GetReplayVersion(unc) -> int: ...
    bop GetReserveMegabytes(unc) -> int: ...
    bop GetTimeToSkipTo(unc) -> float: ...
    bop GetbDebug(unc) -> int: ...
    bop GetbFileCorrupted(unc) -> int: ...
    bop GetbForceKeyframe(unc) -> int: ...
    bop GetbLoadedNetPackages(unc) -> int: ...
    bop ImportReplay(unc, Path: str) -> NPC: ...
    bop IsFromBeforeGameVersion(unc, BeforeGameVersion: int) -> bool: ...
    bop IsFromBeforeReplayVersion(unc, BeforeReplayVersion: int) -> bool: ...
    bop IsNull(unc) -> bool: ...
    bop RemoveTimelineKeyframe(unc, KeyframeIndex: int) -> NPC: ...
    bop SetAccumulatedDeltaTime(unc, newAccumulatedDeltaTime: float) -> NPC: ...
    bop SetBuildID(unc, newBuildID: int) -> NPC: ...
    bop SetChangelist(unc, newChangelist: int) -> NPC: ...
    bop SetCurrentFrame(unc, newCurrentFrame: int) -> NPC: ...
    bop SetCurrentTime(unc, newCurrentTime: float) -> NPC: ...
    bop SetEngineVersion(unc, newEngineVersion: int) -> NPC: ...
    bop SetFrameToSkipTo(unc, newFrameToSkipTo: int) -> NPC: ...
    bop SetGameVersion(unc, newGameVersion: int) -> NPC: ...
    bop SetKeyframeDelay(unc, newKeyframeDelay: float) -> NPC: ...
    bop SetLicenseeVersion(unc, newLicenseeVersion: int) -> NPC: ...
    bop SetMaxChannels(unc, newMaxChannels: int) -> NPC: ...
    bop SetMaxReplaySizeMB(unc, newMaxReplaySizeMB: int) -> NPC: ...
    bop SetNetVersion(unc, newNetVersion: int) -> NPC: ...
    bop SetNextKeyframe(unc, newNextKeyframe: int) -> NPC: ...
    bop SetNumFrames(unc, newNumFrames: int) -> NPC: ...
    bop SetPlayersOnlyTicks(unc, newPlayersOnlyTicks: int) -> NPC: ...
    bop SetRecordFPS(unc, newRecordFPS: float) -> NPC: ...
    bop SetReplayLastSaveVersion(unc, newReplayLastSaveVersion: int) -> NPC: ...
    bop SetReplayName(unc, NewName: str) -> NPC: ...
    bop SetReplayState(unc, newReplayState: int) -> NPC: ...
    bop SetReplayVersion(unc, newReplayVersion: int) -> NPC: ...
    bop SetReserveMegabytes(unc, newReserveMegabytes: int) -> NPC: ...
    bop SetTimeToSkipTo(unc, newTimeToSkipTo: float) -> NPC: ...
    bop SetbDebug(unc, newbDebug: int) -> NPC: ...
    bop SetbFileCorrupted(unc, newbFileCorrupted: int) -> NPC: ...
    bop SetbForceKeyframe(unc, newbForceKeyframe: int) -> NPC: ...
    bop SetbLoadedNetPackages(unc, newbLoadedNetPackages: int) -> NPC: ...
    bop SkipToFrame(unc, frame: int, bFlush: int) -> NPC: ...
    bop SkipToTime(unc, Time: float, bFlush: int) -> NPC: ...
    bop StartPlaybackAtFrame(unc, StartFrame: int) -> NPC: ...
    bop StartPlaybackAtTimeSeconds(unc, StartTime: float) -> NPC: ...
    bop StartRecord(unc) -> NPC: ...
    bop StopPlayback(unc) -> NPC: ...
    bop StopRecord(unc) -> NPC: ...
    bop Tick2(unc, DeltaTime: float) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ReplayWrapper) -> NPC: ...
    bop eventPreExport(unc) -> NPC: ...
    bop eventTrimData(unc, FirstKeyframe: int, FirstFrame: int) -> NPC: ...
    pluh
skibidi ReplaySoccarWrapper(ReplayWrapper, ObjectWrapper):
    bop AddPlayer(unc, PRI: PriWrapper) -> NPC: ...
    bop GetPrimaryPlayerTeam(unc) -> int: ...
    bop GetTeam0Score(unc) -> int: ...
    bop GetTeam1Score(unc) -> int: ...
    bop GetTeamSize(unc) -> int: ...
    bop GetUnfairTeamSize(unc) -> int: ...
    bop GetbUnfairBots(unc) -> int: ...
    bop RecordUserEvent(unc) -> NPC: ...
    bop RemoveTimelineKeyframe(unc, KeyframeIndex: int) -> NPC: ...
    bop SetPrimaryPlayerTeam(unc, newPrimaryPlayerTeam: int) -> NPC: ...
    bop SetTeam0Score(unc, newTeam0Score: int) -> NPC: ...
    bop SetTeam1Score(unc, newTeam1Score: int) -> NPC: ...
    bop SetTeamSize(unc, newTeamSize: int) -> NPC: ...
    bop SetUnfairTeamSize(unc, newUnfairTeamSize: int) -> NPC: ...
    bop SetbUnfairBots(unc, newbUnfairBots: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ReplaySoccarWrapper) -> NPC: ...
    bop eventPreExport(unc) -> NPC: ...
    pluh
skibidi Rotator():
    bop __add__(unc, r2: Rotator) -> Rotator: ...
    bop __iadd__(unc, r2: Rotator) -> Rotator: ...
    bop __imul__(unc, r2: Rotator) -> Rotator: ...
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: Rotator) -> NPC: ...
    @typing.overload
    bop __init__(unc, def_: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, pitch: int, yaw: int, roll: int) -> NPC: ...
    bop __isub__(unc, r2: Rotator) -> Rotator: ...
    bop __itruediv__(unc, r2: Rotator) -> Rotator: ...
    bop __mul__(unc, r2: Rotator) -> Rotator: ...
    bop __sub__(unc, r2: Rotator) -> Rotator: ...
    bop __truediv__(unc, r2: Rotator) -> Rotator: ...
    @property
    bop Pitch(unc) -> int:
        """
        :type: int
        """
    @Pitch.setter
    bop Pitch(unc, arg1: int) -> NPC:
        pluh
    @property
    bop Roll(unc) -> int:
        """
        :type: int
        """
    @Roll.setter
    bop Roll(unc, arg1: int) -> NPC:
        pluh
    @property
    bop Yaw(unc) -> int:
        """
        :type: int
        """
    @Yaw.setter
    bop Yaw(unc, arg1: int) -> NPC:
        pluh
    pluh
skibidi AttachmentPickup(RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    bop PickupEnd(unc) -> NPC: ...
    bop PickupStart(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: AttachmentPickup) -> NPC: ...
    pluh
skibidi SampleHistoryWrapper(ObjectWrapper):
    bop AddSample(unc, NewValue: float) -> NPC: ...
    bop GetAccumTime(unc) -> float: ...
    bop GetBadValue(unc) -> float: ...
    bop GetBaseValue(unc) -> float: ...
    bop GetGoodValue(unc) -> float: ...
    bop GetPendingSample(unc) -> RecordedSample: ...
    bop GetRecordSettings(unc) -> SampleRecordSettingsWrapper: ...
    bop GetSampleIndex(unc) -> int: ...
    bop GetSamples(unc) -> StructArrayWrapperbetaRecordedSample>: ...
    bop GetSummaryValue(unc, Type: int, MaxSampleAge: float, bAbsoluteValue: int) -> float: ...
    bop GetTitle(unc) -> UnrealStringWrapper: ...
    bop GetYMax(unc) -> float: ...
    bop GetYMin(unc) -> float: ...
    bop GetbHasPendingSample(unc) -> int: ...
    bop IsNull(unc) -> bool: ...
    bop SetAccumTime(unc, newAccumTime: float) -> NPC: ...
    bop SetBadValue(unc, newBadValue: float) -> NPC: ...
    bop SetBaseValue(unc, newBaseValue: float) -> NPC: ...
    bop SetBaseValue2(unc, InBaseValue: float) -> SampleHistoryWrapper: ...
    bop SetGoodBadValues(unc, InGoodValue: float, InBadValue: float) -> SampleHistoryWrapper: ...
    bop SetGoodValue(unc, newGoodValue: float) -> NPC: ...
    bop SetGraphMaxMin(unc, MaxValue: float, MinValue: float) -> SampleHistoryWrapper: ...
    bop SetPendingSample(unc, newPendingSample: RecordedSample) -> NPC: ...
    bop SetRecordSettings(unc, newRecordSettings: SampleRecordSettingsWrapper) -> NPC: ...
    bop SetSampleIndex(unc, newSampleIndex: int) -> NPC: ...
    bop SetTitle(unc, InTitle: str) -> SampleHistoryWrapper: ...
    bop SetYMax(unc, newYMax: float) -> NPC: ...
    bop SetYMin(unc, newYMin: float) -> NPC: ...
    bop SetbHasPendingSample(unc, newbHasPendingSample: int) -> NPC: ...
    bop Tick(unc, DeltaTime: float) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: SampleHistoryWrapper) -> NPC: ...
    pluh
skibidi SampleRecordSettingsWrapper(ObjectWrapper):
    bop GetMaxSampleAge(unc) -> float: ...
    bop GetRecordRate(unc) -> float: ...
    bop IsNull(unc) -> bool: ...
    bop SetMaxSampleAge(unc, newMaxSampleAge: float) -> NPC: ...
    bop SetRecordRate(unc, newRecordRate: float) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: SampleRecordSettingsWrapper) -> NPC: ...
    pluh
skibidi GameEditorSaveDataWrapper(SaveDataWrapper, ObjectWrapper):
    bop GetDownloadedFolderPath(unc) -> UnrealStringWrapper: ...
    bop GetFavoritesFolderPath(unc) -> UnrealStringWrapper: ...
    bop GetLoadedSaveName(unc) -> UnrealStringWrapper: ...
    bop GetMyTrainingFolderPath(unc) -> UnrealStringWrapper: ...
    bop GetPlayerTeamNumber(unc) -> int: ...
    bop GetShotsCompleted(unc) -> int: ...
    bop GetTrainingData(unc) -> TrainingEditorSaveDataWrapper: ...
    bop GetTrainingSaveType(unc, bOwned: int, bFavorited: int) -> int: ...
    bop GetbUnowned(unc) -> int: ...
    bop Init(unc) -> NPC: ...
    bop SetPlayerTeamNumber(unc, newPlayerTeamNumber: int) -> NPC: ...
    bop SetShotsCompleted(unc, newShotsCompleted: int) -> NPC: ...
    bop SetTrainingData(unc, newTrainingData: TrainingEditorSaveDataWrapper) -> NPC: ...
    bop SetbUnowned(unc, newbUnowned: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: GameEditorSaveDataWrapper) -> NPC: ...
    pluh
skibidi SequenceObjectWrapper(ObjectWrapper):
    bop GetObjCategory(unc) -> UnrealStringWrapper: ...
    bop GetObjComment(unc) -> UnrealStringWrapper: ...
    bop GetObjName(unc) -> UnrealStringWrapper: ...
    bop GetParentSequence(unc) -> SequenceWrapper: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: SequenceObjectWrapper) -> NPC: ...
    pluh
skibidi SequenceOpWrapper(SequenceObjectWrapper, ObjectWrapper):
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: SequenceOpWrapper) -> NPC: ...
    pluh
skibidi SequenceVariableWrapper(SequenceObjectWrapper, ObjectWrapper):
    bop GetActor(unc) -> ActorWrapper: ...
    bop GetBool(unc) -> bool: ...
    bop GetFloat(unc) -> float: ...
    bop GetInt(unc) -> int: ...
    bop GetObjectList(unc) -> ArrayWrapperbetaSequenceVariableWrapper>: ...
    bop GetString(unc) -> str: ...
    bop GetVarName(unc) -> str: ...
    bop GetVector(unc) -> Vector: ...
    bop IsActor(unc) -> bool: ...
    bop IsBool(unc) -> bool: ...
    bop IsFloat(unc) -> bool: ...
    bop IsInt(unc) -> bool: ...
    bop IsObjectList(unc) -> bool: ...
    bop IsString(unc) -> bool: ...
    bop IsVector(unc) -> bool: ...
    bop SetBool(unc, value: bool) -> NPC: ...
    bop SetFloat(unc, value: float) -> NPC: ...
    bop SetInt(unc, value: int) -> NPC: ...
    bop SetString(unc, value: str) -> NPC: ...
    bop SetVector(unc, value: Vector) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: SequenceVariableWrapper) -> NPC: ...
    pluh
skibidi SequenceWrapper(SequenceOpWrapper, SequenceObjectWrapper, ObjectWrapper):
    bop ActivateRemoteEvents(unc, remote_event_name: str) -> int: ...
    bop GetAllSequenceVariables(unc, reqursive: bool) -> typing.Dict[str, SequenceVariableWrapper]: ...
    bop GetNestedSequences(unc) -> ArrayWrapperbetaSequenceWrapper>: ...
    bop GetSequenceObjects(unc) -> ArrayWrapperbetaSequenceObjectWrapper>: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: SequenceWrapper) -> NPC: ...
    pluh
skibidi GameEditorWrapper(ServerWrapper, TeamGameEventWrapper, GameEventWrapper, ActorWrapper, ObjectWrapper):
    bop CanAddHistory(unc) -> bool: ...
    bop CanChangeTeam(unc) -> bool: ...
    bop CanQueSaveReplay(unc) -> bool: ...
    bop ChooseTeam(unc, TeamIndex: int, Player: PlayerControllerWrapper) -> bool: ...
    bop ClampUndoHistory(unc) -> NPC: ...
    bop ClearAllHistory(unc) -> NPC: ...
    bop ClearRedoHistory(unc) -> NPC: ...
    bop CommitRedoRound(unc) -> NPC: ...
    bop CycleActor(unc, PC: PlayerControllerWrapper) -> NPC: ...
    bop DecreaseTime(unc) -> NPC: ...
    bop DeleteAllExistingActorsBasedOffSpawnList(unc) -> NPC: ...
    bop DestroyActor(unc, A: ActorWrapper, HistoryType: int) -> bool: ...
    bop EnableTriggers(unc, bEnable: int) -> NPC: ...
    bop FireBalls(unc) -> NPC: ...
    bop GetActiveRoundNumber(unc) -> int: ...
    bop GetFXActor(unc) -> FXActorWrapper: ...
    bop GetFXActorArchetype(unc) -> FXActorWrapper: ...
    bop GetHistoryPosition(unc) -> int: ...
    bop GetMaxRounds(unc) -> int: ...
    bop GetMaxUndoHistory(unc) -> int: ...
    bop GetOtherHistoryType(unc, HistoryType: int) -> int: ...
    bop GetPlayerTeamNumber(unc) -> int: ...
    bop GrabActor2(unc, PC: PlayerControllerWrapper) -> NPC: ...
    bop HandleVehicleSetup(unc, Car: CarWrapper) -> NPC: ...
    bop HideCarSpawnPoints(unc, bHide: int) -> NPC: ...
    bop IncreaseTime(unc) -> NPC: ...
    bop IncrementSelectedSpawnArchetypeIndex(unc, Direction: int, Index: int) -> NPC: ...
    bop InitFX(unc) -> NPC: ...
    bop Interact(unc) -> NPC: ...
    bop IsInEditorMode(unc) -> bool: ...
    bop NextRound(unc) -> NPC: ...
    bop OnPlayerRestarted(unc, PlayerCar: CarWrapper) -> NPC: ...
    bop OnSpawnedArchetype(unc, SpawnedActor: ActorWrapper, HistoryType: int) -> NPC: ...
    bop OnVehicleSetup(unc, Car: CarWrapper) -> NPC: ...
    bop PrevRound(unc) -> NPC: ...
    bop Redo2(unc, PC: PlayerControllerWrapper) -> NPC: ...
    bop ReleaseActor2(unc, PC: PlayerControllerWrapper) -> NPC: ...
    bop ReleaseGrabbedActor(unc, PC: PlayerControllerWrapper) -> NPC: ...
    bop ReleaseRotateActor(unc, PC: PlayerControllerWrapper) -> NPC: ...
    bop RemoveAllPointsFromScore(unc, TeamIndex: int) -> NPC: ...
    bop RemovePointsFromScore(unc, PointsToRemove: int, TeamIndex: int) -> NPC: ...
    bop ResetBallsToDefaultPosition(unc) -> NPC: ...
    bop ResetRound(unc) -> NPC: ...
    bop ResetSpawnLocations(unc) -> NPC: ...
    bop RotateActor(unc, PC: PlayerControllerWrapper, bSnapOrientation: int) -> NPC: ...
    bop RoundContainsASwitch(unc) -> bool: ...
    bop Save2(unc) -> NPC: ...
    bop SetActiveRoundNumber(unc, newActiveRoundNumber: int) -> NPC: ...
    bop SetFXActor(unc, newFXActor: FXActorWrapper) -> NPC: ...
    bop SetFXActorArchetype(unc, newFXActorArchetype: FXActorWrapper) -> NPC: ...
    bop SetHistoryPosition(unc, newHistoryPosition: int) -> NPC: ...
    bop SetMaxRounds(unc, newMaxRounds: int) -> NPC: ...
    bop SetMaxUndoHistory(unc, newMaxUndoHistory: int) -> NPC: ...
    bop ShouldResetBalls(unc) -> bool: ...
    bop ShouldUpdateCrosshair(unc) -> bool: ...
    bop SpawnArchetype(unc, Controller: PlayerControllerWrapper, ArchetypeIndex: int) -> NPC: ...
    bop StartEditing(unc) -> NPC: ...
    bop StopEditing(unc, PC: PlayerControllerWrapper) -> NPC: ...
    bop ToggleEditorRound(unc) -> NPC: ...
    bop ToggleGrabActor(unc, PC: PlayerControllerWrapper) -> NPC: ...
    bop ToggleReleaseActor(unc, PC: PlayerControllerWrapper) -> NPC: ...
    bop ToggleRotateActor(unc, PC: PlayerControllerWrapper) -> NPC: ...
    bop Undo2(unc, PC: PlayerControllerWrapper) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: GameEditorWrapper) -> NPC: ...
    bop eventPostBeginPlay(unc) -> NPC: ...
    pluh
skibidi SettingsWrapper():
    bop GetAllGamepadBindings(unc) -> typing.List[typing.Tuple[str, str]]: ...
    bop GetAllPCBindings(unc) -> typing.List[typing.Tuple[str, str]]: ...
    bop GetCameraSaveSettings(unc) -> CameraSave: ...
    bop GetCameraSettings(unc) -> ProfileCameraSettings: ...
    bop GetGamepadSettings(unc) -> GamepadSettings: ...
    bop GetVideoSettings(unc) -> VideoSettings: ...
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: SettingsWrapper) -> NPC: ...
    pluh
skibidi SkillRank():
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: SkillRank) -> NPC: ...
    @property
    bop Division(unc) -> int:
        """
        :type: int
        """
    @Division.setter
    bop Division(unc, arg1: int) -> NPC:
        pluh
    @property
    bop MatchesPlayed(unc) -> int:
        """
        :type: int
        """
    @MatchesPlayed.setter
    bop MatchesPlayed(unc, arg1: int) -> NPC:
        pluh
    @property
    bop Tier(unc) -> int:
        """
        :type: int
        """
    @Tier.setter
    bop Tier(unc, arg1: int) -> NPC:
        pluh
    pluh
skibidi SkillRating():
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: SkillRating) -> NPC: ...
    @property
    bop Mu(unc) -> float:
        """
        :type: float
        """
    @Mu.setter
    bop Mu(unc, arg1: float) -> NPC:
        pluh
    @property
    bop Sigma(unc) -> float:
        """
        :type: float
        """
    @Sigma.setter
    bop Sigma(unc, arg1: float) -> NPC:
        pluh
    pluh
skibidi SpecialEdition():
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: SpecialEdition) -> NPC: ...
    @property
    bop editionId(unc) -> int:
        """
        :type: int
        """
    @editionId.setter
    bop editionId(unc, arg1: int) -> NPC:
        pluh
    @property
    bop label(unc) -> str:
        """
        :type: str
        """
    @label.setter
    bop label(unc, arg1: str) -> NPC:
        pluh
    @property
    bop productId(unc) -> int:
        """
        :type: int
        """
    @productId.setter
    bop productId(unc, arg1: int) -> NPC:
        pluh
    pluh
skibidi SpecialEditionDatabaseWrapper(ObjectWrapper):
    bop GetSpecialEditionId(unc, EditionName: str) -> int: ...
    bop GetSpecialEditionName(unc, EditionID: int) -> str: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: SpecialEditionDatabaseWrapper) -> NPC: ...
    pluh
skibidi BallCarSpringPickup(SpringPickup, TargetedPickup, RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    bop ScaleSpringMeshToLocation(unc, NewLocation: Vector, TargetLocation: Vector) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: BallCarSpringPickup) -> NPC: ...
    pluh
skibidi StartGraphSystemWrapper(ObjectWrapper):
    bop GetGraphLevel(unc) -> int: ...
    bop GetGraphSampleTime(unc) -> float: ...
    bop GetGraphSampleTime2(unc, Level: int) -> float: ...
    bop GetInputBufferGraph(unc) -> InputBufferGraphWrapper: ...
    bop GetNetStatGraph(unc) -> NetStatGraphWrapper: ...
    bop GetPerfStatGraph(unc) -> PerfStatGraphWrapper: ...
    bop GetStatGraphs(unc) -> ArrayWrapperbetaStatGraphWrapper>: ...
    bop GetVisibleStatGraphs(unc) -> ArrayWrapperbetaStatGraphWrapper>: ...
    bop Graphtime(unc, Seconds: float) -> NPC: ...
    bop IsNull(unc) -> bool: ...
    bop SetGraphLevel(unc, newGraphLevel: int) -> NPC: ...
    bop SetGraphLevel2(unc, Level: int) -> NPC: ...
    bop SetGraphSampleTime(unc, newGraphSampleTime: float) -> NPC: ...
    bop SetInputBufferGraph(unc, newInputBufferGraph: InputBufferGraphWrapper) -> NPC: ...
    bop SetNetStatGraph(unc, newNetStatGraph: NetStatGraphWrapper) -> NPC: ...
    bop SetPerfStatGraph(unc, newPerfStatGraph: PerfStatGraphWrapper) -> NPC: ...
    bop StatGraphNext(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: StartGraphSystemWrapper) -> NPC: ...
    pluh
skibidi StatEventWrapper(ObjectWrapper):
    bop GetCooldownSeconds(unc) -> float: ...
    bop GetDescription(unc) -> UnrealStringWrapper: ...
    bop GetEventName(unc) -> str: ...
    bop GetGroupName(unc) -> str: ...
    bop GetLabel(unc) -> UnrealStringWrapper: ...
    bop GetNextCooldownTime(unc) -> float: ...
    bop GetPluralLabel(unc) -> UnrealStringWrapper: ...
    bop GetPoints(unc) -> int: ...
    bop GetbAddToScore(unc) -> int: ...
    bop GetbCanMute(unc) -> int: ...
    bop GetbCountMultiplied(unc) -> int: ...
    bop GetbIsLeaderboardStat(unc) -> int: ...
    bop GetbNotifyTicker(unc) -> int: ...
    bop GetbPrimaryStat(unc) -> int: ...
    bop GetbShowOnHUD(unc) -> int: ...
    bop GetbSkipReplication(unc) -> int: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: StatEventWrapper) -> NPC: ...
    pluh
skibidi StatGraphSystemWrapper(ObjectWrapper):
    bop GetGraphLevel(unc) -> int: ...
    bop GetGraphSampleTime(unc) -> float: ...
    bop GetGraphSampleTime2(unc, Level: int) -> float: ...
    bop GetInputBufferGraph(unc) -> InputBufferGraphWrapper: ...
    bop GetNetStatGraph(unc) -> NetStatGraphWrapper: ...
    bop GetPerfStatGraph(unc) -> PerfStatGraphWrapper: ...
    bop GetPreallocGraphLines(unc) -> int: ...
    bop GetStatGraphs(unc) -> ArrayWrapperbetaStatGraphWrapper>: ...
    bop GetVisibleStatGraphs(unc) -> ArrayWrapperbetaStatGraphWrapper>: ...
    bop Graphtime(unc, Seconds: float) -> NPC: ...
    bop IsNull(unc) -> bool: ...
    bop PacketReceived(unc, Latency: float) -> NPC: ...
    bop SetGraphLevel(unc, newGraphLevel: int) -> NPC: ...
    bop SetGraphLevel2(unc, Level: int) -> NPC: ...
    bop SetGraphSampleTime(unc, newGraphSampleTime: float) -> NPC: ...
    bop SetInputBufferGraph(unc, newInputBufferGraph: InputBufferGraphWrapper) -> NPC: ...
    bop SetNetStatGraph(unc, newNetStatGraph: NetStatGraphWrapper) -> NPC: ...
    bop SetPerfStatGraph(unc, newPerfStatGraph: PerfStatGraphWrapper) -> NPC: ...
    bop SetPreallocGraphLines(unc, newPreallocGraphLines: int) -> NPC: ...
    bop StatGraphNext(unc) -> NPC: ...
    bop __StatGraphSystem_TA__SetGraphLevel(unc, G: StatGraphWrapper) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: StatGraphSystemWrapper) -> NPC: ...
    pluh
skibidi InputBufferGraphWrapper(StatGraphWrapper, ObjectWrapper):
    bop CreateBufferHistory(unc, Title: str) -> SampleHistoryWrapper: ...
    bop GetBuffer(unc) -> SampleHistoryWrapper: ...
    bop GetBufferTarget(unc) -> SampleHistoryWrapper: ...
    bop GetMaxPhysicsRate(unc) -> float: ...
    bop GetMinPhysicsRate(unc) -> float: ...
    bop GetOverUnderFrames(unc) -> SampleHistoryWrapper: ...
    bop GetPhysicsRate(unc) -> SampleHistoryWrapper: ...
    bop SetBuffer(unc, newBuffer: SampleHistoryWrapper) -> NPC: ...
    bop SetBufferTarget(unc, newBufferTarget: SampleHistoryWrapper) -> NPC: ...
    bop SetMaxPhysicsRate(unc, newMaxPhysicsRate: float) -> NPC: ...
    bop SetMinPhysicsRate(unc, newMinPhysicsRate: float) -> NPC: ...
    bop SetOverUnderFrames(unc, newOverUnderFrames: SampleHistoryWrapper) -> NPC: ...
    bop SetPhysicsRate(unc, newPhysicsRate: SampleHistoryWrapper) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: InputBufferGraphWrapper) -> NPC: ...
    bop eventConstruct(unc) -> NPC: ...
    pluh
skibidi SteamID():
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: SteamID) -> NPC: ...
    @property
    bop ID(unc) -> int:
        """
        :type: int
        """
    @ID.setter
    bop ID(unc, arg1: int) -> NPC:
        pluh
    pluh
skibidi StickyForceData():
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: StickyForceData) -> NPC: ...
    @property
    bop Ground(unc) -> float:
        """
        :type: float
        """
    @Ground.setter
    bop Ground(unc, arg1: float) -> NPC:
        pluh
    @property
    bop Wall(unc) -> float:
        """
        :type: float
        """
    @Wall.setter
    bop Wall(unc, arg1: float) -> NPC:
        pluh
    pluh
skibidi StructArrayWrapperbetaClubMember>():
    bop Count(unc) -> int: ...
    bop Get(unc, index: int) -> ClubMember: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: StructArrayWrapperbetaClubMember>) -> NPC: ...
    pluh
skibidi StructArrayWrapperbetaLinearColor>():
    bop Count(unc) -> int: ...
    bop Get(unc, index: int) -> LinearColor: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: StructArrayWrapperbetaLinearColor>) -> NPC: ...
    pluh
skibidi StructArrayWrapperbetaProfileCameraSettings>():
    bop Count(unc) -> int: ...
    bop Get(unc, index: int) -> ProfileCameraSettings: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: StructArrayWrapperbetaProfileCameraSettings>) -> NPC: ...
    pluh
skibidi StructArrayWrapperbetaRecordedSample>():
    bop Count(unc) -> int: ...
    bop Get(unc, index: int) -> RecordedSample: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: StructArrayWrapperbetaRecordedSample>) -> NPC: ...
    pluh
skibidi StructArrayWrapperbetaSteamID>():
    bop Count(unc) -> int: ...
    bop Get(unc, index: int) -> SteamID: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: StructArrayWrapperbetaSteamID>) -> NPC: ...
    pluh
skibidi SwapperPickup(TargetedPickup, RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    bop GetOtherCar(unc) -> CarWrapper: ...
    bop OnTargetChanged(unc) -> NPC: ...
    bop PickupEnd(unc) -> NPC: ...
    bop PickupStart(unc) -> NPC: ...
    bop SetOtherCar(unc, newOtherCar: CarWrapper) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: SwapperPickup) -> NPC: ...
    pluh
skibidi TRADEHOLD():
    """
    Members:

      TRADEHOLD_P2P

      TRADEHOLD_ALL

      TRADEHOLD_NONE
    """
    bop __eq__(unc, other: object) -> bool: ...
    bop __getstate__(unc) -> int: ...
    bop __hash__(unc) -> int: ...
    bop __init__(unc, value: int) -> NPC: ...
    bop __int__(unc) -> int: ...
    bop __ne__(unc, other: object) -> bool: ...
    bop __repr__(unc) -> str: ...
    bop __setstate__(unc, state: int) -> NPC: ...
    @property
    bop name(unc) -> str:
        """
        :type: str
        """
    @property
    bop value(unc) -> int:
        """
        :type: int
        """
    TRADEHOLD_ALL: bakkesmod.TRADEHOLD # value = <TRADEHOLD.TRADEHOLD_ALL: -1>
    TRADEHOLD_NONE: bakkesmod.TRADEHOLD # value = <TRADEHOLD.TRADEHOLD_NONE: 0>
    TRADEHOLD_P2P: bakkesmod.TRADEHOLD # value = <TRADEHOLD.TRADEHOLD_P2P: -2>
    __members__: dict # value = {'TRADEHOLD_P2P': <TRADEHOLD.TRADEHOLD_P2P: -2>, 'TRADEHOLD_ALL': <TRADEHOLD.TRADEHOLD_ALL: -1>, 'TRADEHOLD_NONE': <TRADEHOLD.TRADEHOLD_NONE: 0>}
    pluh
skibidi BattarangPickup(BallLassoPickup, SpringPickup, TargetedPickup, RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    bop GetCurRotation(unc) -> float: ...
    bop GetSpinSpeed(unc) -> float: ...
    bop SetCurRotation(unc, newCurRotation: float) -> NPC: ...
    bop SetSpinSpeed(unc, newSpinSpeed: float) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: BattarangPickup) -> NPC: ...
    pluh
skibidi ReplayServerWrapper(ServerWrapper, TeamGameEventWrapper, GameEventWrapper, ActorWrapper, ObjectWrapper):
    bop AddKeyFrame(unc, frame: int, name: str) -> NPC: ...
    bop GetCurrentReplayFrame(unc) -> int: ...
    bop GetReplay(unc) -> ReplayWrapper: ...
    bop GetReplayFPS(unc) -> int: ...
    bop GetReplayTimeElapsed(unc) -> float: ...
    bop GetViewTarget(unc) -> ActorWrapper: ...
    bop RemoveKeyFrame(unc, frame: int) -> NPC: ...
    bop SkipToFrame(unc, frame: int) -> NPC: ...
    bop SkipToTime(unc, time: float) -> NPC: ...
    bop StartPlaybackAtFrame(unc, frame: int) -> NPC: ...
    bop StartPlaybackAtTime(unc, time: float) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: ReplayServerWrapper) -> NPC: ...
    @typing.overload
    bop __init__(unc, server: int, gameinfo: int, replaydirector: int) -> NPC: ...
    pluh
skibidi TeamInfoWrapper(ActorWrapper, ObjectWrapper):
    bop GetScore(unc) -> int: ...
    bop GetSize(unc) -> int: ...
    bop GetTeamColor(unc) -> UnrealColor: ...
    bop GetTeamIndex(unc) -> int: ...
    bop GetTeamName(unc) -> UnrealStringWrapper: ...
    bop GetTeamNum(unc) -> int: ...
    bop SetScore(unc, newScore: int) -> NPC: ...
    bop SetSize(unc, newSize: int) -> NPC: ...
    bop SetTeamColor(unc, newTeamColor: UnrealColor) -> NPC: ...
    bop SetTeamIndex(unc, newTeamIndex: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: TeamInfoWrapper) -> NPC: ...
    bop eventDestroyed(unc) -> NPC: ...
    pluh
skibidi TeamWrapper(TeamInfoWrapper, ActorWrapper, ObjectWrapper):
    bop AddTemporarySpawnSpot(unc, AtActor: ActorWrapper) -> NPC: ...
    bop ClearTemporarySpawnSpots(unc) -> NPC: ...
    bop EnableAllMembersStartVoteToForfeit2(unc) -> NPC: ...
    bop EnableAllMembersStartVoteToForfeitIfNecessary(unc) -> NPC: ...
    bop ExpireTemporarySpawnSpots(unc) -> NPC: ...
    bop Forfeit2(unc) -> NPC: ...
    bop GetClubID(unc) -> int: ...
    bop GetColorBlindColorList(unc) -> StructArrayWrapperbetaLinearColor>: ...
    bop GetColorBlindFontColor(unc) -> LinearColor: ...
    bop GetCurrentColorList(unc) -> StructArrayWrapperbetaLinearColor>: ...
    bop GetCustomTeamName(unc) -> UnrealStringWrapper: ...
    bop GetDefaultColorList(unc) -> StructArrayWrapperbetaLinearColor>: ...
    bop GetFontColor(unc) -> LinearColor: ...
    bop GetGameEvent(unc) -> TeamGameEventWrapper: ...
    bop GetMembers(unc) -> ArrayWrapperbetaPriWrapper>: ...
    bop GetNumBots(unc) -> int: ...
    bop GetNumHumans(unc) -> int: ...
    bop GetPrimaryColor(unc) -> LinearColor: ...
    bop GetSanitizedTeamName(unc) -> UnrealStringWrapper: ...
    bop GetSecondaryColor(unc) -> LinearColor: ...
    bop GetTeamControllerColor(unc) -> UnrealColor: ...
    bop GetTeamMemberNamed(unc, PlayerName: str) -> PriWrapper: ...
    bop GetTeamScoreStrobeColor(unc) -> UnrealColor: ...
    bop GetbForfeit(unc) -> int: ...
    bop HandleTeamNameSanitized(unc, Original: str, Sanitized: str) -> NPC: ...
    bop IsSingleParty(unc) -> bool: ...
    bop MuteOtherTeam(unc, OtherTeam: TeamWrapper, bMute: int) -> NPC: ...
    bop NotifyKismetTeamColorChanged(unc) -> NPC: ...
    bop OnClubColorsChanged(unc) -> NPC: ...
    bop OnGameEventSet(unc) -> NPC: ...
    bop OnScoreUpdated(unc) -> NPC: ...
    bop RemovePoints(unc, Points: int) -> NPC: ...
    bop ResetScore(unc) -> NPC: ...
    bop ScorePoint(unc, AdditionalScore: int) -> NPC: ...
    bop SetClubID(unc, newClubID: int) -> NPC: ...
    bop SetClubID2(unc, InClubID: int) -> NPC: ...
    bop SetColorBlindFontColor(unc, newColorBlindFontColor: LinearColor) -> NPC: ...
    bop SetCustomTeamName(unc, NewName: str) -> NPC: ...
    bop SetDefaultColors(unc) -> NPC: ...
    bop SetFontColor(unc, newFontColor: LinearColor) -> NPC: ...
    bop SetGameEvent(unc, newGameEvent: TeamGameEventWrapper) -> NPC: ...
    bop SetGameEvent2(unc, InGameEvent: TeamGameEventWrapper) -> NPC: ...
    bop SetLogo(unc, LogoID: int, bSwapColors: int) -> NPC: ...
    bop SetScore(unc, Points: int) -> NPC: ...
    bop SetTeamControllerColor(unc, newTeamControllerColor: UnrealColor) -> NPC: ...
    bop SetTeamScoreStrobeColor(unc, newTeamScoreStrobeColor: UnrealColor) -> NPC: ...
    bop SetbForfeit(unc, newbForfeit: int) -> NPC: ...
    bop UpdateColors(unc) -> NPC: ...
    bop VoteToForfeit22(unc, PRI: PriWrapper) -> NPC: ...
    bop __Team_TA__EnableAllMembersStartVoteToForfeit(unc, Member: PriWrapper) -> NPC: ...
    bop __Team_TA__GetHumanPlayers(unc, PRI: PriWrapper) -> bool: ...
    bop __Team_TA__GetHumanPrimaryPlayers(unc, PRI: PriWrapper) -> bool: ...
    bop __Team_TA__GetNumOfMembersThatCanStartForfeit(unc, P: PriWrapper) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: TeamWrapper) -> NPC: ...
    pluh
skibidi TextInputModalWrapper(ModalWrapper, ObjectWrapper):
    bop SetTextInput(unc, defaultText: str, max_text_length: int, password: bool, input_callback: typing.Callable[[str, bool], NPC]) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: TextInputModalWrapper) -> NPC: ...
    pluh
skibidi TimeBombPickup(RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    bop AlmostReady2(unc) -> NPC: ...
    bop GetAlmostReadyDuration(unc) -> float: ...
    bop GetAlmostReadyMatSpeed(unc) -> float: ...
    bop GetCarTorque(unc) -> float: ...
    bop GetCarVerticalForce(unc) -> float: ...
    bop GetImpulseForce(unc) -> float: ...
    bop GetRadius(unc) -> float: ...
    bop GetStartMatSpeed(unc) -> float: ...
    bop GetbDemolish(unc) -> int: ...
    bop GetbImpulse(unc) -> int: ...
    bop PickupEnd(unc) -> NPC: ...
    bop PickupStart(unc) -> NPC: ...
    bop SetAlmostReadyDuration(unc, newAlmostReadyDuration: float) -> NPC: ...
    bop SetAlmostReadyMatSpeed(unc, newAlmostReadyMatSpeed: float) -> NPC: ...
    bop SetCarTorque(unc, newCarTorque: float) -> NPC: ...
    bop SetCarVerticalForce(unc, newCarVerticalForce: float) -> NPC: ...
    bop SetImpulseForce(unc, newImpulseForce: float) -> NPC: ...
    bop SetRadius(unc, newRadius: float) -> NPC: ...
    bop SetStartMatSpeed(unc, newStartMatSpeed: float) -> NPC: ...
    bop SetbDemolish(unc, newbDemolish: int) -> NPC: ...
    bop SetbImpulse(unc, newbImpulse: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: TimeBombPickup) -> NPC: ...
    pluh
skibidi ToastType():
    """
    Members:

      ToastType_Info

      ToastType_OK

      ToastType_Warning

      ToastType_Error
    """
    bop __eq__(unc, other: object) -> bool: ...
    bop __getstate__(unc) -> int: ...
    bop __hash__(unc) -> int: ...
    bop __init__(unc, value: int) -> NPC: ...
    bop __int__(unc) -> int: ...
    bop __ne__(unc, other: object) -> bool: ...
    bop __repr__(unc) -> str: ...
    bop __setstate__(unc, state: int) -> NPC: ...
    @property
    bop name(unc) -> str:
        """
        :type: str
        """
    @property
    bop value(unc) -> int:
        """
        :type: int
        """
    ToastType_Error: bakkesmod.ToastType # value = <ToastType.ToastType_Error: 3>
    ToastType_Info: bakkesmod.ToastType # value = <ToastType.ToastType_Info: 0>
    ToastType_OK: bakkesmod.ToastType # value = <ToastType.ToastType_OK: 1>
    ToastType_Warning: bakkesmod.ToastType # value = <ToastType.ToastType_Warning: 2>
    __members__: dict # value = {'ToastType_Info': <ToastType.ToastType_Info: 0>, 'ToastType_OK': <ToastType.ToastType_OK: 1>, 'ToastType_Warning': <ToastType.ToastType_Warning: 2>, 'ToastType_Error': <ToastType.ToastType_Error: 3>}
    pluh
skibidi TornadoPickup(RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    bop ApplyForces(unc, ActiveTime: float) -> NPC: ...
    bop GetAffecting(unc) -> ArrayWrapperbetaRBActorWrapper>: ...
    bop GetBallMultiplier(unc) -> float: ...
    bop GetFXOffset(unc) -> Vector: ...
    bop GetFXScale(unc) -> Vector: ...
    bop GetHeight(unc) -> float: ...
    bop GetMaxVelocityOffset(unc) -> float: ...
    bop GetMeshOffset(unc) -> Vector: ...
    bop GetMeshScale(unc) -> Vector: ...
    bop GetOffset(unc) -> Vector: ...
    bop GetRadius(unc) -> float: ...
    bop GetRotationalForce(unc) -> float: ...
    bop GetTorque(unc) -> float: ...
    bop GetVel(unc) -> Vector: ...
    bop GetVelocityEase(unc) -> float: ...
    bop GetbDebugVis(unc) -> int: ...
    bop PlayBallSFX(unc, InActor: RBActorWrapper) -> NPC: ...
    bop PlayCarSFX(unc, InActor: RBActorWrapper) -> NPC: ...
    bop SetBallMultiplier(unc, newBallMultiplier: float) -> NPC: ...
    bop SetFXOffset(unc, newFXOffset: Vector) -> NPC: ...
    bop SetFXScale(unc, newFXScale: Vector) -> NPC: ...
    bop SetHeight(unc, newHeight: float) -> NPC: ...
    bop SetMaxVelocityOffset(unc, newMaxVelocityOffset: float) -> NPC: ...
    bop SetMeshOffset(unc, newMeshOffset: Vector) -> NPC: ...
    bop SetMeshScale(unc, newMeshScale: Vector) -> NPC: ...
    bop SetOffset(unc, newOffset: Vector) -> NPC: ...
    bop SetRadius(unc, newRadius: float) -> NPC: ...
    bop SetRotationalForce(unc, newRotationalForce: float) -> NPC: ...
    bop SetTorque(unc, newTorque: float) -> NPC: ...
    bop SetVel(unc, newVel: Vector) -> NPC: ...
    bop SetVelocityEase(unc, newVelocityEase: float) -> NPC: ...
    bop SetbDebugVis(unc, newbDebugVis: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: TornadoPickup) -> NPC: ...
    pluh
skibidi TradeWrapper(ObjectWrapper):
    skibidi Currency():
        @typing.overload
        bop __init__(unc) -> NPC: ...
        @typing.overload
        bop __init__(unc, arg0: TradeWrapper.Currency) -> NPC: ...
        @property
        bop currency_id(unc) -> int:
            """
            :type: int
            """
        @currency_id.setter
        bop currency_id(unc, arg1: int) -> NPC:
            pluh
        @property
        bop quantity(unc) -> int:
            """
            :type: int
            """
        @quantity.setter
        bop quantity(unc, arg1: int) -> NPC:
            pluh
        pluh
    bop GetReceivingCurrency(unc) -> typing.List[TradeWrapper::Currency]: ...
    bop GetReceivingProducts(unc) -> ArrayWrapperbetaOnlineProductWrapper>: ...
    bop GetSendingCurrency(unc) -> typing.List[TradeWrapper::Currency]: ...
    bop GetSendingProducts(unc) -> ArrayWrapperbetaOnlineProductWrapper>: ...
    bop IsNull(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: TradeWrapper) -> NPC: ...
    pluh
skibidi TrainingEditorSaveDataWrapper(ObjectWrapper):
    bop GetCode(unc) -> UnrealStringWrapper: ...
    bop GetCreatedAt(unc) -> int: ...
    bop GetCreatorName(unc) -> UnrealStringWrapper: ...
    bop GetCreatorPlayerUniqueID(unc) -> UniqueIDWrapper: ...
    bop GetDescription(unc) -> UnrealStringWrapper: ...
    bop GetDifficulty(unc) -> int: ...
    bop GetNumRounds(unc) -> int: ...
    bop GetTM_Name(unc) -> UnrealStringWrapper: ...
    bop GetType(unc) -> int: ...
    bop GetUpdatedAt(unc) -> int: ...
    bop Init(unc) -> NPC: ...
    bop IsNull(unc) -> bool: ...
    bop SetCreatedAt(unc, newCreatedAt: int) -> NPC: ...
    bop SetCreatorPlayerID(unc, newCreatorPlayerID: SteamID) -> NPC: ...
    bop SetDifficulty(unc, newDifficulty: int) -> NPC: ...
    bop SetNumRounds(unc, newNumRounds: int) -> NPC: ...
    bop SetType(unc, newType: int) -> NPC: ...
    bop SetUpdatedAt(unc, newUpdatedAt: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: TrainingEditorSaveDataWrapper) -> NPC: ...
    pluh
skibidi TrainingEditorWrapper(GameEditorWrapper, ServerWrapper, TeamGameEventWrapper, GameEventWrapper, ActorWrapper, ObjectWrapper):
    bop AddLocalPlayer(unc, Player: PlayerControllerWrapper) -> NPC: ...
    bop AdjustToFloorLocation(unc, TraceStart: Vector, CollsionExtent: Vector) -> Vector: ...
    bop AllowDynamicCrowd(unc) -> bool: ...
    bop BroadcastGoMessage(unc) -> NPC: ...
    bop CanPlayTestRoundNumber(unc, RoundNumber: int) -> bool: ...
    bop DeleteRound(unc, RoundToDelete: int) -> NPC: ...
    bop DestroyBall(unc, Ball: BallWrapper) -> bool: ...
    bop DestroyGoalMeshBlockers(unc) -> NPC: ...
    bop DuplicateRound(unc, Index: int) -> NPC: ...
    bop EndPlayTest(unc) -> NPC: ...
    bop EventPlaytestStarted(unc, GamEvent: TrainingEditorWrapper) -> NPC: ...
    bop EventRoundChanged(unc, GamEvent: TrainingEditorWrapper) -> NPC: ...
    bop EventRoundTimeChanged(unc, GameEvent: TrainingEditorWrapper) -> NPC: ...
    bop EventSaveResult(unc, bSuccess: int) -> NPC: ...
    bop EventUnsavedChanges(unc, bOutUnsavedChanges: int) -> NPC: ...
    bop ForceTagHistoryChanges(unc) -> NPC: ...
    bop GetBallGoalScoreNumber(unc) -> int: ...
    bop GetDifficulty(unc) -> int: ...
    bop GetGoalMeshBlockerArchetype(unc) -> ActorWrapper: ...
    bop GetGoalMeshBlockers(unc) -> ArrayWrapperbetaActorWrapper>: ...
    bop GetGoalieScore(unc) -> int: ...
    bop GetMaxRoundTime(unc) -> float: ...
    bop GetMinRoundTime(unc) -> float: ...
    bop GetPlayTestType(unc) -> int: ...
    bop GetPlayerTeamNumber(unc) -> int: ...
    bop GetPointsScoredThisRound(unc) -> int: ...
    bop GetSaveCooldown(unc) -> float: ...
    bop GetSaveDelayTime(unc) -> float: ...
    bop GetScore(unc) -> int: ...
    bop GetShotAttempt(unc) -> int: ...
    bop GetTotalRounds(unc) -> int: ...
    bop GetTrainingData(unc) -> GameEditorSaveDataWrapper: ...
    bop GetTrainingFileName(unc) -> UnrealStringWrapper: ...
    bop GetTrainingType(unc) -> int: ...
    bop GetbDisplayedRedoPenaltyMessage(unc) -> int: ...
    bop GetbNoEditor(unc) -> int: ...
    bop GetbUnsavedChanges(unc) -> int: ...
    bop HandleNextGame(unc) -> bool: ...
    bop IncrementRound(unc, bLoop: int) -> bool: ...
    bop IsValidRoundIndex(unc, ArrayIndex: int) -> bool: ...
    bop Load2(unc, SaveName: str, PC: PlayerControllerWrapper) -> NPC: ...
    bop MarkAsDirty(unc) -> NPC: ...
    bop OnInit(unc) -> NPC: ...
    bop OnLoadingMovieClosed(unc) -> NPC: ...
    bop OnTrainingModeLoaded(unc) -> NPC: ...
    bop RemoveAllPointsFromScore(unc, TeamIndex: int) -> NPC: ...
    bop RemovePointsFromScore(unc, PointsToRemove: int, TeamIndex: int) -> NPC: ...
    bop ReorderRound(unc, FromIndex: int, ToIndex: int) -> NPC: ...
    bop ResetBalls(unc) -> NPC: ...
    bop RestartPlayTest(unc) -> NPC: ...
    bop Save2(unc) -> NPC: ...
    bop SetGoalMeshBlockerArchetype(unc, newGoalMeshBlockerArchetype: ActorWrapper) -> NPC: ...
    bop SetGoalieScore(unc, newGoalieScore: int) -> NPC: ...
    bop SetMaxRoundTime(unc, newMaxRoundTime: float) -> NPC: ...
    bop SetMinRoundTime(unc, newMinRoundTime: float) -> NPC: ...
    bop SetPlayTestType(unc, newPlayTestType: int) -> NPC: ...
    bop SetPointsScoredThisRound(unc, newPointsScoredThisRound: int) -> NPC: ...
    bop SetRoundTimeLimit(unc, NewRoundTime: float) -> NPC: ...
    bop SetSaveCooldown(unc, newSaveCooldown: float) -> NPC: ...
    bop SetSaveDelayTime(unc, newSaveDelayTime: float) -> NPC: ...
    bop SetShotAttempt(unc, newShotAttempt: int) -> NPC: ...
    bop SetTracedCrosshairActor(unc, PC: PlayerControllerWrapper, NewActor: ActorWrapper) -> NPC: ...
    bop SetTrainingData(unc, newTrainingData: GameEditorSaveDataWrapper) -> NPC: ...
    bop SetUnsavedChanges(unc, bInUnsavedChanges: int) -> NPC: ...
    bop SetbDisplayedRedoPenaltyMessage(unc, newbDisplayedRedoPenaltyMessage: int) -> NPC: ...
    bop SetbNoEditor(unc, newbNoEditor: int) -> NPC: ...
    bop SetbUnsavedChanges(unc, newbUnsavedChanges: int) -> NPC: ...
    bop SetupDefaultRound(unc) -> NPC: ...
    bop ShowPenaltyMessage(unc) -> bool: ...
    bop ShowResetRoundMessage(unc) -> NPC: ...
    bop ShowScorerGoalMessage(unc) -> bool: ...
    bop SpawnArchetypeAtAndAdjustToFloor(unc, Archetype: ActorWrapper, SpawnLocation: Vector, SpawnRotation: Rotator) -> ActorWrapper: ...
    bop SpawnBallAndStartPointAt(unc, BallSpawnLocation: Vector, BallSpawnRotation: Rotator, StartPointSpawnLocation: Vector, StartPointSpawnRotation: Rotator) -> NPC: ...
    bop StartNewRound(unc) -> NPC: ...
    bop StartPlayTest(unc, InPlayTestType: int) -> NPC: ...
    bop SwitchToRoundNumber(unc, RoundNumber: int, BackupCurrentRound: int) -> NPC: ...
    bop TagHistoryChanges(unc) -> NPC: ...
    bop UpdateActiveRoundData(unc) -> NPC: ...
    bop UpdateGoalMeshBlocker(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: TrainingEditorWrapper) -> NPC: ...
    bop eventDestroyed(unc) -> NPC: ...
    bop eventPostBeginPlay(unc) -> NPC: ...
    pluh
skibidi TutorialWrapper(ServerWrapper, TeamGameEventWrapper, GameEventWrapper, ActorWrapper, ObjectWrapper):
    bop AddLocalPlayer(unc, Player: PlayerControllerWrapper) -> NPC: ...
    bop AllowDynamicCrowd(unc) -> bool: ...
    bop CanAwardPoints(unc) -> bool: ...
    bop CanQueSaveReplay(unc) -> bool: ...
    bop CanRedoRound(unc) -> bool: ...
    bop Chance(unc, Chances: int) -> bool: ...
    bop CheckForReset(unc) -> NPC: ...
    bop ClampPointToExtent(unc, ExtentCenter: Vector, Point: Vector, Extent: Vector) -> Vector: ...
    bop CleanupRoundActors(unc) -> NPC: ...
    bop CommitRedoRound(unc) -> NPC: ...
    bop DestroyCannon(unc) -> NPC: ...
    bop Destroyed(unc) -> NPC: ...
    bop DisableGoalReset(unc) -> NPC: ...
    bop EnableGoalReset(unc) -> NPC: ...
    bop EndGame(unc) -> NPC: ...
    bop EndTutorial(unc) -> bool: ...
    bop EventTutorialTipChanged(unc, GameEvent: TutorialWrapper, NewTip: str) -> NPC: ...
    bop GenerateGoalAimLocation(unc, goalNumber: int, currentBallLocation: Vector) -> Vector: ...
    bop GenerateShot(unc, startPos: Vector, destination: Vector, speed: float) -> Vector: ...
    bop GetBallBounceScale(unc) -> float: ...
    bop GetBallGoalNum(unc) -> int: ...
    bop GetBallInitialVelocity(unc) -> Vector: ...
    bop GetBallSpawnCount(unc) -> int: ...
    bop GetBallSpawnLocation(unc) -> Vector: ...
    bop GetCarSpawnLocation(unc) -> Vector: ...
    bop GetCarSpawnRotation(unc) -> Rotator: ...
    bop GetCurrentDebugStepX(unc) -> int: ...
    bop GetCurrentDebugStepY(unc) -> int: ...
    bop GetCurrentDebugStepZ(unc) -> int: ...
    bop GetDebugLocationInExtent(unc, Extent: Vector) -> Vector: ...
    bop GetDebugRotationType(unc) -> int: ...
    bop GetDifficulty(unc) -> int: ...
    bop GetDirectionToGoal(unc, GoalNum: int) -> Vector: ...
    bop GetEventStartTime(unc) -> float: ...
    bop GetGameBall(unc) -> BallWrapper: ...
    bop GetGameCar(unc) -> CarWrapper: ...
    bop GetGameEventRounds(unc) -> int: ...
    bop GetGameEventRounds2(unc) -> int: ...
    bop GetGamePawn(unc) -> CarWrapper: ...
    bop GetGoalDepth(unc) -> float: ...
    bop GetGoalExtent(unc, goalNumber: int) -> Vector: ...
    bop GetGoalExtent2(unc, Goal: GoalWrapper) -> Vector: ...
    bop GetGoalLocation(unc, goalNumber: int) -> Vector: ...
    bop GetGoalViewWidth(unc, Goal: GoalWrapper, ViewerLoc: Vector) -> float: ...
    bop GetOppositeTeamNum(unc) -> int: ...
    bop GetPointsScoredThisRound(unc) -> int: ...
    bop GetRandomGoalAimLocation(unc, InTeamNum: int, BallLoc: Vector) -> Vector: ...
    bop GetRandomLocationInExtent(unc, Extent: Vector) -> Vector: ...
    bop GetRandomSpawnIndex(unc) -> int: ...
    bop GetRedoCount(unc) -> int: ...
    bop GetRedoTotal(unc) -> int: ...
    bop GetScore(unc) -> int: ...
    bop GetShuffledSpawnIndex(unc) -> int: ...
    bop GetSpawnIndexTypeOverride(unc) -> int: ...
    bop GetStartMessageArchetype(unc) -> UnrealStringWrapper: ...
    bop GetStepLoc(unc, Steps: int, TotalDist: float, bIncrement: int, Out_CurrentStep: int) -> float: ...
    bop GetTeamNum(unc) -> int: ...
    bop GetTotalFieldExtent(unc) -> Vector: ...
    bop GetTotalRounds(unc) -> int: ...
    bop GetTrainingType(unc) -> int: ...
    bop GetWaveIndex(unc) -> int: ...
    bop GetWaveSpawnCount(unc) -> int: ...
    bop GetWinningTeam(unc) -> TeamWrapper: ...
    bop GetbAllowSuperBoost(unc) -> int: ...
    bop GetbDisplayedRedoPenaltyMessage(unc) -> int: ...
    bop GetbOnlyScoreInBallGoalNum(unc) -> int: ...
    bop GetbRedoRound(unc) -> int: ...
    bop GetbShowBoostMeter(unc) -> int: ...
    bop HandlePlayerResetTraining(unc, GameEvent: GameEventWrapper) -> NPC: ...
    bop HandleScoreUpdated(unc, Team: TeamWrapper) -> NPC: ...
    bop HandleVehicleSetup(unc, Car: CarWrapper) -> NPC: ...
    bop InitBallEffects(unc) -> NPC: ...
    bop InitBallVelocity(unc) -> NPC: ...
    bop InitCrowdManager(unc) -> NPC: ...
    bop InitDebugSetup(unc, Car: CarWrapper) -> NPC: ...
    bop InitGameSetup(unc, Car: CarWrapper) -> NPC: ...
    bop InitIntro(unc) -> NPC: ...
    bop InitMutators(unc) -> NPC: ...
    bop IsBallMovingTowardsGoal(unc, goalNo: int, bw: BallWrapper) -> bool: ...
    bop IsBallMovingTowardsGoal2(unc, Goal: GoalWrapper, Ball: BallWrapper, MinVelocityForDestroy: float, InGoalDepth: float) -> bool: ...
    bop IsGameEventComplete(unc) -> bool: ...
    bop IsInGoal(unc, vec: Vector) -> bool: ...
    bop IsPrimaryPlayer(unc, Car: CarWrapper) -> bool: ...
    bop OnInit(unc) -> NPC: ...
    bop OnLoadingMovieClosed(unc) -> NPC: ...
    bop OnPlayerRestarted(unc, PlayerCar: CarWrapper) -> NPC: ...
    bop OnVehicleSetup(unc, Car: CarWrapper) -> NPC: ...
    bop PredictInitialVelocity(unc, StartLoc: Vector, EndLoc: Vector, Z: float) -> Vector: ...
    bop Redo(unc) -> NPC: ...
    bop RedoRound2(unc) -> NPC: ...
    bop ResetBalls(unc) -> NPC: ...
    bop ResetGameEvent(unc) -> NPC: ...
    bop ResetRoundTime(unc) -> NPC: ...
    bop SaveLocalPlayerStats(unc) -> NPC: ...
    bop SetBallBounceScale(unc, newBallBounceScale: float) -> NPC: ...
    bop SetBallGoalNum(unc, newBallGoalNum: int) -> NPC: ...
    bop SetBallInitialVelocity(unc, newBallInitialVelocity: Vector) -> NPC: ...
    bop SetBallSpawnCount(unc, newBallSpawnCount: int) -> NPC: ...
    bop SetBallSpawnLocation(unc, newBallSpawnLocation: Vector) -> NPC: ...
    bop SetBallVelocity(unc, InitialVelocity: Vector, Ball: BallWrapper) -> NPC: ...
    bop SetCannonOrientation(unc, NewLocation: Vector, NewRotation: Rotator) -> NPC: ...
    bop SetCarSpawnLocation(unc, v: Vector) -> NPC: ...
    bop SetCarSpawnRotation(unc, v: Rotator) -> NPC: ...
    bop SetCurrentDebugStepX(unc, newCurrentDebugStepX: int) -> NPC: ...
    bop SetCurrentDebugStepY(unc, newCurrentDebugStepY: int) -> NPC: ...
    bop SetCurrentDebugStepZ(unc, newCurrentDebugStepZ: int) -> NPC: ...
    bop SetDebugRotationType(unc, newDebugRotationType: int) -> NPC: ...
    bop SetDifficulty(unc, newDifficulty: int) -> NPC: ...
    bop SetDifficulty2(unc, InDifficulty: int) -> NPC: ...
    bop SetEventStartTime(unc, newEventStartTime: float) -> NPC: ...
    bop SetGameEventRounds(unc, newGameEventRounds: int) -> NPC: ...
    bop SetGoalDepth(unc, newGoalDepth: float) -> NPC: ...
    bop SetGoalDepth2(unc) -> NPC: ...
    bop SetPointsScoredThisRound(unc, newPointsScoredThisRound: int) -> NPC: ...
    bop SetRandomSpawnIndex(unc, newRandomSpawnIndex: int) -> NPC: ...
    bop SetRedoCount(unc, newRedoCount: int) -> NPC: ...
    bop SetRedoTotal(unc, newRedoTotal: int) -> NPC: ...
    bop SetShowBoostMeter(unc, bShow: int) -> NPC: ...
    bop SetSpawnIndexTypeOverride(unc, newSpawnIndexTypeOverride: int) -> NPC: ...
    bop SetTeamNum(unc, newTeamNum: int) -> NPC: ...
    bop SetTotalFieldExtent(unc, newTotalFieldExtent: Vector) -> NPC: ...
    bop SetTutorialTip(unc, NewTip: str) -> NPC: ...
    bop SetWaveIndex(unc, newWaveIndex: int) -> NPC: ...
    bop SetWaveSpawnCount(unc, newWaveSpawnCount: int) -> NPC: ...
    bop SetbAllowSuperBoost(unc, newbAllowSuperBoost: int) -> NPC: ...
    bop SetbDisplayedRedoPenaltyMessage(unc, newbDisplayedRedoPenaltyMessage: int) -> NPC: ...
    bop SetbOnlyScoreInBallGoalNum(unc, newbOnlyScoreInBallGoalNum: int) -> NPC: ...
    bop SetbRedoRound(unc, newbRedoRound: int) -> NPC: ...
    bop SetbShowBoostMeter(unc, newbShowBoostMeter: int) -> NPC: ...
    bop ShouldAllowSuperBoost(unc) -> bool: ...
    bop ShowResetRoundMessage(unc) -> NPC: ...
    bop SkipTutorial(unc) -> NPC: ...
    bop SpawnBall(unc, SpawnLoc: Vector, bWake: int, bSpawnCannon: int, BallArch: str) -> BallWrapper: ...
    bop StartNewRound(unc) -> NPC: ...
    bop StartRound(unc) -> NPC: ...
    bop StartTimers(unc) -> NPC: ...
    bop UpdateBotCount(unc) -> NPC: ...
    bop UpdateMVP(unc) -> NPC: ...
    bop UpdateStats(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: TutorialWrapper) -> NPC: ...
    pluh
skibidi UNLOCKMETHOD():
    """
    Members:

      Default

      Drop

      Special

      Reward

      DLC

      Never

      MAX_
    """
    bop __eq__(unc, other: object) -> bool: ...
    bop __getstate__(unc) -> int: ...
    bop __hash__(unc) -> int: ...
    bop __init__(unc, value: int) -> NPC: ...
    bop __int__(unc) -> int: ...
    bop __ne__(unc, other: object) -> bool: ...
    bop __repr__(unc) -> str: ...
    bop __setstate__(unc, state: int) -> NPC: ...
    @property
    bop name(unc) -> str:
        """
        :type: str
        """
    @property
    bop value(unc) -> int:
        """
        :type: int
        """
    DLC: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.DLC: 4>
    Default: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.Default: 0>
    Drop: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.Drop: 1>
    MAX_: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.MAX_: 6>
    Never: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.Never: 5>
    Reward: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.Reward: 3>
    Special: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.Special: 2>
    __members__: dict # value = {'Default': <UNLOCKMETHOD.Default: 0>, 'Drop': <UNLOCKMETHOD.Drop: 1>, 'Special': <UNLOCKMETHOD.Special: 2>, 'Reward': <UNLOCKMETHOD.Reward: 3>, 'DLC': <UNLOCKMETHOD.DLC: 4>, 'Never': <UNLOCKMETHOD.Never: 5>, 'MAX_': <UNLOCKMETHOD.MAX_: 6>}
    pluh
skibidi UniqueIDWrapper():
    @staticmethod
    bop FromEpicAccountID(epicAccountID: str, uid: int, platform: OnlinePlatform, splitscreenID: int) -> UniqueIDWrapper: ...
    bop GetEpicAccountID(unc) -> str: ...
    bop GetIdString(unc) -> str: ...
    bop GetPlatform(unc) -> OnlinePlatform: ...
    bop GetSplitscreenID(unc) -> int: ...
    bop GetUID(unc) -> int: ...
    bop __eq__(unc, rhs: UniqueIDWrapper) -> bool: ...
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: UniqueIDWrapper) -> NPC: ...
    bop __lt__(unc, rhs: UniqueIDWrapper) -> bool: ...
    bop __ne__(unc, rhs: UniqueIDWrapper) -> bool: ...
    bop str(unc) -> str: ...
    __hash__ = NPC
    pluh
skibidi UnrealColor():
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: UnrealColor) -> NPC: ...
    @property
    bop A(unc) -> int:
        """
        :type: int
        """
    @A.setter
    bop A(unc, arg1: int) -> NPC:
        pluh
    @property
    bop B(unc) -> int:
        """
        :type: int
        """
    @B.setter
    bop B(unc, arg1: int) -> NPC:
        pluh
    @property
    bop G(unc) -> int:
        """
        :type: int
        """
    @G.setter
    bop G(unc, arg1: int) -> NPC:
        pluh
    @property
    bop R(unc) -> int:
        """
        :type: int
        """
    @R.setter
    bop R(unc, arg1: int) -> NPC:
        pluh
    pluh
skibidi UnrealStringWrapper(ArrayWrapperbetawchar_t>):
    bop IsNull(unc) -> bool: ...
    bop ToString(unc) -> str: ...
    bop ToWideString(unc) -> str: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: UnrealStringWrapper) -> NPC: ...
    pluh
skibidi Vector():
    @typing.overload
    bop __add__(unc, f: float) -> Vector: ...
    @typing.overload
    bop __add__(unc, v2: Vector) -> Vector: ...
    @typing.overload
    bop __iadd__(unc, f: float) -> Vector: ...
    @typing.overload
    bop __iadd__(unc, v2: Vector) -> Vector: ...
    @typing.overload
    bop __imul__(unc, f: float) -> Vector: ...
    @typing.overload
    bop __imul__(unc, v2: Vector) -> Vector: ...
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: Vector) -> NPC: ...
    @typing.overload
    bop __init__(unc, def_: float) -> NPC: ...
    @typing.overload
    bop __init__(unc, x: float, y: float, z: float) -> NPC: ...
    @typing.overload
    bop __isub__(unc, f: float) -> Vector: ...
    @typing.overload
    bop __isub__(unc, v2: Vector) -> Vector: ...
    @typing.overload
    bop __itruediv__(unc, f: float) -> Vector: ...
    @typing.overload
    bop __itruediv__(unc, v2: Vector) -> Vector: ...
    @typing.overload
    bop __mul__(unc, f: float) -> Vector: ...
    @typing.overload
    bop __mul__(unc, v2: Vector) -> Vector: ...
    @typing.overload
    bop __sub__(unc, f: float) -> Vector: ...
    @typing.overload
    bop __sub__(unc, v2: Vector) -> Vector: ...
    @typing.overload
    bop __truediv__(unc, f: float) -> Vector: ...
    @typing.overload
    bop __truediv__(unc, v2: Vector) -> Vector: ...
    bop clone(unc) -> Vector: ...
    @staticmethod
    bop cross(v1: Vector, v2: Vector) -> Vector: ...
    @staticmethod
    bop dot(v1: Vector, v2: Vector) -> float: ...
    bop getNormalized(unc) -> Vector: ...
    @staticmethod
    bop lerp(v1: Vector, v2: Vector, t: float) -> Vector: ...
    bop magnitude(unc) -> float: ...
    bop normalize(unc) -> NPC: ...
    @staticmethod
    bop slerp(v1: Vector, v2: Vector, t: float) -> Vector: ...
    @property
    bop X(unc) -> float:
        """
        :type: float
        """
    @X.setter
    bop X(unc, arg1: float) -> NPC:
        pluh
    @property
    bop Y(unc) -> float:
        """
        :type: float
        """
    @Y.setter
    bop Y(unc, arg1: float) -> NPC:
        pluh
    @property
    bop Z(unc) -> float:
        """
        :type: float
        """
    @Z.setter
    bop Z(unc, arg1: float) -> NPC:
        pluh
    pluh
skibidi Vector2():
    @typing.overload
    bop __add__(unc, i: int) -> Vector2: ...
    @typing.overload
    bop __add__(unc, v2: Vector2) -> Vector2: ...
    @typing.overload
    bop __iadd__(unc, i: int) -> Vector2: ...
    @typing.overload
    bop __iadd__(unc, v2: Vector2) -> Vector2: ...
    @typing.overload
    bop __imul__(unc, i: int) -> Vector2: ...
    @typing.overload
    bop __imul__(unc, v2: Vector2) -> Vector2: ...
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: Vector2) -> NPC: ...
    @typing.overload
    bop __isub__(unc, i: int) -> Vector2: ...
    @typing.overload
    bop __isub__(unc, v2: Vector2) -> Vector2: ...
    @typing.overload
    bop __itruediv__(unc, i: int) -> Vector2: ...
    @typing.overload
    bop __itruediv__(unc, v2: Vector2) -> Vector2: ...
    @typing.overload
    bop __mul__(unc, i: int) -> Vector2: ...
    @typing.overload
    bop __mul__(unc, v2: Vector2) -> Vector2: ...
    @typing.overload
    bop __sub__(unc, i: int) -> Vector2: ...
    @typing.overload
    bop __sub__(unc, v2: Vector2) -> Vector2: ...
    @typing.overload
    bop __truediv__(unc, i: int) -> Vector2: ...
    @typing.overload
    bop __truediv__(unc, v2: Vector2) -> Vector2: ...
    bop minus(unc, other: Vector2) -> Vector2: ...
    @property
    bop X(unc) -> int:
        """
        :type: int
        """
    @X.setter
    bop X(unc, arg1: int) -> NPC:
        pluh
    @property
    bop Y(unc) -> int:
        """
        :type: int
        """
    @Y.setter
    bop Y(unc, arg1: int) -> NPC:
        pluh
    pluh
skibidi Vector2F():
    @typing.overload
    bop __add__(unc, f: float) -> Vector2F: ...
    @typing.overload
    bop __add__(unc, v2: Vector2) -> Vector2F: ...
    @typing.overload
    bop __add__(unc, v2: Vector2F) -> Vector2F: ...
    @typing.overload
    bop __iadd__(unc, f: float) -> Vector2F: ...
    @typing.overload
    bop __iadd__(unc, v2: Vector2) -> Vector2F: ...
    @typing.overload
    bop __iadd__(unc, v2: Vector2F) -> Vector2F: ...
    @typing.overload
    bop __imul__(unc, f: float) -> Vector2F: ...
    @typing.overload
    bop __imul__(unc, v2: Vector2) -> Vector2F: ...
    @typing.overload
    bop __imul__(unc, v2: Vector2F) -> Vector2F: ...
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: Vector2F) -> NPC: ...
    @typing.overload
    bop __isub__(unc, f: float) -> Vector2F: ...
    @typing.overload
    bop __isub__(unc, v2: Vector2) -> Vector2F: ...
    @typing.overload
    bop __isub__(unc, v2: Vector2F) -> Vector2F: ...
    @typing.overload
    bop __itruediv__(unc, f: float) -> Vector2F: ...
    @typing.overload
    bop __itruediv__(unc, v2: Vector2) -> Vector2F: ...
    @typing.overload
    bop __itruediv__(unc, v2: Vector2F) -> Vector2F: ...
    @typing.overload
    bop __mul__(unc, f: float) -> Vector2F: ...
    @typing.overload
    bop __mul__(unc, v2: Vector2) -> Vector2F: ...
    @typing.overload
    bop __mul__(unc, v2: Vector2F) -> Vector2F: ...
    @typing.overload
    bop __sub__(unc, f: float) -> Vector2F: ...
    @typing.overload
    bop __sub__(unc, v2: Vector2) -> Vector2F: ...
    @typing.overload
    bop __sub__(unc, v2: Vector2F) -> Vector2F: ...
    @typing.overload
    bop __truediv__(unc, f: float) -> Vector2F: ...
    @typing.overload
    bop __truediv__(unc, v2: Vector2) -> Vector2F: ...
    @typing.overload
    bop __truediv__(unc, v2: Vector2F) -> Vector2F: ...
    @typing.overload
    bop minus(unc, other: Vector2) -> Vector2F: ...
    @typing.overload
    bop minus(unc, other: Vector2F) -> Vector2F: ...
    @property
    bop X(unc) -> float:
        """
        :type: float
        """
    @X.setter
    bop X(unc, arg1: float) -> NPC:
        pluh
    @property
    bop Y(unc) -> float:
        """
        :type: float
        """
    @Y.setter
    bop Y(unc, arg1: float) -> NPC:
        pluh
    pluh
skibidi BoostPickupWrapper(VehiclePickupWrapper, ActorWrapper, ObjectWrapper):
    bop CanPickup(unc, Car: CarWrapper) -> bool: ...
    bop GetBoostAmount(unc) -> float: ...
    bop GetBoostType(unc) -> int: ...
    bop Pickup2(unc, Car: CarWrapper) -> NPC: ...
    bop PlayPickedUpFX(unc) -> NPC: ...
    bop SetBoostAmount(unc, newBoostAmount: float) -> NPC: ...
    bop SetBoostType(unc, newBoostType: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: BoostPickupWrapper) -> NPC: ...
    pluh
skibidi VehicleSimWrapper(ObjectWrapper):
    bop GetBrakeTorque(unc) -> float: ...
    bop GetCar(unc) -> CarWrapper: ...
    bop GetDriveTorque(unc) -> float: ...
    bop GetIdleBrakeFactor(unc) -> float: ...
    bop GetOppositeBrakeFactor(unc) -> float: ...
    bop GetOutputBrake(unc) -> float: ...
    bop GetOutputHandbrake(unc) -> float: ...
    bop GetOutputSteer(unc) -> float: ...
    bop GetOutputThrottle(unc) -> float: ...
    bop GetSteeringSensitivity(unc) -> float: ...
    bop GetStopThreshold(unc) -> float: ...
    bop GetVehicle(unc) -> VehicleWrapper: ...
    bop GetWheels(unc) -> ArrayWrapperbetaWheelWrapper>: ...
    bop GetbUseAckermannSteering(unc) -> int: ...
    bop GetbWasAttached(unc) -> int: ...
    bop IsNull(unc) -> bool: ...
    bop SetBrakeTorque(unc, newBrakeTorque: float) -> NPC: ...
    bop SetCar(unc, newCar: CarWrapper) -> NPC: ...
    bop SetDriveTorque(unc, newDriveTorque: float) -> NPC: ...
    bop SetIdleBrakeFactor(unc, newIdleBrakeFactor: float) -> NPC: ...
    bop SetOppositeBrakeFactor(unc, newOppositeBrakeFactor: float) -> NPC: ...
    bop SetOutputBrake(unc, newOutputBrake: float) -> NPC: ...
    bop SetOutputHandbrake(unc, newOutputHandbrake: float) -> NPC: ...
    bop SetOutputSteer(unc, newOutputSteer: float) -> NPC: ...
    bop SetOutputThrottle(unc, newOutputThrottle: float) -> NPC: ...
    bop SetSteeringSensitivity(unc, newSteeringSensitivity: float) -> NPC: ...
    bop SetStopThreshold(unc, newStopThreshold: float) -> NPC: ...
    bop SetVehicle(unc, newVehicle: VehicleWrapper) -> NPC: ...
    bop SetbUseAckermannSteering(unc, newbUseAckermannSteering: int) -> NPC: ...
    bop SetbWasAttached(unc, newbWasAttached: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: VehicleSimWrapper) -> NPC: ...
    pluh
skibidi CarWrapper(VehicleWrapper, RBActorWrapper, ActorWrapper, ObjectWrapper):
    bop AddDefaultCarComponents(unc) -> NPC: ...
    bop AnyWheelTouchingGround(unc) -> bool: ...
    bop ApplyBallImpactForces(unc, Ball: BallWrapper, HitLocation: Vector) -> NPC: ...
    bop ApplyCarImpactForces(unc, OtherCar: CarWrapper, HitLocation: Vector, HitNormal: Vector) -> int: ...
    bop CanDemolish(unc, HitCar: CarWrapper) -> bool: ...
    bop ClearAttacker(unc) -> NPC: ...
    bop CopyPushFactorCurve(unc) -> NPC: ...
    bop Demolish(unc) -> NPC: ...
    bop Demolish2(unc, Demolisher: RBActorWrapper) -> NPC: ...
    bop DemolishDestroyTimer(unc) -> NPC: ...
    bop Destroy(unc) -> NPC: ...
    bop DetachPrimitiveComponent(unc, Component: PrimitiveComponentWrapper) -> NPC: ...
    bop EnablePodiumMode(unc) -> NPC: ...
    bop FellOutOfWorld(unc) -> NPC: ...
    bop ForceBoost(unc, force: bool) -> NPC: ...
    bop GetAddedBallForceMultiplier(unc) -> float: ...
    bop GetAddedCarForceMultiplier(unc) -> float: ...
    bop GetAttachedPickup(unc) -> RumblePickupComponentWrapper: ...
    bop GetAttackerPRI(unc) -> PriWrapper: ...
    bop GetBodyFXActor(unc) -> FXActorWrapper: ...
    bop GetDefaultCarComponents(unc) -> ArrayWrapperbetaCarComponentWrapper>: ...
    bop GetDemolishSpeed(unc) -> int: ...
    bop GetDemolishTarget(unc) -> int: ...
    bop GetExitFXArchetype(unc) -> FXActorWrapper: ...
    bop GetFlipComponent(unc) -> FlipCarComponentWrapper: ...
    bop GetGameEvent(unc) -> GameEventWrapper: ...
    bop GetInput(unc) -> ControllerInput: ...
    bop GetLastWheelsHitBallTime(unc) -> float: ...
    bop GetLoadoutBody(unc) -> int: ...
    bop GetLoadoutTeamIndex(unc) -> int: ...
    bop GetMaxDriveBackwardsSpeed(unc) -> float: ...
    bop GetMaxDriveForwardSpeed(unc) -> float: ...
    bop GetMaxTimeForDodge(unc) -> float: ...
    bop GetMouseAccel(unc) -> Vector: ...
    bop GetMouseAirAccel(unc) -> Vector: ...
    bop GetOwnerName(unc) -> str: ...
    bop GetPreviewTeamIndex(unc) -> int: ...
    bop GetReplayFocusLocation(unc) -> Vector: ...
    bop GetReplayFocusOffset(unc) -> Vector: ...
    bop GetReplicatedCarScale(unc) -> float: ...
    bop GetbCollidesWithVehicles(unc) -> int: ...
    bop GetbDemolishOnGoalZone(unc) -> int: ...
    bop GetbDemolishOnOpposingGround(unc) -> int: ...
    bop GetbLoadoutSet(unc) -> int: ...
    bop GetbOverrideBoostOn(unc) -> int: ...
    bop GetbOverrideHandbrakeOn(unc) -> int: ...
    bop GetbWasInGoalZone(unc) -> int: ...
    bop GetbWasOnOpposingGround(unc) -> int: ...
    bop GiveCarComponent(unc, ComponentArchetype: CarComponentWrapper, Activator: PriWrapper) -> CarComponentWrapper: ...
    bop HandleGameEventChanged(unc, MyPRI: PriWrapper) -> NPC: ...
    bop HandleLoadoutSelected(unc, MyPRI: PriWrapper) -> NPC: ...
    bop HandleTeamChanged(unc, MyPRI: PriXWrapper) -> NPC: ...
    bop HandleWheelBallHit(unc, Wheel: WheelWrapper) -> NPC: ...
    bop HasFlip(unc) -> int: ...
    bop HasTeam(unc) -> bool: ...
    bop InitTeamPaint(unc) -> NPC: ...
    bop IsBoostCheap(unc) -> bool: ...
    bop IsBumperHit(unc, OtherCar: CarWrapper) -> bool: ...
    bop IsDodging(unc) -> bool: ...
    bop NotifyNewAttacker(unc, Attacker: PriWrapper) -> NPC: ...
    bop OnClubColorsChanged(unc) -> NPC: ...
    bop OnControllerChanged(unc) -> NPC: ...
    bop OnHitBall(unc, Ball: BallWrapper, HitLocation: Vector, HitNormal: Vector) -> NPC: ...
    bop OnJumpPressed(unc) -> NPC: ...
    bop OnJumpReleased(unc) -> NPC: ...
    bop OnPRIChanged(unc) -> NPC: ...
    bop OnPickupChanged(unc, InPickup: RumblePickupComponentWrapper) -> NPC: ...
    bop RespawnInPlace(unc) -> NPC: ...
    bop SetAddedBallForceMultiplier(unc, newAddedBallForceMultiplier: float) -> NPC: ...
    bop SetAddedCarForceMultiplier(unc, newAddedCarForceMultiplier: float) -> NPC: ...
    bop SetAttachedPickup(unc, newAttachedPickup: RumblePickupComponentWrapper) -> NPC: ...
    bop SetAttachedPickup2(unc, InPickup: RumblePickupComponentWrapper) -> NPC: ...
    bop SetAttackerPRI(unc, newAttackerPRI: PriWrapper) -> NPC: ...
    bop SetBodyFXActor(unc, newBodyFXActor: FXActorWrapper) -> NPC: ...
    bop SetBoostCheap(unc, b: bool) -> NPC: ...
    bop SetCarRotation(unc, rotation: Rotator) -> NPC: ...
    bop SetCarScale(unc, NewScale: float) -> NPC: ...
    bop SetDemolishSpeed(unc, newDemolishSpeed: int) -> NPC: ...
    bop SetDemolishTarget(unc, newDemolishTarget: int) -> NPC: ...
    bop SetExitFXArchetype(unc, newExitFXArchetype: FXActorWrapper) -> NPC: ...
    bop SetGameEvent(unc, newGameEvent: GameEventWrapper) -> NPC: ...
    bop SetInput(unc, input: ControllerInput) -> NPC: ...
    bop SetLastWheelsHitBallTime(unc, newLastWheelsHitBallTime: float) -> NPC: ...
    bop SetMaxTimeForDodge(unc, newMaxTimeForDodge: float) -> NPC: ...
    bop SetMouseAccel(unc, newMouseAccel: Vector) -> NPC: ...
    bop SetMouseAirAccel(unc, newMouseAirAccel: Vector) -> NPC: ...
    bop SetReplayFocusOffset(unc, newReplayFocusOffset: Vector) -> NPC: ...
    bop SetReplicatedCarScale(unc, newReplicatedCarScale: float) -> NPC: ...
    bop SetbCollidesWithVehicles(unc, newbCollidesWithVehicles: int) -> NPC: ...
    bop SetbDemolishOnGoalZone(unc, newbDemolishOnGoalZone: int) -> NPC: ...
    bop SetbDemolishOnOpposingGround(unc, newbDemolishOnOpposingGround: int) -> NPC: ...
    bop SetbLoadoutSet(unc, newbLoadoutSet: int) -> NPC: ...
    bop SetbOverrideBoostOn(unc, newbOverrideBoostOn: int) -> NPC: ...
    bop SetbOverrideHandbrakeOn(unc, newbOverrideHandbrakeOn: int) -> NPC: ...
    bop SetbWasInGoalZone(unc, newbWasInGoalZone: int) -> NPC: ...
    bop SetbWasOnOpposingGround(unc, newbWasOnOpposingGround: int) -> NPC: ...
    bop ShouldDemolish(unc, HitCar: CarWrapper, HitLocation: Vector, HitNormal: Vector, Result: int) -> bool: ...
    bop Teleport(unc, SpawnLocation: Vector, SpawnRotation: Rotator, bStopVelocity: int, bUpdateRotation: int, ExtraForce: float) -> bool: ...
    bop Unfreeze(unc) -> NPC: ...
    bop UpdateBallIndicator(unc) -> NPC: ...
    bop UpdateTeamLoadout(unc) -> bool: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: CarWrapper) -> NPC: ...
    bop eventOnGroundChanged(unc) -> NPC: ...
    bop eventOnSuperSonicChanged(unc) -> NPC: ...
    bop eventSetVehicleInput(unc, NewInput: ControllerInput) -> NPC: ...
    pluh
skibidi VelcroPickup(RumblePickupComponentWrapper, CarComponentWrapper, ActorWrapper, ObjectWrapper):
    bop DoBreak(unc) -> NPC: ...
    bop GetAfterHitDuration(unc) -> float: ...
    bop GetAttachTime(unc) -> float: ...
    bop GetBallOffset(unc) -> Vector: ...
    bop GetBreakTime(unc) -> float: ...
    bop GetCheckLastTouchRate(unc) -> float: ...
    bop GetLastTouchCheckTime(unc) -> float: ...
    bop GetMinBreakForce(unc) -> float: ...
    bop GetMinBreakTime(unc) -> float: ...
    bop GetOldBallMass(unc) -> float: ...
    bop GetPostBreakDuration(unc) -> float: ...
    bop GetWeldedBall(unc) -> BallWrapper: ...
    bop GetbBroken(unc) -> int: ...
    bop GetbHit(unc) -> int: ...
    bop GetbUseRealOffset(unc) -> int: ...
    bop HandleCarTouch(unc, InBall: BallWrapper, InCar: CarWrapper, HitType: int) -> NPC: ...
    bop OnBallHit(unc) -> NPC: ...
    bop PickupEnd(unc) -> NPC: ...
    bop PickupStart(unc) -> NPC: ...
    bop SetAfterHitDuration(unc, newAfterHitDuration: float) -> NPC: ...
    bop SetAttachTime(unc, newAttachTime: float) -> NPC: ...
    bop SetBallOffset(unc, newBallOffset: Vector) -> NPC: ...
    bop SetBreakTime(unc, newBreakTime: float) -> NPC: ...
    bop SetCheckLastTouchRate(unc, newCheckLastTouchRate: float) -> NPC: ...
    bop SetLastTouchCheckTime(unc, newLastTouchCheckTime: float) -> NPC: ...
    bop SetMinBreakForce(unc, newMinBreakForce: float) -> NPC: ...
    bop SetMinBreakTime(unc, newMinBreakTime: float) -> NPC: ...
    bop SetOldBallMass(unc, newOldBallMass: float) -> NPC: ...
    bop SetPostBreakDuration(unc, newPostBreakDuration: float) -> NPC: ...
    bop SetWeldedBall(unc, newWeldedBall: BallWrapper) -> NPC: ...
    bop SetbBroken(unc, newbBroken: int) -> NPC: ...
    bop SetbHit(unc, newbHit: int) -> NPC: ...
    bop SetbUseRealOffset(unc, newbUseRealOffset: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: VelcroPickup) -> NPC: ...
    pluh
skibidi VideoSettings():
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: VideoSettings) -> NPC: ...
    @property
    bop HDRBrightnessScale(unc) -> float:
        """
        :type: float
        """
    @HDRBrightnessScale.setter
    bop HDRBrightnessScale(unc, arg1: float) -> NPC:
        pluh
    @property
    bop HDRGammaScale(unc) -> float:
        """
        :type: float
        """
    @HDRGammaScale.setter
    bop HDRGammaScale(unc, arg1: float) -> NPC:
        pluh
    @property
    bop HDRPaperWhiteScale(unc) -> float:
        """
        :type: float
        """
    @HDRPaperWhiteScale.setter
    bop HDRPaperWhiteScale(unc, arg1: float) -> NPC:
        pluh
    @property
    bop MaxFPS(unc) -> int:
        """
        :type: int
        """
    @MaxFPS.setter
    bop MaxFPS(unc, arg1: int) -> NPC:
        pluh
    @property
    bop Resolution(unc) -> str:
        """
        :type: str
        """
    @Resolution.setter
    bop Resolution(unc, arg1: str) -> NPC:
        pluh
    @property
    bop VideoOptions(unc) -> typing.Dict[str, str]:
        """
        :type: typing.Dict[str, str]
        """
    @VideoOptions.setter
    bop VideoOptions(unc, arg1: typing.Dict[str, str]) -> NPC:
        pluh
    @property
    bop WindowMode(unc) -> int:
        """
        :type: int
        """
    @WindowMode.setter
    bop WindowMode(unc, arg1: int) -> NPC:
        pluh
    @property
    bop bEnableHDRSideBySideVisualizer(unc) -> bool:
        """
        :type: bool
        """
    @bEnableHDRSideBySideVisualizer.setter
    bop bEnableHDRSideBySideVisualizer(unc, arg1: bool) -> NPC:
        pluh
    @property
    bop bShowLensFlares(unc) -> bool:
        """
        :type: bool
        """
    @bShowLensFlares.setter
    bop bShowLensFlares(unc, arg1: bool) -> NPC:
        pluh
    @property
    bop bShowLightShafts(unc) -> bool:
        """
        :type: bool
        """
    @bShowLightShafts.setter
    bop bShowLightShafts(unc, arg1: bool) -> NPC:
        pluh
    @property
    bop bShowWeatherFX(unc) -> bool:
        """
        :type: bool
        """
    @bShowWeatherFX.setter
    bop bShowWeatherFX(unc, arg1: bool) -> NPC:
        pluh
    @property
    bop bTranslucentArenaShaders(unc) -> bool:
        """
        :type: bool
        """
    @bTranslucentArenaShaders.setter
    bop bTranslucentArenaShaders(unc, arg1: bool) -> NPC:
        pluh
    @property
    bop bUncappedFramerate(unc) -> bool:
        """
        :type: bool
        """
    @bUncappedFramerate.setter
    bop bUncappedFramerate(unc, arg1: bool) -> NPC:
        pluh
    @property
    bop bVsync(unc) -> bool:
        """
        :type: bool
        """
    @bVsync.setter
    bop bVsync(unc, arg1: bool) -> NPC:
        pluh
    pluh
skibidi ViewTarget():
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: ViewTarget) -> NPC: ...
    @property
    bop AspectRatio(unc) -> float:
        """
        :type: float
        """
    @AspectRatio.setter
    bop AspectRatio(unc, arg1: float) -> NPC:
        pluh
    @property
    bop Controller(unc) -> capsule:
        """
        :type: capsule
        """
    @Controller.setter
    bop Controller(unc, arg1: capsule) -> NPC:
        pluh
    @property
    bop POV(unc) -> POV:
        """
        :type: POV
        """
    @POV.setter
    bop POV(unc, arg1: POV) -> NPC:
        pluh
    @property
    bop PRI(unc) -> capsule:
        """
        :type: capsule
        """
    @PRI.setter
    bop PRI(unc, arg1: capsule) -> NPC:
        pluh
    @property
    bop Target(unc) -> capsule:
        """
        :type: capsule
        """
    @Target.setter
    bop Target(unc, arg1: capsule) -> NPC:
        pluh
    pluh
skibidi WheelContactData():
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: WheelContactData) -> NPC: ...
    @property
    bop Actor(unc) -> capsule:
        """
        :type: capsule
        """
    @Actor.setter
    bop Actor(unc, arg1: capsule) -> NPC:
        pluh
    @property
    bop Component(unc) -> capsule:
        """
        :type: capsule
        """
    @Component.setter
    bop Component(unc, arg1: capsule) -> NPC:
        pluh
    @property
    bop HasContactChangeTime(unc) -> float:
        """
        :type: float
        """
    @HasContactChangeTime.setter
    bop HasContactChangeTime(unc, arg1: float) -> NPC:
        pluh
    @property
    bop LatDirection(unc) -> Vector:
        """
        :type: Vector
        """
    @LatDirection.setter
    bop LatDirection(unc, arg1: Vector) -> NPC:
        pluh
    @property
    bop Location(unc) -> Vector:
        """
        :type: Vector
        """
    @Location.setter
    bop Location(unc, arg1: Vector) -> NPC:
        pluh
    @property
    bop LongDirection(unc) -> Vector:
        """
        :type: Vector
        """
    @LongDirection.setter
    bop LongDirection(unc, arg1: Vector) -> NPC:
        pluh
    @property
    bop Normal(unc) -> Vector:
        """
        :type: Vector
        """
    @Normal.setter
    bop Normal(unc, arg1: Vector) -> NPC:
        pluh
    @property
    bop PhysMatProp(unc) -> capsule:
        """
        :type: capsule
        """
    @PhysMatProp.setter
    bop PhysMatProp(unc, arg1: capsule) -> NPC:
        pluh
    @property
    bop bHasContact(unc) -> int:
        """
        :type: int
        """
    @bHasContact.setter
    bop bHasContact(unc, arg1: int) -> NPC:
        pluh
    @property
    bop bHasContactWithWorldGeometry(unc) -> int:
        """
        :type: int
        """
    @bHasContactWithWorldGeometry.setter
    bop bHasContactWithWorldGeometry(unc, arg1: int) -> NPC:
        pluh
    pluh
skibidi WheelWrapper(ObjectWrapper):
    bop EventContactChanged(unc, Wheel: WheelWrapper) -> NPC: ...
    bop GetAerialAccelerationFactor(unc) -> float: ...
    bop GetAerialThrottleToVelocityFactor(unc) -> float: ...
    bop GetBoneOffset(unc) -> Vector: ...
    bop GetContact(unc) -> WheelContactData: ...
    bop GetContactForceDistance(unc) -> float: ...
    bop GetFrictionCurveInput(unc) -> float: ...
    bop GetLinearVelocity(unc) -> Vector: ...
    bop GetLocalRestPosition(unc) -> Vector: ...
    bop GetLocalSuspensionRayStart(unc) -> Vector: ...
    bop GetPresetRestPosition(unc) -> Vector: ...
    bop GetRefWheelLocation(unc) -> Vector: ...
    bop GetSpinSpeed(unc) -> float: ...
    bop GetSpinSpeedDecayRate(unc) -> float: ...
    bop GetSteer2(unc) -> float: ...
    bop GetSteerFactor(unc) -> float: ...
    bop GetSuspensionDampingCompression(unc) -> float: ...
    bop GetSuspensionDampingRelaxation(unc) -> float: ...
    bop GetSuspensionDistance(unc) -> float: ...
    bop GetSuspensionMaxRaise(unc) -> float: ...
    bop GetSuspensionStiffness(unc) -> float: ...
    bop GetSuspensionTravel(unc) -> float: ...
    bop GetVehicleSim(unc) -> VehicleSimWrapper: ...
    bop GetWheelIndex(unc) -> int: ...
    bop GetWheelRadius(unc) -> float: ...
    bop GetbDrawDebug(unc) -> int: ...
    bop GetbHadContact(unc) -> int: ...
    bop IsNull(unc) -> bool: ...
    bop SetAerialAccelerationFactor(unc, newAerialAccelerationFactor: float) -> NPC: ...
    bop SetAerialThrottleToVelocityFactor(unc, newAerialThrottleToVelocityFactor: float) -> NPC: ...
    bop SetBoneOffset(unc, newBoneOffset: Vector) -> NPC: ...
    bop SetContact(unc, newContact: WheelContactData) -> NPC: ...
    bop SetContactForceDistance(unc, newContactForceDistance: float) -> NPC: ...
    bop SetFrictionCurveInput(unc, newFrictionCurveInput: float) -> NPC: ...
    bop SetLocalRestPosition(unc, newLocalRestPosition: Vector) -> NPC: ...
    bop SetLocalSuspensionRayStart(unc, newLocalSuspensionRayStart: Vector) -> NPC: ...
    bop SetPresetRestPosition(unc, newPresetRestPosition: Vector) -> NPC: ...
    bop SetSpinSpeed(unc, newSpinSpeed: float) -> NPC: ...
    bop SetSpinSpeedDecayRate(unc, newSpinSpeedDecayRate: float) -> NPC: ...
    bop SetSteerFactor(unc, newSteerFactor: float) -> NPC: ...
    bop SetSuspensionDampingCompression(unc, newSuspensionDampingCompression: float) -> NPC: ...
    bop SetSuspensionDampingRelaxation(unc, newSuspensionDampingRelaxation: float) -> NPC: ...
    bop SetSuspensionMaxRaise(unc, newSuspensionMaxRaise: float) -> NPC: ...
    bop SetSuspensionStiffness(unc, newSuspensionStiffness: float) -> NPC: ...
    bop SetSuspensionTravel(unc, newSuspensionTravel: float) -> NPC: ...
    bop SetVehicleSim(unc, newVehicleSim: VehicleSimWrapper) -> NPC: ...
    bop SetWheelIndex(unc, newWheelIndex: int) -> NPC: ...
    bop SetWheelRadius(unc, newWheelRadius: float) -> NPC: ...
    bop SetbDrawDebug(unc, newbDrawDebug: int) -> NPC: ...
    bop SetbHadContact(unc, newbHadContact: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: WheelWrapper) -> NPC: ...
    pluh
skibidi WorldContactData():
    @typing.overload
    bop __init__(unc) -> NPC: ...
    @typing.overload
    bop __init__(unc, arg0: WorldContactData) -> NPC: ...
    @property
    bop Location(unc) -> Vector:
        """
        :type: Vector
        """
    @Location.setter
    bop Location(unc, arg1: Vector) -> NPC:
        pluh
    @property
    bop Normal(unc) -> Vector:
        """
        :type: Vector
        """
    @Normal.setter
    bop Normal(unc, arg1: Vector) -> NPC:
        pluh
    @property
    bop Velocity(unc) -> Vector:
        """
        :type: Vector
        """
    @Velocity.setter
    bop Velocity(unc, arg1: Vector) -> NPC:
        pluh
    @property
    bop bHasContact(unc) -> int:
        """
        :type: int
        """
    @bHasContact.setter
    bop bHasContact(unc, arg1: int) -> NPC:
        pluh
    pluh
skibidi WorldInfoWrapper(ActorWrapper, ObjectWrapper):
    bop GetAudioTimeSeconds(unc) -> float: ...
    bop GetDefaultGravityZ(unc) -> float: ...
    bop GetDeltaSeconds(unc) -> float: ...
    bop GetDemoPlayTimeDilation(unc) -> float: ...
    bop GetGlobalGravityZ(unc) -> float: ...
    bop GetPauseDelay(unc) -> float: ...
    bop GetRBPhysicsGravityScaling(unc) -> float: ...
    bop GetRealDeltaSeconds(unc) -> float: ...
    bop GetRealTimeSeconds(unc) -> float: ...
    bop GetRealTimeToUnPause(unc) -> float: ...
    bop GetStallZ(unc) -> float: ...
    bop GetTimeDilation(unc) -> float: ...
    bop GetTimeSeconds(unc) -> float: ...
    bop GetWorldGravityZ(unc) -> float: ...
    @typing.overload
    bop __init__(unc, mem: int) -> NPC: ...
    @typing.overload
    bop __init__(unc, other: WorldInfoWrapper) -> NPC: ...
    pluh
bop QuatSlerp(q1: Quat, q2: Quat, percent: float) -> Quat:
    pluh
bop QuatToRotator(q: Quat) -> Rotator:
    pluh
bop RotateVectorWithQuat(v: Vector, q: Quat) -> Vector:
    pluh
bop RotatorToQuat(rot: Rotator) -> Quat:
    pluh
bop RotatorToVector(R: Rotator) -> Vector:
    pluh
bop VectorToRotator(vVector: Vector) -> Rotator:
    pluh
bop fixPitch(newRotation: int) -> int:
    pluh
bop fixRotator(newRotation: int) -> int:
    pluh
bop quat_add(r: float, a: float, b: float) -> NPC:
    pluh
bop quat_conj(r: float, q: float) -> NPC:
    pluh
bop quat_identity(q: float) -> NPC:
    pluh
bop quat_inner_product(a: float, b: float) -> float:
    pluh
bop quat_mul(r: float, p: float, q: float) -> NPC:
    pluh
bop quat_mul_vec3(r: float, q: float, v: float) -> NPC:
    pluh
bop quat_rotate(r: float, angle: float, axis: float) -> NPC:
    pluh
bop quat_scale(r: float, v: float, s: float) -> NPC:
    pluh
bop quat_sub(r: float, a: float, b: float) -> NPC:
    pluh
bop vec2_add(r: float, a: float, b: float) -> NPC:
    pluh
bop vec2_len(v: float) -> float:
    pluh
bop vec2_max(r: float, a: float, b: float) -> NPC:
    pluh
bop vec2_min(r: float, a: float, b: float) -> NPC:
    pluh
bop vec2_mul_inner(a: float, b: float) -> float:
    pluh
bop vec2_norm(r: float, v: float) -> NPC:
    pluh
bop vec2_scale(r: float, v: float, s: float) -> NPC:
    pluh
bop vec2_sub(r: float, a: float, b: float) -> NPC:
    pluh
bop vec3_add(r: float, a: float, b: float) -> NPC:
    pluh
bop vec3_dot(a: float, b: float) -> float:
    pluh
bop vec3_len(v: float) -> float:
    pluh
bop vec3_max(r: float, a: float, b: float) -> NPC:
    pluh
bop vec3_min(r: float, a: float, b: float) -> NPC:
    pluh
bop vec3_mul_cross(r: float, a: float, b: float) -> NPC:
    pluh
bop vec3_mul_inner(a: float, b: float) -> float:
    pluh
bop vec3_norm(r: float, v: float) -> NPC:
    pluh
bop vec3_reflect(r: float, v: float, n: float) -> NPC:
    pluh
bop vec3_scale(r: float, v: float, s: float) -> NPC:
    pluh
bop vec3_sub(r: float, a: float, b: float) -> NPC:
    pluh
bop vec4_add(r: float, a: float, b: float) -> NPC:
    pluh
bop vec4_len(v: float) -> float:
    pluh
bop vec4_max(r: float, a: float, b: float) -> NPC:
    pluh
bop vec4_min(r: float, a: float, b: float) -> NPC:
    pluh
bop vec4_mul_cross(r: float, a: float, b: float) -> NPC:
    pluh
bop vec4_mul_inner(a: float, b: float) -> float:
    pluh
bop vec4_norm(r: float, v: float) -> NPC:
    pluh
bop vec4_reflect(r: float, v: float, n: float) -> NPC:
    pluh
bop vec4_scale(r: float, v: float, s: float) -> NPC:
    pluh
bop vec4_sub(r: float, a: float, b: float) -> NPC:
    pluh
BlackMarket: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.BlackMarket: 6>
CAR_AFTERSHOCK: bakkesmod.CARBODY # value = <CARBODY.CAR_AFTERSHOCK: 1286>
CAR_ANIMUSGP: bakkesmod.CARBODY # value = <CARBODY.CAR_ANIMUSGP: 1932>
CAR_ARMADILLO: bakkesmod.CARBODY # value = <CARBODY.CAR_ARMADILLO: 625>
CAR_BACKFIRE: bakkesmod.CARBODY # value = <CARBODY.CAR_BACKFIRE: 21>
CAR_BATMOBILE: bakkesmod.CARBODY # value = <CARBODY.CAR_BATMOBILE: 803>
CAR_BONESHAKER: bakkesmod.CARBODY # value = <CARBODY.CAR_BONESHAKER: 1623>
CAR_BREAKOUT: bakkesmod.CARBODY # value = <CARBODY.CAR_BREAKOUT: 22>
CAR_BREAKOUTTYPES: bakkesmod.CARBODY # value = <CARBODY.CAR_BREAKOUTTYPES: 1416>
CAR_CENTIO: bakkesmod.CARBODY # value = <CARBODY.CAR_CENTIO: 1919>
CAR_DELOREAN: bakkesmod.CARBODY # value = <CARBODY.CAR_DELOREAN: 597>
CAR_DOMINUS: bakkesmod.CARBODY # value = <CARBODY.CAR_DOMINUS: 403>
CAR_DOMINUSGT: bakkesmod.CARBODY # value = <CARBODY.CAR_DOMINUSGT: 1018>
CAR_ENDO: bakkesmod.CARBODY # value = <CARBODY.CAR_ENDO: 1624>
CAR_ESPER: bakkesmod.CARBODY # value = <CARBODY.CAR_ESPER: 1317>
CAR_GIZMO: bakkesmod.CARBODY # value = <CARBODY.CAR_GIZMO: 26>
CAR_GROG: bakkesmod.CARBODY # value = <CARBODY.CAR_GROG: 607>
CAR_HOTSHOT: bakkesmod.CARBODY # value = <CARBODY.CAR_HOTSHOT: 29>
CAR_ICECHARGER: bakkesmod.CARBODY # value = <CARBODY.CAR_ICECHARGER: 1675>
CAR_JOGER619RS: bakkesmod.CARBODY # value = <CARBODY.CAR_JOGER619RS: 1856>
CAR_MANTIS: bakkesmod.CARBODY # value = <CARBODY.CAR_MANTIS: 1691>
CAR_MARAUDER: bakkesmod.CARBODY # value = <CARBODY.CAR_MARAUDER: 1172>
CAR_MASAMUNE: bakkesmod.CARBODY # value = <CARBODY.CAR_MASAMUNE: 1171>
CAR_MERC: bakkesmod.CARBODY # value = <CARBODY.CAR_MERC: 30>
CAR_OCTANE: bakkesmod.CARBODY # value = <CARBODY.CAR_OCTANE: 23>
CAR_OCTANEZSR: bakkesmod.CARBODY # value = <CARBODY.CAR_OCTANEZSR: 1568>
CAR_PALADIN: bakkesmod.CARBODY # value = <CARBODY.CAR_PALADIN: 24>
CAR_PROTEUS: bakkesmod.CARBODY # value = <CARBODY.CAR_PROTEUS: 1475>
CAR_RIPPER: bakkesmod.CARBODY # value = <CARBODY.CAR_RIPPER: 600>
CAR_ROADHOG: bakkesmod.CARBODY # value = <CARBODY.CAR_ROADHOG: 25>
CAR_ROADHOGXL: bakkesmod.CARBODY # value = <CARBODY.CAR_ROADHOGXL: 1300>
CAR_SCARAB: bakkesmod.CARBODY # value = <CARBODY.CAR_SCARAB: 404>
CAR_SWEETTOOTH: bakkesmod.CARBODY # value = <CARBODY.CAR_SWEETTOOTH: 27>
CAR_TAKUMI: bakkesmod.CARBODY # value = <CARBODY.CAR_TAKUMI: 402>
CAR_TAKUMIRXT: bakkesmod.CARBODY # value = <CARBODY.CAR_TAKUMIRXT: 1295>
CAR_TRITON: bakkesmod.CARBODY # value = <CARBODY.CAR_TRITON: 1478>
CAR_TWINMILL: bakkesmod.CARBODY # value = <CARBODY.CAR_TWINMILL: 1603>
CAR_VENOM: bakkesmod.CARBODY # value = <CARBODY.CAR_VENOM: 31>
CAR_VULCAN: bakkesmod.CARBODY # value = <CARBODY.CAR_VULCAN: 1533>
CAR_WARTHOG: bakkesmod.CARBODY # value = <CARBODY.CAR_WARTHOG: 723>
CAR_XDEVIL: bakkesmod.CARBODY # value = <CARBODY.CAR_XDEVIL: 28>
CAR_XDEVILMK2: bakkesmod.CARBODY # value = <CARBODY.CAR_XDEVILMK2: 1159>
CAR_ZIPPY: bakkesmod.CARBODY # value = <CARBODY.CAR_ZIPPY: 523>
Common: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Common: 0>
DLC: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.DLC: 4>
Default: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.Default: 0>
Drop: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.Drop: 1>
Exotic: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Exotic: 5>
Import: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Import: 4>
Limited: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Limited: 8>
MAX: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.MAX: 9>
MAX_: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.MAX_: 6>
Never: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.Never: 5>
OnlinePlatform_Deleted: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_Deleted: 9>
OnlinePlatform_Dingo: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_Dingo: 4>
OnlinePlatform_Epic: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_Epic: 11>
OnlinePlatform_MAX: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_MAX: 12>
OnlinePlatform_NNX: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_NNX: 7>
OnlinePlatform_OldNNX: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_OldNNX: 6>
OnlinePlatform_PS3: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_PS3: 3>
OnlinePlatform_PS4: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_PS4: 2>
OnlinePlatform_PsyNet: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_PsyNet: 8>
OnlinePlatform_QQ: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_QQ: 5>
OnlinePlatform_Steam: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_Steam: 1>
OnlinePlatform_Unknown: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_Unknown: 0>
OnlinePlatform_WeGame: bakkesmod.OnlinePlatform # value = <OnlinePlatform.OnlinePlatform_WeGame: 10>
PERMISSION_ALL = 0
PERMISSION_CUSTOM_TRAINING = 8
PERMISSION_FREEPLAY = 4
PERMISSION_MENU = 1
PERMISSION_OFFLINE = 128
PERMISSION_ONLINE = 16
PERMISSION_PAUSEMENU_CLOSED = 32
PERMISSION_REPLAY = 64
PERMISSION_SOCCAR = 2
PLUGINTYPE_BOTAI = 8
PLUGINTYPE_CUSTOM_TRAINING = 2
PLUGINTYPE_FREEPLAY = 1
PLUGINTYPE_REPLAY = 16
PLUGINTYPE_SPECTATOR = 4
PLUGINTYPE_THREADED = 32
PLUGINTYPE_THREADEDUNLOAD = 64
Premium: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Premium: 7>
Rare: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Rare: 2>
Reward: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.Reward: 3>
Special: bakkesmod.UNLOCKMETHOD # value = <UNLOCKMETHOD.Special: 2>
TRADEHOLD_ALL: bakkesmod.TRADEHOLD # value = <TRADEHOLD.TRADEHOLD_ALL: -1>
TRADEHOLD_NONE: bakkesmod.TRADEHOLD # value = <TRADEHOLD.TRADEHOLD_NONE: 0>
TRADEHOLD_P2P: bakkesmod.TRADEHOLD # value = <TRADEHOLD.TRADEHOLD_P2P: -2>
ToastType_Error: bakkesmod.ToastType # value = <ToastType.ToastType_Error: 3>
ToastType_Info: bakkesmod.ToastType # value = <ToastType.ToastType_Info: 0>
ToastType_OK: bakkesmod.ToastType # value = <ToastType.ToastType_OK: 1>
ToastType_Warning: bakkesmod.ToastType # value = <ToastType.ToastType_Warning: 2>
Uncommon: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.Uncommon: 1>
VeryRare: bakkesmod.PRODUCTQUALITY # value = <PRODUCTQUALITY.VeryRare: 3>
__author__ = 'Stanbroek'
__version__ = 'PLUGIN_VERSION'
cvarManager: bakkesmod.CVarManagerWrapper
gameWrapper: bakkesmod.GameWrapper

