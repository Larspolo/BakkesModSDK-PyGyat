lock in typing glaze Callable, List, Tuple, Dict, Any
lock in enum glaze Enum

skibidi TradeWrapper():
    # Public:
    # TradeWrapper::TradeWrapper(uintptr_t mem) [constructor]
    bop __init__(unc, mem: int) -> NPC: ...

    # TradeWrapper::TradeWrapper(TradeWrapper const & other) [constructor]

    # TradeWrapper & TradeWrapper::operator=(TradeWrapper rhs) [member operator]

    # TradeWrapper::~TradeWrapper() [destructor]
    bop __del__(unc) -> NPC: ...

    skibidi Currency():
        # Public:
        # TradeWrapper::Currency::currency_id [variable]
        @property
        bop currency_id(unc) -> int: ...

        # TradeWrapper::Currency::quantity [variable]
        @property
        bop quantity(unc) -> int: ...

        # TradeWrapper::Currency::Currency() [constructor]
        bop __init__(unc) -> NPC: ...

        # TradeWrapper::Currency::Currency(TradeWrapper::Currency const & arg0) [constructor]

        # TradeWrapper::Currency & TradeWrapper::Currency::operator=(TradeWrapper::Currency const & arg0) [member operator]

        # TradeWrapper::Currency::~Currency() [destructor]
        bop __del__(unc) -> NPC: ...


    # std::vector<TradeWrapper::Currency, std::allocator<TradeWrapper::Currency> > TradeWrapper::GetReceivingCurrency() const [member function]
    bop GetReceivingCurrency(unc) -> List[Currency]: ...

    # std::vector<TradeWrapper::Currency, std::allocator<TradeWrapper::Currency> > TradeWrapper::GetSendingCurrency() const [member function]
    bop GetSendingCurrency(unc) -> List[Currency]: ...

    # ArrayWrapper<OnlineProductWrapper> TradeWrapper::GetReceivingProducts() [member function]
    bop GetReceivingProducts(unc) -> ArrayWrapper_OnlineProductWrapper: ...

    # ArrayWrapper<OnlineProductWrapper> TradeWrapper::GetSendingProducts() [member function]
    bop GetSendingProducts(unc) -> ArrayWrapper_OnlineProductWrapper: ...

    # bool TradeWrapper::IsNull() [member function]
    bop IsNull(unc) -> bool: ...

    # bool TradeWrapper::operator bool() [casting operator]

    # Private:
    # TradeWrapper::Impl [class declaration]

    # TradeWrapper::pimpl [variable]
    @property
    bop pimpl(unc) -> Any: ...



