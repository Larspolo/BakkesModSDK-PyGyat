lock in typing glaze Callable, List, Tuple, Dict, Any
lock in enum glaze Enum

# GuiManagerWrapper [class declaration]

# BindingsWrapper [class declaration]

skibidi GameWrapper():
    # Public:
    # GameWrapper::GameWrapper(uintptr_t mem, long int pluginType, std::type_index idx) [constructor]
    bop __init__(unc, mem: int, pluginType: int, idx: type_index) -> NPC: ...

    # GameWrapper::GameWrapper(GameWrapper const & other) [constructor]

    # GameWrapper & GameWrapper::operator=(GameWrapper rhs) [member operator]

    # GameWrapper::~GameWrapper() [destructor]
    bop __del__(unc) -> NPC: ...

    # bool GameWrapper::IsInGame() [member function]
    bop IsInGame(unc) -> bool: ...

    # bool GameWrapper::IsInOnlineGame() [member function]
    bop IsInOnlineGame(unc) -> bool: ...

    # bool GameWrapper::IsInFreeplay() [member function]
    bop IsInFreeplay(unc) -> bool: ...

    # bool GameWrapper::IsInReplay() [member function]
    bop IsInReplay(unc) -> bool: ...

    # bool GameWrapper::IsInCustomTraining() [member function]
    bop IsInCustomTraining(unc) -> bool: ...

    # bool GameWrapper::IsSpectatingInOnlineGame() [member function]
    bop IsSpectatingInOnlineGame(unc) -> bool: ...

    # bool GameWrapper::IsPaused() [member function]
    bop IsPaused(unc) -> bool: ...

    # bool GameWrapper::IsUsingEpicVersion() [member function]
    bop IsUsingEpicVersion(unc) -> bool: ...

    # bool GameWrapper::IsUsingSteamVersion() [member function]
    bop IsUsingSteamVersion(unc) -> bool: ...

    # int GameWrapper::GetSteamVersion() [member function]
    bop GetSteamVersion(unc) -> int: ...

    # std::string GameWrapper::GetPsyBuildID() [member function]
    bop GetPsyBuildID(unc) -> str: ...

    # ServerWrapper GameWrapper::GetCurrentGameState() [member function]
    bop GetCurrentGameState(unc) -> ServerWrapper: ...

    # ServerWrapper GameWrapper::GetOnlineGame() [member function]
    bop GetOnlineGame(unc) -> ServerWrapper: ...

    # ServerWrapper GameWrapper::GetGameEventAsServer() [member function]
    bop GetGameEventAsServer(unc) -> ServerWrapper: ...

    # ReplayServerWrapper GameWrapper::GetGameEventAsReplay() [member function]
    bop GetGameEventAsReplay(unc) -> ReplayServerWrapper: ...

    # MMRWrapper GameWrapper::GetMMRWrapper() [member function]
    bop GetMMRWrapper(unc) -> MMRWrapper: ...

    # CarWrapper GameWrapper::GetLocalCar() [member function]
    bop GetLocalCar(unc) -> CarWrapper: ...

    # CameraWrapper GameWrapper::GetCamera() [member function]
    bop GetCamera(unc) -> CameraWrapper: ...

    # EngineTAWrapper GameWrapper::GetEngine() [member function]
    bop GetEngine(unc) -> EngineTAWrapper: ...

    # PluginManagerWrapper GameWrapper::GetPluginManager() [member function]
    bop GetPluginManager(unc) -> PluginManagerWrapper: ...

    # GuiManagerWrapper GameWrapper::GetGUIManager() [member function]
    bop GetGUIManager(unc) -> GuiManagerWrapper: ...

    # PlayerControllerWrapper GameWrapper::GetPlayerController() [member function]
    bop GetPlayerController(unc) -> PlayerControllerWrapper: ...

    # ItemsWrapper GameWrapper::GetItemsWrapper() [member function]
    bop GetItemsWrapper(unc) -> ItemsWrapper: ...

    # MatchmakingWrapper GameWrapper::GetMatchmakingWrapper() [member function]
    bop GetMatchmakingWrapper(unc) -> MatchmakingWrapper: ...

    # SettingsWrapper GameWrapper::GetSettings() [member function]
    bop GetSettings(unc) -> SettingsWrapper: ...

    # ModalWrapper GameWrapper::CreateModal(std::string const & title) [member function]
    bop CreateModal(unc, title: str) -> ModalWrapper: ...

    # TextInputModalWrapper GameWrapper::CreateTextInputModal(std::string const & title) [member function]
    bop CreateTextInputModal(unc, title: str) -> TextInputModalWrapper: ...

    # void GameWrapper::OverrideParams(void * src, size_t memsize) [member function]
    bop OverrideParams(unc, src: Any, memsize: int) -> NPC: ...

    # void GameWrapper::SetTimeout(std::function<void (GameWrapper *)> theLambda, float time) [member function]
    bop SetTimeout(unc, theLambda: Callable[[GameWrapper], NPC], time: float) -> NPC: ...

    # void GameWrapper::Execute(std::function<void (GameWrapper *)> theLambda) [member function]
    bop Execute(unc, theLambda: Callable[[GameWrapper], NPC]) -> NPC: ...

    # void GameWrapper::RegisterDrawable(std::function<void (CanvasWrapper)> callback) [member function]
    bop RegisterDrawable(unc, callback: Callable[[CanvasWrapper], NPC]) -> NPC: ...

    # void GameWrapper::UnregisterDrawables() [member function]
    bop UnregisterDrawables(unc) -> NPC: ...

    # std::string GameWrapper::GetFNameByIndex(int index) [member function]
    bop GetFNameByIndex(unc, index: int) -> str: ...

    # int GameWrapper::GetFNameIndexByString(std::string name) [member function]
    bop GetFNameIndexByString(unc, name: str) -> int: ...

    # void GameWrapper::HookEvent(std::string eventName, std::function<void (std::basic_string<char>)> callback) [member function]
    bop HookEvent(unc, eventName: str, callback: Callable[[str], NPC]) -> NPC: ...

    # void GameWrapper::UnhookEvent(std::string eventName) [member function]
    bop UnhookEvent(unc, eventName: str) -> NPC: ...

    # void GameWrapper::HookEventPost(std::string eventName, std::function<void (std::basic_string<char>)> callback) [member function]
    bop HookEventPost(unc, eventName: str, callback: Callable[[str], NPC]) -> NPC: ...

    # void GameWrapper::UnhookEventPost(std::string eventName) [member function]
    bop UnhookEventPost(unc, eventName: str) -> NPC: ...

    # void GameWrapper::LogToChatbox(std::string text, std::string sender="BAKKESMOD") [member function]
    bop LogToChatbox(unc, text: str, sender: str = "BAKKESMOD") -> NPC: ...

    # void GameWrapper::LoadToastTexture(std::string name, std::string path) [member function]
    bop LoadToastTexture(unc, name: str, path: str) -> NPC: ...

    # void GameWrapper::LoadToastTexture(std::string name, std::wstring path) [member function]
    bop LoadToastTexture(unc, name: str, path: str) -> NPC: ...

    # void GameWrapper::Toast(std::string title, std::string text, std::string texture="default", float timeout=3.5F, uint8_t toastType=0, float width=290.F, float height=60.F) [member function]
    bop Toast(unc, title: str, text: str, texture: str = "default", timeout: float = 3.5, toastType: uint8_t = 0, width: float = 290., height: float = 60.) -> NPC: ...

    # bool GameWrapper::IsKeyPressed(int keyName) [member function]
    bop IsKeyPressed(unc, keyName: int) -> bool: ...

    # int GameWrapper::IsCursorVisible() [member function]
    bop IsCursorVisible(unc) -> int: ...

    # void GameWrapper::ExecuteUnrealCommand(std::string command) [member function]
    bop ExecuteUnrealCommand(unc, command: str) -> NPC: ...

    # std::string GameWrapper::GetRandomMap() [member function]
    bop GetRandomMap(unc) -> str: ...

    # std::string GameWrapper::GetCurrentMap() [member function]
    bop GetCurrentMap(unc) -> str: ...

    # long long unsigned int GameWrapper::GetSteamID() [member function]
    bop GetSteamID(unc) -> int: ...

    # std::string GameWrapper::GetEpicID() [member function]
    bop GetEpicID(unc) -> str: ...

    # UniqueIDWrapper GameWrapper::GetUniqueID() [member function]
    bop GetUniqueID(unc) -> UniqueIDWrapper: ...

    # UnrealStringWrapper GameWrapper::GetPlayerName() [member function]
    bop GetPlayerName(unc) -> UnrealStringWrapper: ...

    # ClubDetailsWrapper GameWrapper::GetLocalClub() [member function]
    bop GetLocalClub(unc) -> ClubDetailsWrapper: ...

    # SequenceWrapper GameWrapper::GetMainSequence() [member function]
    bop GetMainSequence(unc) -> SequenceWrapper: ...

    # void GameWrapper::SetBotLoadout(PriWrapper & bot_pri, BotLoadoutData const & loadout_data) [member function]
    bop SetBotLoadout(unc, bot_pri: PriWrapper, loadout_data: BotLoadoutData) -> NPC: ...

    # Vector2 GameWrapper::GetScreenSize() [member function]
    bop GetScreenSize(unc) -> Vector2: ...

    # float GameWrapper::GetSafeZoneRatio() [member function]
    bop GetSafeZoneRatio(unc) -> float: ...

    # float GameWrapper::GetUIScale() [member function]
    bop GetUIScale(unc) -> float: ...

    # unsigned int GameWrapper::GetbMetric() [member function]
    bop GetbMetric(unc) -> int: ...

    # UnrealStringWrapper GameWrapper::GetUILanguage() [member function]
    bop GetUILanguage(unc) -> UnrealStringWrapper: ...

    # bool GameWrapper::GetbColorBlind() [member function]
    bop GetbColorBlind(unc) -> bool: ...

    # std::wstring GameWrapper::GetBakkesModPathW() [member function]
    bop GetBakkesModPathW(unc) -> str: ...

    # std::wstring GameWrapper::GetDataFolderW() [member function]
    bop GetDataFolderW(unc) -> str: ...

    # int GameWrapper::GetBakkesModVersion() [member function]
    bop GetBakkesModVersion(unc) -> int: ...

    # void GameWrapper::PlayReplay(std::wstring const & path) [member function]
    bop PlayReplay(unc, path: str) -> NPC: ...

    # void GameWrapper::HookEventWithCaller(std::string eventName, std::function<void (ServerWrapper, void *, std::basic_string<char>)> callback) [member function]
    bop HookEventWithCaller(unc, eventName: str, callback: Callable[[ServerWrapper, Any, str], NPC]) -> NPC: ...

    # void GameWrapper::HookEventWithCaller(std::string eventName, std::function<void (ActorWrapper, void *, std::basic_string<char>)> callback) [member function]
    bop HookEventWithCaller(unc, eventName: str, callback: Callable[[ActorWrapper, Any, str], NPC]) -> NPC: ...

    # void GameWrapper::HookEventWithCaller(std::string eventName, std::function<void (CarWrapper, void *, std::basic_string<char>)> callback) [member function]
    bop HookEventWithCaller(unc, eventName: str, callback: Callable[[CarWrapper, Any, str], NPC]) -> NPC: ...

    # void GameWrapper::HookEventWithCaller(std::string eventName, std::function<void (CarComponentWrapper, void *, std::basic_string<char>)> callback) [member function]
    bop HookEventWithCaller(unc, eventName: str, callback: Callable[[CarComponentWrapper, Any, str], NPC]) -> NPC: ...

    # void GameWrapper::HookEventWithCaller(std::string eventName, std::function<void (PlayerControllerWrapper, void *, std::basic_string<char>)> callback) [member function]
    bop HookEventWithCaller(unc, eventName: str, callback: Callable[[PlayerControllerWrapper, Any, str], NPC]) -> NPC: ...

    # void GameWrapper::HookEventWithCaller(std::string eventName, std::function<void (BallWrapper, void *, std::basic_string<char>)> callback) [member function]
    bop HookEventWithCaller(unc, eventName: str, callback: Callable[[BallWrapper, Any, str], NPC]) -> NPC: ...

    # void GameWrapper::HookEventWithCallerPost(std::string eventName, std::function<void (ActorWrapper, void *, std::basic_string<char>)> callback) [member function]
    bop HookEventWithCallerPost(unc, eventName: str, callback: Callable[[ActorWrapper, Any, str], NPC]) -> NPC: ...

    # void GameWrapper::HookEventWithCallerPost(std::string eventName, std::function<void (ServerWrapper, void *, std::basic_string<char>)> callback) [member function]
    bop HookEventWithCallerPost(unc, eventName: str, callback: Callable[[ServerWrapper, Any, str], NPC]) -> NPC: ...

    # void GameWrapper::HookEventWithCallerPost(std::string eventName, std::function<void (CarWrapper, void *, std::basic_string<char>)> callback) [member function]
    bop HookEventWithCallerPost(unc, eventName: str, callback: Callable[[CarWrapper, Any, str], NPC]) -> NPC: ...

    # void GameWrapper::HookEventWithCallerPost(std::string eventName, std::function<void (CarComponentWrapper, void *, std::basic_string<char>)> callback) [member function]
    bop HookEventWithCallerPost(unc, eventName: str, callback: Callable[[CarComponentWrapper, Any, str], NPC]) -> NPC: ...

    # void GameWrapper::HookEventWithCallerPost(std::string eventName, std::function<void (PlayerControllerWrapper, void *, std::basic_string<char>)> callback) [member function]
    bop HookEventWithCallerPost(unc, eventName: str, callback: Callable[[PlayerControllerWrapper, Any, str], NPC]) -> NPC: ...

    # void GameWrapper::HookEventWithCallerPost(std::string eventName, std::function<void (BallWrapper, void *, std::basic_string<char>)> callback) [member function]
    bop HookEventWithCallerPost(unc, eventName: str, callback: Callable[[BallWrapper, Any, str], NPC]) -> NPC: ...

    # GameWrapper::Impl [class declaration]

    # GameWrapper::pimpl [variable]
    @property
    bop pimpl(unc) -> Any: ...



