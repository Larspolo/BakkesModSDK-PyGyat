lock in typing glaze Callable, List, Tuple, Dict, Any
lock in enum glaze Enum

skibidi TrainingEditorWrapper():
    # Public:
    # TrainingEditorWrapper::TrainingEditorWrapper(uintptr_t mem) [constructor]
    bop __init__(unc, mem: int) -> NPC: ...

    # TrainingEditorWrapper::TrainingEditorWrapper(TrainingEditorWrapper const & other) [constructor]

    # TrainingEditorWrapper & TrainingEditorWrapper::operator=(TrainingEditorWrapper rhs) [member operator]

    # TrainingEditorWrapper::~TrainingEditorWrapper() [destructor]
    bop __del__(unc) -> NPC: ...

    # float TrainingEditorWrapper::GetMinRoundTime() [member function]
    bop GetMinRoundTime(unc) -> float: ...

    # void TrainingEditorWrapper::SetMinRoundTime(float newMinRoundTime) [member function]
    bop SetMinRoundTime(unc, newMinRoundTime: float) -> NPC: ...

    # float TrainingEditorWrapper::GetMaxRoundTime() [member function]
    bop GetMaxRoundTime(unc) -> float: ...

    # void TrainingEditorWrapper::SetMaxRoundTime(float newMaxRoundTime) [member function]
    bop SetMaxRoundTime(unc, newMaxRoundTime: float) -> NPC: ...

    # long unsigned int TrainingEditorWrapper::GetbNoEditor() [member function]
    bop GetbNoEditor(unc) -> bool: ...

    # void TrainingEditorWrapper::SetbNoEditor(long unsigned int newbNoEditor) [member function]
    bop SetbNoEditor(unc, newbNoEditor: bool) -> NPC: ...

    # long unsigned int TrainingEditorWrapper::GetbDisplayedRedoPenaltyMessage() [member function]
    bop GetbDisplayedRedoPenaltyMessage(unc) -> bool: ...

    # void TrainingEditorWrapper::SetbDisplayedRedoPenaltyMessage(long unsigned int newbDisplayedRedoPenaltyMessage) [member function]
    bop SetbDisplayedRedoPenaltyMessage(unc, newbDisplayedRedoPenaltyMessage: bool) -> NPC: ...

    # long unsigned int TrainingEditorWrapper::GetbUnsavedChanges() [member function]
    bop GetbUnsavedChanges(unc) -> bool: ...

    # void TrainingEditorWrapper::SetbUnsavedChanges(long unsigned int newbUnsavedChanges) [member function]
    bop SetbUnsavedChanges(unc, newbUnsavedChanges: bool) -> NPC: ...

    # int TrainingEditorWrapper::GetPointsScoredThisRound() [member function]
    bop GetPointsScoredThisRound(unc) -> int: ...

    # void TrainingEditorWrapper::SetPointsScoredThisRound(int newPointsScoredThisRound) [member function]
    bop SetPointsScoredThisRound(unc, newPointsScoredThisRound: int) -> NPC: ...

    # int TrainingEditorWrapper::GetShotAttempt() [member function]
    bop GetShotAttempt(unc) -> int: ...

    # void TrainingEditorWrapper::SetShotAttempt(int newShotAttempt) [member function]
    bop SetShotAttempt(unc, newShotAttempt: int) -> NPC: ...

    # int TrainingEditorWrapper::GetGoalieScore() [member function]
    bop GetGoalieScore(unc) -> int: ...

    # void TrainingEditorWrapper::SetGoalieScore(int newGoalieScore) [member function]
    bop SetGoalieScore(unc, newGoalieScore: int) -> NPC: ...

    # unsigned char TrainingEditorWrapper::GetPlayTestType() [member function]
    bop GetPlayTestType(unc) -> int: ...

    # void TrainingEditorWrapper::SetPlayTestType(unsigned char newPlayTestType) [member function]
    bop SetPlayTestType(unc, newPlayTestType: int) -> NPC: ...

    # ArrayWrapper<ActorWrapper> TrainingEditorWrapper::GetGoalMeshBlockers() [member function]
    bop GetGoalMeshBlockers(unc) -> ArrayWrapper_ActorWrapper: ...

    # ActorWrapper TrainingEditorWrapper::GetGoalMeshBlockerArchetype() [member function]
    bop GetGoalMeshBlockerArchetype(unc) -> ActorWrapper: ...

    # void TrainingEditorWrapper::SetGoalMeshBlockerArchetype(ActorWrapper newGoalMeshBlockerArchetype) [member function]
    bop SetGoalMeshBlockerArchetype(unc, newGoalMeshBlockerArchetype: ActorWrapper) -> NPC: ...

    # GameEditorSaveDataWrapper TrainingEditorWrapper::GetTrainingData() [member function]
    bop GetTrainingData(unc) -> GameEditorSaveDataWrapper: ...

    # void TrainingEditorWrapper::SetTrainingData(GameEditorSaveDataWrapper newTrainingData) [member function]
    bop SetTrainingData(unc, newTrainingData: GameEditorSaveDataWrapper) -> NPC: ...

    # float TrainingEditorWrapper::GetSaveDelayTime() [member function]
    bop GetSaveDelayTime(unc) -> float: ...

    # void TrainingEditorWrapper::SetSaveDelayTime(float newSaveDelayTime) [member function]
    bop SetSaveDelayTime(unc, newSaveDelayTime: float) -> NPC: ...

    # float TrainingEditorWrapper::GetSaveCooldown() [member function]
    bop GetSaveCooldown(unc) -> float: ...

    # void TrainingEditorWrapper::SetSaveCooldown(float newSaveCooldown) [member function]
    bop SetSaveCooldown(unc, newSaveCooldown: float) -> NPC: ...

    # UnrealStringWrapper TrainingEditorWrapper::GetTrainingFileName() [member function]
    bop GetTrainingFileName(unc) -> UnrealStringWrapper: ...

    # void TrainingEditorWrapper::OnLoadingMovieClosed() [member function]
    bop OnLoadingMovieClosed(unc) -> NPC: ...

    # void TrainingEditorWrapper::TagHistoryChanges() [member function]
    bop TagHistoryChanges(unc) -> NPC: ...

    # void TrainingEditorWrapper::MarkAsDirty() [member function]
    bop MarkAsDirty(unc) -> NPC: ...

    # void TrainingEditorWrapper::ForceTagHistoryChanges() [member function]
    bop ForceTagHistoryChanges(unc) -> NPC: ...

    # void TrainingEditorWrapper::SetTracedCrosshairActor(PlayerControllerWrapper PC, ActorWrapper NewActor) [member function]
    bop SetTracedCrosshairActor(unc, PC: PlayerControllerWrapper, NewActor: ActorWrapper) -> NPC: ...

    # bool TrainingEditorWrapper::DestroyBall(BallWrapper Ball) [member function]
    bop DestroyBall(unc, Ball: BallWrapper) -> bool: ...

    # bool TrainingEditorWrapper::AllowDynamicCrowd() [member function]
    bop AllowDynamicCrowd(unc) -> bool: ...

    # void TrainingEditorWrapper::BroadcastGoMessage() [member function]
    bop BroadcastGoMessage(unc) -> NPC: ...

    # int TrainingEditorWrapper::GetTotalRounds() [member function]
    bop GetTotalRounds(unc) -> int: ...

    # unsigned char TrainingEditorWrapper::GetDifficulty() [member function]
    bop GetDifficulty(unc) -> int: ...

    # unsigned char TrainingEditorWrapper::GetTrainingType() [member function]
    bop GetTrainingType(unc) -> int: ...

    # void TrainingEditorWrapper::Save2() [member function]
    bop Save2(unc) -> NPC: ...

    # void TrainingEditorWrapper::OnTrainingModeLoaded() [member function]
    bop OnTrainingModeLoaded(unc) -> NPC: ...

    # void TrainingEditorWrapper::DuplicateRound(int Index) [member function]
    bop DuplicateRound(unc, Index: int) -> NPC: ...

    # void TrainingEditorWrapper::ReorderRound(int FromIndex, int ToIndex) [member function]
    bop ReorderRound(unc, FromIndex: int, ToIndex: int) -> NPC: ...

    # void TrainingEditorWrapper::SetRoundTimeLimit(float NewRoundTime) [member function]
    bop SetRoundTimeLimit(unc, NewRoundTime: float) -> NPC: ...

    # bool TrainingEditorWrapper::HandleNextGame() [member function]
    bop HandleNextGame(unc) -> bool: ...

    # void TrainingEditorWrapper::ResetBalls() [member function]
    bop ResetBalls(unc) -> NPC: ...

    # void TrainingEditorWrapper::Load2(std::string SaveName, PlayerControllerWrapper PC) [member function]
    bop Load2(unc, SaveName: str, PC: PlayerControllerWrapper) -> NPC: ...

    # void TrainingEditorWrapper::DestroyGoalMeshBlockers() [member function]
    bop DestroyGoalMeshBlockers(unc) -> NPC: ...

    # void TrainingEditorWrapper::UpdateGoalMeshBlocker() [member function]
    bop UpdateGoalMeshBlocker(unc) -> NPC: ...

    # int TrainingEditorWrapper::GetScore() [member function]
    bop GetScore(unc) -> int: ...

    # void TrainingEditorWrapper::RemovePointsFromScore(int PointsToRemove, int TeamIndex) [member function]
    bop RemovePointsFromScore(unc, PointsToRemove: int, TeamIndex: int) -> NPC: ...

    # bool TrainingEditorWrapper::ShowScorerGoalMessage() [member function]
    bop ShowScorerGoalMessage(unc) -> bool: ...

    # void TrainingEditorWrapper::ShowResetRoundMessage() [member function]
    bop ShowResetRoundMessage(unc) -> NPC: ...

    # bool TrainingEditorWrapper::ShowPenaltyMessage() [member function]
    bop ShowPenaltyMessage(unc) -> bool: ...

    # int TrainingEditorWrapper::GetPlayerTeamNumber() [member function]
    bop GetPlayerTeamNumber(unc) -> int: ...

    # int TrainingEditorWrapper::GetBallGoalScoreNumber() [member function]
    bop GetBallGoalScoreNumber(unc) -> int: ...

    # void TrainingEditorWrapper::RemoveAllPointsFromScore(int TeamIndex) [member function]
    bop RemoveAllPointsFromScore(unc, TeamIndex: int) -> NPC: ...

    # bool TrainingEditorWrapper::IncrementRound(long unsigned int bLoop) [member function]
    bop IncrementRound(unc, bLoop: bool) -> bool: ...

    # Vector TrainingEditorWrapper::AdjustToFloorLocation(Vector & TraceStart, Vector & CollsionExtent) [member function]
    bop AdjustToFloorLocation(unc, TraceStart: Vector, CollsionExtent: Vector) -> Vector: ...

    # ActorWrapper TrainingEditorWrapper::SpawnArchetypeAtAndAdjustToFloor(ActorWrapper Archetype, Vector & SpawnLocation, Rotator & SpawnRotation) [member function]
    bop SpawnArchetypeAtAndAdjustToFloor(unc, Archetype: ActorWrapper, SpawnLocation: Vector, SpawnRotation: Rotator) -> ActorWrapper: ...

    # void TrainingEditorWrapper::SpawnBallAndStartPointAt(Vector & BallSpawnLocation, Rotator & BallSpawnRotation, Vector & StartPointSpawnLocation, Rotator & StartPointSpawnRotation) [member function]
    bop SpawnBallAndStartPointAt(unc, BallSpawnLocation: Vector, BallSpawnRotation: Rotator, StartPointSpawnLocation: Vector, StartPointSpawnRotation: Rotator) -> NPC: ...

    # void TrainingEditorWrapper::SetupDefaultRound() [member function]
    bop SetupDefaultRound(unc) -> NPC: ...

    # void TrainingEditorWrapper::SwitchToRoundNumber(int RoundNumber, long unsigned int BackupCurrentRound) [member function]
    bop SwitchToRoundNumber(unc, RoundNumber: int, BackupCurrentRound: bool) -> NPC: ...

    # void TrainingEditorWrapper::DeleteRound(int RoundToDelete) [member function]
    bop DeleteRound(unc, RoundToDelete: int) -> NPC: ...

    # void TrainingEditorWrapper::RestartPlayTest() [member function]
    bop RestartPlayTest(unc) -> NPC: ...

    # void TrainingEditorWrapper::EndPlayTest() [member function]
    bop EndPlayTest(unc) -> NPC: ...

    # void TrainingEditorWrapper::StartPlayTest(unsigned char InPlayTestType) [member function]
    bop StartPlayTest(unc, InPlayTestType: int) -> NPC: ...

    # bool TrainingEditorWrapper::CanPlayTestRoundNumber(int RoundNumber) [member function]
    bop CanPlayTestRoundNumber(unc, RoundNumber: int) -> bool: ...

    # void TrainingEditorWrapper::SetUnsavedChanges(long unsigned int bInUnsavedChanges) [member function]
    bop SetUnsavedChanges(unc, bInUnsavedChanges: bool) -> NPC: ...

    # void TrainingEditorWrapper::UpdateActiveRoundData() [member function]
    bop UpdateActiveRoundData(unc) -> NPC: ...

    # void TrainingEditorWrapper::StartNewRound() [member function]
    bop StartNewRound(unc) -> NPC: ...

    # bool TrainingEditorWrapper::IsValidRoundIndex(int ArrayIndex) [member function]
    bop IsValidRoundIndex(unc, ArrayIndex: int) -> bool: ...

    # void TrainingEditorWrapper::AddLocalPlayer(PlayerControllerWrapper Player) [member function]
    bop AddLocalPlayer(unc, Player: PlayerControllerWrapper) -> NPC: ...

    # void TrainingEditorWrapper::OnInit() [member function]
    bop OnInit(unc) -> NPC: ...

    # void TrainingEditorWrapper::eventDestroyed() [member function]
    bop eventDestroyed(unc) -> NPC: ...

    # void TrainingEditorWrapper::eventPostBeginPlay() [member function]
    bop eventPostBeginPlay(unc) -> NPC: ...

    # void TrainingEditorWrapper::EventSaveResult(long unsigned int bSuccess) [member function]
    bop EventSaveResult(unc, bSuccess: bool) -> NPC: ...

    # void TrainingEditorWrapper::EventUnsavedChanges(long unsigned int bOutUnsavedChanges) [member function]
    bop EventUnsavedChanges(unc, bOutUnsavedChanges: bool) -> NPC: ...

    # void TrainingEditorWrapper::EventPlaytestStarted(TrainingEditorWrapper GamEvent) [member function]
    bop EventPlaytestStarted(unc, GamEvent: TrainingEditorWrapper) -> NPC: ...

    # void TrainingEditorWrapper::EventRoundChanged(TrainingEditorWrapper GamEvent) [member function]
    bop EventRoundChanged(unc, GamEvent: TrainingEditorWrapper) -> NPC: ...

    # void TrainingEditorWrapper::EventRoundTimeChanged(TrainingEditorWrapper GameEvent) [member function]
    bop EventRoundTimeChanged(unc, GameEvent: TrainingEditorWrapper) -> NPC: ...

    # Private:
    # TrainingEditorWrapper::Impl [class declaration]

    # TrainingEditorWrapper::pimpl [variable]
    @property
    bop pimpl(unc) -> Any: ...



