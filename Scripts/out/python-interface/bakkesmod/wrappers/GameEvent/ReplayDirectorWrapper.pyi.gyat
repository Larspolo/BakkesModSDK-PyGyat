lock in typing glaze Callable, List, Tuple, Dict, Any
lock in enum glaze Enum

skibidi ReplayDirectorWrapper():
    # Public:
    # ReplayDirectorWrapper::ReplayDirectorWrapper(uintptr_t mem) [constructor]
    bop __init__(unc, mem: int) -> NPC: ...

    # ReplayDirectorWrapper::ReplayDirectorWrapper(ReplayDirectorWrapper const & other) [constructor]

    # ReplayDirectorWrapper & ReplayDirectorWrapper::operator=(ReplayDirectorWrapper rhs) [member operator]

    # ReplayDirectorWrapper::~ReplayDirectorWrapper() [destructor]
    bop __del__(unc) -> NPC: ...

    # float ReplayDirectorWrapper::GetSlomoPreScoreTime() [member function]
    bop GetSlomoPreScoreTime(unc) -> float: ...

    # void ReplayDirectorWrapper::SetSlomoPreScoreTime(float newSlomoPreScoreTime) [member function]
    bop SetSlomoPreScoreTime(unc, newSlomoPreScoreTime: float) -> NPC: ...

    # float ReplayDirectorWrapper::GetSlomoPostScoreTime() [member function]
    bop GetSlomoPostScoreTime(unc) -> float: ...

    # void ReplayDirectorWrapper::SetSlomoPostScoreTime(float newSlomoPostScoreTime) [member function]
    bop SetSlomoPostScoreTime(unc, newSlomoPostScoreTime: float) -> NPC: ...

    # float ReplayDirectorWrapper::GetSlomoDefendTime() [member function]
    bop GetSlomoDefendTime(unc) -> float: ...

    # void ReplayDirectorWrapper::SetSlomoDefendTime(float newSlomoDefendTime) [member function]
    bop SetSlomoDefendTime(unc, newSlomoDefendTime: float) -> NPC: ...

    # float ReplayDirectorWrapper::GetSlomoDefendDistance() [member function]
    bop GetSlomoDefendDistance(unc) -> float: ...

    # void ReplayDirectorWrapper::SetSlomoDefendDistance(float newSlomoDefendDistance) [member function]
    bop SetSlomoDefendDistance(unc, newSlomoDefendDistance: float) -> NPC: ...

    # float ReplayDirectorWrapper::GetSlomoTimeDilation() [member function]
    bop GetSlomoTimeDilation(unc) -> float: ...

    # void ReplayDirectorWrapper::SetSlomoTimeDilation(float newSlomoTimeDilation) [member function]
    bop SetSlomoTimeDilation(unc, newSlomoTimeDilation: float) -> NPC: ...

    # float ReplayDirectorWrapper::GetMinReplayTime() [member function]
    bop GetMinReplayTime(unc) -> float: ...

    # void ReplayDirectorWrapper::SetMinReplayTime(float newMinReplayTime) [member function]
    bop SetMinReplayTime(unc, newMinReplayTime: float) -> NPC: ...

    # float ReplayDirectorWrapper::GetMaxReplayTime() [member function]
    bop GetMaxReplayTime(unc) -> float: ...

    # void ReplayDirectorWrapper::SetMaxReplayTime(float newMaxReplayTime) [member function]
    bop SetMaxReplayTime(unc, newMaxReplayTime: float) -> NPC: ...

    # float ReplayDirectorWrapper::GetReplayPadding() [member function]
    bop GetReplayPadding(unc) -> float: ...

    # void ReplayDirectorWrapper::SetReplayPadding(float newReplayPadding) [member function]
    bop SetReplayPadding(unc, newReplayPadding: float) -> NPC: ...

    # float ReplayDirectorWrapper::GetHighlightReplayDuration() [member function]
    bop GetHighlightReplayDuration(unc) -> float: ...

    # void ReplayDirectorWrapper::SetHighlightReplayDuration(float newHighlightReplayDuration) [member function]
    bop SetHighlightReplayDuration(unc, newHighlightReplayDuration: float) -> NPC: ...

    # float ReplayDirectorWrapper::GetTimeBeforeHighlightReplay() [member function]
    bop GetTimeBeforeHighlightReplay(unc) -> float: ...

    # void ReplayDirectorWrapper::SetTimeBeforeHighlightReplay(float newTimeBeforeHighlightReplay) [member function]
    bop SetTimeBeforeHighlightReplay(unc, newTimeBeforeHighlightReplay: float) -> NPC: ...

    # ReplaySoccarWrapper ReplayDirectorWrapper::GetReplay() [member function]
    bop GetReplay(unc) -> ReplaySoccarWrapper: ...

    # void ReplayDirectorWrapper::SetReplay(ReplaySoccarWrapper newReplay) [member function]
    bop SetReplay(unc, newReplay: ReplaySoccarWrapper) -> NPC: ...

    # ActorWrapper ReplayDirectorWrapper::GetFocusCar() [member function]
    bop GetFocusCar(unc) -> ActorWrapper: ...

    # void ReplayDirectorWrapper::SetFocusCar(ActorWrapper newFocusCar) [member function]
    bop SetFocusCar(unc, newFocusCar: ActorWrapper) -> NPC: ...

    # float ReplayDirectorWrapper::GetFocusCarChangeTime() [member function]
    bop GetFocusCarChangeTime(unc) -> float: ...

    # void ReplayDirectorWrapper::SetFocusCarChangeTime(float newFocusCarChangeTime) [member function]
    bop SetFocusCarChangeTime(unc, newFocusCarChangeTime: float) -> NPC: ...

    # ActorWrapper ReplayDirectorWrapper::GetFocusBall() [member function]
    bop GetFocusBall(unc) -> ActorWrapper: ...

    # void ReplayDirectorWrapper::SetFocusBall(ActorWrapper newFocusBall) [member function]
    bop SetFocusBall(unc, newFocusBall: ActorWrapper) -> NPC: ...

    # float ReplayDirectorWrapper::GetScoreTime() [member function]
    bop GetScoreTime(unc) -> float: ...

    # void ReplayDirectorWrapper::SetScoreTime(float newScoreTime) [member function]
    bop SetScoreTime(unc, newScoreTime: float) -> NPC: ...

    # int ReplayDirectorWrapper::GetScoreHitIndex() [member function]
    bop GetScoreHitIndex(unc) -> int: ...

    # void ReplayDirectorWrapper::SetScoreHitIndex(int newScoreHitIndex) [member function]
    bop SetScoreHitIndex(unc, newScoreHitIndex: int) -> NPC: ...

    # GoalWrapper ReplayDirectorWrapper::GetScoredGoal() [member function]
    bop GetScoredGoal(unc) -> GoalWrapper: ...

    # void ReplayDirectorWrapper::SetScoredGoal(GoalWrapper newScoredGoal) [member function]
    bop SetScoredGoal(unc, newScoredGoal: GoalWrapper) -> NPC: ...

    # ReplayScoreData ReplayDirectorWrapper::GetReplayScoreData() [member function]
    bop GetReplayScoreData(unc) -> ReplayScoreData: ...

    # long unsigned int ReplayDirectorWrapper::GetbSlomo() [member function]
    bop GetbSlomo(unc) -> bool: ...

    # void ReplayDirectorWrapper::SetbSlomo(long unsigned int newbSlomo) [member function]
    bop SetbSlomo(unc, newbSlomo: bool) -> NPC: ...

    # long unsigned int ReplayDirectorWrapper::GetbSlomoForDefender() [member function]
    bop GetbSlomoForDefender(unc) -> bool: ...

    # void ReplayDirectorWrapper::SetbSlomoForDefender(long unsigned int newbSlomoForDefender) [member function]
    bop SetbSlomoForDefender(unc, newbSlomoForDefender: bool) -> NPC: ...

    # long unsigned int ReplayDirectorWrapper::GetbAutoSave() [member function]
    bop GetbAutoSave(unc) -> bool: ...

    # void ReplayDirectorWrapper::SetbAutoSave(long unsigned int newbAutoSave) [member function]
    bop SetbAutoSave(unc, newbAutoSave: bool) -> NPC: ...

    # int ReplayDirectorWrapper::GetFocusHitIndex() [member function]
    bop GetFocusHitIndex(unc) -> int: ...

    # void ReplayDirectorWrapper::SetFocusHitIndex(int newFocusHitIndex) [member function]
    bop SetFocusHitIndex(unc, newFocusHitIndex: int) -> NPC: ...

    # int ReplayDirectorWrapper::GetFocusCarIdx() [member function]
    bop GetFocusCarIdx(unc) -> int: ...

    # void ReplayDirectorWrapper::SetFocusCarIdx(int newFocusCarIdx) [member function]
    bop SetFocusCarIdx(unc, newFocusCarIdx: int) -> NPC: ...

    # float ReplayDirectorWrapper::GetReplayStartGameTime() [member function]
    bop GetReplayStartGameTime(unc) -> float: ...

    # void ReplayDirectorWrapper::SetReplayStartGameTime(float newReplayStartGameTime) [member function]
    bop SetReplayStartGameTime(unc, newReplayStartGameTime: float) -> NPC: ...

    # float ReplayDirectorWrapper::GetBallSpawnTime() [member function]
    bop GetBallSpawnTime(unc) -> float: ...

    # void ReplayDirectorWrapper::SetBallSpawnTime(float newBallSpawnTime) [member function]
    bop SetBallSpawnTime(unc, newBallSpawnTime: float) -> NPC: ...

    # ServerWrapper ReplayDirectorWrapper::GetSoccarGame() [member function]
    bop GetSoccarGame(unc) -> ServerWrapper: ...

    # void ReplayDirectorWrapper::SetSoccarGame(ServerWrapper newSoccarGame) [member function]
    bop SetSoccarGame(unc, newSoccarGame: ServerWrapper) -> NPC: ...

    # unsigned char ReplayDirectorWrapper::GetScoredOnTeam() [member function]
    bop GetScoredOnTeam(unc) -> int: ...

    # void ReplayDirectorWrapper::SetScoredOnTeam(unsigned char newScoredOnTeam) [member function]
    bop SetScoredOnTeam(unc, newScoredOnTeam: int) -> NPC: ...

    # int ReplayDirectorWrapper::GetForceCutToFocusActors() [member function]
    bop GetForceCutToFocusActors(unc) -> int: ...

    # void ReplayDirectorWrapper::SetForceCutToFocusActors(int newForceCutToFocusActors) [member function]
    bop SetForceCutToFocusActors(unc, newForceCutToFocusActors: int) -> NPC: ...

    # void ReplayDirectorWrapper::HandleReplayFinished(ReplayWrapper InReplay) [member function]
    bop HandleReplayFinished(unc, InReplay: ReplayWrapper) -> NPC: ...

    # bool ReplayDirectorWrapper::ShouldSlomo() [member function]
    bop ShouldSlomo(unc) -> bool: ...

    # void ReplayDirectorWrapper::UpdateSlomo() [member function]
    bop UpdateSlomo(unc) -> NPC: ...

    # void ReplayDirectorWrapper::UpdateFocusActors() [member function]
    bop UpdateFocusActors(unc) -> NPC: ...

    # void ReplayDirectorWrapper::PlayRandomHighlight() [member function]
    bop PlayRandomHighlight(unc) -> NPC: ...

    # int ReplayDirectorWrapper::GetNextHighlightFrame() [member function]
    bop GetNextHighlightFrame(unc) -> int: ...

    # void ReplayDirectorWrapper::SetAutoSave() [member function]
    bop SetAutoSave(unc) -> NPC: ...

    # void ReplayDirectorWrapper::SaveUserKeyframe() [member function]
    bop SaveUserKeyframe(unc) -> NPC: ...

    # void ReplayDirectorWrapper::BuildFocusCars() [member function]
    bop BuildFocusCars(unc) -> NPC: ...

    # void ReplayDirectorWrapper::SetSlomo2(long unsigned int bNewSlomo) [member function]
    bop SetSlomo2(unc, bNewSlomo: bool) -> NPC: ...

    # void ReplayDirectorWrapper::eventTick(float DeltaTime) [member function]
    bop eventTick(unc, DeltaTime: float) -> NPC: ...

    # void ReplayDirectorWrapper::eventDestroyed() [member function]
    bop eventDestroyed(unc) -> NPC: ...

    # float ReplayDirectorWrapper::GetReplayTimeSeconds() [member function]
    bop GetReplayTimeSeconds(unc) -> float: ...

    # void ReplayDirectorWrapper::SetFocusActors(ActorWrapper NewCar, ActorWrapper NewBall) [member function]
    bop SetFocusActors(unc, NewCar: ActorWrapper, NewBall: ActorWrapper) -> NPC: ...

    # float ReplayDirectorWrapper::GetReplayStartTime() [member function]
    bop GetReplayStartTime(unc) -> float: ...

    # void ReplayDirectorWrapper::SetSlomoForDefender(BallWrapper Ball, int DefendingTeam) [member function]
    bop SetSlomoForDefender(unc, Ball: BallWrapper, DefendingTeam: int) -> NPC: ...

    # void ReplayDirectorWrapper::OnScoreDataChanged() [member function]
    bop OnScoreDataChanged(unc) -> NPC: ...

    # void ReplayDirectorWrapper::HandleScoreUpdated(TeamWrapper Team) [member function]
    bop HandleScoreUpdated(unc, Team: TeamWrapper) -> NPC: ...

    # void ReplayDirectorWrapper::HandleAllTeamsCreated(TeamGameEventWrapper TeamGame) [member function]
    bop HandleAllTeamsCreated(unc, TeamGame: TeamGameEventWrapper) -> NPC: ...

    # void ReplayDirectorWrapper::RecordPlayers() [member function]
    bop RecordPlayers(unc) -> NPC: ...

    # void ReplayDirectorWrapper::HandleGameStateChanged(GameEventWrapper G) [member function]
    bop HandleGameStateChanged(unc, G: GameEventWrapper) -> NPC: ...

    # void ReplayDirectorWrapper::OnSoccarGameSet() [member function]
    bop OnSoccarGameSet(unc) -> NPC: ...

    # void ReplayDirectorWrapper::SetGameEvent(ServerWrapper InGameEvent) [member function]
    bop SetGameEvent(unc, InGameEvent: ServerWrapper) -> NPC: ...

    # void ReplayDirectorWrapper::EventFocusCarChanged(ActorWrapper NewFocusCar) [member function]
    bop EventFocusCarChanged(unc, NewFocusCar: ActorWrapper) -> NPC: ...

    # void ReplayDirectorWrapper::EventAutoSaveChanged(ReplayDirectorWrapper Director) [member function]
    bop EventAutoSaveChanged(unc, Director: ReplayDirectorWrapper) -> NPC: ...

    # void ReplayDirectorWrapper::EventScoreDataChanged(ReplayDirectorWrapper Director) [member function]
    bop EventScoreDataChanged(unc, Director: ReplayDirectorWrapper) -> NPC: ...

    # void ReplayDirectorWrapper::EventReplayFinished(ReplayDirectorWrapper Director) [member function]
    bop EventReplayFinished(unc, Director: ReplayDirectorWrapper) -> NPC: ...

    # Private:
    # ReplayDirectorWrapper::Impl [class declaration]

    # ReplayDirectorWrapper::pimpl [variable]
    @property
    bop pimpl(unc) -> Any: ...



