from typing import Callable, List, Tuple, Dict, Any
from enum import Enum

class GameEventWrapper():
    # Public:
    # GameEventWrapper::GameEventWrapper(uintptr_t mem) [constructor]
    def __init__(self, mem: int) -> None: ...

    # GameEventWrapper::GameEventWrapper(GameEventWrapper const & other) [constructor]

    # GameEventWrapper & GameEventWrapper::operator=(GameEventWrapper rhs) [member operator]

    # GameEventWrapper::~GameEventWrapper() [destructor]
    def __del__(self) -> None: ...

    # unsigned char GameEventWrapper::GetGameMode() [member function]
    def GetGameMode(self) -> int: ...

    # void GameEventWrapper::SetGameMode(unsigned char newGameMode) [member function]
    def SetGameMode(self, newGameMode: int) -> None: ...

    # unsigned char GameEventWrapper::GetReplicatedStateIndex() [member function]
    def GetReplicatedStateIndex(self) -> int: ...

    # void GameEventWrapper::SetReplicatedStateIndex(unsigned char newReplicatedStateIndex) [member function]
    def SetReplicatedStateIndex(self, newReplicatedStateIndex: int) -> None: ...

    # CarWrapper GameEventWrapper::GetCarArchetype() [member function]
    def GetCarArchetype(self) -> CarWrapper: ...

    # void GameEventWrapper::SetCarArchetype(CarWrapper newCarArchetype) [member function]
    def SetCarArchetype(self, newCarArchetype: CarWrapper) -> None: ...

    # int GameEventWrapper::GetCountdownTime() [member function]
    def GetCountdownTime(self) -> int: ...

    # void GameEventWrapper::SetCountdownTime(int newCountdownTime) [member function]
    def SetCountdownTime(self, newCountdownTime: int) -> None: ...

    # int GameEventWrapper::GetFinishTime() [member function]
    def GetFinishTime(self) -> int: ...

    # void GameEventWrapper::SetFinishTime(int newFinishTime) [member function]
    def SetFinishTime(self, newFinishTime: int) -> None: ...

    # long unsigned int GameEventWrapper::GetbMultiplayer() [member function]
    def GetbMultiplayer(self) -> bool: ...

    # void GameEventWrapper::SetbMultiplayer(long unsigned int newbMultiplayer) [member function]
    def SetbMultiplayer(self, newbMultiplayer: bool) -> None: ...

    # long unsigned int GameEventWrapper::GetbCountdownMessagesDisabled() [member function]
    def GetbCountdownMessagesDisabled(self) -> bool: ...

    # void GameEventWrapper::SetbCountdownMessagesDisabled(long unsigned int newbCountdownMessagesDisabled) [member function]
    def SetbCountdownMessagesDisabled(self, newbCountdownMessagesDisabled: bool) -> None: ...

    # long unsigned int GameEventWrapper::GetbFillWithAI() [member function]
    def GetbFillWithAI(self) -> bool: ...

    # void GameEventWrapper::SetbFillWithAI(long unsigned int newbFillWithAI) [member function]
    def SetbFillWithAI(self, newbFillWithAI: bool) -> None: ...

    # long unsigned int GameEventWrapper::GetbAllowQueueSaveReplay() [member function]
    def GetbAllowQueueSaveReplay(self) -> bool: ...

    # void GameEventWrapper::SetbAllowQueueSaveReplay(long unsigned int newbAllowQueueSaveReplay) [member function]
    def SetbAllowQueueSaveReplay(self, newbAllowQueueSaveReplay: bool) -> None: ...

    # long unsigned int GameEventWrapper::GetbAllowReadyUp() [member function]
    def GetbAllowReadyUp(self) -> bool: ...

    # void GameEventWrapper::SetbAllowReadyUp(long unsigned int newbAllowReadyUp) [member function]
    def SetbAllowReadyUp(self, newbAllowReadyUp: bool) -> None: ...

    # long unsigned int GameEventWrapper::GetbRestartingMatch() [member function]
    def GetbRestartingMatch(self) -> bool: ...

    # void GameEventWrapper::SetbRestartingMatch(long unsigned int newbRestartingMatch) [member function]
    def SetbRestartingMatch(self, newbRestartingMatch: bool) -> None: ...

    # long unsigned int GameEventWrapper::GetbRandomizedBotLoadouts() [member function]
    def GetbRandomizedBotLoadouts(self) -> bool: ...

    # void GameEventWrapper::SetbRandomizedBotLoadouts(long unsigned int newbRandomizedBotLoadouts) [member function]
    def SetbRandomizedBotLoadouts(self, newbRandomizedBotLoadouts: bool) -> None: ...

    # long unsigned int GameEventWrapper::GetbHasLeaveMatchPenalty() [member function]
    def GetbHasLeaveMatchPenalty(self) -> bool: ...

    # void GameEventWrapper::SetbHasLeaveMatchPenalty(long unsigned int newbHasLeaveMatchPenalty) [member function]
    def SetbHasLeaveMatchPenalty(self, newbHasLeaveMatchPenalty: bool) -> None: ...

    # long unsigned int GameEventWrapper::GetbCanVoteToForfeit() [member function]
    def GetbCanVoteToForfeit(self) -> bool: ...

    # void GameEventWrapper::SetbCanVoteToForfeit(long unsigned int newbCanVoteToForfeit) [member function]
    def SetbCanVoteToForfeit(self, newbCanVoteToForfeit: bool) -> None: ...

    # long unsigned int GameEventWrapper::GetbDisableAimAssist() [member function]
    def GetbDisableAimAssist(self) -> bool: ...

    # void GameEventWrapper::SetbDisableAimAssist(long unsigned int newbDisableAimAssist) [member function]
    def SetbDisableAimAssist(self, newbDisableAimAssist: bool) -> None: ...

    # long unsigned int GameEventWrapper::GetbAwardAchievements() [member function]
    def GetbAwardAchievements(self) -> bool: ...

    # void GameEventWrapper::SetbAwardAchievements(long unsigned int newbAwardAchievements) [member function]
    def SetbAwardAchievements(self, newbAwardAchievements: bool) -> None: ...

    # int GameEventWrapper::GetMinPlayers() [member function]
    def GetMinPlayers(self) -> int: ...

    # void GameEventWrapper::SetMinPlayers(int newMinPlayers) [member function]
    def SetMinPlayers(self, newMinPlayers: int) -> None: ...

    # int GameEventWrapper::GetMaxPlayers() [member function]
    def GetMaxPlayers(self) -> int: ...

    # void GameEventWrapper::SetMaxPlayers(int newMaxPlayers) [member function]
    def SetMaxPlayers(self, newMaxPlayers: int) -> None: ...

    # ArrayWrapper<ActorWrapper> GameEventWrapper::GetSpawnPoints() [member function]
    def GetSpawnPoints(self) -> ArrayWrapper_ActorWrapper: ...

    # float GameEventWrapper::GetBotSkill() [member function]
    def GetBotSkill(self) -> float: ...

    # void GameEventWrapper::SetBotSkill(float newBotSkill) [member function]
    def SetBotSkill(self, newBotSkill: float) -> None: ...

    # int GameEventWrapper::GetRespawnTime() [member function]
    def GetRespawnTime(self) -> int: ...

    # void GameEventWrapper::SetRespawnTime(int newRespawnTime) [member function]
    def SetRespawnTime(self, newRespawnTime: int) -> None: ...

    # float GameEventWrapper::GetMatchTimeDilation() [member function]
    def GetMatchTimeDilation(self) -> float: ...

    # void GameEventWrapper::SetMatchTimeDilation(float newMatchTimeDilation) [member function]
    def SetMatchTimeDilation(self, newMatchTimeDilation: float) -> None: ...

    # PlayerControllerWrapper GameEventWrapper::GetActivator() [member function]
    def GetActivator(self) -> PlayerControllerWrapper: ...

    # void GameEventWrapper::SetActivator(PlayerControllerWrapper newActivator) [member function]
    def SetActivator(self, newActivator: PlayerControllerWrapper) -> None: ...

    # CarWrapper GameEventWrapper::GetActivatorCar() [member function]
    def GetActivatorCar(self) -> CarWrapper: ...

    # void GameEventWrapper::SetActivatorCar(CarWrapper newActivatorCar) [member function]
    def SetActivatorCar(self, newActivatorCar: CarWrapper) -> None: ...

    # ArrayWrapper<ControllerWrapper> GameEventWrapper::GetPlayers() [member function]
    def GetPlayers(self) -> ArrayWrapper_ControllerWrapper: ...

    # ArrayWrapper<PriWrapper> GameEventWrapper::GetPRIs() [member function]
    def GetPRIs(self) -> ArrayWrapper_PriWrapper: ...

    # ArrayWrapper<CarWrapper> GameEventWrapper::GetCars() [member function]
    def GetCars(self) -> ArrayWrapper_CarWrapper: ...

    # ArrayWrapper<PlayerControllerWrapper> GameEventWrapper::GetLocalPlayers() [member function]
    def GetLocalPlayers(self) -> ArrayWrapper_PlayerControllerWrapper: ...

    # int GameEventWrapper::GetStartPointIndex() [member function]
    def GetStartPointIndex(self) -> int: ...

    # void GameEventWrapper::SetStartPointIndex(int newStartPointIndex) [member function]
    def SetStartPointIndex(self, newStartPointIndex: int) -> None: ...

    # int GameEventWrapper::GetGameStateTimeRemaining() [member function]
    def GetGameStateTimeRemaining(self) -> int: ...

    # void GameEventWrapper::SetGameStateTimeRemaining(int newGameStateTimeRemaining) [member function]
    def SetGameStateTimeRemaining(self, newGameStateTimeRemaining: int) -> None: ...

    # int GameEventWrapper::GetReplicatedGameStateTimeRemaining() [member function]
    def GetReplicatedGameStateTimeRemaining(self) -> int: ...

    # void GameEventWrapper::SetReplicatedGameStateTimeRemaining(int newReplicatedGameStateTimeRemaining) [member function]
    def SetReplicatedGameStateTimeRemaining(self, newReplicatedGameStateTimeRemaining: int) -> None: ...

    # float GameEventWrapper::GetIdleKickTime() [member function]
    def GetIdleKickTime(self) -> float: ...

    # void GameEventWrapper::SetIdleKickTime(float newIdleKickTime) [member function]
    def SetIdleKickTime(self, newIdleKickTime: float) -> None: ...

    # float GameEventWrapper::GetIdleKickWarningTime() [member function]
    def GetIdleKickWarningTime(self) -> float: ...

    # void GameEventWrapper::SetIdleKickWarningTime(float newIdleKickWarningTime) [member function]
    def SetIdleKickWarningTime(self, newIdleKickWarningTime: float) -> None: ...

    # float GameEventWrapper::GetBotBoostThreshold_vsAI() [member function]
    def GetBotBoostThreshold_vsAI(self) -> float: ...

    # void GameEventWrapper::SetBotBoostThreshold_vsAI(float newBotBoostThreshold_vsAI) [member function]
    def SetBotBoostThreshold_vsAI(self, newBotBoostThreshold_vsAI: float) -> None: ...

    # StructArrayWrapper<SteamID> GameEventWrapper::GetForfeitInitiatorIDs() [member function]
    def GetForfeitInitiatorIDs(self) -> StructArrayWrapper_SteamID: ...

    # StructArrayWrapper<SteamID> GameEventWrapper::GetBannedPlayers() [member function]
    def GetBannedPlayers(self) -> StructArrayWrapper_SteamID: ...

    # PriWrapper GameEventWrapper::GetGameOwner() [member function]
    def GetGameOwner(self) -> PriWrapper: ...

    # void GameEventWrapper::SetGameOwner(PriWrapper newGameOwner) [member function]
    def SetGameOwner(self, newGameOwner: PriWrapper) -> None: ...

    # UnrealStringWrapper GameEventWrapper::GetRichPresenceString() [member function]
    def GetRichPresenceString(self) -> UnrealStringWrapper: ...

    # int GameEventWrapper::GetReplicatedRoundCountDownNumber() [member function]
    def GetReplicatedRoundCountDownNumber(self) -> int: ...

    # void GameEventWrapper::SetReplicatedRoundCountDownNumber(int newReplicatedRoundCountDownNumber) [member function]
    def SetReplicatedRoundCountDownNumber(self, newReplicatedRoundCountDownNumber: int) -> None: ...

    # void GameEventWrapper::InitCountDown() [member function]
    def InitCountDown(self) -> None: ...

    # void GameEventWrapper::StartCountdownTimer() [member function]
    def StartCountdownTimer(self) -> None: ...

    # void GameEventWrapper::AllowReadyUp2() [member function]
    def AllowReadyUp2(self) -> None: ...

    # PriWrapper GameEventWrapper::FindPlayerPRI(SteamID & UniqueId) [member function]
    def FindPlayerPRI(self, UniqueId: SteamID) -> PriWrapper: ...

    # void GameEventWrapper::HandlePlayerRemoved(GameEventWrapper GameEvent, PriWrapper PRI) [member function]
    def HandlePlayerRemoved(self, GameEvent: GameEventWrapper, PRI: PriWrapper) -> None: ...

    # void GameEventWrapper::UpdateGameOwner() [member function]
    def UpdateGameOwner(self) -> None: ...

    # void GameEventWrapper::SetGameOwner2(PriWrapper NewOwner) [member function]
    def SetGameOwner2(self, NewOwner: PriWrapper) -> None: ...

    # void GameEventWrapper::__GameEvent_TA__SetAllowReadyUp(PriWrapper P) [member function]
    def __GameEvent_TA__SetAllowReadyUp(self, P: PriWrapper) -> None: ...

    # bool GameEventWrapper::__GameEvent_TA__CheckPlayersReady(PriWrapper P) [member function]
    def __GameEvent_TA__CheckPlayersReady(self, P: PriWrapper) -> bool: ...

    # SteamID GameEventWrapper::__GameEvent_TA__CheckForBannedPlayers(PriWrapper PRI) [member function]
    def __GameEvent_TA__CheckForBannedPlayers(self, PRI: PriWrapper) -> SteamID: ...

    # void GameEventWrapper::__Pylon__ChangeNotifyFunc() [member function]
    def __Pylon__ChangeNotifyFunc(self) -> None: ...

    # void GameEventWrapper::PlayerResetTraining() [member function]
    def PlayerResetTraining(self) -> None: ...

    # bool GameEventWrapper::SuppressModalDialogs() [member function]
    def SuppressModalDialogs(self) -> bool: ...

    # bool GameEventWrapper::ShouldShowBallIndicator() [member function]
    def ShouldShowBallIndicator(self) -> bool: ...

    # void GameEventWrapper::CheckInitiatedForfeit(PriWrapper PRI) [member function]
    def CheckInitiatedForfeit(self, PRI: PriWrapper) -> None: ...

    # void GameEventWrapper::CheckChatBanned(PlayerControllerWrapper PC) [member function]
    def CheckChatBanned(self, PC: PlayerControllerWrapper) -> None: ...

    # PlayerControllerWrapper GameEventWrapper::FindPCForUniqueID(SteamID & PlayerID) [member function]
    def FindPCForUniqueID(self, PlayerID: SteamID) -> PlayerControllerWrapper: ...

    # bool GameEventWrapper::AllowSplitScreenPlayer() [member function]
    def AllowSplitScreenPlayer(self) -> bool: ...

    # void GameEventWrapper::AddPlayerChatMessage(SteamID & PlayerID, unsigned char ChatChannel, TeamInfoWrapper Team, std::string Message) [member function]
    def AddPlayerChatMessage(self, PlayerID: SteamID, ChatChannel: int, Team: TeamInfoWrapper, Message: str) -> None: ...

    # void GameEventWrapper::ConditionalStartSpectatorMatch() [member function]
    def ConditionalStartSpectatorMatch(self) -> None: ...

    # bool GameEventWrapper::IsPlayingTraining() [member function]
    def IsPlayingTraining(self) -> bool: ...

    # bool GameEventWrapper::IsPlayingLan() [member function]
    def IsPlayingLan(self) -> bool: ...

    # bool GameEventWrapper::IsPlayingOffline() [member function]
    def IsPlayingOffline(self) -> bool: ...

    # bool GameEventWrapper::IsPlayingPrivate() [member function]
    def IsPlayingPrivate(self) -> bool: ...

    # bool GameEventWrapper::IsPlayingPublic() [member function]
    def IsPlayingPublic(self) -> bool: ...

    # bool GameEventWrapper::IsOnlineMultiplayer() [member function]
    def IsOnlineMultiplayer(self) -> bool: ...

    # void GameEventWrapper::CreateMatchType(std::string Options) [member function]
    def CreateMatchType(self, Options: str) -> None: ...

    # bool GameEventWrapper::AllPlayersSelectedTeam() [member function]
    def AllPlayersSelectedTeam(self) -> bool: ...

    # bool GameEventWrapper::CanQueSaveReplay() [member function]
    def CanQueSaveReplay(self) -> bool: ...

    # void GameEventWrapper::ForceMatchStart() [member function]
    def ForceMatchStart(self) -> None: ...

    # void GameEventWrapper::ConditionalStartMatch() [member function]
    def ConditionalStartMatch(self) -> None: ...

    # void GameEventWrapper::SaveLocalPlayerStats() [member function]
    def SaveLocalPlayerStats(self) -> None: ...

    # bool GameEventWrapper::CanUseBallCam() [member function]
    def CanUseBallCam(self) -> bool: ...

    # bool GameEventWrapper::HandleNextGame() [member function]
    def HandleNextGame(self) -> bool: ...

    # void GameEventWrapper::SetMaxPlayers2(int InMaxPlayers) [member function]
    def SetMaxPlayers2(self, InMaxPlayers: int) -> None: ...

    # void GameEventWrapper::SetRestartingMatch(long unsigned int bRestart) [member function]
    def SetRestartingMatch(self, bRestart: bool) -> None: ...

    # bool GameEventWrapper::ShouldBeFullScreen() [member function]
    def ShouldBeFullScreen(self) -> bool: ...

    # bool GameEventWrapper::IsFinished() [member function]
    def IsFinished(self) -> bool: ...

    # void GameEventWrapper::OnAllPlayersReady() [member function]
    def OnAllPlayersReady(self) -> None: ...

    # void GameEventWrapper::CheckPlayersReady2() [member function]
    def CheckPlayersReady2(self) -> None: ...

    # void GameEventWrapper::SetAllowReadyUp2(long unsigned int bAllow) [member function]
    def SetAllowReadyUp2(self, bAllow: bool) -> None: ...

    # void GameEventWrapper::AutoReadyPlayers() [member function]
    def AutoReadyPlayers(self) -> None: ...

    # bool GameEventWrapper::ShouldAutoReadyUp(PriWrapper PRI) [member function]
    def ShouldAutoReadyUp(self, PRI: PriWrapper) -> bool: ...

    # void GameEventWrapper::KickSplitscreenIdlers() [member function]
    def KickSplitscreenIdlers(self) -> None: ...

    # void GameEventWrapper::KickIdlers() [member function]
    def KickIdlers(self) -> None: ...

    # void GameEventWrapper::StopIdleKickTimer() [member function]
    def StopIdleKickTimer(self) -> None: ...

    # void GameEventWrapper::StartIdleKickTimer(float OffsetTime) [member function]
    def StartIdleKickTimer(self, OffsetTime: float) -> None: ...

    # void GameEventWrapper::SendGoMessage(PlayerControllerWrapper Player) [member function]
    def SendGoMessage(self, Player: PlayerControllerWrapper) -> None: ...

    # void GameEventWrapper::SendCountdownMessage(int Seconds, PlayerControllerWrapper Player) [member function]
    def SendCountdownMessage(self, Seconds: int, Player: PlayerControllerWrapper) -> None: ...

    # void GameEventWrapper::BroadcastCountdownMessage(int Seconds) [member function]
    def BroadcastCountdownMessage(self, Seconds: int) -> None: ...

    # void GameEventWrapper::BroadcastGoMessage() [member function]
    def BroadcastGoMessage(self) -> None: ...

    # bool GameEventWrapper::AllowShutdown() [member function]
    def AllowShutdown(self) -> bool: ...

    # float GameEventWrapper::GetRealDeltaTime(float ElapsedTime) [member function]
    def GetRealDeltaTime(self, ElapsedTime: float) -> float: ...

    # void GameEventWrapper::SetTimeDilation(float NewTimeDilation) [member function]
    def SetTimeDilation(self, NewTimeDilation: float) -> None: ...

    # void GameEventWrapper::ClearRespawnList() [member function]
    def ClearRespawnList(self) -> None: ...

    # void GameEventWrapper::ReplaceBotsWithAwaitingPlayers() [member function]
    def ReplaceBotsWithAwaitingPlayers(self) -> None: ...

    # int GameEventWrapper::GetRespawnTime2() [member function]
    def GetRespawnTime2(self) -> int: ...

    # void GameEventWrapper::RemoveCar(CarWrapper Car) [member function]
    def RemoveCar(self, Car: CarWrapper) -> None: ...

    # void GameEventWrapper::AddCar(CarWrapper Car) [member function]
    def AddCar(self, Car: CarWrapper) -> None: ...

    # void GameEventWrapper::TickRespawnTime(float DeltaTime) [member function]
    def TickRespawnTime(self, DeltaTime: float) -> None: ...

    # void GameEventWrapper::SetBotSkill2(float NewSkill) [member function]
    def SetBotSkill2(self, NewSkill: float) -> None: ...

    # PlayerControllerWrapper GameEventWrapper::GetLocalPrimaryPlayer() [member function]
    def GetLocalPrimaryPlayer(self) -> PlayerControllerWrapper: ...

    # bool GameEventWrapper::HasPlayerNamed(std::string PlayerName) [member function]
    def HasPlayerNamed(self, PlayerName: str) -> bool: ...

    # void GameEventWrapper::RandomizeBots() [member function]
    def RandomizeBots(self) -> None: ...

    # bool GameEventWrapper::MoveToGround(ActorWrapper Mover, float HeightCheck) [member function]
    def MoveToGround(self, Mover: ActorWrapper, HeightCheck: float) -> bool: ...

    # void GameEventWrapper::SetAllDriving(long unsigned int bDriving) [member function]
    def SetAllDriving(self, bDriving: bool) -> None: ...

    # void GameEventWrapper::OnFinished() [member function]
    def OnFinished(self) -> None: ...

    # void GameEventWrapper::StartCountDown() [member function]
    def StartCountDown(self) -> None: ...

    # void GameEventWrapper::StartInitialCountDown() [member function]
    def StartInitialCountDown(self) -> None: ...

    # void GameEventWrapper::OnGameStateTimeLapsed() [member function]
    def OnGameStateTimeLapsed(self) -> None: ...

    # void GameEventWrapper::OnGameStateTimeUpdated() [member function]
    def OnGameStateTimeUpdated(self) -> None: ...

    # void GameEventWrapper::UpdateGameStateTime() [member function]
    def UpdateGameStateTime(self) -> None: ...

    # void GameEventWrapper::SetGameStateTimeRemaining2(int StateTime, long unsigned int bFromReplication) [member function]
    def SetGameStateTimeRemaining2(self, StateTime: int, bFromReplication: bool) -> None: ...

    # void GameEventWrapper::SetGameStateTime2(int StateTime) [member function]
    def SetGameStateTime2(self, StateTime: int) -> None: ...

    # void GameEventWrapper::OnPlayerRestarted(CarWrapper PlayerCar) [member function]
    def OnPlayerRestarted(self, PlayerCar: CarWrapper) -> None: ...

    # void GameEventWrapper::TeleportCar(CarWrapper PlayerCar) [member function]
    def TeleportCar(self, PlayerCar: CarWrapper) -> None: ...

    # void GameEventWrapper::OnCarSpawned(CarWrapper NewCar) [member function]
    def OnCarSpawned(self, NewCar: CarWrapper) -> None: ...

    # bool GameEventWrapper::SpotIsEncroached(Vector & Spot) [member function]
    def SpotIsEncroached(self, Spot: Vector) -> bool: ...

    # void GameEventWrapper::RandomizeSpawnPoints() [member function]
    def RandomizeSpawnPoints(self) -> None: ...

    # void GameEventWrapper::RestartPlayers() [member function]
    def RestartPlayers(self) -> None: ...

    # void GameEventWrapper::RemoveLocalPlayer(PlayerControllerWrapper Player) [member function]
    def RemoveLocalPlayer(self, Player: PlayerControllerWrapper) -> None: ...

    # void GameEventWrapper::AddLocalPlayer(PlayerControllerWrapper Player) [member function]
    def AddLocalPlayer(self, Player: PlayerControllerWrapper) -> None: ...

    # void GameEventWrapper::RemovePRI(PriWrapper PRI) [member function]
    def RemovePRI(self, PRI: PriWrapper) -> None: ...

    # void GameEventWrapper::AddPRI(PriWrapper PRI) [member function]
    def AddPRI(self, PRI: PriWrapper) -> None: ...

    # void GameEventWrapper::AddForfeitInitiator(SteamID & PlayerID) [member function]
    def AddForfeitInitiator(self, PlayerID: SteamID) -> None: ...

    # void GameEventWrapper::BanPlayerID(SteamID & PlayerID) [member function]
    def BanPlayerID(self, PlayerID: SteamID) -> None: ...

    # int GameEventWrapper::GetMaxHumans() [member function]
    def GetMaxHumans(self) -> int: ...

    # int GameEventWrapper::GetNumHumans() [member function]
    def GetNumHumans(self) -> int: ...

    # bool GameEventWrapper::FindBotReplacement(PriWrapper PRI) [member function]
    def FindBotReplacement(self, PRI: PriWrapper) -> bool: ...

    # void GameEventWrapper::UpdateBotCount() [member function]
    def UpdateBotCount(self) -> None: ...

    # void GameEventWrapper::TimerUpdateBotCount() [member function]
    def TimerUpdateBotCount(self) -> None: ...

    # void GameEventWrapper::InitBotSkill() [member function]
    def InitBotSkill(self) -> None: ...

    # void GameEventWrapper::InitMutators() [member function]
    def InitMutators(self) -> None: ...

    # void GameEventWrapper::HandleFinished(GameEventWrapper GameEvent) [member function]
    def HandleFinished(self, GameEvent: GameEventWrapper) -> None: ...

    # void GameEventWrapper::Init2(PlayerControllerWrapper InActivator) [member function]
    def Init2(self, InActivator: PlayerControllerWrapper) -> None: ...

    # void GameEventWrapper::eventInitGame(std::string Options) [member function]
    def eventInitGame(self, Options: str) -> None: ...

    # void GameEventWrapper::OnGameStateChanged() [member function]
    def OnGameStateChanged(self) -> None: ...

    # void GameEventWrapper::OnCanVoteForfeitChanged() [member function]
    def OnCanVoteForfeitChanged(self) -> None: ...

    # void GameEventWrapper::UpdateCanVoteToForfeit() [member function]
    def UpdateCanVoteToForfeit(self) -> None: ...

    # bool GameEventWrapper::ShouldAllowVoteToForfeit() [member function]
    def ShouldAllowVoteToForfeit(self) -> bool: ...

    # void GameEventWrapper::OnPenaltyChanged() [member function]
    def OnPenaltyChanged(self) -> None: ...

    # void GameEventWrapper::UpdateLeaveMatchPenalty() [member function]
    def UpdateLeaveMatchPenalty(self) -> None: ...

    # GameSettingPlaylistWrapper GameEventWrapper::GetPlaylist() [member function]
    def GetPlaylist(self) -> GameSettingPlaylistWrapper: ...

    # bool GameEventWrapper::ShouldHaveLeaveMatchPenalty() [member function]
    def ShouldHaveLeaveMatchPenalty(self) -> bool: ...

    # void GameEventWrapper::OnMatchSettingsChanged() [member function]
    def OnMatchSettingsChanged(self) -> None: ...

    # void GameEventWrapper::ClearGameScoreFromCustomSettings() [member function]
    def ClearGameScoreFromCustomSettings(self) -> None: ...

    # void GameEventWrapper::EventPlayerResetTraining(GameEventWrapper GameEvent) [member function]
    def EventPlayerResetTraining(self, GameEvent: GameEventWrapper) -> None: ...

    # Private:
    # GameEventWrapper::Impl [class declaration]

    # GameEventWrapper::pimpl [variable]
    @property
    def pimpl(self) -> Any: ...


