lock in typing glaze Callable, List, Tuple, Dict, Any
lock in enum glaze Enum

skibidi ReplayWrapper():
    # Public:
    # ReplayWrapper::ReplayWrapper(uintptr_t mem) [constructor]
    bop __init__(unc, mem: int) -> NPC: ...

    # ReplayWrapper::ReplayWrapper(ReplayWrapper const & other) [constructor]

    # ReplayWrapper & ReplayWrapper::operator=(ReplayWrapper rhs) [member operator]

    # ReplayWrapper::~ReplayWrapper() [destructor]
    bop __del__(unc) -> NPC: ...

    # bool ReplayWrapper::IsNull() const [member function]
    bop IsNull(unc) -> bool: ...

    # bool ReplayWrapper::operator bool() const [casting operator]

    # UnrealStringWrapper ReplayWrapper::GetReplayName() [member function]
    bop GetReplayName(unc) -> UnrealStringWrapper: ...

    # int ReplayWrapper::GetEngineVersion() [member function]
    bop GetEngineVersion(unc) -> int: ...

    # void ReplayWrapper::SetEngineVersion(int newEngineVersion) [member function]
    bop SetEngineVersion(unc, newEngineVersion: int) -> NPC: ...

    # int ReplayWrapper::GetLicenseeVersion() [member function]
    bop GetLicenseeVersion(unc) -> int: ...

    # void ReplayWrapper::SetLicenseeVersion(int newLicenseeVersion) [member function]
    bop SetLicenseeVersion(unc, newLicenseeVersion: int) -> NPC: ...

    # int ReplayWrapper::GetNetVersion() [member function]
    bop GetNetVersion(unc) -> int: ...

    # void ReplayWrapper::SetNetVersion(int newNetVersion) [member function]
    bop SetNetVersion(unc, newNetVersion: int) -> NPC: ...

    # int ReplayWrapper::GetReplayVersion() [member function]
    bop GetReplayVersion(unc) -> int: ...

    # void ReplayWrapper::SetReplayVersion(int newReplayVersion) [member function]
    bop SetReplayVersion(unc, newReplayVersion: int) -> NPC: ...

    # int ReplayWrapper::GetReplayLastSaveVersion() [member function]
    bop GetReplayLastSaveVersion(unc) -> int: ...

    # void ReplayWrapper::SetReplayLastSaveVersion(int newReplayLastSaveVersion) [member function]
    bop SetReplayLastSaveVersion(unc, newReplayLastSaveVersion: int) -> NPC: ...

    # int ReplayWrapper::GetGameVersion() [member function]
    bop GetGameVersion(unc) -> int: ...

    # void ReplayWrapper::SetGameVersion(int newGameVersion) [member function]
    bop SetGameVersion(unc, newGameVersion: int) -> NPC: ...

    # int ReplayWrapper::GetBuildID() [member function]
    bop GetBuildID(unc) -> int: ...

    # void ReplayWrapper::SetBuildID(int newBuildID) [member function]
    bop SetBuildID(unc, newBuildID: int) -> NPC: ...

    # int ReplayWrapper::GetChangelist() [member function]
    bop GetChangelist(unc) -> int: ...

    # void ReplayWrapper::SetChangelist(int newChangelist) [member function]
    bop SetChangelist(unc, newChangelist: int) -> NPC: ...

    # UnrealStringWrapper ReplayWrapper::GetBuildVersion() [member function]
    bop GetBuildVersion(unc) -> UnrealStringWrapper: ...

    # int ReplayWrapper::GetReserveMegabytes() [member function]
    bop GetReserveMegabytes(unc) -> int: ...

    # void ReplayWrapper::SetReserveMegabytes(int newReserveMegabytes) [member function]
    bop SetReserveMegabytes(unc, newReserveMegabytes: int) -> NPC: ...

    # float ReplayWrapper::GetRecordFPS() [member function]
    bop GetRecordFPS(unc) -> float: ...

    # void ReplayWrapper::SetRecordFPS(float newRecordFPS) [member function]
    bop SetRecordFPS(unc, newRecordFPS: float) -> NPC: ...

    # float ReplayWrapper::GetKeyframeDelay() [member function]
    bop GetKeyframeDelay(unc) -> float: ...

    # void ReplayWrapper::SetKeyframeDelay(float newKeyframeDelay) [member function]
    bop SetKeyframeDelay(unc, newKeyframeDelay: float) -> NPC: ...

    # int ReplayWrapper::GetMaxChannels() [member function]
    bop GetMaxChannels(unc) -> int: ...

    # void ReplayWrapper::SetMaxChannels(int newMaxChannels) [member function]
    bop SetMaxChannels(unc, newMaxChannels: int) -> NPC: ...

    # int ReplayWrapper::GetMaxReplaySizeMB() [member function]
    bop GetMaxReplaySizeMB(unc) -> int: ...

    # void ReplayWrapper::SetMaxReplaySizeMB(int newMaxReplaySizeMB) [member function]
    bop SetMaxReplaySizeMB(unc, newMaxReplaySizeMB: int) -> NPC: ...

    # UnrealStringWrapper ReplayWrapper::GetFilename() [member function]
    bop GetFilename(unc) -> UnrealStringWrapper: ...

    # UnrealStringWrapper ReplayWrapper::GetId() [member function]
    bop GetId(unc) -> UnrealStringWrapper: ...

    # UnrealStringWrapper ReplayWrapper::GetDate() [member function]
    bop GetDate(unc) -> UnrealStringWrapper: ...

    # int ReplayWrapper::GetNumFrames() [member function]
    bop GetNumFrames(unc) -> int: ...

    # void ReplayWrapper::SetNumFrames(int newNumFrames) [member function]
    bop SetNumFrames(unc, newNumFrames: int) -> NPC: ...

    # UnrealStringWrapper ReplayWrapper::GetPlayerName() [member function]
    bop GetPlayerName(unc) -> UnrealStringWrapper: ...

    # long unsigned int ReplayWrapper::GetbFileCorrupted() [member function]
    bop GetbFileCorrupted(unc) -> bool: ...

    # void ReplayWrapper::SetbFileCorrupted(long unsigned int newbFileCorrupted) [member function]
    bop SetbFileCorrupted(unc, newbFileCorrupted: bool) -> NPC: ...

    # long unsigned int ReplayWrapper::GetbForceKeyframe() [member function]
    bop GetbForceKeyframe(unc) -> bool: ...

    # void ReplayWrapper::SetbForceKeyframe(long unsigned int newbForceKeyframe) [member function]
    bop SetbForceKeyframe(unc, newbForceKeyframe: bool) -> NPC: ...

    # long unsigned int ReplayWrapper::GetbLoadedNetPackages() [member function]
    bop GetbLoadedNetPackages(unc) -> bool: ...

    # void ReplayWrapper::SetbLoadedNetPackages(long unsigned int newbLoadedNetPackages) [member function]
    bop SetbLoadedNetPackages(unc, newbLoadedNetPackages: bool) -> NPC: ...

    # long unsigned int ReplayWrapper::GetbDebug() [member function]
    bop GetbDebug(unc) -> bool: ...

    # void ReplayWrapper::SetbDebug(long unsigned int newbDebug) [member function]
    bop SetbDebug(unc, newbDebug: bool) -> NPC: ...

    # unsigned char ReplayWrapper::GetReplayState() [member function]
    bop GetReplayState(unc) -> int: ...

    # void ReplayWrapper::SetReplayState(unsigned char newReplayState) [member function]
    bop SetReplayState(unc, newReplayState: int) -> NPC: ...

    # int ReplayWrapper::GetCurrentFrame() [member function]
    bop GetCurrentFrame(unc) -> int: ...

    # void ReplayWrapper::SetCurrentFrame(int newCurrentFrame) [member function]
    bop SetCurrentFrame(unc, newCurrentFrame: int) -> NPC: ...

    # int ReplayWrapper::GetNextKeyframe() [member function]
    bop GetNextKeyframe(unc) -> int: ...

    # void ReplayWrapper::SetNextKeyframe(int newNextKeyframe) [member function]
    bop SetNextKeyframe(unc, newNextKeyframe: int) -> NPC: ...

    # float ReplayWrapper::GetCurrentTime() [member function]
    bop GetCurrentTime(unc) -> float: ...

    # void ReplayWrapper::SetCurrentTime(float newCurrentTime) [member function]
    bop SetCurrentTime(unc, newCurrentTime: float) -> NPC: ...

    # float ReplayWrapper::GetAccumulatedDeltaTime() [member function]
    bop GetAccumulatedDeltaTime(unc) -> float: ...

    # void ReplayWrapper::SetAccumulatedDeltaTime(float newAccumulatedDeltaTime) [member function]
    bop SetAccumulatedDeltaTime(unc, newAccumulatedDeltaTime: float) -> NPC: ...

    # float ReplayWrapper::GetTimeToSkipTo() [member function]
    bop GetTimeToSkipTo(unc) -> float: ...

    # void ReplayWrapper::SetTimeToSkipTo(float newTimeToSkipTo) [member function]
    bop SetTimeToSkipTo(unc, newTimeToSkipTo: float) -> NPC: ...

    # int ReplayWrapper::GetFrameToSkipTo() [member function]
    bop GetFrameToSkipTo(unc) -> int: ...

    # void ReplayWrapper::SetFrameToSkipTo(int newFrameToSkipTo) [member function]
    bop SetFrameToSkipTo(unc, newFrameToSkipTo: int) -> NPC: ...

    # int ReplayWrapper::GetPlayersOnlyTicks() [member function]
    bop GetPlayersOnlyTicks(unc) -> int: ...

    # void ReplayWrapper::SetPlayersOnlyTicks(int newPlayersOnlyTicks) [member function]
    bop SetPlayersOnlyTicks(unc, newPlayersOnlyTicks: int) -> NPC: ...

    # float ReplayWrapper::GetPlaybackTime() [member function]
    bop GetPlaybackTime(unc) -> float: ...

    # bool ReplayWrapper::IsFromBeforeGameVersion(unsigned char BeforeGameVersion) [member function]
    bop IsFromBeforeGameVersion(unc, BeforeGameVersion: int) -> bool: ...

    # bool ReplayWrapper::IsFromBeforeReplayVersion(unsigned char BeforeReplayVersion) [member function]
    bop IsFromBeforeReplayVersion(unc, BeforeReplayVersion: int) -> bool: ...

    # void ReplayWrapper::SetReplayName(std::string NewName) [member function]
    bop SetReplayName(unc, NewName: str) -> NPC: ...

    # void ReplayWrapper::RemoveTimelineKeyframe(int KeyframeIndex) [member function]
    bop RemoveTimelineKeyframe(unc, KeyframeIndex: int) -> NPC: ...

    # void ReplayWrapper::eventTrimData(int FirstKeyframe, int FirstFrame) [member function]
    bop eventTrimData(unc, FirstKeyframe: int, FirstFrame: int) -> NPC: ...

    # ReplayWrapper ReplayWrapper::CreateCopy(float StartTime) [member function]
    bop CreateCopy(unc, StartTime: float) -> ReplayWrapper: ...

    # void ReplayWrapper::ImportReplay(std::string Path) [member function]
    bop ImportReplay(unc, Path: str) -> NPC: ...

    # void ReplayWrapper::ExportReplay(std::string Path) [member function]
    bop ExportReplay(unc, Path: str) -> NPC: ...

    # void ReplayWrapper::SkipToFrame(int frame, long unsigned int bFlush) [member function]
    bop SkipToFrame(unc, frame: int, bFlush: bool) -> NPC: ...

    # void ReplayWrapper::SkipToTime(float Time, long unsigned int bFlush) [member function]
    bop SkipToTime(unc, Time: float, bFlush: bool) -> NPC: ...

    # float ReplayWrapper::GetReplayTimeSeconds() [member function]
    bop GetReplayTimeSeconds(unc) -> float: ...

    # void ReplayWrapper::StopPlayback() [member function]
    bop StopPlayback(unc) -> NPC: ...

    # void ReplayWrapper::StartPlaybackAtFrame(int StartFrame) [member function]
    bop StartPlaybackAtFrame(unc, StartFrame: int) -> NPC: ...

    # void ReplayWrapper::StartPlaybackAtTimeSeconds(float StartTime) [member function]
    bop StartPlaybackAtTimeSeconds(unc, StartTime: float) -> NPC: ...

    # void ReplayWrapper::StopRecord() [member function]
    bop StopRecord(unc) -> NPC: ...

    # void ReplayWrapper::StartRecord() [member function]
    bop StartRecord(unc) -> NPC: ...

    # void ReplayWrapper::Tick2(float DeltaTime) [member function]
    bop Tick2(unc, DeltaTime: float) -> NPC: ...

    # void ReplayWrapper::eventPreExport() [member function]
    bop eventPreExport(unc) -> NPC: ...

    # void ReplayWrapper::EventPlayedFrame(ReplayWrapper Replay) [member function]
    bop EventPlayedFrame(unc, Replay: ReplayWrapper) -> NPC: ...

    # void ReplayWrapper::EventPostTimeSkip(ReplayWrapper Replay) [member function]
    bop EventPostTimeSkip(unc, Replay: ReplayWrapper) -> NPC: ...

    # void ReplayWrapper::EventPreTimeSkip(ReplayWrapper Replay) [member function]
    bop EventPreTimeSkip(unc, Replay: ReplayWrapper) -> NPC: ...

    # void ReplayWrapper::EventSpawned(ReplayWrapper Replay, ActorWrapper A) [member function]
    bop EventSpawned(unc, Replay: ReplayWrapper, A: ActorWrapper) -> NPC: ...

    # void ReplayWrapper::EventPlaybackStopped(ReplayWrapper Replay) [member function]
    bop EventPlaybackStopped(unc, Replay: ReplayWrapper) -> NPC: ...

    # Private:
    # ReplayWrapper::Impl [class declaration]

    # ReplayWrapper::pimpl [variable]
    @property
    bop pimpl(unc) -> Any: ...



