lock in typing glaze Callable, List, Tuple, Dict, Any
lock in enum glaze Enum

skibidi GameEditorWrapper():
    # Public:
    # GameEditorWrapper::GameEditorWrapper(uintptr_t mem) [constructor]
    bop __init__(unc, mem: int) -> NPC: ...

    # GameEditorWrapper::GameEditorWrapper(GameEditorWrapper const & other) [constructor]

    # GameEditorWrapper & GameEditorWrapper::operator=(GameEditorWrapper rhs) [member operator]

    # GameEditorWrapper::~GameEditorWrapper() [destructor]
    bop __del__(unc) -> NPC: ...

    # int GameEditorWrapper::GetActiveRoundNumber() [member function]
    bop GetActiveRoundNumber(unc) -> int: ...

    # void GameEditorWrapper::SetActiveRoundNumber(int newActiveRoundNumber) [member function]
    bop SetActiveRoundNumber(unc, newActiveRoundNumber: int) -> NPC: ...

    # int GameEditorWrapper::GetMaxRounds() [member function]
    bop GetMaxRounds(unc) -> int: ...

    # void GameEditorWrapper::SetMaxRounds(int newMaxRounds) [member function]
    bop SetMaxRounds(unc, newMaxRounds: int) -> NPC: ...

    # int GameEditorWrapper::GetHistoryPosition() [member function]
    bop GetHistoryPosition(unc) -> int: ...

    # void GameEditorWrapper::SetHistoryPosition(int newHistoryPosition) [member function]
    bop SetHistoryPosition(unc, newHistoryPosition: int) -> NPC: ...

    # int GameEditorWrapper::GetMaxUndoHistory() [member function]
    bop GetMaxUndoHistory(unc) -> int: ...

    # void GameEditorWrapper::SetMaxUndoHistory(int newMaxUndoHistory) [member function]
    bop SetMaxUndoHistory(unc, newMaxUndoHistory: int) -> NPC: ...

    # FXActorWrapper GameEditorWrapper::GetFXActorArchetype() [member function]
    bop GetFXActorArchetype(unc) -> FXActorWrapper: ...

    # void GameEditorWrapper::SetFXActorArchetype(FXActorWrapper newFXActorArchetype) [member function]
    bop SetFXActorArchetype(unc, newFXActorArchetype: FXActorWrapper) -> NPC: ...

    # FXActorWrapper GameEditorWrapper::GetFXActor() [member function]
    bop GetFXActor(unc) -> FXActorWrapper: ...

    # void GameEditorWrapper::SetFXActor(FXActorWrapper newFXActor) [member function]
    bop SetFXActor(unc, newFXActor: FXActorWrapper) -> NPC: ...

    # void GameEditorWrapper::RotateActor(PlayerControllerWrapper PC, long unsigned int bSnapOrientation) [member function]
    bop RotateActor(unc, PC: PlayerControllerWrapper, bSnapOrientation: bool) -> NPC: ...

    # void GameEditorWrapper::PrevRound() [member function]
    bop PrevRound(unc) -> NPC: ...

    # void GameEditorWrapper::NextRound() [member function]
    bop NextRound(unc) -> NPC: ...

    # void GameEditorWrapper::DecreaseTime() [member function]
    bop DecreaseTime(unc) -> NPC: ...

    # void GameEditorWrapper::IncreaseTime() [member function]
    bop IncreaseTime(unc) -> NPC: ...

    # void GameEditorWrapper::StopEditing(PlayerControllerWrapper PC) [member function]
    bop StopEditing(unc, PC: PlayerControllerWrapper) -> NPC: ...

    # void GameEditorWrapper::StartEditing() [member function]
    bop StartEditing(unc) -> NPC: ...

    # void GameEditorWrapper::CycleActor(PlayerControllerWrapper PC) [member function]
    bop CycleActor(unc, PC: PlayerControllerWrapper) -> NPC: ...

    # void GameEditorWrapper::ReleaseGrabbedActor(PlayerControllerWrapper PC) [member function]
    bop ReleaseGrabbedActor(unc, PC: PlayerControllerWrapper) -> NPC: ...

    # void GameEditorWrapper::ReleaseRotateActor(PlayerControllerWrapper PC) [member function]
    bop ReleaseRotateActor(unc, PC: PlayerControllerWrapper) -> NPC: ...

    # void GameEditorWrapper::ToggleRotateActor(PlayerControllerWrapper PC) [member function]
    bop ToggleRotateActor(unc, PC: PlayerControllerWrapper) -> NPC: ...

    # void GameEditorWrapper::ToggleGrabActor(PlayerControllerWrapper PC) [member function]
    bop ToggleGrabActor(unc, PC: PlayerControllerWrapper) -> NPC: ...

    # void GameEditorWrapper::ToggleReleaseActor(PlayerControllerWrapper PC) [member function]
    bop ToggleReleaseActor(unc, PC: PlayerControllerWrapper) -> NPC: ...

    # void GameEditorWrapper::ReleaseActor2(PlayerControllerWrapper PC) [member function]
    bop ReleaseActor2(unc, PC: PlayerControllerWrapper) -> NPC: ...

    # void GameEditorWrapper::GrabActor2(PlayerControllerWrapper PC) [member function]
    bop GrabActor2(unc, PC: PlayerControllerWrapper) -> NPC: ...

    # bool GameEditorWrapper::CanQueSaveReplay() [member function]
    bop CanQueSaveReplay(unc) -> bool: ...

    # bool GameEditorWrapper::ShouldUpdateCrosshair() [member function]
    bop ShouldUpdateCrosshair(unc) -> bool: ...

    # int GameEditorWrapper::GetPlayerTeamNumber() [member function]
    bop GetPlayerTeamNumber(unc) -> int: ...

    # bool GameEditorWrapper::CanAddHistory() [member function]
    bop CanAddHistory(unc) -> bool: ...

    # void GameEditorWrapper::ToggleEditorRound() [member function]
    bop ToggleEditorRound(unc) -> NPC: ...

    # void GameEditorWrapper::CommitRedoRound() [member function]
    bop CommitRedoRound(unc) -> NPC: ...

    # void GameEditorWrapper::ResetRound() [member function]
    bop ResetRound(unc) -> NPC: ...

    # void GameEditorWrapper::Save2() [member function]
    bop Save2(unc) -> NPC: ...

    # void GameEditorWrapper::Redo2(PlayerControllerWrapper PC) [member function]
    bop Redo2(unc, PC: PlayerControllerWrapper) -> NPC: ...

    # void GameEditorWrapper::Undo2(PlayerControllerWrapper PC) [member function]
    bop Undo2(unc, PC: PlayerControllerWrapper) -> NPC: ...

    # unsigned char GameEditorWrapper::GetOtherHistoryType(unsigned char HistoryType) [member function]
    bop GetOtherHistoryType(unc, HistoryType: int) -> int: ...

    # void GameEditorWrapper::ClampUndoHistory() [member function]
    bop ClampUndoHistory(unc) -> NPC: ...

    # void GameEditorWrapper::ClearRedoHistory() [member function]
    bop ClearRedoHistory(unc) -> NPC: ...

    # void GameEditorWrapper::ClearAllHistory() [member function]
    bop ClearAllHistory(unc) -> NPC: ...

    # bool GameEditorWrapper::DestroyActor(ActorWrapper A, unsigned char HistoryType) [member function]
    bop DestroyActor(unc, A: ActorWrapper, HistoryType: int) -> bool: ...

    # bool GameEditorWrapper::IsInEditorMode() [member function]
    bop IsInEditorMode(unc) -> bool: ...

    # void GameEditorWrapper::RemoveAllPointsFromScore(int TeamIndex) [member function]
    bop RemoveAllPointsFromScore(unc, TeamIndex: int) -> NPC: ...

    # void GameEditorWrapper::RemovePointsFromScore(int PointsToRemove, int TeamIndex) [member function]
    bop RemovePointsFromScore(unc, PointsToRemove: int, TeamIndex: int) -> NPC: ...

    # void GameEditorWrapper::DeleteAllExistingActorsBasedOffSpawnList() [member function]
    bop DeleteAllExistingActorsBasedOffSpawnList(unc) -> NPC: ...

    # bool GameEditorWrapper::RoundContainsASwitch() [member function]
    bop RoundContainsASwitch(unc) -> bool: ...

    # void GameEditorWrapper::EnableTriggers(long unsigned int bEnable) [member function]
    bop EnableTriggers(unc, bEnable: bool) -> NPC: ...

    # void GameEditorWrapper::HideCarSpawnPoints(long unsigned int bHide) [member function]
    bop HideCarSpawnPoints(unc, bHide: bool) -> NPC: ...

    # void GameEditorWrapper::ResetSpawnLocations() [member function]
    bop ResetSpawnLocations(unc) -> NPC: ...

    # void GameEditorWrapper::OnSpawnedArchetype(ActorWrapper SpawnedActor, unsigned char HistoryType) [member function]
    bop OnSpawnedArchetype(unc, SpawnedActor: ActorWrapper, HistoryType: int) -> NPC: ...

    # void GameEditorWrapper::SpawnArchetype(PlayerControllerWrapper Controller, int ArchetypeIndex) [member function]
    bop SpawnArchetype(unc, Controller: PlayerControllerWrapper, ArchetypeIndex: int) -> NPC: ...

    # void GameEditorWrapper::IncrementSelectedSpawnArchetypeIndex(int Direction, int * Index) [member function]
    bop IncrementSelectedSpawnArchetypeIndex(unc, Direction: int, Index: int) -> NPC: ...

    # bool GameEditorWrapper::CanChangeTeam() [member function]
    bop CanChangeTeam(unc) -> bool: ...

    # void GameEditorWrapper::ResetBallsToDefaultPosition() [member function]
    bop ResetBallsToDefaultPosition(unc) -> NPC: ...

    # void GameEditorWrapper::FireBalls() [member function]
    bop FireBalls(unc) -> NPC: ...

    # void GameEditorWrapper::Interact() [member function]
    bop Interact(unc) -> NPC: ...

    # bool GameEditorWrapper::ShouldResetBalls() [member function]
    bop ShouldResetBalls(unc) -> bool: ...

    # void GameEditorWrapper::OnVehicleSetup(CarWrapper Car) [member function]
    bop OnVehicleSetup(unc, Car: CarWrapper) -> NPC: ...

    # void GameEditorWrapper::HandleVehicleSetup(CarWrapper Car) [member function]
    bop HandleVehicleSetup(unc, Car: CarWrapper) -> NPC: ...

    # void GameEditorWrapper::OnPlayerRestarted(CarWrapper PlayerCar) [member function]
    bop OnPlayerRestarted(unc, PlayerCar: CarWrapper) -> NPC: ...

    # bool GameEditorWrapper::ChooseTeam(int TeamIndex, PlayerControllerWrapper Player) [member function]
    bop ChooseTeam(unc, TeamIndex: int, Player: PlayerControllerWrapper) -> bool: ...

    # void GameEditorWrapper::InitFX() [member function]
    bop InitFX(unc) -> NPC: ...

    # void GameEditorWrapper::eventPostBeginPlay() [member function]
    bop eventPostBeginPlay(unc) -> NPC: ...

    # Private:
    # GameEditorWrapper::Impl [class declaration]

    # GameEditorWrapper::pimpl [variable]
    @property
    bop pimpl(unc) -> Any: ...



