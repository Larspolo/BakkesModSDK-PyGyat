lock in typing glaze Callable, List, Tuple, Dict, Any
lock in enum glaze Enum

skibidi TeamGameEventWrapper():
    # Public:
    # TeamGameEventWrapper::TeamGameEventWrapper(uintptr_t mem) [constructor]
    bop __init__(unc, mem: int) -> NPC: ...

    # TeamGameEventWrapper::TeamGameEventWrapper(TeamGameEventWrapper const & other) [constructor]

    # TeamGameEventWrapper & TeamGameEventWrapper::operator=(TeamGameEventWrapper rhs) [member operator]

    # TeamGameEventWrapper::~TeamGameEventWrapper() [destructor]
    bop __del__(unc) -> NPC: ...

    # ArrayWrapper<TeamWrapper> TeamGameEventWrapper::GetTeamArchetypes() [member function]
    bop GetTeamArchetypes(unc) -> ArrayWrapper_TeamWrapper: ...

    # ArrayWrapper<TeamWrapper> TeamGameEventWrapper::GetTeams() [member function]
    bop GetTeams(unc) -> ArrayWrapper_TeamWrapper: ...

    # int TeamGameEventWrapper::GetMaxTeamSize() [member function]
    bop GetMaxTeamSize(unc) -> int: ...

    # void TeamGameEventWrapper::SetMaxTeamSize(int newMaxTeamSize) [member function]
    bop SetMaxTeamSize(unc, newMaxTeamSize: int) -> NPC: ...

    # int TeamGameEventWrapper::GetNumBots() [member function]
    bop GetNumBots(unc) -> int: ...

    # void TeamGameEventWrapper::SetNumBots(int newNumBots) [member function]
    bop SetNumBots(unc, newNumBots: int) -> NPC: ...

    # long unsigned int TeamGameEventWrapper::GetbMuteOppositeTeams() [member function]
    bop GetbMuteOppositeTeams(unc) -> bool: ...

    # void TeamGameEventWrapper::SetbMuteOppositeTeams(long unsigned int newbMuteOppositeTeams) [member function]
    bop SetbMuteOppositeTeams(unc, newbMuteOppositeTeams: bool) -> NPC: ...

    # long unsigned int TeamGameEventWrapper::GetbDisableMutingOtherTeam() [member function]
    bop GetbDisableMutingOtherTeam(unc) -> bool: ...

    # void TeamGameEventWrapper::SetbDisableMutingOtherTeam(long unsigned int newbDisableMutingOtherTeam) [member function]
    bop SetbDisableMutingOtherTeam(unc, newbDisableMutingOtherTeam: bool) -> NPC: ...

    # long unsigned int TeamGameEventWrapper::GetbForfeit() [member function]
    bop GetbForfeit(unc) -> bool: ...

    # void TeamGameEventWrapper::SetbForfeit(long unsigned int newbForfeit) [member function]
    bop SetbForfeit(unc, newbForfeit: bool) -> NPC: ...

    # long unsigned int TeamGameEventWrapper::GetbUnfairTeams() [member function]
    bop GetbUnfairTeams(unc) -> bool: ...

    # void TeamGameEventWrapper::SetbUnfairTeams(long unsigned int newbUnfairTeams) [member function]
    bop SetbUnfairTeams(unc, newbUnfairTeams: bool) -> NPC: ...

    # long unsigned int TeamGameEventWrapper::GetbAlwaysAutoSelectTeam() [member function]
    bop GetbAlwaysAutoSelectTeam(unc) -> bool: ...

    # void TeamGameEventWrapper::SetbAlwaysAutoSelectTeam(long unsigned int newbAlwaysAutoSelectTeam) [member function]
    bop SetbAlwaysAutoSelectTeam(unc, newbAlwaysAutoSelectTeam: bool) -> NPC: ...

    # void TeamGameEventWrapper::StartRematchVote() [member function]
    bop StartRematchVote(unc) -> NPC: ...

    # void TeamGameEventWrapper::CheckRematchVote() [member function]
    bop CheckRematchVote(unc) -> NPC: ...

    # bool TeamGameEventWrapper::__GameEvent_Team_TA__AllTeamsHaveHumans(TeamWrapper Team) [member function]
    bop __GameEvent_Team_TA__AllTeamsHaveHumans(unc, Team: TeamWrapper) -> bool: ...

    # void TeamGameEventWrapper::UpdatePlayerShortcuts() [member function]
    bop UpdatePlayerShortcuts(unc) -> NPC: ...

    # void TeamGameEventWrapper::ClearTemporarySpawnSpots() [member function]
    bop ClearTemporarySpawnSpots(unc) -> NPC: ...

    # bool TeamGameEventWrapper::ChooseTeam(int TeamIndex, PlayerControllerWrapper Player) [member function]
    bop ChooseTeam(unc, TeamIndex: int, Player: PlayerControllerWrapper) -> bool: ...

    # bool TeamGameEventWrapper::CanChangeTeam() [member function]
    bop CanChangeTeam(unc) -> bool: ...

    # void TeamGameEventWrapper::OnPenaltyChanged() [member function]
    bop OnPenaltyChanged(unc) -> NPC: ...

    # void TeamGameEventWrapper::OnTeamForfeited(TeamWrapper Team) [member function]
    bop OnTeamForfeited(unc, Team: TeamWrapper) -> NPC: ...

    # void TeamGameEventWrapper::HandleTeamForfeit(TeamWrapper Team) [member function]
    bop HandleTeamForfeit(unc, Team: TeamWrapper) -> NPC: ...

    # void TeamGameEventWrapper::MuteOppositeTeams2(long unsigned int bMute) [member function]
    bop MuteOppositeTeams2(unc, bMute: bool) -> NPC: ...

    # void TeamGameEventWrapper::UpdateBotCount() [member function]
    bop UpdateBotCount(unc) -> NPC: ...

    # bool TeamGameEventWrapper::FindBotReplacement(PriWrapper PRI) [member function]
    bop FindBotReplacement(unc, PRI: PriWrapper) -> bool: ...

    # void TeamGameEventWrapper::EndGame() [member function]
    bop EndGame(unc) -> NPC: ...

    # void TeamGameEventWrapper::ForceNoContest() [member function]
    bop ForceNoContest(unc) -> NPC: ...

    # void TeamGameEventWrapper::AddTemporarySpawnSpot(TeamWrapper Team, CarWrapper Car) [member function]
    bop AddTemporarySpawnSpot(unc, Team: TeamWrapper, Car: CarWrapper) -> NPC: ...

    # void TeamGameEventWrapper::HandleSelectedLoadout(PriWrapper PlayerPRI) [member function]
    bop HandleSelectedLoadout(unc, PlayerPRI: PriWrapper) -> NPC: ...

    # void TeamGameEventWrapper::DestroyTeams() [member function]
    bop DestroyTeams(unc) -> NPC: ...

    # void TeamGameEventWrapper::OnAllTeamsCreated() [member function]
    bop OnAllTeamsCreated(unc) -> NPC: ...

    # void TeamGameEventWrapper::AssignCustomTeamSettings() [member function]
    bop AssignCustomTeamSettings(unc) -> NPC: ...

    # void TeamGameEventWrapper::OnMatchSettingsChanged() [member function]
    bop OnMatchSettingsChanged(unc) -> NPC: ...

    # bool TeamGameEventWrapper::AllTeamsHaveHumans2() [member function]
    bop AllTeamsHaveHumans2(unc) -> bool: ...

    # bool TeamGameEventWrapper::AllTeamsCreated2() [member function]
    bop AllTeamsCreated2(unc) -> bool: ...

    # void TeamGameEventWrapper::SetTeam(int TeamNum, TeamWrapper NewTeam) [member function]
    bop SetTeam(unc, TeamNum: int, NewTeam: TeamWrapper) -> NPC: ...

    # void TeamGameEventWrapper::CreateTeams() [member function]
    bop CreateTeams(unc) -> NPC: ...

    # void TeamGameEventWrapper::PreloadBots() [member function]
    bop PreloadBots(unc) -> NPC: ...

    # void TeamGameEventWrapper::OnInit() [member function]
    bop OnInit(unc) -> NPC: ...

    # void TeamGameEventWrapper::SetMaxTeamSize2(int MaxSize) [member function]
    bop SetMaxTeamSize2(unc, MaxSize: int) -> NPC: ...

    # void TeamGameEventWrapper::UpdateMaxTeamSize() [member function]
    bop UpdateMaxTeamSize(unc) -> NPC: ...

    # void TeamGameEventWrapper::SetUnfairTeams(long unsigned int bUnfair) [member function]
    bop SetUnfairTeams(unc, bUnfair: bool) -> NPC: ...

    # void TeamGameEventWrapper::InitBotSkill() [member function]
    bop InitBotSkill(unc) -> NPC: ...

    # void TeamGameEventWrapper::eventInitGame(std::string Options) [member function]
    bop eventInitGame(unc, Options: str) -> NPC: ...

    # Private:
    # TeamGameEventWrapper::Impl [class declaration]

    # TeamGameEventWrapper::pimpl [variable]
    @property
    bop pimpl(unc) -> Any: ...



