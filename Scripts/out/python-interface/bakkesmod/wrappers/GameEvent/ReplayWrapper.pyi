from typing import Callable, List, Tuple, Dict, Any
from enum import Enum

class ReplayWrapper():
    # Public:
    # ReplayWrapper::ReplayWrapper(uintptr_t mem) [constructor]
    def __init__(self, mem: int) -> None: ...

    # ReplayWrapper::ReplayWrapper(ReplayWrapper const & other) [constructor]

    # ReplayWrapper & ReplayWrapper::operator=(ReplayWrapper rhs) [member operator]

    # ReplayWrapper::~ReplayWrapper() [destructor]
    def __del__(self) -> None: ...

    # bool ReplayWrapper::IsNull() const [member function]
    def IsNull(self) -> bool: ...

    # bool ReplayWrapper::operator bool() const [casting operator]

    # UnrealStringWrapper ReplayWrapper::GetReplayName() [member function]
    def GetReplayName(self) -> UnrealStringWrapper: ...

    # int ReplayWrapper::GetEngineVersion() [member function]
    def GetEngineVersion(self) -> int: ...

    # void ReplayWrapper::SetEngineVersion(int newEngineVersion) [member function]
    def SetEngineVersion(self, newEngineVersion: int) -> None: ...

    # int ReplayWrapper::GetLicenseeVersion() [member function]
    def GetLicenseeVersion(self) -> int: ...

    # void ReplayWrapper::SetLicenseeVersion(int newLicenseeVersion) [member function]
    def SetLicenseeVersion(self, newLicenseeVersion: int) -> None: ...

    # int ReplayWrapper::GetNetVersion() [member function]
    def GetNetVersion(self) -> int: ...

    # void ReplayWrapper::SetNetVersion(int newNetVersion) [member function]
    def SetNetVersion(self, newNetVersion: int) -> None: ...

    # int ReplayWrapper::GetReplayVersion() [member function]
    def GetReplayVersion(self) -> int: ...

    # void ReplayWrapper::SetReplayVersion(int newReplayVersion) [member function]
    def SetReplayVersion(self, newReplayVersion: int) -> None: ...

    # int ReplayWrapper::GetReplayLastSaveVersion() [member function]
    def GetReplayLastSaveVersion(self) -> int: ...

    # void ReplayWrapper::SetReplayLastSaveVersion(int newReplayLastSaveVersion) [member function]
    def SetReplayLastSaveVersion(self, newReplayLastSaveVersion: int) -> None: ...

    # int ReplayWrapper::GetGameVersion() [member function]
    def GetGameVersion(self) -> int: ...

    # void ReplayWrapper::SetGameVersion(int newGameVersion) [member function]
    def SetGameVersion(self, newGameVersion: int) -> None: ...

    # int ReplayWrapper::GetBuildID() [member function]
    def GetBuildID(self) -> int: ...

    # void ReplayWrapper::SetBuildID(int newBuildID) [member function]
    def SetBuildID(self, newBuildID: int) -> None: ...

    # int ReplayWrapper::GetChangelist() [member function]
    def GetChangelist(self) -> int: ...

    # void ReplayWrapper::SetChangelist(int newChangelist) [member function]
    def SetChangelist(self, newChangelist: int) -> None: ...

    # UnrealStringWrapper ReplayWrapper::GetBuildVersion() [member function]
    def GetBuildVersion(self) -> UnrealStringWrapper: ...

    # int ReplayWrapper::GetReserveMegabytes() [member function]
    def GetReserveMegabytes(self) -> int: ...

    # void ReplayWrapper::SetReserveMegabytes(int newReserveMegabytes) [member function]
    def SetReserveMegabytes(self, newReserveMegabytes: int) -> None: ...

    # float ReplayWrapper::GetRecordFPS() [member function]
    def GetRecordFPS(self) -> float: ...

    # void ReplayWrapper::SetRecordFPS(float newRecordFPS) [member function]
    def SetRecordFPS(self, newRecordFPS: float) -> None: ...

    # float ReplayWrapper::GetKeyframeDelay() [member function]
    def GetKeyframeDelay(self) -> float: ...

    # void ReplayWrapper::SetKeyframeDelay(float newKeyframeDelay) [member function]
    def SetKeyframeDelay(self, newKeyframeDelay: float) -> None: ...

    # int ReplayWrapper::GetMaxChannels() [member function]
    def GetMaxChannels(self) -> int: ...

    # void ReplayWrapper::SetMaxChannels(int newMaxChannels) [member function]
    def SetMaxChannels(self, newMaxChannels: int) -> None: ...

    # int ReplayWrapper::GetMaxReplaySizeMB() [member function]
    def GetMaxReplaySizeMB(self) -> int: ...

    # void ReplayWrapper::SetMaxReplaySizeMB(int newMaxReplaySizeMB) [member function]
    def SetMaxReplaySizeMB(self, newMaxReplaySizeMB: int) -> None: ...

    # UnrealStringWrapper ReplayWrapper::GetFilename() [member function]
    def GetFilename(self) -> UnrealStringWrapper: ...

    # UnrealStringWrapper ReplayWrapper::GetId() [member function]
    def GetId(self) -> UnrealStringWrapper: ...

    # UnrealStringWrapper ReplayWrapper::GetDate() [member function]
    def GetDate(self) -> UnrealStringWrapper: ...

    # int ReplayWrapper::GetNumFrames() [member function]
    def GetNumFrames(self) -> int: ...

    # void ReplayWrapper::SetNumFrames(int newNumFrames) [member function]
    def SetNumFrames(self, newNumFrames: int) -> None: ...

    # UnrealStringWrapper ReplayWrapper::GetPlayerName() [member function]
    def GetPlayerName(self) -> UnrealStringWrapper: ...

    # long unsigned int ReplayWrapper::GetbFileCorrupted() [member function]
    def GetbFileCorrupted(self) -> bool: ...

    # void ReplayWrapper::SetbFileCorrupted(long unsigned int newbFileCorrupted) [member function]
    def SetbFileCorrupted(self, newbFileCorrupted: bool) -> None: ...

    # long unsigned int ReplayWrapper::GetbForceKeyframe() [member function]
    def GetbForceKeyframe(self) -> bool: ...

    # void ReplayWrapper::SetbForceKeyframe(long unsigned int newbForceKeyframe) [member function]
    def SetbForceKeyframe(self, newbForceKeyframe: bool) -> None: ...

    # long unsigned int ReplayWrapper::GetbLoadedNetPackages() [member function]
    def GetbLoadedNetPackages(self) -> bool: ...

    # void ReplayWrapper::SetbLoadedNetPackages(long unsigned int newbLoadedNetPackages) [member function]
    def SetbLoadedNetPackages(self, newbLoadedNetPackages: bool) -> None: ...

    # long unsigned int ReplayWrapper::GetbDebug() [member function]
    def GetbDebug(self) -> bool: ...

    # void ReplayWrapper::SetbDebug(long unsigned int newbDebug) [member function]
    def SetbDebug(self, newbDebug: bool) -> None: ...

    # unsigned char ReplayWrapper::GetReplayState() [member function]
    def GetReplayState(self) -> int: ...

    # void ReplayWrapper::SetReplayState(unsigned char newReplayState) [member function]
    def SetReplayState(self, newReplayState: int) -> None: ...

    # int ReplayWrapper::GetCurrentFrame() [member function]
    def GetCurrentFrame(self) -> int: ...

    # void ReplayWrapper::SetCurrentFrame(int newCurrentFrame) [member function]
    def SetCurrentFrame(self, newCurrentFrame: int) -> None: ...

    # int ReplayWrapper::GetNextKeyframe() [member function]
    def GetNextKeyframe(self) -> int: ...

    # void ReplayWrapper::SetNextKeyframe(int newNextKeyframe) [member function]
    def SetNextKeyframe(self, newNextKeyframe: int) -> None: ...

    # float ReplayWrapper::GetCurrentTime() [member function]
    def GetCurrentTime(self) -> float: ...

    # void ReplayWrapper::SetCurrentTime(float newCurrentTime) [member function]
    def SetCurrentTime(self, newCurrentTime: float) -> None: ...

    # float ReplayWrapper::GetAccumulatedDeltaTime() [member function]
    def GetAccumulatedDeltaTime(self) -> float: ...

    # void ReplayWrapper::SetAccumulatedDeltaTime(float newAccumulatedDeltaTime) [member function]
    def SetAccumulatedDeltaTime(self, newAccumulatedDeltaTime: float) -> None: ...

    # float ReplayWrapper::GetTimeToSkipTo() [member function]
    def GetTimeToSkipTo(self) -> float: ...

    # void ReplayWrapper::SetTimeToSkipTo(float newTimeToSkipTo) [member function]
    def SetTimeToSkipTo(self, newTimeToSkipTo: float) -> None: ...

    # int ReplayWrapper::GetFrameToSkipTo() [member function]
    def GetFrameToSkipTo(self) -> int: ...

    # void ReplayWrapper::SetFrameToSkipTo(int newFrameToSkipTo) [member function]
    def SetFrameToSkipTo(self, newFrameToSkipTo: int) -> None: ...

    # int ReplayWrapper::GetPlayersOnlyTicks() [member function]
    def GetPlayersOnlyTicks(self) -> int: ...

    # void ReplayWrapper::SetPlayersOnlyTicks(int newPlayersOnlyTicks) [member function]
    def SetPlayersOnlyTicks(self, newPlayersOnlyTicks: int) -> None: ...

    # float ReplayWrapper::GetPlaybackTime() [member function]
    def GetPlaybackTime(self) -> float: ...

    # bool ReplayWrapper::IsFromBeforeGameVersion(unsigned char BeforeGameVersion) [member function]
    def IsFromBeforeGameVersion(self, BeforeGameVersion: int) -> bool: ...

    # bool ReplayWrapper::IsFromBeforeReplayVersion(unsigned char BeforeReplayVersion) [member function]
    def IsFromBeforeReplayVersion(self, BeforeReplayVersion: int) -> bool: ...

    # void ReplayWrapper::SetReplayName(std::string NewName) [member function]
    def SetReplayName(self, NewName: str) -> None: ...

    # void ReplayWrapper::RemoveTimelineKeyframe(int KeyframeIndex) [member function]
    def RemoveTimelineKeyframe(self, KeyframeIndex: int) -> None: ...

    # void ReplayWrapper::eventTrimData(int FirstKeyframe, int FirstFrame) [member function]
    def eventTrimData(self, FirstKeyframe: int, FirstFrame: int) -> None: ...

    # ReplayWrapper ReplayWrapper::CreateCopy(float StartTime) [member function]
    def CreateCopy(self, StartTime: float) -> ReplayWrapper: ...

    # void ReplayWrapper::ImportReplay(std::string Path) [member function]
    def ImportReplay(self, Path: str) -> None: ...

    # void ReplayWrapper::ExportReplay(std::string Path) [member function]
    def ExportReplay(self, Path: str) -> None: ...

    # void ReplayWrapper::SkipToFrame(int frame, long unsigned int bFlush) [member function]
    def SkipToFrame(self, frame: int, bFlush: bool) -> None: ...

    # void ReplayWrapper::SkipToTime(float Time, long unsigned int bFlush) [member function]
    def SkipToTime(self, Time: float, bFlush: bool) -> None: ...

    # float ReplayWrapper::GetReplayTimeSeconds() [member function]
    def GetReplayTimeSeconds(self) -> float: ...

    # void ReplayWrapper::StopPlayback() [member function]
    def StopPlayback(self) -> None: ...

    # void ReplayWrapper::StartPlaybackAtFrame(int StartFrame) [member function]
    def StartPlaybackAtFrame(self, StartFrame: int) -> None: ...

    # void ReplayWrapper::StartPlaybackAtTimeSeconds(float StartTime) [member function]
    def StartPlaybackAtTimeSeconds(self, StartTime: float) -> None: ...

    # void ReplayWrapper::StopRecord() [member function]
    def StopRecord(self) -> None: ...

    # void ReplayWrapper::StartRecord() [member function]
    def StartRecord(self) -> None: ...

    # void ReplayWrapper::Tick2(float DeltaTime) [member function]
    def Tick2(self, DeltaTime: float) -> None: ...

    # void ReplayWrapper::eventPreExport() [member function]
    def eventPreExport(self) -> None: ...

    # void ReplayWrapper::EventPlayedFrame(ReplayWrapper Replay) [member function]
    def EventPlayedFrame(self, Replay: ReplayWrapper) -> None: ...

    # void ReplayWrapper::EventPostTimeSkip(ReplayWrapper Replay) [member function]
    def EventPostTimeSkip(self, Replay: ReplayWrapper) -> None: ...

    # void ReplayWrapper::EventPreTimeSkip(ReplayWrapper Replay) [member function]
    def EventPreTimeSkip(self, Replay: ReplayWrapper) -> None: ...

    # void ReplayWrapper::EventSpawned(ReplayWrapper Replay, ActorWrapper A) [member function]
    def EventSpawned(self, Replay: ReplayWrapper, A: ActorWrapper) -> None: ...

    # void ReplayWrapper::EventPlaybackStopped(ReplayWrapper Replay) [member function]
    def EventPlaybackStopped(self, Replay: ReplayWrapper) -> None: ...

    # Private:
    # ReplayWrapper::Impl [class declaration]

    # ReplayWrapper::pimpl [variable]
    @property
    def pimpl(self) -> Any: ...


