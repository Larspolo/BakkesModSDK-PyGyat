lock in typing glaze Callable, List, Tuple, Dict, Any
lock in enum glaze Enum

skibidi GameEventWrapper():
    # Public:
    # GameEventWrapper::GameEventWrapper(uintptr_t mem) [constructor]
    bop __init__(unc, mem: int) -> NPC: ...

    # GameEventWrapper::GameEventWrapper(GameEventWrapper const & other) [constructor]

    # GameEventWrapper & GameEventWrapper::operator=(GameEventWrapper rhs) [member operator]

    # GameEventWrapper::~GameEventWrapper() [destructor]
    bop __del__(unc) -> NPC: ...

    # unsigned char GameEventWrapper::GetGameMode() [member function]
    bop GetGameMode(unc) -> int: ...

    # void GameEventWrapper::SetGameMode(unsigned char newGameMode) [member function]
    bop SetGameMode(unc, newGameMode: int) -> NPC: ...

    # unsigned char GameEventWrapper::GetReplicatedStateIndex() [member function]
    bop GetReplicatedStateIndex(unc) -> int: ...

    # void GameEventWrapper::SetReplicatedStateIndex(unsigned char newReplicatedStateIndex) [member function]
    bop SetReplicatedStateIndex(unc, newReplicatedStateIndex: int) -> NPC: ...

    # CarWrapper GameEventWrapper::GetCarArchetype() [member function]
    bop GetCarArchetype(unc) -> CarWrapper: ...

    # void GameEventWrapper::SetCarArchetype(CarWrapper newCarArchetype) [member function]
    bop SetCarArchetype(unc, newCarArchetype: CarWrapper) -> NPC: ...

    # int GameEventWrapper::GetCountdownTime() [member function]
    bop GetCountdownTime(unc) -> int: ...

    # void GameEventWrapper::SetCountdownTime(int newCountdownTime) [member function]
    bop SetCountdownTime(unc, newCountdownTime: int) -> NPC: ...

    # int GameEventWrapper::GetFinishTime() [member function]
    bop GetFinishTime(unc) -> int: ...

    # void GameEventWrapper::SetFinishTime(int newFinishTime) [member function]
    bop SetFinishTime(unc, newFinishTime: int) -> NPC: ...

    # long unsigned int GameEventWrapper::GetbMultiplayer() [member function]
    bop GetbMultiplayer(unc) -> bool: ...

    # void GameEventWrapper::SetbMultiplayer(long unsigned int newbMultiplayer) [member function]
    bop SetbMultiplayer(unc, newbMultiplayer: bool) -> NPC: ...

    # long unsigned int GameEventWrapper::GetbCountdownMessagesDisabled() [member function]
    bop GetbCountdownMessagesDisabled(unc) -> bool: ...

    # void GameEventWrapper::SetbCountdownMessagesDisabled(long unsigned int newbCountdownMessagesDisabled) [member function]
    bop SetbCountdownMessagesDisabled(unc, newbCountdownMessagesDisabled: bool) -> NPC: ...

    # long unsigned int GameEventWrapper::GetbFillWithAI() [member function]
    bop GetbFillWithAI(unc) -> bool: ...

    # void GameEventWrapper::SetbFillWithAI(long unsigned int newbFillWithAI) [member function]
    bop SetbFillWithAI(unc, newbFillWithAI: bool) -> NPC: ...

    # long unsigned int GameEventWrapper::GetbAllowQueueSaveReplay() [member function]
    bop GetbAllowQueueSaveReplay(unc) -> bool: ...

    # void GameEventWrapper::SetbAllowQueueSaveReplay(long unsigned int newbAllowQueueSaveReplay) [member function]
    bop SetbAllowQueueSaveReplay(unc, newbAllowQueueSaveReplay: bool) -> NPC: ...

    # long unsigned int GameEventWrapper::GetbAllowReadyUp() [member function]
    bop GetbAllowReadyUp(unc) -> bool: ...

    # void GameEventWrapper::SetbAllowReadyUp(long unsigned int newbAllowReadyUp) [member function]
    bop SetbAllowReadyUp(unc, newbAllowReadyUp: bool) -> NPC: ...

    # long unsigned int GameEventWrapper::GetbRestartingMatch() [member function]
    bop GetbRestartingMatch(unc) -> bool: ...

    # void GameEventWrapper::SetbRestartingMatch(long unsigned int newbRestartingMatch) [member function]
    bop SetbRestartingMatch(unc, newbRestartingMatch: bool) -> NPC: ...

    # long unsigned int GameEventWrapper::GetbRandomizedBotLoadouts() [member function]
    bop GetbRandomizedBotLoadouts(unc) -> bool: ...

    # void GameEventWrapper::SetbRandomizedBotLoadouts(long unsigned int newbRandomizedBotLoadouts) [member function]
    bop SetbRandomizedBotLoadouts(unc, newbRandomizedBotLoadouts: bool) -> NPC: ...

    # long unsigned int GameEventWrapper::GetbHasLeaveMatchPenalty() [member function]
    bop GetbHasLeaveMatchPenalty(unc) -> bool: ...

    # void GameEventWrapper::SetbHasLeaveMatchPenalty(long unsigned int newbHasLeaveMatchPenalty) [member function]
    bop SetbHasLeaveMatchPenalty(unc, newbHasLeaveMatchPenalty: bool) -> NPC: ...

    # long unsigned int GameEventWrapper::GetbCanVoteToForfeit() [member function]
    bop GetbCanVoteToForfeit(unc) -> bool: ...

    # void GameEventWrapper::SetbCanVoteToForfeit(long unsigned int newbCanVoteToForfeit) [member function]
    bop SetbCanVoteToForfeit(unc, newbCanVoteToForfeit: bool) -> NPC: ...

    # long unsigned int GameEventWrapper::GetbDisableAimAssist() [member function]
    bop GetbDisableAimAssist(unc) -> bool: ...

    # void GameEventWrapper::SetbDisableAimAssist(long unsigned int newbDisableAimAssist) [member function]
    bop SetbDisableAimAssist(unc, newbDisableAimAssist: bool) -> NPC: ...

    # long unsigned int GameEventWrapper::GetbAwardAchievements() [member function]
    bop GetbAwardAchievements(unc) -> bool: ...

    # void GameEventWrapper::SetbAwardAchievements(long unsigned int newbAwardAchievements) [member function]
    bop SetbAwardAchievements(unc, newbAwardAchievements: bool) -> NPC: ...

    # int GameEventWrapper::GetMinPlayers() [member function]
    bop GetMinPlayers(unc) -> int: ...

    # void GameEventWrapper::SetMinPlayers(int newMinPlayers) [member function]
    bop SetMinPlayers(unc, newMinPlayers: int) -> NPC: ...

    # int GameEventWrapper::GetMaxPlayers() [member function]
    bop GetMaxPlayers(unc) -> int: ...

    # void GameEventWrapper::SetMaxPlayers(int newMaxPlayers) [member function]
    bop SetMaxPlayers(unc, newMaxPlayers: int) -> NPC: ...

    # ArrayWrapper<ActorWrapper> GameEventWrapper::GetSpawnPoints() [member function]
    bop GetSpawnPoints(unc) -> ArrayWrapper_ActorWrapper: ...

    # float GameEventWrapper::GetBotSkill() [member function]
    bop GetBotSkill(unc) -> float: ...

    # void GameEventWrapper::SetBotSkill(float newBotSkill) [member function]
    bop SetBotSkill(unc, newBotSkill: float) -> NPC: ...

    # int GameEventWrapper::GetRespawnTime() [member function]
    bop GetRespawnTime(unc) -> int: ...

    # void GameEventWrapper::SetRespawnTime(int newRespawnTime) [member function]
    bop SetRespawnTime(unc, newRespawnTime: int) -> NPC: ...

    # float GameEventWrapper::GetMatchTimeDilation() [member function]
    bop GetMatchTimeDilation(unc) -> float: ...

    # void GameEventWrapper::SetMatchTimeDilation(float newMatchTimeDilation) [member function]
    bop SetMatchTimeDilation(unc, newMatchTimeDilation: float) -> NPC: ...

    # PlayerControllerWrapper GameEventWrapper::GetActivator() [member function]
    bop GetActivator(unc) -> PlayerControllerWrapper: ...

    # void GameEventWrapper::SetActivator(PlayerControllerWrapper newActivator) [member function]
    bop SetActivator(unc, newActivator: PlayerControllerWrapper) -> NPC: ...

    # CarWrapper GameEventWrapper::GetActivatorCar() [member function]
    bop GetActivatorCar(unc) -> CarWrapper: ...

    # void GameEventWrapper::SetActivatorCar(CarWrapper newActivatorCar) [member function]
    bop SetActivatorCar(unc, newActivatorCar: CarWrapper) -> NPC: ...

    # ArrayWrapper<ControllerWrapper> GameEventWrapper::GetPlayers() [member function]
    bop GetPlayers(unc) -> ArrayWrapper_ControllerWrapper: ...

    # ArrayWrapper<PriWrapper> GameEventWrapper::GetPRIs() [member function]
    bop GetPRIs(unc) -> ArrayWrapper_PriWrapper: ...

    # ArrayWrapper<CarWrapper> GameEventWrapper::GetCars() [member function]
    bop GetCars(unc) -> ArrayWrapper_CarWrapper: ...

    # ArrayWrapper<PlayerControllerWrapper> GameEventWrapper::GetLocalPlayers() [member function]
    bop GetLocalPlayers(unc) -> ArrayWrapper_PlayerControllerWrapper: ...

    # int GameEventWrapper::GetStartPointIndex() [member function]
    bop GetStartPointIndex(unc) -> int: ...

    # void GameEventWrapper::SetStartPointIndex(int newStartPointIndex) [member function]
    bop SetStartPointIndex(unc, newStartPointIndex: int) -> NPC: ...

    # int GameEventWrapper::GetGameStateTimeRemaining() [member function]
    bop GetGameStateTimeRemaining(unc) -> int: ...

    # void GameEventWrapper::SetGameStateTimeRemaining(int newGameStateTimeRemaining) [member function]
    bop SetGameStateTimeRemaining(unc, newGameStateTimeRemaining: int) -> NPC: ...

    # int GameEventWrapper::GetReplicatedGameStateTimeRemaining() [member function]
    bop GetReplicatedGameStateTimeRemaining(unc) -> int: ...

    # void GameEventWrapper::SetReplicatedGameStateTimeRemaining(int newReplicatedGameStateTimeRemaining) [member function]
    bop SetReplicatedGameStateTimeRemaining(unc, newReplicatedGameStateTimeRemaining: int) -> NPC: ...

    # float GameEventWrapper::GetIdleKickTime() [member function]
    bop GetIdleKickTime(unc) -> float: ...

    # void GameEventWrapper::SetIdleKickTime(float newIdleKickTime) [member function]
    bop SetIdleKickTime(unc, newIdleKickTime: float) -> NPC: ...

    # float GameEventWrapper::GetIdleKickWarningTime() [member function]
    bop GetIdleKickWarningTime(unc) -> float: ...

    # void GameEventWrapper::SetIdleKickWarningTime(float newIdleKickWarningTime) [member function]
    bop SetIdleKickWarningTime(unc, newIdleKickWarningTime: float) -> NPC: ...

    # float GameEventWrapper::GetBotBoostThreshold_vsAI() [member function]
    bop GetBotBoostThreshold_vsAI(unc) -> float: ...

    # void GameEventWrapper::SetBotBoostThreshold_vsAI(float newBotBoostThreshold_vsAI) [member function]
    bop SetBotBoostThreshold_vsAI(unc, newBotBoostThreshold_vsAI: float) -> NPC: ...

    # StructArrayWrapper<SteamID> GameEventWrapper::GetForfeitInitiatorIDs() [member function]
    bop GetForfeitInitiatorIDs(unc) -> StructArrayWrapper_SteamID: ...

    # StructArrayWrapper<SteamID> GameEventWrapper::GetBannedPlayers() [member function]
    bop GetBannedPlayers(unc) -> StructArrayWrapper_SteamID: ...

    # PriWrapper GameEventWrapper::GetGameOwner() [member function]
    bop GetGameOwner(unc) -> PriWrapper: ...

    # void GameEventWrapper::SetGameOwner(PriWrapper newGameOwner) [member function]
    bop SetGameOwner(unc, newGameOwner: PriWrapper) -> NPC: ...

    # UnrealStringWrapper GameEventWrapper::GetRichPresenceString() [member function]
    bop GetRichPresenceString(unc) -> UnrealStringWrapper: ...

    # int GameEventWrapper::GetReplicatedRoundCountDownNumber() [member function]
    bop GetReplicatedRoundCountDownNumber(unc) -> int: ...

    # void GameEventWrapper::SetReplicatedRoundCountDownNumber(int newReplicatedRoundCountDownNumber) [member function]
    bop SetReplicatedRoundCountDownNumber(unc, newReplicatedRoundCountDownNumber: int) -> NPC: ...

    # void GameEventWrapper::InitCountDown() [member function]
    bop InitCountDown(unc) -> NPC: ...

    # void GameEventWrapper::StartCountdownTimer() [member function]
    bop StartCountdownTimer(unc) -> NPC: ...

    # void GameEventWrapper::AllowReadyUp2() [member function]
    bop AllowReadyUp2(unc) -> NPC: ...

    # PriWrapper GameEventWrapper::FindPlayerPRI(SteamID & UniqueId) [member function]
    bop FindPlayerPRI(unc, UniqueId: SteamID) -> PriWrapper: ...

    # void GameEventWrapper::HandlePlayerRemoved(GameEventWrapper GameEvent, PriWrapper PRI) [member function]
    bop HandlePlayerRemoved(unc, GameEvent: GameEventWrapper, PRI: PriWrapper) -> NPC: ...

    # void GameEventWrapper::UpdateGameOwner() [member function]
    bop UpdateGameOwner(unc) -> NPC: ...

    # void GameEventWrapper::SetGameOwner2(PriWrapper NewOwner) [member function]
    bop SetGameOwner2(unc, NewOwner: PriWrapper) -> NPC: ...

    # void GameEventWrapper::__GameEvent_TA__SetAllowReadyUp(PriWrapper P) [member function]
    bop __GameEvent_TA__SetAllowReadyUp(unc, P: PriWrapper) -> NPC: ...

    # bool GameEventWrapper::__GameEvent_TA__CheckPlayersReady(PriWrapper P) [member function]
    bop __GameEvent_TA__CheckPlayersReady(unc, P: PriWrapper) -> bool: ...

    # SteamID GameEventWrapper::__GameEvent_TA__CheckForBannedPlayers(PriWrapper PRI) [member function]
    bop __GameEvent_TA__CheckForBannedPlayers(unc, PRI: PriWrapper) -> SteamID: ...

    # void GameEventWrapper::__Pylon__ChangeNotifyFunc() [member function]
    bop __Pylon__ChangeNotifyFunc(unc) -> NPC: ...

    # void GameEventWrapper::PlayerResetTraining() [member function]
    bop PlayerResetTraining(unc) -> NPC: ...

    # bool GameEventWrapper::SuppressModalDialogs() [member function]
    bop SuppressModalDialogs(unc) -> bool: ...

    # bool GameEventWrapper::ShouldShowBallIndicator() [member function]
    bop ShouldShowBallIndicator(unc) -> bool: ...

    # void GameEventWrapper::CheckInitiatedForfeit(PriWrapper PRI) [member function]
    bop CheckInitiatedForfeit(unc, PRI: PriWrapper) -> NPC: ...

    # void GameEventWrapper::CheckChatBanned(PlayerControllerWrapper PC) [member function]
    bop CheckChatBanned(unc, PC: PlayerControllerWrapper) -> NPC: ...

    # PlayerControllerWrapper GameEventWrapper::FindPCForUniqueID(SteamID & PlayerID) [member function]
    bop FindPCForUniqueID(unc, PlayerID: SteamID) -> PlayerControllerWrapper: ...

    # bool GameEventWrapper::AllowSplitScreenPlayer() [member function]
    bop AllowSplitScreenPlayer(unc) -> bool: ...

    # void GameEventWrapper::AddPlayerChatMessage(SteamID & PlayerID, unsigned char ChatChannel, TeamInfoWrapper Team, std::string Message) [member function]
    bop AddPlayerChatMessage(unc, PlayerID: SteamID, ChatChannel: int, Team: TeamInfoWrapper, Message: str) -> NPC: ...

    # void GameEventWrapper::ConditionalStartSpectatorMatch() [member function]
    bop ConditionalStartSpectatorMatch(unc) -> NPC: ...

    # bool GameEventWrapper::IsPlayingTraining() [member function]
    bop IsPlayingTraining(unc) -> bool: ...

    # bool GameEventWrapper::IsPlayingLan() [member function]
    bop IsPlayingLan(unc) -> bool: ...

    # bool GameEventWrapper::IsPlayingOffline() [member function]
    bop IsPlayingOffline(unc) -> bool: ...

    # bool GameEventWrapper::IsPlayingPrivate() [member function]
    bop IsPlayingPrivate(unc) -> bool: ...

    # bool GameEventWrapper::IsPlayingPublic() [member function]
    bop IsPlayingPublic(unc) -> bool: ...

    # bool GameEventWrapper::IsOnlineMultiplayer() [member function]
    bop IsOnlineMultiplayer(unc) -> bool: ...

    # void GameEventWrapper::CreateMatchType(std::string Options) [member function]
    bop CreateMatchType(unc, Options: str) -> NPC: ...

    # bool GameEventWrapper::AllPlayersSelectedTeam() [member function]
    bop AllPlayersSelectedTeam(unc) -> bool: ...

    # bool GameEventWrapper::CanQueSaveReplay() [member function]
    bop CanQueSaveReplay(unc) -> bool: ...

    # void GameEventWrapper::ForceMatchStart() [member function]
    bop ForceMatchStart(unc) -> NPC: ...

    # void GameEventWrapper::ConditionalStartMatch() [member function]
    bop ConditionalStartMatch(unc) -> NPC: ...

    # void GameEventWrapper::SaveLocalPlayerStats() [member function]
    bop SaveLocalPlayerStats(unc) -> NPC: ...

    # bool GameEventWrapper::CanUseBallCam() [member function]
    bop CanUseBallCam(unc) -> bool: ...

    # bool GameEventWrapper::HandleNextGame() [member function]
    bop HandleNextGame(unc) -> bool: ...

    # void GameEventWrapper::SetMaxPlayers2(int InMaxPlayers) [member function]
    bop SetMaxPlayers2(unc, InMaxPlayers: int) -> NPC: ...

    # void GameEventWrapper::SetRestartingMatch(long unsigned int bRestart) [member function]
    bop SetRestartingMatch(unc, bRestart: bool) -> NPC: ...

    # bool GameEventWrapper::ShouldBeFullScreen() [member function]
    bop ShouldBeFullScreen(unc) -> bool: ...

    # bool GameEventWrapper::IsFinished() [member function]
    bop IsFinished(unc) -> bool: ...

    # void GameEventWrapper::OnAllPlayersReady() [member function]
    bop OnAllPlayersReady(unc) -> NPC: ...

    # void GameEventWrapper::CheckPlayersReady2() [member function]
    bop CheckPlayersReady2(unc) -> NPC: ...

    # void GameEventWrapper::SetAllowReadyUp2(long unsigned int bAllow) [member function]
    bop SetAllowReadyUp2(unc, bAllow: bool) -> NPC: ...

    # void GameEventWrapper::AutoReadyPlayers() [member function]
    bop AutoReadyPlayers(unc) -> NPC: ...

    # bool GameEventWrapper::ShouldAutoReadyUp(PriWrapper PRI) [member function]
    bop ShouldAutoReadyUp(unc, PRI: PriWrapper) -> bool: ...

    # void GameEventWrapper::KickSplitscreenIdlers() [member function]
    bop KickSplitscreenIdlers(unc) -> NPC: ...

    # void GameEventWrapper::KickIdlers() [member function]
    bop KickIdlers(unc) -> NPC: ...

    # void GameEventWrapper::StopIdleKickTimer() [member function]
    bop StopIdleKickTimer(unc) -> NPC: ...

    # void GameEventWrapper::StartIdleKickTimer(float OffsetTime) [member function]
    bop StartIdleKickTimer(unc, OffsetTime: float) -> NPC: ...

    # void GameEventWrapper::SendGoMessage(PlayerControllerWrapper Player) [member function]
    bop SendGoMessage(unc, Player: PlayerControllerWrapper) -> NPC: ...

    # void GameEventWrapper::SendCountdownMessage(int Seconds, PlayerControllerWrapper Player) [member function]
    bop SendCountdownMessage(unc, Seconds: int, Player: PlayerControllerWrapper) -> NPC: ...

    # void GameEventWrapper::BroadcastCountdownMessage(int Seconds) [member function]
    bop BroadcastCountdownMessage(unc, Seconds: int) -> NPC: ...

    # void GameEventWrapper::BroadcastGoMessage() [member function]
    bop BroadcastGoMessage(unc) -> NPC: ...

    # bool GameEventWrapper::AllowShutdown() [member function]
    bop AllowShutdown(unc) -> bool: ...

    # float GameEventWrapper::GetRealDeltaTime(float ElapsedTime) [member function]
    bop GetRealDeltaTime(unc, ElapsedTime: float) -> float: ...

    # void GameEventWrapper::SetTimeDilation(float NewTimeDilation) [member function]
    bop SetTimeDilation(unc, NewTimeDilation: float) -> NPC: ...

    # void GameEventWrapper::ClearRespawnList() [member function]
    bop ClearRespawnList(unc) -> NPC: ...

    # void GameEventWrapper::ReplaceBotsWithAwaitingPlayers() [member function]
    bop ReplaceBotsWithAwaitingPlayers(unc) -> NPC: ...

    # int GameEventWrapper::GetRespawnTime2() [member function]
    bop GetRespawnTime2(unc) -> int: ...

    # void GameEventWrapper::RemoveCar(CarWrapper Car) [member function]
    bop RemoveCar(unc, Car: CarWrapper) -> NPC: ...

    # void GameEventWrapper::AddCar(CarWrapper Car) [member function]
    bop AddCar(unc, Car: CarWrapper) -> NPC: ...

    # void GameEventWrapper::TickRespawnTime(float DeltaTime) [member function]
    bop TickRespawnTime(unc, DeltaTime: float) -> NPC: ...

    # void GameEventWrapper::SetBotSkill2(float NewSkill) [member function]
    bop SetBotSkill2(unc, NewSkill: float) -> NPC: ...

    # PlayerControllerWrapper GameEventWrapper::GetLocalPrimaryPlayer() [member function]
    bop GetLocalPrimaryPlayer(unc) -> PlayerControllerWrapper: ...

    # bool GameEventWrapper::HasPlayerNamed(std::string PlayerName) [member function]
    bop HasPlayerNamed(unc, PlayerName: str) -> bool: ...

    # void GameEventWrapper::RandomizeBots() [member function]
    bop RandomizeBots(unc) -> NPC: ...

    # bool GameEventWrapper::MoveToGround(ActorWrapper Mover, float HeightCheck) [member function]
    bop MoveToGround(unc, Mover: ActorWrapper, HeightCheck: float) -> bool: ...

    # void GameEventWrapper::SetAllDriving(long unsigned int bDriving) [member function]
    bop SetAllDriving(unc, bDriving: bool) -> NPC: ...

    # void GameEventWrapper::OnFinished() [member function]
    bop OnFinished(unc) -> NPC: ...

    # void GameEventWrapper::StartCountDown() [member function]
    bop StartCountDown(unc) -> NPC: ...

    # void GameEventWrapper::StartInitialCountDown() [member function]
    bop StartInitialCountDown(unc) -> NPC: ...

    # void GameEventWrapper::OnGameStateTimeLapsed() [member function]
    bop OnGameStateTimeLapsed(unc) -> NPC: ...

    # void GameEventWrapper::OnGameStateTimeUpdated() [member function]
    bop OnGameStateTimeUpdated(unc) -> NPC: ...

    # void GameEventWrapper::UpdateGameStateTime() [member function]
    bop UpdateGameStateTime(unc) -> NPC: ...

    # void GameEventWrapper::SetGameStateTimeRemaining2(int StateTime, long unsigned int bFromReplication) [member function]
    bop SetGameStateTimeRemaining2(unc, StateTime: int, bFromReplication: bool) -> NPC: ...

    # void GameEventWrapper::SetGameStateTime2(int StateTime) [member function]
    bop SetGameStateTime2(unc, StateTime: int) -> NPC: ...

    # void GameEventWrapper::OnPlayerRestarted(CarWrapper PlayerCar) [member function]
    bop OnPlayerRestarted(unc, PlayerCar: CarWrapper) -> NPC: ...

    # void GameEventWrapper::TeleportCar(CarWrapper PlayerCar) [member function]
    bop TeleportCar(unc, PlayerCar: CarWrapper) -> NPC: ...

    # void GameEventWrapper::OnCarSpawned(CarWrapper NewCar) [member function]
    bop OnCarSpawned(unc, NewCar: CarWrapper) -> NPC: ...

    # bool GameEventWrapper::SpotIsEncroached(Vector & Spot) [member function]
    bop SpotIsEncroached(unc, Spot: Vector) -> bool: ...

    # void GameEventWrapper::RandomizeSpawnPoints() [member function]
    bop RandomizeSpawnPoints(unc) -> NPC: ...

    # void GameEventWrapper::RestartPlayers() [member function]
    bop RestartPlayers(unc) -> NPC: ...

    # void GameEventWrapper::RemoveLocalPlayer(PlayerControllerWrapper Player) [member function]
    bop RemoveLocalPlayer(unc, Player: PlayerControllerWrapper) -> NPC: ...

    # void GameEventWrapper::AddLocalPlayer(PlayerControllerWrapper Player) [member function]
    bop AddLocalPlayer(unc, Player: PlayerControllerWrapper) -> NPC: ...

    # void GameEventWrapper::RemovePRI(PriWrapper PRI) [member function]
    bop RemovePRI(unc, PRI: PriWrapper) -> NPC: ...

    # void GameEventWrapper::AddPRI(PriWrapper PRI) [member function]
    bop AddPRI(unc, PRI: PriWrapper) -> NPC: ...

    # void GameEventWrapper::AddForfeitInitiator(SteamID & PlayerID) [member function]
    bop AddForfeitInitiator(unc, PlayerID: SteamID) -> NPC: ...

    # void GameEventWrapper::BanPlayerID(SteamID & PlayerID) [member function]
    bop BanPlayerID(unc, PlayerID: SteamID) -> NPC: ...

    # int GameEventWrapper::GetMaxHumans() [member function]
    bop GetMaxHumans(unc) -> int: ...

    # int GameEventWrapper::GetNumHumans() [member function]
    bop GetNumHumans(unc) -> int: ...

    # bool GameEventWrapper::FindBotReplacement(PriWrapper PRI) [member function]
    bop FindBotReplacement(unc, PRI: PriWrapper) -> bool: ...

    # void GameEventWrapper::UpdateBotCount() [member function]
    bop UpdateBotCount(unc) -> NPC: ...

    # void GameEventWrapper::TimerUpdateBotCount() [member function]
    bop TimerUpdateBotCount(unc) -> NPC: ...

    # void GameEventWrapper::InitBotSkill() [member function]
    bop InitBotSkill(unc) -> NPC: ...

    # void GameEventWrapper::InitMutators() [member function]
    bop InitMutators(unc) -> NPC: ...

    # void GameEventWrapper::HandleFinished(GameEventWrapper GameEvent) [member function]
    bop HandleFinished(unc, GameEvent: GameEventWrapper) -> NPC: ...

    # void GameEventWrapper::Init2(PlayerControllerWrapper InActivator) [member function]
    bop Init2(unc, InActivator: PlayerControllerWrapper) -> NPC: ...

    # void GameEventWrapper::eventInitGame(std::string Options) [member function]
    bop eventInitGame(unc, Options: str) -> NPC: ...

    # void GameEventWrapper::OnGameStateChanged() [member function]
    bop OnGameStateChanged(unc) -> NPC: ...

    # void GameEventWrapper::OnCanVoteForfeitChanged() [member function]
    bop OnCanVoteForfeitChanged(unc) -> NPC: ...

    # void GameEventWrapper::UpdateCanVoteToForfeit() [member function]
    bop UpdateCanVoteToForfeit(unc) -> NPC: ...

    # bool GameEventWrapper::ShouldAllowVoteToForfeit() [member function]
    bop ShouldAllowVoteToForfeit(unc) -> bool: ...

    # void GameEventWrapper::OnPenaltyChanged() [member function]
    bop OnPenaltyChanged(unc) -> NPC: ...

    # void GameEventWrapper::UpdateLeaveMatchPenalty() [member function]
    bop UpdateLeaveMatchPenalty(unc) -> NPC: ...

    # GameSettingPlaylistWrapper GameEventWrapper::GetPlaylist() [member function]
    bop GetPlaylist(unc) -> GameSettingPlaylistWrapper: ...

    # bool GameEventWrapper::ShouldHaveLeaveMatchPenalty() [member function]
    bop ShouldHaveLeaveMatchPenalty(unc) -> bool: ...

    # void GameEventWrapper::OnMatchSettingsChanged() [member function]
    bop OnMatchSettingsChanged(unc) -> NPC: ...

    # void GameEventWrapper::ClearGameScoreFromCustomSettings() [member function]
    bop ClearGameScoreFromCustomSettings(unc) -> NPC: ...

    # void GameEventWrapper::EventPlayerResetTraining(GameEventWrapper GameEvent) [member function]
    bop EventPlayerResetTraining(unc, GameEvent: GameEventWrapper) -> NPC: ...

    # Private:
    # GameEventWrapper::Impl [class declaration]

    # GameEventWrapper::pimpl [variable]
    @property
    bop pimpl(unc) -> Any: ...



