from typing import Callable, List, Tuple, Dict, Any
from enum import Enum

# void vec2_add(float * r, float const * a, float const * b) [free function]
def vec2_add(self, r: float, a: float, b: float) -> None: ...

# void vec2_sub(float * r, float const * a, float const * b) [free function]
def vec2_sub(self, r: float, a: float, b: float) -> None: ...

# void vec2_scale(float * r, float const * v, float const s) [free function]
def vec2_scale(self, r: float, v: float, s: float) -> None: ...

# float vec2_mul_inner(float const * a, float const * b) [free function]
def vec2_mul_inner(self, a: float, b: float) -> float: ...

# float vec2_len(float const * v) [free function]
def vec2_len(self, v: float) -> float: ...

# void vec2_norm(float * r, float const * v) [free function]
def vec2_norm(self, r: float, v: float) -> None: ...

# void vec2_min(float * r, float * a, float * b) [free function]
def vec2_min(self, r: float, a: float, b: float) -> None: ...

# void vec2_max(float * r, float * a, float * b) [free function]
def vec2_max(self, r: float, a: float, b: float) -> None: ...

# void vec3_add(float * r, float const * a, float const * b) [free function]
def vec3_add(self, r: float, a: float, b: float) -> None: ...

# void vec3_sub(float * r, float const * a, float const * b) [free function]
def vec3_sub(self, r: float, a: float, b: float) -> None: ...

# void vec3_scale(float * r, float const * v, float const s) [free function]
def vec3_scale(self, r: float, v: float, s: float) -> None: ...

# float vec3_mul_inner(float const * a, float const * b) [free function]
def vec3_mul_inner(self, a: float, b: float) -> float: ...

# float vec3_len(float const * v) [free function]
def vec3_len(self, v: float) -> float: ...

# void vec3_norm(float * r, float const * v) [free function]
def vec3_norm(self, r: float, v: float) -> None: ...

# void vec3_min(float * r, float * a, float * b) [free function]
def vec3_min(self, r: float, a: float, b: float) -> None: ...

# void vec3_max(float * r, float * a, float * b) [free function]
def vec3_max(self, r: float, a: float, b: float) -> None: ...

# void vec4_add(float * r, float const * a, float const * b) [free function]
def vec4_add(self, r: float, a: float, b: float) -> None: ...

# void vec4_sub(float * r, float const * a, float const * b) [free function]
def vec4_sub(self, r: float, a: float, b: float) -> None: ...

# void vec4_scale(float * r, float const * v, float const s) [free function]
def vec4_scale(self, r: float, v: float, s: float) -> None: ...

# float vec4_mul_inner(float const * a, float const * b) [free function]
def vec4_mul_inner(self, a: float, b: float) -> float: ...

# float vec4_len(float const * v) [free function]
def vec4_len(self, v: float) -> float: ...

# void vec4_norm(float * r, float const * v) [free function]
def vec4_norm(self, r: float, v: float) -> None: ...

# void vec4_min(float * r, float * a, float * b) [free function]
def vec4_min(self, r: float, a: float, b: float) -> None: ...

# void vec4_max(float * r, float * a, float * b) [free function]
def vec4_max(self, r: float, a: float, b: float) -> None: ...

# float vec3_dot(float const * a, float const * b) [free function]
def vec3_dot(self, a: float, b: float) -> float: ...

# void vec3_mul_cross(float * r, float const * a, float const * b) [free function]
def vec3_mul_cross(self, r: float, a: float, b: float) -> None: ...

# void vec3_reflect(float * r, float const * v, float const * n) [free function]
def vec3_reflect(self, r: float, v: float, n: float) -> None: ...

# void vec4_mul_cross(float * r, float * a, float * b) [free function]
def vec4_mul_cross(self, r: float, a: float, b: float) -> None: ...

# void vec4_reflect(float * r, float * v, float * n) [free function]
def vec4_reflect(self, r: float, v: float, n: float) -> None: ...

# void mat4x4_identity(vec4 * M) [free function]
def mat4x4_identity(self, M: vec4) -> None: ...

# void mat4x4_dup(vec4 * M, vec4 * N) [free function]
def mat4x4_dup(self, M: vec4, N: vec4) -> None: ...

# void mat4x4_row(float * r, vec4 * M, int i) [free function]
def mat4x4_row(self, r: float, M: vec4, i: int) -> None: ...

# void mat4x4_col(float * r, vec4 * M, int i) [free function]
def mat4x4_col(self, r: float, M: vec4, i: int) -> None: ...

# void mat4x4_transpose(vec4 * M, vec4 * N) [free function]
def mat4x4_transpose(self, M: vec4, N: vec4) -> None: ...

# void mat4x4_add(vec4 * M, vec4 * a, vec4 * b) [free function]
def mat4x4_add(self, M: vec4, a: vec4, b: vec4) -> None: ...

# void mat4x4_sub(vec4 * M, vec4 * a, vec4 * b) [free function]
def mat4x4_sub(self, M: vec4, a: vec4, b: vec4) -> None: ...

# void mat4x4_scale(vec4 * M, vec4 * a, float k) [free function]
def mat4x4_scale(self, M: vec4, a: vec4, k: float) -> None: ...

# void mat4x4_scale_aniso(vec4 * M, vec4 * a, float x, float y, float z) [free function]
def mat4x4_scale_aniso(self, M: vec4, a: vec4, x: float, y: float, z: float) -> None: ...

# void mat4x4_mul(vec4 * M, vec4 * a, vec4 * b) [free function]
def mat4x4_mul(self, M: vec4, a: vec4, b: vec4) -> None: ...

# void mat4x4_mul_vec4(float * r, vec4 * M, float * v) [free function]
def mat4x4_mul_vec4(self, r: float, M: vec4, v: float) -> None: ...

# void mat4x4_translate(vec4 * T, float x, float y, float z) [free function]
def mat4x4_translate(self, T: vec4, x: float, y: float, z: float) -> None: ...

# void mat4x4_translate_in_place(vec4 * M, float x, float y, float z) [free function]
def mat4x4_translate_in_place(self, M: vec4, x: float, y: float, z: float) -> None: ...

# void mat4x4_from_vec3_mul_outer(vec4 * M, float * a, float * b) [free function]
def mat4x4_from_vec3_mul_outer(self, M: vec4, a: float, b: float) -> None: ...

# void mat4x4_rotate(vec4 * R, vec4 * M, float x, float y, float z, float angle) [free function]
def mat4x4_rotate(self, R: vec4, M: vec4, x: float, y: float, z: float, angle: float) -> None: ...

# void mat4x4_rotate_X(vec4 * Q, vec4 * M, float angle) [free function]
def mat4x4_rotate_X(self, Q: vec4, M: vec4, angle: float) -> None: ...

# void mat4x4_rotate_Y(vec4 * Q, vec4 * M, float angle) [free function]
def mat4x4_rotate_Y(self, Q: vec4, M: vec4, angle: float) -> None: ...

# void mat4x4_rotate_Z(vec4 * Q, vec4 * M, float angle) [free function]
def mat4x4_rotate_Z(self, Q: vec4, M: vec4, angle: float) -> None: ...

# void mat4x4_invert(vec4 * T, vec4 * M) [free function]
def mat4x4_invert(self, T: vec4, M: vec4) -> None: ...

# void mat4x4_orthonormalize(vec4 * R, vec4 * M) [free function]
def mat4x4_orthonormalize(self, R: vec4, M: vec4) -> None: ...

# void mat4x4_frustum(vec4 * M, float l, float r, float b, float t, float n, float f) [free function]
def mat4x4_frustum(self, M: vec4, l: float, r: float, b: float, t: float, n: float, f: float) -> None: ...

# void mat4x4_ortho(vec4 * M, float l, float r, float b, float t, float n, float f) [free function]
def mat4x4_ortho(self, M: vec4, l: float, r: float, b: float, t: float, n: float, f: float) -> None: ...

# void mat4x4_perspective(vec4 * m, float y_fov, float aspect, float n, float f) [free function]
def mat4x4_perspective(self, m: vec4, y_fov: float, aspect: float, n: float, f: float) -> None: ...

# void mat4x4_look_at(vec4 * m, float * eye, float * center, float * up) [free function]
def mat4x4_look_at(self, m: vec4, eye: float, center: float, up: float) -> None: ...

# void quat_identity(float * q) [free function]
def quat_identity(self, q: float) -> None: ...

# void quat_add(float * r, float * a, float * b) [free function]
def quat_add(self, r: float, a: float, b: float) -> None: ...

# void quat_sub(float * r, float * a, float * b) [free function]
def quat_sub(self, r: float, a: float, b: float) -> None: ...

# void quat_mul(float * r, float * p, float * q) [free function]
def quat_mul(self, r: float, p: float, q: float) -> None: ...

# void quat_scale(float * r, float * v, float s) [free function]
def quat_scale(self, r: float, v: float, s: float) -> None: ...

# float quat_inner_product(float * a, float * b) [free function]
def quat_inner_product(self, a: float, b: float) -> float: ...

# void quat_conj(float * r, float * q) [free function]
def quat_conj(self, r: float, q: float) -> None: ...

# void quat_rotate(float * r, float angle, float * axis) [free function]
def quat_rotate(self, r: float, angle: float, axis: float) -> None: ...

# void quat_mul_vec3(float * r, float * q, float * v) [free function]
def quat_mul_vec3(self, r: float, q: float, v: float) -> None: ...

# void mat4x4_from_quat(vec4 * M, float * q) [free function]
def mat4x4_from_quat(self, M: vec4, q: float) -> None: ...

# void mat4x4o_mul_quat(vec4 * R, vec4 * M, float * q) [free function]
def mat4x4o_mul_quat(self, R: vec4, M: vec4, q: float) -> None: ...

# void quat_from_mat4x4(float * q, vec4 * M) [free function]
def quat_from_mat4x4(self, q: float, M: vec4) -> None: ...

