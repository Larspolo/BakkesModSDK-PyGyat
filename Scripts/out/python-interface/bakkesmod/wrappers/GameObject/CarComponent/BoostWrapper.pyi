from typing import Callable, List, Tuple, Dict, Any
from enum import Enum

class BoostWrapper():
    # Public:
    # BoostWrapper::BoostWrapper(uintptr_t mem) [constructor]
    def __init__(self, mem: int) -> None: ...

    # BoostWrapper::BoostWrapper(BoostWrapper const & other) [constructor]

    # BoostWrapper & BoostWrapper::operator=(BoostWrapper rhs) [member operator]

    # BoostWrapper::~BoostWrapper() [destructor]
    def __del__(self) -> None: ...

    # float BoostWrapper::GetBoostConsumptionRate() [member function]
    def GetBoostConsumptionRate(self) -> float: ...

    # void BoostWrapper::SetBoostConsumptionRate(float newBoostConsumptionRate) [member function]
    def SetBoostConsumptionRate(self, newBoostConsumptionRate: float) -> None: ...

    # float BoostWrapper::GetMaxBoostAmount() [member function]
    def GetMaxBoostAmount(self) -> float: ...

    # void BoostWrapper::SetMaxBoostAmount(float newMaxBoostAmount) [member function]
    def SetMaxBoostAmount(self, newMaxBoostAmount: float) -> None: ...

    # float BoostWrapper::GetStartBoostAmount() [member function]
    def GetStartBoostAmount(self) -> float: ...

    # void BoostWrapper::SetStartBoostAmount(float newStartBoostAmount) [member function]
    def SetStartBoostAmount(self, newStartBoostAmount: float) -> None: ...

    # float BoostWrapper::GetCurrentBoostAmount() [member function]
    def GetCurrentBoostAmount(self) -> float: ...

    # void BoostWrapper::SetCurrentBoostAmount(float newCurrentBoostAmount) [member function]
    def SetCurrentBoostAmount(self, newCurrentBoostAmount: float) -> None: ...

    # float BoostWrapper::GetBoostModifier() [member function]
    def GetBoostModifier(self) -> float: ...

    # void BoostWrapper::SetBoostModifier(float newBoostModifier) [member function]
    def SetBoostModifier(self, newBoostModifier: float) -> None: ...

    # float BoostWrapper::GetLastBoostAmountRequestTime() [member function]
    def GetLastBoostAmountRequestTime(self) -> float: ...

    # void BoostWrapper::SetLastBoostAmountRequestTime(float newLastBoostAmountRequestTime) [member function]
    def SetLastBoostAmountRequestTime(self, newLastBoostAmountRequestTime: float) -> None: ...

    # float BoostWrapper::GetLastBoostAmount() [member function]
    def GetLastBoostAmount(self) -> float: ...

    # void BoostWrapper::SetLastBoostAmount(float newLastBoostAmount) [member function]
    def SetLastBoostAmount(self, newLastBoostAmount: float) -> None: ...

    # long unsigned int BoostWrapper::GetbPendingConfirmBoostAmount() [member function]
    def GetbPendingConfirmBoostAmount(self) -> bool: ...

    # void BoostWrapper::SetbPendingConfirmBoostAmount(long unsigned int newbPendingConfirmBoostAmount) [member function]
    def SetbPendingConfirmBoostAmount(self, newbPendingConfirmBoostAmount: bool) -> None: ...

    # long unsigned int BoostWrapper::GetbUnlimitedBoost() [member function]
    def GetbUnlimitedBoost(self) -> bool: ...

    # void BoostWrapper::SetbUnlimitedBoost(long unsigned int newbUnlimitedBoost) [member function]
    def SetbUnlimitedBoost(self, newbUnlimitedBoost: bool) -> None: ...

    # long unsigned int BoostWrapper::GetbNoBoost() [member function]
    def GetbNoBoost(self) -> bool: ...

    # void BoostWrapper::SetbNoBoost(long unsigned int newbNoBoost) [member function]
    def SetbNoBoost(self, newbNoBoost: bool) -> None: ...

    # float BoostWrapper::GetBoostForce() [member function]
    def GetBoostForce(self) -> float: ...

    # void BoostWrapper::SetBoostForce(float newBoostForce) [member function]
    def SetBoostForce(self, newBoostForce: float) -> None: ...

    # float BoostWrapper::GetMinBoostTime() [member function]
    def GetMinBoostTime(self) -> float: ...

    # void BoostWrapper::SetMinBoostTime(float newMinBoostTime) [member function]
    def SetMinBoostTime(self, newMinBoostTime: float) -> None: ...

    # float BoostWrapper::GetRechargeRate() [member function]
    def GetRechargeRate(self) -> float: ...

    # void BoostWrapper::SetRechargeRate(float newRechargeRate) [member function]
    def SetRechargeRate(self, newRechargeRate: float) -> None: ...

    # float BoostWrapper::GetRechargeDelay() [member function]
    def GetRechargeDelay(self) -> float: ...

    # void BoostWrapper::SetRechargeDelay(float newRechargeDelay) [member function]
    def SetRechargeDelay(self, newRechargeDelay: float) -> None: ...

    # int BoostWrapper::GetUnlimitedBoostRefCount() [member function]
    def GetUnlimitedBoostRefCount(self) -> int: ...

    # void BoostWrapper::SetUnlimitedBoostRefCount(int newUnlimitedBoostRefCount) [member function]
    def SetUnlimitedBoostRefCount(self, newUnlimitedBoostRefCount: int) -> None: ...

    # unsigned char BoostWrapper::GetReplicatedBoostAmount() [member function]
    def GetReplicatedBoostAmount(self) -> int: ...

    # void BoostWrapper::SetReplicatedBoostAmount(unsigned char newReplicatedBoostAmount) [member function]
    def SetReplicatedBoostAmount(self, newReplicatedBoostAmount: int) -> None: ...

    # bool BoostWrapper::ShouldPredictBoostConsumption() [member function]
    def ShouldPredictBoostConsumption(self) -> bool: ...

    # void BoostWrapper::ReadReplicatedBoostAmount() [member function]
    def ReadReplicatedBoostAmount(self) -> None: ...

    # void BoostWrapper::eventSetReplicatedBoostAmount() [member function]
    def eventSetReplicatedBoostAmount(self) -> None: ...

    # void BoostWrapper::ApplyForces(float ActiveTime) [member function]
    def ApplyForces(self, ActiveTime: float) -> None: ...

    # void BoostWrapper::ClientGiveBoost(float Amount) [member function]
    def ClientGiveBoost(self, Amount: float) -> None: ...

    # void BoostWrapper::ConfirmBoostAmount2() [member function]
    def ConfirmBoostAmount2(self) -> None: ...

    # void BoostWrapper::SendConfirmBoostAmount() [member function]
    def SendConfirmBoostAmount(self) -> None: ...

    # void BoostWrapper::ClientFixBoostAmount(float TimeStamp, float Amount) [member function]
    def ClientFixBoostAmount(self, TimeStamp: float, Amount: float) -> None: ...

    # void BoostWrapper::ServerConfirmBoostAmount(float TimeStamp, float Amount) [member function]
    def ServerConfirmBoostAmount(self, TimeStamp: float, Amount: float) -> None: ...

    # void BoostWrapper::SetRechargeDelay2(float InRechargeDelay) [member function]
    def SetRechargeDelay2(self, InRechargeDelay: float) -> None: ...

    # void BoostWrapper::SetRechargeRate2(float InRechargeRate) [member function]
    def SetRechargeRate2(self, InRechargeRate: float) -> None: ...

    # void BoostWrapper::SetNoBoost(long unsigned int Enabled) [member function]
    def SetNoBoost(self, Enabled: bool) -> None: ...

    # void BoostWrapper::SetUnlimitedBoost2(long unsigned int Enabled) [member function]
    def SetUnlimitedBoost2(self, Enabled: bool) -> None: ...

    # void BoostWrapper::SetUnlimitedBoostDelayed(long unsigned int Enabled) [member function]
    def SetUnlimitedBoostDelayed(self, Enabled: bool) -> None: ...

    # void BoostWrapper::SetBoostModifier2(float Modifier) [member function]
    def SetBoostModifier2(self, Modifier: float) -> None: ...

    # void BoostWrapper::SetBoostAmount(float Amount) [member function]
    def SetBoostAmount(self, Amount: float) -> None: ...

    # void BoostWrapper::GiveBoost2(float Amount) [member function]
    def GiveBoost2(self, Amount: float) -> None: ...

    # void BoostWrapper::GiveStartingBoost() [member function]
    def GiveStartingBoost(self) -> None: ...

    # void BoostWrapper::GiveFullBoost() [member function]
    def GiveFullBoost(self) -> None: ...

    # float BoostWrapper::GetPercentBoostFull() [member function]
    def GetPercentBoostFull(self) -> float: ...

    # bool BoostWrapper::IsFull() [member function]
    def IsFull(self) -> bool: ...

    # void BoostWrapper::RemoveFromCar() [member function]
    def RemoveFromCar(self) -> None: ...

    # bool BoostWrapper::CanDeactivate() [member function]
    def CanDeactivate(self) -> bool: ...

    # bool BoostWrapper::CanActivate() [member function]
    def CanActivate(self) -> bool: ...

    # Private:
    # BoostWrapper::Impl [class declaration]

    # BoostWrapper::pimpl [variable]
    @property
    def pimpl(self) -> Any: ...


