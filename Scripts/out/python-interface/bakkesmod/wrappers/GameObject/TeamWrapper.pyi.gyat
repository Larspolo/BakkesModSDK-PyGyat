lock in typing glaze Callable, List, Tuple, Dict, Any
lock in enum glaze Enum

# WrapperStructs [class declaration]

skibidi TeamWrapper():
    # Public:
    # TeamWrapper::TeamWrapper(uintptr_t mem) [constructor]
    bop __init__(unc, mem: int) -> NPC: ...

    # TeamWrapper::TeamWrapper(TeamWrapper const & other) [constructor]

    # TeamWrapper & TeamWrapper::operator=(TeamWrapper rhs) [member operator]

    # TeamWrapper::~TeamWrapper() [destructor]
    bop __del__(unc) -> NPC: ...

    # LinearColor TeamWrapper::GetPrimaryColor() [member function]
    bop GetPrimaryColor(unc) -> LinearColor: ...

    # LinearColor TeamWrapper::GetSecondaryColor() [member function]
    bop GetSecondaryColor(unc) -> LinearColor: ...

    # LinearColor TeamWrapper::GetFontColor() [member function]
    bop GetFontColor(unc) -> LinearColor: ...

    # void TeamWrapper::SetFontColor(LinearColor newFontColor) [member function]
    bop SetFontColor(unc, newFontColor: LinearColor) -> NPC: ...

    # LinearColor TeamWrapper::GetColorBlindFontColor() [member function]
    bop GetColorBlindFontColor(unc) -> LinearColor: ...

    # void TeamWrapper::SetColorBlindFontColor(LinearColor newColorBlindFontColor) [member function]
    bop SetColorBlindFontColor(unc, newColorBlindFontColor: LinearColor) -> NPC: ...

    # UnrealColor TeamWrapper::GetTeamControllerColor() [member function]
    bop GetTeamControllerColor(unc) -> UnrealColor: ...

    # void TeamWrapper::SetTeamControllerColor(UnrealColor newTeamControllerColor) [member function]
    bop SetTeamControllerColor(unc, newTeamControllerColor: UnrealColor) -> NPC: ...

    # UnrealColor TeamWrapper::GetTeamScoreStrobeColor() [member function]
    bop GetTeamScoreStrobeColor(unc) -> UnrealColor: ...

    # void TeamWrapper::SetTeamScoreStrobeColor(UnrealColor newTeamScoreStrobeColor) [member function]
    bop SetTeamScoreStrobeColor(unc, newTeamScoreStrobeColor: UnrealColor) -> NPC: ...

    # StructArrayWrapper<LinearColor> TeamWrapper::GetDefaultColorList() [member function]
    bop GetDefaultColorList(unc) -> StructArrayWrapper_LinearColor: ...

    # StructArrayWrapper<LinearColor> TeamWrapper::GetColorBlindColorList() [member function]
    bop GetColorBlindColorList(unc) -> StructArrayWrapper_LinearColor: ...

    # StructArrayWrapper<LinearColor> TeamWrapper::GetCurrentColorList() [member function]
    bop GetCurrentColorList(unc) -> StructArrayWrapper_LinearColor: ...

    # TeamGameEventWrapper TeamWrapper::GetGameEvent() [member function]
    bop GetGameEvent(unc) -> TeamGameEventWrapper: ...

    # void TeamWrapper::SetGameEvent(TeamGameEventWrapper newGameEvent) [member function]
    bop SetGameEvent(unc, newGameEvent: TeamGameEventWrapper) -> NPC: ...

    # ArrayWrapper<PriWrapper> TeamWrapper::GetMembers() [member function]
    bop GetMembers(unc) -> ArrayWrapper_PriWrapper: ...

    # UnrealStringWrapper TeamWrapper::GetCustomTeamName() [member function]
    bop GetCustomTeamName(unc) -> UnrealStringWrapper: ...

    # UnrealStringWrapper TeamWrapper::GetSanitizedTeamName() [member function]
    bop GetSanitizedTeamName(unc) -> UnrealStringWrapper: ...

    # long long unsigned int TeamWrapper::GetClubID() [member function]
    bop GetClubID(unc) -> int: ...

    # void TeamWrapper::SetClubID(long long unsigned int newClubID) [member function]
    bop SetClubID(unc, newClubID: int) -> NPC: ...

    # long unsigned int TeamWrapper::GetbForfeit() [member function]
    bop GetbForfeit(unc) -> bool: ...

    # void TeamWrapper::SetbForfeit(long unsigned int newbForfeit) [member function]
    bop SetbForfeit(unc, newbForfeit: bool) -> NPC: ...

    # bool TeamWrapper::__Team_TA__GetHumanPlayers(PriWrapper PRI) [member function]
    bop __Team_TA__GetHumanPlayers(unc, PRI: PriWrapper) -> bool: ...

    # bool TeamWrapper::__Team_TA__GetHumanPrimaryPlayers(PriWrapper PRI) [member function]
    bop __Team_TA__GetHumanPrimaryPlayers(unc, PRI: PriWrapper) -> bool: ...

    # bool TeamWrapper::__Team_TA__GetNumOfMembersThatCanStartForfeit(PriWrapper P) [member function]
    bop __Team_TA__GetNumOfMembersThatCanStartForfeit(unc, P: PriWrapper) -> bool: ...

    # void TeamWrapper::__Team_TA__EnableAllMembersStartVoteToForfeit(PriWrapper Member) [member function]
    bop __Team_TA__EnableAllMembersStartVoteToForfeit(unc, Member: PriWrapper) -> NPC: ...

    # void TeamWrapper::OnClubColorsChanged() [member function]
    bop OnClubColorsChanged(unc) -> NPC: ...

    # void TeamWrapper::Forfeit2() [member function]
    bop Forfeit2(unc) -> NPC: ...

    # void TeamWrapper::EnableAllMembersStartVoteToForfeit2() [member function]
    bop EnableAllMembersStartVoteToForfeit2(unc) -> NPC: ...

    # void TeamWrapper::EnableAllMembersStartVoteToForfeitIfNecessary() [member function]
    bop EnableAllMembersStartVoteToForfeitIfNecessary(unc) -> NPC: ...

    # void TeamWrapper::VoteToForfeit22(PriWrapper PRI) [member function]
    bop VoteToForfeit22(unc, PRI: PriWrapper) -> NPC: ...

    # void TeamWrapper::NotifyKismetTeamColorChanged() [member function]
    bop NotifyKismetTeamColorChanged(unc) -> NPC: ...

    # void TeamWrapper::UpdateColors() [member function]
    bop UpdateColors(unc) -> NPC: ...

    # void TeamWrapper::SetLogo(int LogoID, long unsigned int bSwapColors) [member function]
    bop SetLogo(unc, LogoID: int, bSwapColors: bool) -> NPC: ...

    # void TeamWrapper::HandleTeamNameSanitized(std::string Original, std::string Sanitized) [member function]
    bop HandleTeamNameSanitized(unc, Original: str, Sanitized: str) -> NPC: ...

    # void TeamWrapper::SetClubID2(long long unsigned int InClubID) [member function]
    bop SetClubID2(unc, InClubID: int) -> NPC: ...

    # void TeamWrapper::SetCustomTeamName(std::string NewName) [member function]
    bop SetCustomTeamName(unc, NewName: str) -> NPC: ...

    # void TeamWrapper::SetDefaultColors() [member function]
    bop SetDefaultColors(unc) -> NPC: ...

    # bool TeamWrapper::IsSingleParty() [member function]
    bop IsSingleParty(unc) -> bool: ...

    # PriWrapper TeamWrapper::GetTeamMemberNamed(std::string PlayerName) [member function]
    bop GetTeamMemberNamed(unc, PlayerName: str) -> PriWrapper: ...

    # int TeamWrapper::GetNumBots() [member function]
    bop GetNumBots(unc) -> int: ...

    # int TeamWrapper::GetNumHumans() [member function]
    bop GetNumHumans(unc) -> int: ...

    # void TeamWrapper::OnScoreUpdated() [member function]
    bop OnScoreUpdated(unc) -> NPC: ...

    # void TeamWrapper::ResetScore() [member function]
    bop ResetScore(unc) -> NPC: ...

    # void TeamWrapper::RemovePoints(int Points) [member function]
    bop RemovePoints(unc, Points: int) -> NPC: ...

    # void TeamWrapper::SetScore(int Points) [member function]
    bop SetScore(unc, Points: int) -> NPC: ...

    # void TeamWrapper::ScorePoint(int AdditionalScore) [member function]
    bop ScorePoint(unc, AdditionalScore: int) -> NPC: ...

    # void TeamWrapper::MuteOtherTeam(TeamWrapper OtherTeam, long unsigned int bMute) [member function]
    bop MuteOtherTeam(unc, OtherTeam: TeamWrapper, bMute: bool) -> NPC: ...

    # void TeamWrapper::ClearTemporarySpawnSpots() [member function]
    bop ClearTemporarySpawnSpots(unc) -> NPC: ...

    # void TeamWrapper::ExpireTemporarySpawnSpots() [member function]
    bop ExpireTemporarySpawnSpots(unc) -> NPC: ...

    # void TeamWrapper::AddTemporarySpawnSpot(ActorWrapper AtActor) [member function]
    bop AddTemporarySpawnSpot(unc, AtActor: ActorWrapper) -> NPC: ...

    # void TeamWrapper::OnGameEventSet() [member function]
    bop OnGameEventSet(unc) -> NPC: ...

    # void TeamWrapper::SetGameEvent2(TeamGameEventWrapper InGameEvent) [member function]
    bop SetGameEvent2(unc, InGameEvent: TeamGameEventWrapper) -> NPC: ...

    # Private:
    # TeamWrapper::Impl [class declaration]

    # TeamWrapper::pimpl [variable]
    @property
    bop pimpl(unc) -> Any: ...



