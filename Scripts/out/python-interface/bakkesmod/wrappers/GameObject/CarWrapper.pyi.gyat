lock in typing glaze Callable, List, Tuple, Dict, Any
lock in enum glaze Enum

skibidi CarWrapper():
    # Public:
    # CarWrapper::CarWrapper(uintptr_t mem) [constructor]
    bop __init__(unc, mem: int) -> NPC: ...

    # CarWrapper::CarWrapper(CarWrapper const & other) [constructor]

    # CarWrapper & CarWrapper::operator=(CarWrapper rhs) [member operator]

    # CarWrapper::~CarWrapper() [destructor]
    bop __del__(unc) -> NPC: ...

    # bool CarWrapper::IsBoostCheap() [member function]
    bop IsBoostCheap(unc) -> bool: ...

    # void CarWrapper::SetBoostCheap(bool b) [member function]
    bop SetBoostCheap(unc, b: bool) -> NPC: ...

    # void CarWrapper::SetCarRotation(Rotator rotation) [member function]
    bop SetCarRotation(unc, rotation: Rotator) -> NPC: ...

    # void CarWrapper::ForceBoost(bool force) [member function]
    bop ForceBoost(unc, force: bool) -> NPC: ...

    # std::string CarWrapper::GetOwnerName() [member function]
    bop GetOwnerName(unc) -> str: ...

    # void CarWrapper::Unfreeze() [member function]
    bop Unfreeze(unc) -> NPC: ...

    # ControllerInput CarWrapper::GetInput() [member function]
    bop GetInput(unc) -> ControllerInput: ...

    # void CarWrapper::SetInput(ControllerInput input) [member function]
    bop SetInput(unc, input: ControllerInput) -> NPC: ...

    # void CarWrapper::Destroy() [member function]
    bop Destroy(unc) -> NPC: ...

    # void CarWrapper::Demolish() [member function]
    bop Demolish(unc) -> NPC: ...

    # long unsigned int CarWrapper::HasFlip() [member function]
    bop HasFlip(unc) -> bool: ...

    # int CarWrapper::GetLoadoutBody() [member function]
    bop GetLoadoutBody(unc) -> int: ...

    # ArrayWrapper<CarComponentWrapper> CarWrapper::GetDefaultCarComponents() [member function]
    bop GetDefaultCarComponents(unc) -> ArrayWrapper_CarComponentWrapper: ...

    # FlipCarComponentWrapper CarWrapper::GetFlipComponent() [member function]
    bop GetFlipComponent(unc) -> FlipCarComponentWrapper: ...

    # unsigned char CarWrapper::GetDemolishTarget() [member function]
    bop GetDemolishTarget(unc) -> int: ...

    # void CarWrapper::SetDemolishTarget(unsigned char newDemolishTarget) [member function]
    bop SetDemolishTarget(unc, newDemolishTarget: int) -> NPC: ...

    # unsigned char CarWrapper::GetDemolishSpeed() [member function]
    bop GetDemolishSpeed(unc) -> int: ...

    # void CarWrapper::SetDemolishSpeed(unsigned char newDemolishSpeed) [member function]
    bop SetDemolishSpeed(unc, newDemolishSpeed: int) -> NPC: ...

    # long unsigned int CarWrapper::GetbLoadoutSet() [member function]
    bop GetbLoadoutSet(unc) -> bool: ...

    # void CarWrapper::SetbLoadoutSet(long unsigned int newbLoadoutSet) [member function]
    bop SetbLoadoutSet(unc, newbLoadoutSet: bool) -> NPC: ...

    # long unsigned int CarWrapper::GetbDemolishOnOpposingGround() [member function]
    bop GetbDemolishOnOpposingGround(unc) -> bool: ...

    # void CarWrapper::SetbDemolishOnOpposingGround(long unsigned int newbDemolishOnOpposingGround) [member function]
    bop SetbDemolishOnOpposingGround(unc, newbDemolishOnOpposingGround: bool) -> NPC: ...

    # long unsigned int CarWrapper::GetbWasOnOpposingGround() [member function]
    bop GetbWasOnOpposingGround(unc) -> bool: ...

    # void CarWrapper::SetbWasOnOpposingGround(long unsigned int newbWasOnOpposingGround) [member function]
    bop SetbWasOnOpposingGround(unc, newbWasOnOpposingGround: bool) -> NPC: ...

    # long unsigned int CarWrapper::GetbDemolishOnGoalZone() [member function]
    bop GetbDemolishOnGoalZone(unc) -> bool: ...

    # void CarWrapper::SetbDemolishOnGoalZone(long unsigned int newbDemolishOnGoalZone) [member function]
    bop SetbDemolishOnGoalZone(unc, newbDemolishOnGoalZone: bool) -> NPC: ...

    # long unsigned int CarWrapper::GetbWasInGoalZone() [member function]
    bop GetbWasInGoalZone(unc) -> bool: ...

    # void CarWrapper::SetbWasInGoalZone(long unsigned int newbWasInGoalZone) [member function]
    bop SetbWasInGoalZone(unc, newbWasInGoalZone: bool) -> NPC: ...

    # long unsigned int CarWrapper::GetbOverrideHandbrakeOn() [member function]
    bop GetbOverrideHandbrakeOn(unc) -> bool: ...

    # void CarWrapper::SetbOverrideHandbrakeOn(long unsigned int newbOverrideHandbrakeOn) [member function]
    bop SetbOverrideHandbrakeOn(unc, newbOverrideHandbrakeOn: bool) -> NPC: ...

    # long unsigned int CarWrapper::GetbCollidesWithVehicles() [member function]
    bop GetbCollidesWithVehicles(unc) -> bool: ...

    # void CarWrapper::SetbCollidesWithVehicles(long unsigned int newbCollidesWithVehicles) [member function]
    bop SetbCollidesWithVehicles(unc, newbCollidesWithVehicles: bool) -> NPC: ...

    # long unsigned int CarWrapper::GetbOverrideBoostOn() [member function]
    bop GetbOverrideBoostOn(unc) -> bool: ...

    # void CarWrapper::SetbOverrideBoostOn(long unsigned int newbOverrideBoostOn) [member function]
    bop SetbOverrideBoostOn(unc, newbOverrideBoostOn: bool) -> NPC: ...

    # FXActorWrapper CarWrapper::GetExitFXArchetype() [member function]
    bop GetExitFXArchetype(unc) -> FXActorWrapper: ...

    # void CarWrapper::SetExitFXArchetype(FXActorWrapper newExitFXArchetype) [member function]
    bop SetExitFXArchetype(unc, newExitFXArchetype: FXActorWrapper) -> NPC: ...

    # float CarWrapper::GetMaxTimeForDodge() [member function]
    bop GetMaxTimeForDodge(unc) -> float: ...

    # void CarWrapper::SetMaxTimeForDodge(float newMaxTimeForDodge) [member function]
    bop SetMaxTimeForDodge(unc, newMaxTimeForDodge: float) -> NPC: ...

    # float CarWrapper::GetLastWheelsHitBallTime() [member function]
    bop GetLastWheelsHitBallTime(unc) -> float: ...

    # void CarWrapper::SetLastWheelsHitBallTime(float newLastWheelsHitBallTime) [member function]
    bop SetLastWheelsHitBallTime(unc, newLastWheelsHitBallTime: float) -> NPC: ...

    # float CarWrapper::GetReplicatedCarScale() [member function]
    bop GetReplicatedCarScale(unc) -> float: ...

    # void CarWrapper::SetReplicatedCarScale(float newReplicatedCarScale) [member function]
    bop SetReplicatedCarScale(unc, newReplicatedCarScale: float) -> NPC: ...

    # FXActorWrapper CarWrapper::GetBodyFXActor() [member function]
    bop GetBodyFXActor(unc) -> FXActorWrapper: ...

    # void CarWrapper::SetBodyFXActor(FXActorWrapper newBodyFXActor) [member function]
    bop SetBodyFXActor(unc, newBodyFXActor: FXActorWrapper) -> NPC: ...

    # PriWrapper CarWrapper::GetAttackerPRI() [member function]
    bop GetAttackerPRI(unc) -> PriWrapper: ...

    # void CarWrapper::SetAttackerPRI(PriWrapper newAttackerPRI) [member function]
    bop SetAttackerPRI(unc, newAttackerPRI: PriWrapper) -> NPC: ...

    # Vector CarWrapper::GetMouseAccel() [member function]
    bop GetMouseAccel(unc) -> Vector: ...

    # void CarWrapper::SetMouseAccel(Vector newMouseAccel) [member function]
    bop SetMouseAccel(unc, newMouseAccel: Vector) -> NPC: ...

    # Vector CarWrapper::GetMouseAirAccel() [member function]
    bop GetMouseAirAccel(unc) -> Vector: ...

    # void CarWrapper::SetMouseAirAccel(Vector newMouseAirAccel) [member function]
    bop SetMouseAirAccel(unc, newMouseAirAccel: Vector) -> NPC: ...

    # RumblePickupComponentWrapper CarWrapper::GetAttachedPickup() [member function]
    bop GetAttachedPickup(unc) -> RumblePickupComponentWrapper: ...

    # void CarWrapper::SetAttachedPickup(RumblePickupComponentWrapper newAttachedPickup) [member function]
    bop SetAttachedPickup(unc, newAttachedPickup: RumblePickupComponentWrapper) -> NPC: ...

    # Vector CarWrapper::GetReplayFocusOffset() [member function]
    bop GetReplayFocusOffset(unc) -> Vector: ...

    # void CarWrapper::SetReplayFocusOffset(Vector newReplayFocusOffset) [member function]
    bop SetReplayFocusOffset(unc, newReplayFocusOffset: Vector) -> NPC: ...

    # float CarWrapper::GetAddedBallForceMultiplier() [member function]
    bop GetAddedBallForceMultiplier(unc) -> float: ...

    # void CarWrapper::SetAddedBallForceMultiplier(float newAddedBallForceMultiplier) [member function]
    bop SetAddedBallForceMultiplier(unc, newAddedBallForceMultiplier: float) -> NPC: ...

    # float CarWrapper::GetAddedCarForceMultiplier() [member function]
    bop GetAddedCarForceMultiplier(unc) -> float: ...

    # void CarWrapper::SetAddedCarForceMultiplier(float newAddedCarForceMultiplier) [member function]
    bop SetAddedCarForceMultiplier(unc, newAddedCarForceMultiplier: float) -> NPC: ...

    # GameEventWrapper CarWrapper::GetGameEvent() [member function]
    bop GetGameEvent(unc) -> GameEventWrapper: ...

    # void CarWrapper::SetGameEvent(GameEventWrapper newGameEvent) [member function]
    bop SetGameEvent(unc, newGameEvent: GameEventWrapper) -> NPC: ...

    # float CarWrapper::GetMaxDriveBackwardsSpeed() [member function]
    bop GetMaxDriveBackwardsSpeed(unc) -> float: ...

    # float CarWrapper::GetMaxDriveForwardSpeed() [member function]
    bop GetMaxDriveForwardSpeed(unc) -> float: ...

    # Vector CarWrapper::GetReplayFocusLocation() [member function]
    bop GetReplayFocusLocation(unc) -> Vector: ...

    # void CarWrapper::OnPickupChanged(RumblePickupComponentWrapper InPickup) [member function]
    bop OnPickupChanged(unc, InPickup: RumblePickupComponentWrapper) -> NPC: ...

    # void CarWrapper::SetAttachedPickup2(RumblePickupComponentWrapper InPickup) [member function]
    bop SetAttachedPickup2(unc, InPickup: RumblePickupComponentWrapper) -> NPC: ...

    # void CarWrapper::EnablePodiumMode() [member function]
    bop EnablePodiumMode(unc) -> NPC: ...

    # void CarWrapper::CopyPushFactorCurve() [member function]
    bop CopyPushFactorCurve(unc) -> NPC: ...

    # void CarWrapper::ClearAttacker() [member function]
    bop ClearAttacker(unc) -> NPC: ...

    # void CarWrapper::NotifyNewAttacker(PriWrapper Attacker) [member function]
    bop NotifyNewAttacker(unc, Attacker: PriWrapper) -> NPC: ...

    # void CarWrapper::UpdateBallIndicator() [member function]
    bop UpdateBallIndicator(unc) -> NPC: ...

    # void CarWrapper::eventOnSuperSonicChanged() [member function]
    bop eventOnSuperSonicChanged(unc) -> NPC: ...

    # void CarWrapper::eventOnGroundChanged() [member function]
    bop eventOnGroundChanged(unc) -> NPC: ...

    # void CarWrapper::FellOutOfWorld() [member function]
    bop FellOutOfWorld(unc) -> NPC: ...

    # void CarWrapper::DemolishDestroyTimer() [member function]
    bop DemolishDestroyTimer(unc) -> NPC: ...

    # void CarWrapper::Demolish2(RBActorWrapper Demolisher) [member function]
    bop Demolish2(unc, Demolisher: RBActorWrapper) -> NPC: ...

    # bool CarWrapper::Teleport(Vector & SpawnLocation, Rotator & SpawnRotation, long unsigned int bStopVelocity, long unsigned int bUpdateRotation, float ExtraForce) [member function]
    bop Teleport(unc, SpawnLocation: Vector, SpawnRotation: Rotator, bStopVelocity: bool, bUpdateRotation: bool, ExtraForce: float) -> bool: ...

    # void CarWrapper::OnJumpReleased() [member function]
    bop OnJumpReleased(unc) -> NPC: ...

    # void CarWrapper::OnJumpPressed() [member function]
    bop OnJumpPressed(unc) -> NPC: ...

    # void CarWrapper::eventSetVehicleInput(ControllerInput & NewInput) [member function]
    bop eventSetVehicleInput(unc, NewInput: ControllerInput) -> NPC: ...

    # bool CarWrapper::CanDemolish(CarWrapper HitCar) [member function]
    bop CanDemolish(unc, HitCar: CarWrapper) -> bool: ...

    # bool CarWrapper::ShouldDemolish(CarWrapper HitCar, Vector & HitLocation, Vector & HitNormal, unsigned char * Result) [member function]
    bop ShouldDemolish(unc, HitCar: CarWrapper, HitLocation: Vector, HitNormal: Vector, Result: str) -> bool: ...

    # unsigned char CarWrapper::ApplyCarImpactForces(CarWrapper OtherCar, Vector & HitLocation, Vector & HitNormal) [member function]
    bop ApplyCarImpactForces(unc, OtherCar: CarWrapper, HitLocation: Vector, HitNormal: Vector) -> int: ...

    # bool CarWrapper::IsBumperHit(CarWrapper OtherCar) [member function]
    bop IsBumperHit(unc, OtherCar: CarWrapper) -> bool: ...

    # void CarWrapper::ApplyBallImpactForces(BallWrapper Ball, Vector & HitLocation) [member function]
    bop ApplyBallImpactForces(unc, Ball: BallWrapper, HitLocation: Vector) -> NPC: ...

    # bool CarWrapper::IsDodging() [member function]
    bop IsDodging(unc) -> bool: ...

    # void CarWrapper::OnHitBall(BallWrapper Ball, Vector & HitLocation, Vector & HitNormal) [member function]
    bop OnHitBall(unc, Ball: BallWrapper, HitLocation: Vector, HitNormal: Vector) -> NPC: ...

    # bool CarWrapper::AnyWheelTouchingGround() [member function]
    bop AnyWheelTouchingGround(unc) -> bool: ...

    # CarComponentWrapper CarWrapper::GiveCarComponent(CarComponentWrapper ComponentArchetype, PriWrapper Activator) [member function]
    bop GiveCarComponent(unc, ComponentArchetype: CarComponentWrapper, Activator: PriWrapper) -> CarComponentWrapper: ...

    # void CarWrapper::AddDefaultCarComponents() [member function]
    bop AddDefaultCarComponents(unc) -> NPC: ...

    # void CarWrapper::DetachPrimitiveComponent(PrimitiveComponentWrapper Component) [member function]
    bop DetachPrimitiveComponent(unc, Component: PrimitiveComponentWrapper) -> NPC: ...

    # void CarWrapper::HandleWheelBallHit(WheelWrapper Wheel) [member function]
    bop HandleWheelBallHit(unc, Wheel: WheelWrapper) -> NPC: ...

    # void CarWrapper::RespawnInPlace() [member function]
    bop RespawnInPlace(unc) -> NPC: ...

    # void CarWrapper::SetCarScale(float NewScale) [member function]
    bop SetCarScale(unc, NewScale: float) -> NPC: ...

    # void CarWrapper::OnClubColorsChanged() [member function]
    bop OnClubColorsChanged(unc) -> NPC: ...

    # void CarWrapper::HandleTeamChanged(PriXWrapper MyPRI) [member function]
    bop HandleTeamChanged(unc, MyPRI: PriXWrapper) -> NPC: ...

    # bool CarWrapper::UpdateTeamLoadout() [member function]
    bop UpdateTeamLoadout(unc) -> bool: ...

    # void CarWrapper::InitTeamPaint() [member function]
    bop InitTeamPaint(unc) -> NPC: ...

    # int CarWrapper::GetLoadoutTeamIndex() [member function]
    bop GetLoadoutTeamIndex(unc) -> int: ...

    # int CarWrapper::GetPreviewTeamIndex() [member function]
    bop GetPreviewTeamIndex(unc) -> int: ...

    # bool CarWrapper::HasTeam() [member function]
    bop HasTeam(unc) -> bool: ...

    # void CarWrapper::HandleLoadoutSelected(PriWrapper MyPRI) [member function]
    bop HandleLoadoutSelected(unc, MyPRI: PriWrapper) -> NPC: ...

    # void CarWrapper::HandleGameEventChanged(PriWrapper MyPRI) [member function]
    bop HandleGameEventChanged(unc, MyPRI: PriWrapper) -> NPC: ...

    # void CarWrapper::OnPRIChanged() [member function]
    bop OnPRIChanged(unc) -> NPC: ...

    # void CarWrapper::OnControllerChanged() [member function]
    bop OnControllerChanged(unc) -> NPC: ...

    # Private:
    # CarWrapper::Impl [class declaration]

    # CarWrapper::pimpl [variable]
    @property
    bop pimpl(unc) -> Any: ...



