from typing import Callable, List, Tuple, Dict, Any
from enum import Enum

class PlayerControllerWrapper():
    # Public:
    # PlayerControllerWrapper::PlayerControllerWrapper(uintptr_t mem) [constructor]
    def __init__(self, mem: int) -> None: ...

    # PlayerControllerWrapper::PlayerControllerWrapper(PlayerControllerWrapper const & other) [constructor]

    # PlayerControllerWrapper & PlayerControllerWrapper::operator=(PlayerControllerWrapper rhs) [member operator]

    # PlayerControllerWrapper::~PlayerControllerWrapper() [destructor]
    def __del__(self) -> None: ...

    # CarWrapper PlayerControllerWrapper::GetCar() [member function]
    def GetCar(self) -> CarWrapper: ...

    # void PlayerControllerWrapper::SetCar(CarWrapper newCar) [member function]
    def SetCar(self, newCar: CarWrapper) -> None: ...

    # PriWrapper PlayerControllerWrapper::GetPRI() [member function]
    def GetPRI(self) -> PriWrapper: ...

    # void PlayerControllerWrapper::SetPRI(PriWrapper newPRI) [member function]
    def SetPRI(self, newPRI: PriWrapper) -> None: ...

    # ControllerInput PlayerControllerWrapper::GetVehicleInput() [member function]
    def GetVehicleInput(self) -> ControllerInput: ...

    # void PlayerControllerWrapper::SetVehicleInput(ControllerInput newVehicleInput) [member function]
    def SetVehicleInput(self, newVehicleInput: ControllerInput) -> None: ...

    # long unsigned int PlayerControllerWrapper::GetbReceivedServerShutdownMessage() [member function]
    def GetbReceivedServerShutdownMessage(self) -> bool: ...

    # void PlayerControllerWrapper::SetbReceivedServerShutdownMessage(long unsigned int newbReceivedServerShutdownMessage) [member function]
    def SetbReceivedServerShutdownMessage(self, newbReceivedServerShutdownMessage: bool) -> None: ...

    # long unsigned int PlayerControllerWrapper::GetbPendingIdleKick() [member function]
    def GetbPendingIdleKick(self) -> bool: ...

    # void PlayerControllerWrapper::SetbPendingIdleKick(long unsigned int newbPendingIdleKick) [member function]
    def SetbPendingIdleKick(self, newbPendingIdleKick: bool) -> None: ...

    # long unsigned int PlayerControllerWrapper::GetbUseDebugInputs() [member function]
    def GetbUseDebugInputs(self) -> bool: ...

    # void PlayerControllerWrapper::SetbUseDebugInputs(long unsigned int newbUseDebugInputs) [member function]
    def SetbUseDebugInputs(self, newbUseDebugInputs: bool) -> None: ...

    # long unsigned int PlayerControllerWrapper::GetbJumpPressed() [member function]
    def GetbJumpPressed(self) -> bool: ...

    # void PlayerControllerWrapper::SetbJumpPressed(long unsigned int newbJumpPressed) [member function]
    def SetbJumpPressed(self, newbJumpPressed: bool) -> None: ...

    # long unsigned int PlayerControllerWrapper::GetbBoostPressed() [member function]
    def GetbBoostPressed(self) -> bool: ...

    # void PlayerControllerWrapper::SetbBoostPressed(long unsigned int newbBoostPressed) [member function]
    def SetbBoostPressed(self, newbBoostPressed: bool) -> None: ...

    # long unsigned int PlayerControllerWrapper::GetbHandbrakePressed() [member function]
    def GetbHandbrakePressed(self) -> bool: ...

    # void PlayerControllerWrapper::SetbHandbrakePressed(long unsigned int newbHandbrakePressed) [member function]
    def SetbHandbrakePressed(self, newbHandbrakePressed: bool) -> None: ...

    # long unsigned int PlayerControllerWrapper::GetbHasPitchedBack() [member function]
    def GetbHasPitchedBack(self) -> bool: ...

    # void PlayerControllerWrapper::SetbHasPitchedBack(long unsigned int newbHasPitchedBack) [member function]
    def SetbHasPitchedBack(self, newbHasPitchedBack: bool) -> None: ...

    # long unsigned int PlayerControllerWrapper::GetbAllowAsymmetricalMute() [member function]
    def GetbAllowAsymmetricalMute(self) -> bool: ...

    # void PlayerControllerWrapper::SetbAllowAsymmetricalMute(long unsigned int newbAllowAsymmetricalMute) [member function]
    def SetbAllowAsymmetricalMute(self, newbAllowAsymmetricalMute: bool) -> None: ...

    # long unsigned int PlayerControllerWrapper::GetbResetCamera() [member function]
    def GetbResetCamera(self) -> bool: ...

    # void PlayerControllerWrapper::SetbResetCamera(long unsigned int newbResetCamera) [member function]
    def SetbResetCamera(self, newbResetCamera: bool) -> None: ...

    # UnrealStringWrapper PlayerControllerWrapper::GetLoginURL() [member function]
    def GetLoginURL(self) -> UnrealStringWrapper: ...

    # unsigned char PlayerControllerWrapper::GetVoiceFilter() [member function]
    def GetVoiceFilter(self) -> int: ...

    # void PlayerControllerWrapper::SetVoiceFilter(unsigned char newVoiceFilter) [member function]
    def SetVoiceFilter(self, newVoiceFilter: int) -> None: ...

    # unsigned char PlayerControllerWrapper::GetChatFilter() [member function]
    def GetChatFilter(self) -> int: ...

    # void PlayerControllerWrapper::SetChatFilter(unsigned char newChatFilter) [member function]
    def SetChatFilter(self, newChatFilter: int) -> None: ...

    # PriWrapper PlayerControllerWrapper::GetFollowTarget() [member function]
    def GetFollowTarget(self) -> PriWrapper: ...

    # void PlayerControllerWrapper::SetFollowTarget(PriWrapper newFollowTarget) [member function]
    def SetFollowTarget(self, newFollowTarget: PriWrapper) -> None: ...

    # BaseCameraWrapper PlayerControllerWrapper::GetSpectatorCameraArchetype() [member function]
    def GetSpectatorCameraArchetype(self) -> BaseCameraWrapper: ...

    # void PlayerControllerWrapper::SetSpectatorCameraArchetype(BaseCameraWrapper newSpectatorCameraArchetype) [member function]
    def SetSpectatorCameraArchetype(self, newSpectatorCameraArchetype: BaseCameraWrapper) -> None: ...

    # BaseCameraWrapper PlayerControllerWrapper::GetEditorCameraArchetype() [member function]
    def GetEditorCameraArchetype(self) -> BaseCameraWrapper: ...

    # void PlayerControllerWrapper::SetEditorCameraArchetype(BaseCameraWrapper newEditorCameraArchetype) [member function]
    def SetEditorCameraArchetype(self, newEditorCameraArchetype: BaseCameraWrapper) -> None: ...

    # Vector PlayerControllerWrapper::GetMoveActorGrabOffset() [member function]
    def GetMoveActorGrabOffset(self) -> Vector: ...

    # void PlayerControllerWrapper::SetMoveActorGrabOffset(Vector newMoveActorGrabOffset) [member function]
    def SetMoveActorGrabOffset(self, newMoveActorGrabOffset: Vector) -> None: ...

    # float PlayerControllerWrapper::GetMoveActorGrabIncrement() [member function]
    def GetMoveActorGrabIncrement(self) -> float: ...

    # void PlayerControllerWrapper::SetMoveActorGrabIncrement(float newMoveActorGrabIncrement) [member function]
    def SetMoveActorGrabIncrement(self, newMoveActorGrabIncrement: float) -> None: ...

    # float PlayerControllerWrapper::GetMinMoveActorGrabDistance() [member function]
    def GetMinMoveActorGrabDistance(self) -> float: ...

    # void PlayerControllerWrapper::SetMinMoveActorGrabDistance(float newMinMoveActorGrabDistance) [member function]
    def SetMinMoveActorGrabDistance(self, newMinMoveActorGrabDistance: float) -> None: ...

    # float PlayerControllerWrapper::GetMouseIncrementSpeed() [member function]
    def GetMouseIncrementSpeed(self) -> float: ...

    # void PlayerControllerWrapper::SetMouseIncrementSpeed(float newMouseIncrementSpeed) [member function]
    def SetMouseIncrementSpeed(self, newMouseIncrementSpeed: float) -> None: ...

    # float PlayerControllerWrapper::GetBallVelocityIncrementAmount() [member function]
    def GetBallVelocityIncrementAmount(self) -> float: ...

    # void PlayerControllerWrapper::SetBallVelocityIncrementAmount(float newBallVelocityIncrementAmount) [member function]
    def SetBallVelocityIncrementAmount(self, newBallVelocityIncrementAmount: float) -> None: ...

    # int PlayerControllerWrapper::GetBallVelocityIncrementFireCount() [member function]
    def GetBallVelocityIncrementFireCount(self) -> int: ...

    # void PlayerControllerWrapper::SetBallVelocityIncrementFireCount(int newBallVelocityIncrementFireCount) [member function]
    def SetBallVelocityIncrementFireCount(self, newBallVelocityIncrementFireCount: int) -> None: ...

    # float PlayerControllerWrapper::GetBallVelocityIncrementFireCountMax() [member function]
    def GetBallVelocityIncrementFireCountMax(self) -> float: ...

    # void PlayerControllerWrapper::SetBallVelocityIncrementFireCountMax(float newBallVelocityIncrementFireCountMax) [member function]
    def SetBallVelocityIncrementFireCountMax(self, newBallVelocityIncrementFireCountMax: float) -> None: ...

    # float PlayerControllerWrapper::GetBallVelocityIncrementSpeedDefault() [member function]
    def GetBallVelocityIncrementSpeedDefault(self) -> float: ...

    # void PlayerControllerWrapper::SetBallVelocityIncrementSpeedDefault(float newBallVelocityIncrementSpeedDefault) [member function]
    def SetBallVelocityIncrementSpeedDefault(self, newBallVelocityIncrementSpeedDefault: float) -> None: ...

    # float PlayerControllerWrapper::GetBallVelocityIncrementSpeedMax() [member function]
    def GetBallVelocityIncrementSpeedMax(self) -> float: ...

    # void PlayerControllerWrapper::SetBallVelocityIncrementSpeedMax(float newBallVelocityIncrementSpeedMax) [member function]
    def SetBallVelocityIncrementSpeedMax(self, newBallVelocityIncrementSpeedMax: float) -> None: ...

    # float PlayerControllerWrapper::GetCrosshairTraceDistance() [member function]
    def GetCrosshairTraceDistance(self) -> float: ...

    # void PlayerControllerWrapper::SetCrosshairTraceDistance(float newCrosshairTraceDistance) [member function]
    def SetCrosshairTraceDistance(self, newCrosshairTraceDistance: float) -> None: ...

    # ActorWrapper PlayerControllerWrapper::GetTracedCrosshairActor() [member function]
    def GetTracedCrosshairActor(self) -> ActorWrapper: ...

    # void PlayerControllerWrapper::SetTracedCrosshairActor(ActorWrapper newTracedCrosshairActor) [member function]
    def SetTracedCrosshairActor(self, newTracedCrosshairActor: ActorWrapper) -> None: ...

    # Vector PlayerControllerWrapper::GetRotateActorCameraLocationOffset() [member function]
    def GetRotateActorCameraLocationOffset(self) -> Vector: ...

    # void PlayerControllerWrapper::SetRotateActorCameraLocationOffset(Vector newRotateActorCameraLocationOffset) [member function]
    def SetRotateActorCameraLocationOffset(self, newRotateActorCameraLocationOffset: Vector) -> None: ...

    # Vector PlayerControllerWrapper::GetRotateActorCameraRotationOffset() [member function]
    def GetRotateActorCameraRotationOffset(self) -> Vector: ...

    # void PlayerControllerWrapper::SetRotateActorCameraRotationOffset(Vector newRotateActorCameraRotationOffset) [member function]
    def SetRotateActorCameraRotationOffset(self, newRotateActorCameraRotationOffset: Vector) -> None: ...

    # int PlayerControllerWrapper::GetRotateActorCameraSide() [member function]
    def GetRotateActorCameraSide(self) -> int: ...

    # void PlayerControllerWrapper::SetRotateActorCameraSide(int newRotateActorCameraSide) [member function]
    def SetRotateActorCameraSide(self, newRotateActorCameraSide: int) -> None: ...

    # float PlayerControllerWrapper::GetDesiredCameraSide() [member function]
    def GetDesiredCameraSide(self) -> float: ...

    # void PlayerControllerWrapper::SetDesiredCameraSide(float newDesiredCameraSide) [member function]
    def SetDesiredCameraSide(self, newDesiredCameraSide: float) -> None: ...

    # float PlayerControllerWrapper::GetPawnTypeChangedTime() [member function]
    def GetPawnTypeChangedTime(self) -> float: ...

    # void PlayerControllerWrapper::SetPawnTypeChangedTime(float newPawnTypeChangedTime) [member function]
    def SetPawnTypeChangedTime(self, newPawnTypeChangedTime: float) -> None: ...

    # int PlayerControllerWrapper::GetSelectedSpawnArchetype() [member function]
    def GetSelectedSpawnArchetype(self) -> int: ...

    # void PlayerControllerWrapper::SetSelectedSpawnArchetype(int newSelectedSpawnArchetype) [member function]
    def SetSelectedSpawnArchetype(self, newSelectedSpawnArchetype: int) -> None: ...

    # ControllerInput PlayerControllerWrapper::GetDebugInputs() [member function]
    def GetDebugInputs(self) -> ControllerInput: ...

    # void PlayerControllerWrapper::SetDebugInputs(ControllerInput newDebugInputs) [member function]
    def SetDebugInputs(self, newDebugInputs: ControllerInput) -> None: ...

    # int PlayerControllerWrapper::GetMinClientInputRate() [member function]
    def GetMinClientInputRate(self) -> int: ...

    # void PlayerControllerWrapper::SetMinClientInputRate(int newMinClientInputRate) [member function]
    def SetMinClientInputRate(self, newMinClientInputRate: int) -> None: ...

    # int PlayerControllerWrapper::GetMedianClientInputRate() [member function]
    def GetMedianClientInputRate(self) -> int: ...

    # void PlayerControllerWrapper::SetMedianClientInputRate(int newMedianClientInputRate) [member function]
    def SetMedianClientInputRate(self, newMedianClientInputRate: int) -> None: ...

    # int PlayerControllerWrapper::GetMaxClientInputRate() [member function]
    def GetMaxClientInputRate(self) -> int: ...

    # void PlayerControllerWrapper::SetMaxClientInputRate(int newMaxClientInputRate) [member function]
    def SetMaxClientInputRate(self, newMaxClientInputRate: int) -> None: ...

    # int PlayerControllerWrapper::GetConfiguredClientInputRate() [member function]
    def GetConfiguredClientInputRate(self) -> int: ...

    # void PlayerControllerWrapper::SetConfiguredClientInputRate(int newConfiguredClientInputRate) [member function]
    def SetConfiguredClientInputRate(self, newConfiguredClientInputRate: int) -> None: ...

    # float PlayerControllerWrapper::GetTimeSinceLastMovePacket() [member function]
    def GetTimeSinceLastMovePacket(self) -> float: ...

    # void PlayerControllerWrapper::SetTimeSinceLastMovePacket(float newTimeSinceLastMovePacket) [member function]
    def SetTimeSinceLastMovePacket(self, newTimeSinceLastMovePacket: float) -> None: ...

    # float PlayerControllerWrapper::GetTimeLastReplicatedMovePacket() [member function]
    def GetTimeLastReplicatedMovePacket(self) -> float: ...

    # void PlayerControllerWrapper::SetTimeLastReplicatedMovePacket(float newTimeLastReplicatedMovePacket) [member function]
    def SetTimeLastReplicatedMovePacket(self, newTimeLastReplicatedMovePacket: float) -> None: ...

    # float PlayerControllerWrapper::GetMouseXDeadZone() [member function]
    def GetMouseXDeadZone(self) -> float: ...

    # void PlayerControllerWrapper::SetMouseXDeadZone(float newMouseXDeadZone) [member function]
    def SetMouseXDeadZone(self, newMouseXDeadZone: float) -> None: ...

    # float PlayerControllerWrapper::GetMouseYDeadZone() [member function]
    def GetMouseYDeadZone(self) -> float: ...

    # void PlayerControllerWrapper::SetMouseYDeadZone(float newMouseYDeadZone) [member function]
    def SetMouseYDeadZone(self, newMouseYDeadZone: float) -> None: ...

    # float PlayerControllerWrapper::GetMouseXDeadZoneAir() [member function]
    def GetMouseXDeadZoneAir(self) -> float: ...

    # void PlayerControllerWrapper::SetMouseXDeadZoneAir(float newMouseXDeadZoneAir) [member function]
    def SetMouseXDeadZoneAir(self, newMouseXDeadZoneAir: float) -> None: ...

    # float PlayerControllerWrapper::GetMouseYDeadZoneAir() [member function]
    def GetMouseYDeadZoneAir(self) -> float: ...

    # void PlayerControllerWrapper::SetMouseYDeadZoneAir(float newMouseYDeadZoneAir) [member function]
    def SetMouseYDeadZoneAir(self, newMouseYDeadZoneAir: float) -> None: ...

    # ControllerInput PlayerControllerWrapper::GetLastInputs() [member function]
    def GetLastInputs(self) -> ControllerInput: ...

    # void PlayerControllerWrapper::SetLastInputs(ControllerInput newLastInputs) [member function]
    def SetLastInputs(self, newLastInputs: ControllerInput) -> None: ...

    # PriWrapper PlayerControllerWrapper::GetPendingViewPRI() [member function]
    def GetPendingViewPRI(self) -> PriWrapper: ...

    # void PlayerControllerWrapper::SetPendingViewPRI(PriWrapper newPendingViewPRI) [member function]
    def SetPendingViewPRI(self, newPendingViewPRI: PriWrapper) -> None: ...

    # float PlayerControllerWrapper::GetLastInputPitchUp() [member function]
    def GetLastInputPitchUp(self) -> float: ...

    # void PlayerControllerWrapper::SetLastInputPitchUp(float newLastInputPitchUp) [member function]
    def SetLastInputPitchUp(self, newLastInputPitchUp: float) -> None: ...

    # float PlayerControllerWrapper::GetLastInputPitchDown() [member function]
    def GetLastInputPitchDown(self) -> float: ...

    # void PlayerControllerWrapper::SetLastInputPitchDown(float newLastInputPitchDown) [member function]
    def SetLastInputPitchDown(self, newLastInputPitchDown: float) -> None: ...

    # float PlayerControllerWrapper::GetLastInputYawLeft() [member function]
    def GetLastInputYawLeft(self) -> float: ...

    # void PlayerControllerWrapper::SetLastInputYawLeft(float newLastInputYawLeft) [member function]
    def SetLastInputYawLeft(self, newLastInputYawLeft: float) -> None: ...

    # float PlayerControllerWrapper::GetLastInputYawRight() [member function]
    def GetLastInputYawRight(self) -> float: ...

    # void PlayerControllerWrapper::SetLastInputYawRight(float newLastInputYawRight) [member function]
    def SetLastInputYawRight(self, newLastInputYawRight: float) -> None: ...

    # float PlayerControllerWrapper::GetLastInputPitch() [member function]
    def GetLastInputPitch(self) -> float: ...

    # void PlayerControllerWrapper::SetLastInputPitch(float newLastInputPitch) [member function]
    def SetLastInputPitch(self, newLastInputPitch: float) -> None: ...

    # float PlayerControllerWrapper::GetLastInputYaw() [member function]
    def GetLastInputYaw(self) -> float: ...

    # void PlayerControllerWrapper::SetLastInputYaw(float newLastInputYaw) [member function]
    def SetLastInputYaw(self, newLastInputYaw: float) -> None: ...

    # float PlayerControllerWrapper::GetMouseInputMax() [member function]
    def GetMouseInputMax(self) -> float: ...

    # void PlayerControllerWrapper::SetMouseInputMax(float newMouseInputMax) [member function]
    def SetMouseInputMax(self, newMouseInputMax: float) -> None: ...

    # EngineTAWrapper PlayerControllerWrapper::GetEngineShare() [member function]
    def GetEngineShare(self) -> EngineTAWrapper: ...

    # void PlayerControllerWrapper::SetEngineShare(EngineTAWrapper newEngineShare) [member function]
    def SetEngineShare(self, newEngineShare: EngineTAWrapper) -> None: ...

    # void PlayerControllerWrapper::HandleCarSet(PriWrapper InPRI) [member function]
    def HandleCarSet(self, InPRI: PriWrapper) -> None: ...

    # void PlayerControllerWrapper::SpawnSelectedArchetype() [member function]
    def SpawnSelectedArchetype(self) -> None: ...

    # bool PlayerControllerWrapper::RemoveActor() [member function]
    def RemoveActor(self) -> bool: ...

    # void PlayerControllerWrapper::ToggleGrabActor() [member function]
    def ToggleGrabActor(self) -> None: ...

    # void PlayerControllerWrapper::ToggleRotateActor() [member function]
    def ToggleRotateActor(self) -> None: ...

    # void PlayerControllerWrapper::EditorReleaseActor() [member function]
    def EditorReleaseActor(self) -> None: ...

    # void PlayerControllerWrapper::EditorCycleActor() [member function]
    def EditorCycleActor(self) -> None: ...

    # void PlayerControllerWrapper::DuplicateShot() [member function]
    def DuplicateShot(self) -> None: ...

    # void PlayerControllerWrapper::StopEditing() [member function]
    def StopEditing(self) -> None: ...

    # void PlayerControllerWrapper::EditorIncreasePower() [member function]
    def EditorIncreasePower(self) -> None: ...

    # void PlayerControllerWrapper::EditorDecreasePower() [member function]
    def EditorDecreasePower(self) -> None: ...

    # void PlayerControllerWrapper::EditorIncreasePowerToggleInterim() [member function]
    def EditorIncreasePowerToggleInterim(self) -> None: ...

    # void PlayerControllerWrapper::EditorDecreasePowerToggleInterim() [member function]
    def EditorDecreasePowerToggleInterim(self) -> None: ...

    # void PlayerControllerWrapper::EditorIncreasePowerToggle2(long unsigned int bToggle) [member function]
    def EditorIncreasePowerToggle2(self, bToggle: bool) -> None: ...

    # void PlayerControllerWrapper::EditorDecreasePowerToggle2(long unsigned int bToggle) [member function]
    def EditorDecreasePowerToggle2(self, bToggle: bool) -> None: ...

    # void PlayerControllerWrapper::ModifyEditorPower(int Direction) [member function]
    def ModifyEditorPower(self, Direction: int) -> None: ...

    # void PlayerControllerWrapper::ToggleCameraPosition() [member function]
    def ToggleCameraPosition(self) -> None: ...

    # void PlayerControllerWrapper::EditorUndo() [member function]
    def EditorUndo(self) -> None: ...

    # void PlayerControllerWrapper::EditorRedo() [member function]
    def EditorRedo(self) -> None: ...

    # void PlayerControllerWrapper::EditorIncreaseRoundTime() [member function]
    def EditorIncreaseRoundTime(self) -> None: ...

    # void PlayerControllerWrapper::EditorDecreaseRoundTime() [member function]
    def EditorDecreaseRoundTime(self) -> None: ...

    # void PlayerControllerWrapper::EditorNextRound() [member function]
    def EditorNextRound(self) -> None: ...

    # void PlayerControllerWrapper::EditorPrevRound() [member function]
    def EditorPrevRound(self) -> None: ...

    # void PlayerControllerWrapper::UpdateCrosshair() [member function]
    def UpdateCrosshair(self) -> None: ...

    # void PlayerControllerWrapper::NetClientInputRate(int Rate) [member function]
    def NetClientInputRate(self, Rate: int) -> None: ...

    # void PlayerControllerWrapper::ServerCreateMatchBroadcast(ServerWrapper GameEvent) [member function]
    def ServerCreateMatchBroadcast(self, GameEvent: ServerWrapper) -> None: ...

    # void PlayerControllerWrapper::ClampMoveActorGrabOffset() [member function]
    def ClampMoveActorGrabOffset(self) -> None: ...

    # void PlayerControllerWrapper::RevertToDefaultCameraHUDInput() [member function]
    def RevertToDefaultCameraHUDInput(self) -> None: ...

    # void PlayerControllerWrapper::SwitchToEditPawn() [member function]
    def SwitchToEditPawn(self) -> None: ...

    # void PlayerControllerWrapper::ServerResetPlayer(long unsigned int bFullReset) [member function]
    def ServerResetPlayer(self, bFullReset: bool) -> None: ...

    # void PlayerControllerWrapper::ResetPlayerRun() [member function]
    def ResetPlayerRun(self) -> None: ...

    # void PlayerControllerWrapper::ResetPlayerCheckpoint() [member function]
    def ResetPlayerCheckpoint(self) -> None: ...

    # void PlayerControllerWrapper::ToggleEditorRound() [member function]
    def ToggleEditorRound(self) -> None: ...

    # void PlayerControllerWrapper::ToggleBetweenCarAndEditPawn() [member function]
    def ToggleBetweenCarAndEditPawn(self) -> None: ...

    # void PlayerControllerWrapper::Interact() [member function]
    def Interact(self) -> None: ...

    # void PlayerControllerWrapper::StopMovement(long unsigned int bOnlyIfNoAccel) [member function]
    def StopMovement(self, bOnlyIfNoAccel: bool) -> None: ...

    # Vector PlayerControllerWrapper::GetRotateActorCameraOffset(float DeltaTime, long unsigned int bSnap) [member function]
    def GetRotateActorCameraOffset(self, DeltaTime: float, bSnap: bool) -> Vector: ...

    # void PlayerControllerWrapper::RestoreEditorPawnOrientation() [member function]
    def RestoreEditorPawnOrientation(self) -> None: ...

    # void PlayerControllerWrapper::BackupEditorPawnOrientation() [member function]
    def BackupEditorPawnOrientation(self) -> None: ...

    # void PlayerControllerWrapper::UpdateRotatedActorOrientation(float DeltaTime) [member function]
    def UpdateRotatedActorOrientation(self, DeltaTime: float) -> None: ...

    # void PlayerControllerWrapper::OnOpenPauseMenu() [member function]
    def OnOpenPauseMenu(self) -> None: ...

    # void PlayerControllerWrapper::ResetMouseCenter() [member function]
    def ResetMouseCenter(self) -> None: ...

    # float PlayerControllerWrapper::CalculateMouseAxis(float Center, float CurrentLocation, float Deadzone, float MaxDist) [member function]
    def CalculateMouseAxis(self, Center: float, CurrentLocation: float, Deadzone: float, MaxDist: float) -> float: ...

    # void PlayerControllerWrapper::ShowControllerApplet() [member function]
    def ShowControllerApplet(self) -> None: ...

    # void PlayerControllerWrapper::ShowAccountPicker() [member function]
    def ShowAccountPicker(self) -> None: ...

    # void PlayerControllerWrapper::QueSaveReplay() [member function]
    def QueSaveReplay(self) -> None: ...

    # void PlayerControllerWrapper::SetFollowTarget2(PriWrapper InTarget) [member function]
    def SetFollowTarget2(self, InTarget: PriWrapper) -> None: ...

    # void PlayerControllerWrapper::FollowPlayer(PriWrapper InPlayer) [member function]
    def FollowPlayer(self, InPlayer: PriWrapper) -> None: ...

    # void PlayerControllerWrapper::OnPendingIdleKickChanged() [member function]
    def OnPendingIdleKickChanged(self) -> None: ...

    # void PlayerControllerWrapper::SetPendingIdleKick(long unsigned int bPending) [member function]
    def SetPendingIdleKick(self, bPending: bool) -> None: ...

    # void PlayerControllerWrapper::ClientSplitscreenJoinResponse(SteamID & PlayerID, long unsigned int bAllow, std::string Error) [member function]
    def ClientSplitscreenJoinResponse(self, PlayerID: SteamID, bAllow: bool, Error: str) -> None: ...

    # void PlayerControllerWrapper::ServerRequestSplitscreenJoin(SteamID & PlayerID, std::string PlayerName) [member function]
    def ServerRequestSplitscreenJoin(self, PlayerID: SteamID, PlayerName: str) -> None: ...

    # bool PlayerControllerWrapper::eventPreClientTravel(std::string PendingURL, unsigned char TravelType, long unsigned int bIsSeamlessTravel) [member function]
    def eventPreClientTravel(self, PendingURL: str, TravelType: int, bIsSeamlessTravel: bool) -> bool: ...

    # void PlayerControllerWrapper::KickTrialPlayer() [member function]
    def KickTrialPlayer(self) -> None: ...

    # void PlayerControllerWrapper::NotifyGoalScored(int ScoredOnTeam) [member function]
    def NotifyGoalScored(self, ScoredOnTeam: int) -> None: ...

    # void PlayerControllerWrapper::eventDestroyed() [member function]
    def eventDestroyed(self) -> None: ...

    # bool PlayerControllerWrapper::ShouldBeMuted(PlayerControllerWrapper Other) [member function]
    def ShouldBeMuted(self, Other: PlayerControllerWrapper) -> bool: ...

    # bool PlayerControllerWrapper::IsCommunicationFiltered(unsigned char Filter, PlayerControllerWrapper Other, long unsigned int bPreset) [member function]
    def IsCommunicationFiltered(self, Filter: int, Other: PlayerControllerWrapper, bPreset: bool) -> bool: ...

    # void PlayerControllerWrapper::RefreshMutedPlayers(long unsigned int bForceRefresh) [member function]
    def RefreshMutedPlayers(self, bForceRefresh: bool) -> None: ...

    # void PlayerControllerWrapper::eventServerUnmutePlayer(SteamID & PlayerNetId) [member function]
    def eventServerUnmutePlayer(self, PlayerNetId: SteamID) -> None: ...

    # void PlayerControllerWrapper::eventServerMutePlayer(SteamID & PlayerNetId) [member function]
    def eventServerMutePlayer(self, PlayerNetId: SteamID) -> None: ...

    # void PlayerControllerWrapper::GameplayUnmutePlayer(SteamID & PlayerNetId) [member function]
    def GameplayUnmutePlayer(self, PlayerNetId: SteamID) -> None: ...

    # void PlayerControllerWrapper::GameplayMutePlayer(SteamID & PlayerNetId) [member function]
    def GameplayMutePlayer(self, PlayerNetId: SteamID) -> None: ...

    # void PlayerControllerWrapper::ServerSetChatFilter(unsigned char InVoiceFilter) [member function]
    def ServerSetChatFilter(self, InVoiceFilter: int) -> None: ...

    # void PlayerControllerWrapper::ServerSetVoiceFilter(unsigned char InVoiceFilter) [member function]
    def ServerSetVoiceFilter(self, InVoiceFilter: int) -> None: ...

    # bool PlayerControllerWrapper::IsExplictlyMuted(SteamID & PlayerNetId) [member function]
    def IsExplictlyMuted(self, PlayerNetId: SteamID) -> bool: ...

    # void PlayerControllerWrapper::DebugAI() [member function]
    def DebugAI(self) -> None: ...

    # void PlayerControllerWrapper::SendPendingRPCs() [member function]
    def SendPendingRPCs(self) -> None: ...

    # bool PlayerControllerWrapper::CanSendMessage(long unsigned int bQuickChatMessage) [member function]
    def CanSendMessage(self, bQuickChatMessage: bool) -> bool: ...

    # void PlayerControllerWrapper::RemoveChatBan() [member function]
    def RemoveChatBan(self) -> None: ...

    # void PlayerControllerWrapper::ApplyChatBan(long long unsigned int Expiration) [member function]
    def ApplyChatBan(self, Expiration: int) -> None: ...

    # void PlayerControllerWrapper::ClientNotifyChatBanned(long long unsigned int ChatBanExpiration) [member function]
    def ClientNotifyChatBanned(self, ChatBanExpiration: int) -> None: ...

    # void PlayerControllerWrapper::ClientNotifyChatDisabled(float Time) [member function]
    def ClientNotifyChatDisabled(self, Time: float) -> None: ...

    # void PlayerControllerWrapper::ChatMessage_TA(PlayerReplicationInfoWrapper InPRI, std::string Message, unsigned char ChatChannel, long unsigned int bPreset) [member function]
    def ChatMessage_TA(self, InPRI: PlayerReplicationInfoWrapper, Message: str, ChatChannel: int, bPreset: bool) -> None: ...

    # void PlayerControllerWrapper::ServerSayInternal_TA(std::string Message, unsigned char ChatChannel, long unsigned int bPreset) [member function]
    def ServerSayInternal_TA(self, Message: str, ChatChannel: int, bPreset: bool) -> None: ...

    # void PlayerControllerWrapper::ServerSay_TA(std::string Message, unsigned char ChatChannel, long unsigned int bPreset) [member function]
    def ServerSay_TA(self, Message: str, ChatChannel: int, bPreset: bool) -> None: ...

    # void PlayerControllerWrapper::Say_TA2(std::string Message, unsigned char ChatChannel, SteamID & Recipient, long unsigned int bPreset) [member function]
    def Say_TA2(self, Message: str, ChatChannel: int, Recipient: SteamID, bPreset: bool) -> None: ...

    # bool PlayerControllerWrapper::CanChatWith(PlayerControllerWrapper Other, long unsigned int bPreset) [member function]
    def CanChatWith(self, Other: PlayerControllerWrapper, bPreset: bool) -> bool: ...

    # bool PlayerControllerWrapper::AllowTextMessage(std::string msg) [member function]
    def AllowTextMessage(self, msg: str) -> bool: ...

    # void PlayerControllerWrapper::PushToTalkEnd() [member function]
    def PushToTalkEnd(self) -> None: ...

    # void PlayerControllerWrapper::PushToTalk2() [member function]
    def PushToTalk2(self) -> None: ...

    # void PlayerControllerWrapper::HandleJoinGameMigrationCompleted(long unsigned int bSuccess, std::string FailReason) [member function]
    def HandleJoinGameMigrationCompleted(self, bSuccess: bool, FailReason: str) -> None: ...

    # void PlayerControllerWrapper::eventClientUnmutePlayer(SteamID & PlayerNetId) [member function]
    def eventClientUnmutePlayer(self, PlayerNetId: SteamID) -> None: ...

    # void PlayerControllerWrapper::eventClientMutePlayer(SteamID & PlayerNetId, long unsigned int bAddToMuteList) [member function]
    def eventClientMutePlayer(self, PlayerNetId: SteamID, bAddToMuteList: bool) -> None: ...

    # void PlayerControllerWrapper::ClientSetOnlineStatus() [member function]
    def ClientSetOnlineStatus(self) -> None: ...

    # void PlayerControllerWrapper::HandleGameDataSelected(int PlaylistId, int MutatorIndex) [member function]
    def HandleGameDataSelected(self, PlaylistId: int, MutatorIndex: int) -> None: ...

    # GameEventWrapper PlayerControllerWrapper::GetGameEvent() [member function]
    def GetGameEvent(self) -> GameEventWrapper: ...

    # void PlayerControllerWrapper::ClientArbitratedMatchEnded() [member function]
    def ClientArbitratedMatchEnded(self) -> None: ...

    # void PlayerControllerWrapper::BannedKick() [member function]
    def BannedKick(self) -> None: ...

    # void PlayerControllerWrapper::NoReservationKick() [member function]
    def NoReservationKick(self) -> None: ...

    # void PlayerControllerWrapper::IdleKick2() [member function]
    def IdleKick2(self) -> None: ...

    # void PlayerControllerWrapper::ServerReportServer() [member function]
    def ServerReportServer(self) -> None: ...

    # void PlayerControllerWrapper::ClientUseItem(Vector & UseLocation, Rotator & UseRotation) [member function]
    def ClientUseItem(self, UseLocation: Vector, UseRotation: Rotator) -> None: ...

    # void PlayerControllerWrapper::ServerTeleportCar(Vector & SpawnLocation, Rotator & NewRotation) [member function]
    def ServerTeleportCar(self, SpawnLocation: Vector, NewRotation: Rotator) -> None: ...

    # void PlayerControllerWrapper::eventTeleportCar(Vector & SpawnLocation, Rotator & NewRotation) [member function]
    def eventTeleportCar(self, SpawnLocation: Vector, NewRotation: Rotator) -> None: ...

    # void PlayerControllerWrapper::ServerUsePickup(RBActorWrapper Target) [member function]
    def ServerUsePickup(self, Target: RBActorWrapper) -> None: ...

    # void PlayerControllerWrapper::UsePickup2() [member function]
    def UsePickup2(self) -> None: ...

    # void PlayerControllerWrapper::ToggleHandbrake(long unsigned int bHandbrake) [member function]
    def ToggleHandbrake(self, bHandbrake: bool) -> None: ...

    # void PlayerControllerWrapper::ToggleBoost(long unsigned int bBoost) [member function]
    def ToggleBoost(self, bBoost: bool) -> None: ...

    # void PlayerControllerWrapper::ToggleJump(long unsigned int bJump) [member function]
    def ToggleJump(self, bJump: bool) -> None: ...

    # void PlayerControllerWrapper::TargetSelectLeft() [member function]
    def TargetSelectLeft(self) -> None: ...

    # void PlayerControllerWrapper::TargetSelectRight() [member function]
    def TargetSelectRight(self) -> None: ...

    # void PlayerControllerWrapper::ReleaseRearCamera() [member function]
    def ReleaseRearCamera(self) -> None: ...

    # void PlayerControllerWrapper::PressRearCamera() [member function]
    def PressRearCamera(self) -> None: ...

    # void PlayerControllerWrapper::ReleaseSecondaryCamera() [member function]
    def ReleaseSecondaryCamera(self) -> None: ...

    # void PlayerControllerWrapper::PressSecondaryCamera() [member function]
    def PressSecondaryCamera(self) -> None: ...

    # void PlayerControllerWrapper::ReadyUp() [member function]
    def ReadyUp(self) -> None: ...

    # void PlayerControllerWrapper::Spectate() [member function]
    def Spectate(self) -> None: ...

    # void PlayerControllerWrapper::ChangeTeam(int TeamNum) [member function]
    def ChangeTeam(self, TeamNum: int) -> None: ...

    # void PlayerControllerWrapper::SwitchTeam() [member function]
    def SwitchTeam(self) -> None: ...

    # void PlayerControllerWrapper::SetDefaultCameraMode() [member function]
    def SetDefaultCameraMode(self) -> None: ...

    # void PlayerControllerWrapper::ResetCameraMode() [member function]
    def ResetCameraMode(self) -> None: ...

    # void PlayerControllerWrapper::ZeroMoveInput() [member function]
    def ZeroMoveInput(self) -> None: ...

    # void PlayerControllerWrapper::PlayerMove(float DeltaTime) [member function]
    def PlayerMove(self, DeltaTime: float) -> None: ...

    # void PlayerControllerWrapper::IgnoreMoveInput(long unsigned int bNewMoveInput) [member function]
    def IgnoreMoveInput(self, bNewMoveInput: bool) -> None: ...

    # void PlayerControllerWrapper::eventSendClientAdjustment() [member function]
    def eventSendClientAdjustment(self) -> None: ...

    # PlayerControllerWrapper PlayerControllerWrapper::GetPrimaryPlayerController() [member function]
    def GetPrimaryPlayerController(self) -> PlayerControllerWrapper: ...

    # void PlayerControllerWrapper::HandleAddBoostComponent(BoostWrapper Boost) [member function]
    def HandleAddBoostComponent(self, Boost: BoostWrapper) -> None: ...

    # void PlayerControllerWrapper::ReplicateLoadout() [member function]
    def ReplicateLoadout(self) -> None: ...

    # void PlayerControllerWrapper::ReplicateCameraRotation() [member function]
    def ReplicateCameraRotation(self) -> None: ...

    # void PlayerControllerWrapper::SetUsingFreecam(long unsigned int bFreecam) [member function]
    def SetUsingFreecam(self, bFreecam: bool) -> None: ...

    # void PlayerControllerWrapper::SetUsingBehindView(long unsigned int bBehindView) [member function]
    def SetUsingBehindView(self, bBehindView: bool) -> None: ...

    # void PlayerControllerWrapper::SetUsingSecondaryCamera(long unsigned int bSecondaryCamera) [member function]
    def SetUsingSecondaryCamera(self, bSecondaryCamera: bool) -> None: ...

    # void PlayerControllerWrapper::ReplicateCameraSettings() [member function]
    def ReplicateCameraSettings(self) -> None: ...

    # void PlayerControllerWrapper::HandleControllerLayoutChanged(PriWrapper InPRI) [member function]
    def HandleControllerLayoutChanged(self, InPRI: PriWrapper) -> None: ...

    # void PlayerControllerWrapper::HandlePawnTypeChanged(PriWrapper InPRI) [member function]
    def HandlePawnTypeChanged(self, InPRI: PriWrapper) -> None: ...

    # void PlayerControllerWrapper::HandlePendingViewCarSet(PriWrapper InPRI) [member function]
    def HandlePendingViewCarSet(self, InPRI: PriWrapper) -> None: ...

    # void PlayerControllerWrapper::HandleReplaceBot(PriWrapper InPRI) [member function]
    def HandleReplaceBot(self, InPRI: PriWrapper) -> None: ...

    # void PlayerControllerWrapper::HandleTeamChanged(PriXWrapper InPRI) [member function]
    def HandleTeamChanged(self, InPRI: PriXWrapper) -> None: ...

    # void PlayerControllerWrapper::HandleMatchEnded(ServerWrapper GameEvent) [member function]
    def HandleMatchEnded(self, GameEvent: ServerWrapper) -> None: ...

    # void PlayerControllerWrapper::HandleStartNewRound(ServerWrapper GameEvent) [member function]
    def HandleStartNewRound(self, GameEvent: ServerWrapper) -> None: ...

    # void PlayerControllerWrapper::HandleGameEventChanged(PriWrapper InPRI) [member function]
    def HandleGameEventChanged(self, InPRI: PriWrapper) -> None: ...

    # void PlayerControllerWrapper::HandlePRICameraChanged(PriWrapper InPRI) [member function]
    def HandlePRICameraChanged(self, InPRI: PriWrapper) -> None: ...

    # void PlayerControllerWrapper::SetupLightBar() [member function]
    def SetupLightBar(self) -> None: ...

    # void PlayerControllerWrapper::HandlePersistentCameraSet(PriWrapper InPRI) [member function]
    def HandlePersistentCameraSet(self, InPRI: PriWrapper) -> None: ...

    # void PlayerControllerWrapper::OnReceivedPlayerAndPRI() [member function]
    def OnReceivedPlayerAndPRI(self) -> None: ...

    # void PlayerControllerWrapper::UpdateVoiceFilter() [member function]
    def UpdateVoiceFilter(self) -> None: ...

    # void PlayerControllerWrapper::ReplicateLevelSessionID() [member function]
    def ReplicateLevelSessionID(self) -> None: ...

    # void PlayerControllerWrapper::ServerInitInputBuffer(unsigned char Type) [member function]
    def ServerInitInputBuffer(self, Type: int) -> None: ...

    # void PlayerControllerWrapper::eventReceivedPlayer() [member function]
    def eventReceivedPlayer(self) -> None: ...

    # void PlayerControllerWrapper::eventPostBeginPlay() [member function]
    def eventPostBeginPlay(self) -> None: ...

    # void PlayerControllerWrapper::EventChatMessage(PlayerControllerWrapper PC, std::string Message, long unsigned int bPreset) [member function]
    def EventChatMessage(self, PC: PlayerControllerWrapper, Message: str, bPreset: bool) -> None: ...

    # void PlayerControllerWrapper::EventResetPlayer(PlayerControllerWrapper PC, long unsigned int bFullReset) [member function]
    def EventResetPlayer(self, PC: PlayerControllerWrapper, bFullReset: bool) -> None: ...

    # void PlayerControllerWrapper::EventSelectBallCamTarget(PlayerControllerWrapper PC, int Direction) [member function]
    def EventSelectBallCamTarget(self, PC: PlayerControllerWrapper, Direction: int) -> None: ...

    # void PlayerControllerWrapper::EventTrainingEditorActorModified() [member function]
    def EventTrainingEditorActorModified(self) -> None: ...

    # void PlayerControllerWrapper::EventMuteChanged(PlayerControllerWrapper PC, SteamID & PlayerID, long unsigned int bMuted) [member function]
    def EventMuteChanged(self, PC: PlayerControllerWrapper, PlayerID: SteamID, bMuted: bool) -> None: ...

    # void PlayerControllerWrapper::EventPendingIdleKickChanged(PlayerControllerWrapper PC) [member function]
    def EventPendingIdleKickChanged(self, PC: PlayerControllerWrapper) -> None: ...

    # void PlayerControllerWrapper::EventLaunchControllerApplet() [member function]
    def EventLaunchControllerApplet(self) -> None: ...

    # void PlayerControllerWrapper::EventLaunchAccountPicker(int ControllerId) [member function]
    def EventLaunchAccountPicker(self, ControllerId: int) -> None: ...

    # bool PlayerControllerWrapper::GetbUsingGamepad() [member function]
    def GetbUsingGamepad(self) -> bool: ...

    # void PlayerControllerWrapper::SetMouseSensitivity(float NewSensitivity) [member function]
    def SetMouseSensitivity(self, NewSensitivity: float) -> None: ...

    # float PlayerControllerWrapper::GetMouseSensitivity() [member function]
    def GetMouseSensitivity(self) -> float: ...

    # void PlayerControllerWrapper::SetAForward(float aForward) [member function]
    def SetAForward(self, aForward: float) -> None: ...

    # float PlayerControllerWrapper::GetAForward() [member function]
    def GetAForward(self) -> float: ...

    # void PlayerControllerWrapper::SetATurn(float aTurn) [member function]
    def SetATurn(self, aTurn: float) -> None: ...

    # float PlayerControllerWrapper::GetATurn() [member function]
    def GetATurn(self) -> float: ...

    # void PlayerControllerWrapper::SetAStrafe(float aStrafe) [member function]
    def SetAStrafe(self, aStrafe: float) -> None: ...

    # float PlayerControllerWrapper::GetAStrafe() [member function]
    def GetAStrafe(self) -> float: ...

    # void PlayerControllerWrapper::SetAUp(float aUp) [member function]
    def SetAUp(self, aUp: float) -> None: ...

    # float PlayerControllerWrapper::GetAUp() [member function]
    def GetAUp(self) -> float: ...

    # void PlayerControllerWrapper::SetALookUp(float aLookUp) [member function]
    def SetALookUp(self, aLookUp: float) -> None: ...

    # float PlayerControllerWrapper::GetALookUp() [member function]
    def GetALookUp(self) -> float: ...

    # void PlayerControllerWrapper::SetLookRightScale(float NewScale) [member function]
    def SetLookRightScale(self, NewScale: float) -> None: ...

    # float PlayerControllerWrapper::GetLookRightScale() [member function]
    def GetLookRightScale(self) -> float: ...

    # void PlayerControllerWrapper::SetLookUpScale(float NewScale) [member function]
    def SetLookUpScale(self, NewScale: float) -> None: ...

    # float PlayerControllerWrapper::GetLookUpScale() [member function]
    def GetLookUpScale(self) -> float: ...

    # void PlayerControllerWrapper::SetGamepadLookScale(float NewScale) [member function]
    def SetGamepadLookScale(self, NewScale: float) -> None: ...

    # float PlayerControllerWrapper::GetGamepadLookScale() [member function]
    def GetGamepadLookScale(self) -> float: ...

    # void PlayerControllerWrapper::SetALookRoll(float NewLookRoll) [member function]
    def SetALookRoll(self, NewLookRoll: float) -> None: ...

    # float PlayerControllerWrapper::GetALookRoll() [member function]
    def GetALookRoll(self) -> float: ...

    # void PlayerControllerWrapper::SetbRoll(bool NewRoll) [member function]
    def SetbRoll(self, NewRoll: bool) -> None: ...

    # bool PlayerControllerWrapper::GetbRoll() [member function]
    def GetbRoll(self) -> bool: ...

    # void PlayerControllerWrapper::SetSpectatorCameraAccel(float SpectatorCameraAccel) [member function]
    def SetSpectatorCameraAccel(self, SpectatorCameraAccel: float) -> None: ...

    # float PlayerControllerWrapper::GetSpectatorCameraAccel() [member function]
    def GetSpectatorCameraAccel(self) -> float: ...

    # void PlayerControllerWrapper::SetSpectatorCameraSpeed(float SpectatorCameraSpeed) [member function]
    def SetSpectatorCameraSpeed(self, SpectatorCameraSpeed: float) -> None: ...

    # float PlayerControllerWrapper::GetSpectatorCameraSpeed() [member function]
    def GetSpectatorCameraSpeed(self) -> float: ...

    # Private:
    # PlayerControllerWrapper::Impl [class declaration]

    # PlayerControllerWrapper::pimpl [variable]
    @property
    def pimpl(self) -> Any: ...


