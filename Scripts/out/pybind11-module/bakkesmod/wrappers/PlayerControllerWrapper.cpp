void bind_PlayerControllerWrapper(pybind11::module& m)
{

	pybind11::class_<PlayerControllerWrapper, std::shared_ptr<PlayerControllerWrapper>, ActorWrapper> cl_PlayerControllerWrapper(m, "PlayerControllerWrapper");
	cl_PlayerControllerWrapper.def(pybind11::init<uintptr_t>(), pybind11::arg("mem"));
	cl_PlayerControllerWrapper.def(pybind11::init<PlayerControllerWrapper const &>(), pybind11::arg("other"));
	// cl_PlayerControllerWrapper.def(pybind11::del<>());
	cl_PlayerControllerWrapper.def("GetCar", [](PlayerControllerWrapper& cls_) { return cls_.GetCar(); });
	cl_PlayerControllerWrapper.def("SetCar", [](PlayerControllerWrapper& cls_, CarWrapper newCar) { return cls_.SetCar(newCar); }, pybind11::arg("newCar"));
	cl_PlayerControllerWrapper.def("GetPRI", [](PlayerControllerWrapper& cls_) { return cls_.GetPRI(); });
	cl_PlayerControllerWrapper.def("SetPRI", [](PlayerControllerWrapper& cls_, PriWrapper newPRI) { return cls_.SetPRI(newPRI); }, pybind11::arg("newPRI"));
	cl_PlayerControllerWrapper.def("GetVehicleInput", [](PlayerControllerWrapper& cls_) { return cls_.GetVehicleInput(); });
	cl_PlayerControllerWrapper.def("SetVehicleInput", [](PlayerControllerWrapper& cls_, ControllerInput newVehicleInput) { return cls_.SetVehicleInput(newVehicleInput); }, pybind11::arg("newVehicleInput"));
	cl_PlayerControllerWrapper.def("GetbReceivedServerShutdownMessage", [](PlayerControllerWrapper& cls_) { return cls_.GetbReceivedServerShutdownMessage(); });
	cl_PlayerControllerWrapper.def("SetbReceivedServerShutdownMessage", [](PlayerControllerWrapper& cls_, long unsigned int newbReceivedServerShutdownMessage) { return cls_.SetbReceivedServerShutdownMessage(newbReceivedServerShutdownMessage); }, pybind11::arg("newbReceivedServerShutdownMessage"));
	//cl_PlayerControllerWrapper.def("GetbPendingIdleKick", [](PlayerControllerWrapper& cls_) { return cls_.GetbPendingIdleKick(); });
	//cl_PlayerControllerWrapper.def("SetbPendingIdleKick", [](PlayerControllerWrapper& cls_, long unsigned int newbPendingIdleKick) { return cls_.SetbPendingIdleKick(newbPendingIdleKick); }, pybind11::arg("newbPendingIdleKick"));
	cl_PlayerControllerWrapper.def("GetbUseDebugInputs", [](PlayerControllerWrapper& cls_) { return cls_.GetbUseDebugInputs(); });
	cl_PlayerControllerWrapper.def("SetbUseDebugInputs", [](PlayerControllerWrapper& cls_, long unsigned int newbUseDebugInputs) { return cls_.SetbUseDebugInputs(newbUseDebugInputs); }, pybind11::arg("newbUseDebugInputs"));
	cl_PlayerControllerWrapper.def("GetbJumpPressed", [](PlayerControllerWrapper& cls_) { return cls_.GetbJumpPressed(); });
	cl_PlayerControllerWrapper.def("SetbJumpPressed", [](PlayerControllerWrapper& cls_, long unsigned int newbJumpPressed) { return cls_.SetbJumpPressed(newbJumpPressed); }, pybind11::arg("newbJumpPressed"));
	cl_PlayerControllerWrapper.def("GetbBoostPressed", [](PlayerControllerWrapper& cls_) { return cls_.GetbBoostPressed(); });
	cl_PlayerControllerWrapper.def("SetbBoostPressed", [](PlayerControllerWrapper& cls_, long unsigned int newbBoostPressed) { return cls_.SetbBoostPressed(newbBoostPressed); }, pybind11::arg("newbBoostPressed"));
	cl_PlayerControllerWrapper.def("GetbHandbrakePressed", [](PlayerControllerWrapper& cls_) { return cls_.GetbHandbrakePressed(); });
	cl_PlayerControllerWrapper.def("SetbHandbrakePressed", [](PlayerControllerWrapper& cls_, long unsigned int newbHandbrakePressed) { return cls_.SetbHandbrakePressed(newbHandbrakePressed); }, pybind11::arg("newbHandbrakePressed"));
	cl_PlayerControllerWrapper.def("GetbHasPitchedBack", [](PlayerControllerWrapper& cls_) { return cls_.GetbHasPitchedBack(); });
	cl_PlayerControllerWrapper.def("SetbHasPitchedBack", [](PlayerControllerWrapper& cls_, long unsigned int newbHasPitchedBack) { return cls_.SetbHasPitchedBack(newbHasPitchedBack); }, pybind11::arg("newbHasPitchedBack"));
	cl_PlayerControllerWrapper.def("GetbAllowAsymmetricalMute", [](PlayerControllerWrapper& cls_) { return cls_.GetbAllowAsymmetricalMute(); });
	cl_PlayerControllerWrapper.def("SetbAllowAsymmetricalMute", [](PlayerControllerWrapper& cls_, long unsigned int newbAllowAsymmetricalMute) { return cls_.SetbAllowAsymmetricalMute(newbAllowAsymmetricalMute); }, pybind11::arg("newbAllowAsymmetricalMute"));
	cl_PlayerControllerWrapper.def("GetbResetCamera", [](PlayerControllerWrapper& cls_) { return cls_.GetbResetCamera(); });
	cl_PlayerControllerWrapper.def("SetbResetCamera", [](PlayerControllerWrapper& cls_, long unsigned int newbResetCamera) { return cls_.SetbResetCamera(newbResetCamera); }, pybind11::arg("newbResetCamera"));
	cl_PlayerControllerWrapper.def("GetLoginURL", [](PlayerControllerWrapper& cls_) { return cls_.GetLoginURL(); });
	cl_PlayerControllerWrapper.def("GetVoiceFilter", [](PlayerControllerWrapper& cls_) { return cls_.GetVoiceFilter(); });
	cl_PlayerControllerWrapper.def("SetVoiceFilter", [](PlayerControllerWrapper& cls_, unsigned char newVoiceFilter) { return cls_.SetVoiceFilter(newVoiceFilter); }, pybind11::arg("newVoiceFilter"));
	cl_PlayerControllerWrapper.def("GetChatFilter", [](PlayerControllerWrapper& cls_) { return cls_.GetChatFilter(); });
	cl_PlayerControllerWrapper.def("SetChatFilter", [](PlayerControllerWrapper& cls_, unsigned char newChatFilter) { return cls_.SetChatFilter(newChatFilter); }, pybind11::arg("newChatFilter"));
	cl_PlayerControllerWrapper.def("GetFollowTarget", [](PlayerControllerWrapper& cls_) { return cls_.GetFollowTarget(); });
	cl_PlayerControllerWrapper.def("SetFollowTarget", [](PlayerControllerWrapper& cls_, PriWrapper newFollowTarget) { return cls_.SetFollowTarget(newFollowTarget); }, pybind11::arg("newFollowTarget"));
	cl_PlayerControllerWrapper.def("GetSpectatorCameraArchetype", [](PlayerControllerWrapper& cls_) { return cls_.GetSpectatorCameraArchetype(); });
	cl_PlayerControllerWrapper.def("SetSpectatorCameraArchetype", [](PlayerControllerWrapper& cls_, BaseCameraWrapper newSpectatorCameraArchetype) { return cls_.SetSpectatorCameraArchetype(newSpectatorCameraArchetype); }, pybind11::arg("newSpectatorCameraArchetype"));
	cl_PlayerControllerWrapper.def("GetEditorCameraArchetype", [](PlayerControllerWrapper& cls_) { return cls_.GetEditorCameraArchetype(); });
	cl_PlayerControllerWrapper.def("SetEditorCameraArchetype", [](PlayerControllerWrapper& cls_, BaseCameraWrapper newEditorCameraArchetype) { return cls_.SetEditorCameraArchetype(newEditorCameraArchetype); }, pybind11::arg("newEditorCameraArchetype"));
	cl_PlayerControllerWrapper.def("GetMoveActorGrabOffset", [](PlayerControllerWrapper& cls_) { return cls_.GetMoveActorGrabOffset(); });
	cl_PlayerControllerWrapper.def("SetMoveActorGrabOffset", [](PlayerControllerWrapper& cls_, Vector newMoveActorGrabOffset) { return cls_.SetMoveActorGrabOffset(newMoveActorGrabOffset); }, pybind11::arg("newMoveActorGrabOffset"));
	cl_PlayerControllerWrapper.def("GetMoveActorGrabIncrement", [](PlayerControllerWrapper& cls_) { return cls_.GetMoveActorGrabIncrement(); });
	cl_PlayerControllerWrapper.def("SetMoveActorGrabIncrement", [](PlayerControllerWrapper& cls_, float newMoveActorGrabIncrement) { return cls_.SetMoveActorGrabIncrement(newMoveActorGrabIncrement); }, pybind11::arg("newMoveActorGrabIncrement"));
	cl_PlayerControllerWrapper.def("GetMinMoveActorGrabDistance", [](PlayerControllerWrapper& cls_) { return cls_.GetMinMoveActorGrabDistance(); });
	cl_PlayerControllerWrapper.def("SetMinMoveActorGrabDistance", [](PlayerControllerWrapper& cls_, float newMinMoveActorGrabDistance) { return cls_.SetMinMoveActorGrabDistance(newMinMoveActorGrabDistance); }, pybind11::arg("newMinMoveActorGrabDistance"));
	cl_PlayerControllerWrapper.def("GetMouseIncrementSpeed", [](PlayerControllerWrapper& cls_) { return cls_.GetMouseIncrementSpeed(); });
	cl_PlayerControllerWrapper.def("SetMouseIncrementSpeed", [](PlayerControllerWrapper& cls_, float newMouseIncrementSpeed) { return cls_.SetMouseIncrementSpeed(newMouseIncrementSpeed); }, pybind11::arg("newMouseIncrementSpeed"));
	cl_PlayerControllerWrapper.def("GetBallVelocityIncrementAmount", [](PlayerControllerWrapper& cls_) { return cls_.GetBallVelocityIncrementAmount(); });
	cl_PlayerControllerWrapper.def("SetBallVelocityIncrementAmount", [](PlayerControllerWrapper& cls_, float newBallVelocityIncrementAmount) { return cls_.SetBallVelocityIncrementAmount(newBallVelocityIncrementAmount); }, pybind11::arg("newBallVelocityIncrementAmount"));
	cl_PlayerControllerWrapper.def("GetBallVelocityIncrementFireCount", [](PlayerControllerWrapper& cls_) { return cls_.GetBallVelocityIncrementFireCount(); });
	cl_PlayerControllerWrapper.def("SetBallVelocityIncrementFireCount", [](PlayerControllerWrapper& cls_, int newBallVelocityIncrementFireCount) { return cls_.SetBallVelocityIncrementFireCount(newBallVelocityIncrementFireCount); }, pybind11::arg("newBallVelocityIncrementFireCount"));
	cl_PlayerControllerWrapper.def("GetBallVelocityIncrementFireCountMax", [](PlayerControllerWrapper& cls_) { return cls_.GetBallVelocityIncrementFireCountMax(); });
	cl_PlayerControllerWrapper.def("SetBallVelocityIncrementFireCountMax", [](PlayerControllerWrapper& cls_, float newBallVelocityIncrementFireCountMax) { return cls_.SetBallVelocityIncrementFireCountMax(newBallVelocityIncrementFireCountMax); }, pybind11::arg("newBallVelocityIncrementFireCountMax"));
	cl_PlayerControllerWrapper.def("GetBallVelocityIncrementSpeedDefault", [](PlayerControllerWrapper& cls_) { return cls_.GetBallVelocityIncrementSpeedDefault(); });
	cl_PlayerControllerWrapper.def("SetBallVelocityIncrementSpeedDefault", [](PlayerControllerWrapper& cls_, float newBallVelocityIncrementSpeedDefault) { return cls_.SetBallVelocityIncrementSpeedDefault(newBallVelocityIncrementSpeedDefault); }, pybind11::arg("newBallVelocityIncrementSpeedDefault"));
	cl_PlayerControllerWrapper.def("GetBallVelocityIncrementSpeedMax", [](PlayerControllerWrapper& cls_) { return cls_.GetBallVelocityIncrementSpeedMax(); });
	cl_PlayerControllerWrapper.def("SetBallVelocityIncrementSpeedMax", [](PlayerControllerWrapper& cls_, float newBallVelocityIncrementSpeedMax) { return cls_.SetBallVelocityIncrementSpeedMax(newBallVelocityIncrementSpeedMax); }, pybind11::arg("newBallVelocityIncrementSpeedMax"));
	cl_PlayerControllerWrapper.def("GetCrosshairTraceDistance", [](PlayerControllerWrapper& cls_) { return cls_.GetCrosshairTraceDistance(); });
	cl_PlayerControllerWrapper.def("SetCrosshairTraceDistance", [](PlayerControllerWrapper& cls_, float newCrosshairTraceDistance) { return cls_.SetCrosshairTraceDistance(newCrosshairTraceDistance); }, pybind11::arg("newCrosshairTraceDistance"));
	cl_PlayerControllerWrapper.def("GetTracedCrosshairActor", [](PlayerControllerWrapper& cls_) { return cls_.GetTracedCrosshairActor(); });
	cl_PlayerControllerWrapper.def("SetTracedCrosshairActor", [](PlayerControllerWrapper& cls_, ActorWrapper newTracedCrosshairActor) { return cls_.SetTracedCrosshairActor(newTracedCrosshairActor); }, pybind11::arg("newTracedCrosshairActor"));
	cl_PlayerControllerWrapper.def("GetRotateActorCameraLocationOffset", [](PlayerControllerWrapper& cls_) { return cls_.GetRotateActorCameraLocationOffset(); });
	cl_PlayerControllerWrapper.def("SetRotateActorCameraLocationOffset", [](PlayerControllerWrapper& cls_, Vector newRotateActorCameraLocationOffset) { return cls_.SetRotateActorCameraLocationOffset(newRotateActorCameraLocationOffset); }, pybind11::arg("newRotateActorCameraLocationOffset"));
	cl_PlayerControllerWrapper.def("GetRotateActorCameraRotationOffset", [](PlayerControllerWrapper& cls_) { return cls_.GetRotateActorCameraRotationOffset(); });
	cl_PlayerControllerWrapper.def("SetRotateActorCameraRotationOffset", [](PlayerControllerWrapper& cls_, Vector newRotateActorCameraRotationOffset) { return cls_.SetRotateActorCameraRotationOffset(newRotateActorCameraRotationOffset); }, pybind11::arg("newRotateActorCameraRotationOffset"));
	cl_PlayerControllerWrapper.def("GetRotateActorCameraSide", [](PlayerControllerWrapper& cls_) { return cls_.GetRotateActorCameraSide(); });
	cl_PlayerControllerWrapper.def("SetRotateActorCameraSide", [](PlayerControllerWrapper& cls_, int newRotateActorCameraSide) { return cls_.SetRotateActorCameraSide(newRotateActorCameraSide); }, pybind11::arg("newRotateActorCameraSide"));
	cl_PlayerControllerWrapper.def("GetDesiredCameraSide", [](PlayerControllerWrapper& cls_) { return cls_.GetDesiredCameraSide(); });
	cl_PlayerControllerWrapper.def("SetDesiredCameraSide", [](PlayerControllerWrapper& cls_, float newDesiredCameraSide) { return cls_.SetDesiredCameraSide(newDesiredCameraSide); }, pybind11::arg("newDesiredCameraSide"));
	cl_PlayerControllerWrapper.def("GetPawnTypeChangedTime", [](PlayerControllerWrapper& cls_) { return cls_.GetPawnTypeChangedTime(); });
	cl_PlayerControllerWrapper.def("SetPawnTypeChangedTime", [](PlayerControllerWrapper& cls_, float newPawnTypeChangedTime) { return cls_.SetPawnTypeChangedTime(newPawnTypeChangedTime); }, pybind11::arg("newPawnTypeChangedTime"));
	cl_PlayerControllerWrapper.def("GetSelectedSpawnArchetype", [](PlayerControllerWrapper& cls_) { return cls_.GetSelectedSpawnArchetype(); });
	cl_PlayerControllerWrapper.def("SetSelectedSpawnArchetype", [](PlayerControllerWrapper& cls_, int newSelectedSpawnArchetype) { return cls_.SetSelectedSpawnArchetype(newSelectedSpawnArchetype); }, pybind11::arg("newSelectedSpawnArchetype"));
	cl_PlayerControllerWrapper.def("GetDebugInputs", [](PlayerControllerWrapper& cls_) { return cls_.GetDebugInputs(); });
	cl_PlayerControllerWrapper.def("SetDebugInputs", [](PlayerControllerWrapper& cls_, ControllerInput newDebugInputs) { return cls_.SetDebugInputs(newDebugInputs); }, pybind11::arg("newDebugInputs"));
	cl_PlayerControllerWrapper.def("GetMinClientInputRate", [](PlayerControllerWrapper& cls_) { return cls_.GetMinClientInputRate(); });
	cl_PlayerControllerWrapper.def("SetMinClientInputRate", [](PlayerControllerWrapper& cls_, int newMinClientInputRate) { return cls_.SetMinClientInputRate(newMinClientInputRate); }, pybind11::arg("newMinClientInputRate"));
	cl_PlayerControllerWrapper.def("GetMedianClientInputRate", [](PlayerControllerWrapper& cls_) { return cls_.GetMedianClientInputRate(); });
	cl_PlayerControllerWrapper.def("SetMedianClientInputRate", [](PlayerControllerWrapper& cls_, int newMedianClientInputRate) { return cls_.SetMedianClientInputRate(newMedianClientInputRate); }, pybind11::arg("newMedianClientInputRate"));
	cl_PlayerControllerWrapper.def("GetMaxClientInputRate", [](PlayerControllerWrapper& cls_) { return cls_.GetMaxClientInputRate(); });
	cl_PlayerControllerWrapper.def("SetMaxClientInputRate", [](PlayerControllerWrapper& cls_, int newMaxClientInputRate) { return cls_.SetMaxClientInputRate(newMaxClientInputRate); }, pybind11::arg("newMaxClientInputRate"));
	cl_PlayerControllerWrapper.def("GetConfiguredClientInputRate", [](PlayerControllerWrapper& cls_) { return cls_.GetConfiguredClientInputRate(); });
	cl_PlayerControllerWrapper.def("SetConfiguredClientInputRate", [](PlayerControllerWrapper& cls_, int newConfiguredClientInputRate) { return cls_.SetConfiguredClientInputRate(newConfiguredClientInputRate); }, pybind11::arg("newConfiguredClientInputRate"));
	cl_PlayerControllerWrapper.def("GetTimeSinceLastMovePacket", [](PlayerControllerWrapper& cls_) { return cls_.GetTimeSinceLastMovePacket(); });
	cl_PlayerControllerWrapper.def("SetTimeSinceLastMovePacket", [](PlayerControllerWrapper& cls_, float newTimeSinceLastMovePacket) { return cls_.SetTimeSinceLastMovePacket(newTimeSinceLastMovePacket); }, pybind11::arg("newTimeSinceLastMovePacket"));
	cl_PlayerControllerWrapper.def("GetTimeLastReplicatedMovePacket", [](PlayerControllerWrapper& cls_) { return cls_.GetTimeLastReplicatedMovePacket(); });
	cl_PlayerControllerWrapper.def("SetTimeLastReplicatedMovePacket", [](PlayerControllerWrapper& cls_, float newTimeLastReplicatedMovePacket) { return cls_.SetTimeLastReplicatedMovePacket(newTimeLastReplicatedMovePacket); }, pybind11::arg("newTimeLastReplicatedMovePacket"));
	cl_PlayerControllerWrapper.def("GetMouseXDeadZone", [](PlayerControllerWrapper& cls_) { return cls_.GetMouseXDeadZone(); });
	cl_PlayerControllerWrapper.def("SetMouseXDeadZone", [](PlayerControllerWrapper& cls_, float newMouseXDeadZone) { return cls_.SetMouseXDeadZone(newMouseXDeadZone); }, pybind11::arg("newMouseXDeadZone"));
	cl_PlayerControllerWrapper.def("GetMouseYDeadZone", [](PlayerControllerWrapper& cls_) { return cls_.GetMouseYDeadZone(); });
	cl_PlayerControllerWrapper.def("SetMouseYDeadZone", [](PlayerControllerWrapper& cls_, float newMouseYDeadZone) { return cls_.SetMouseYDeadZone(newMouseYDeadZone); }, pybind11::arg("newMouseYDeadZone"));
	cl_PlayerControllerWrapper.def("GetMouseXDeadZoneAir", [](PlayerControllerWrapper& cls_) { return cls_.GetMouseXDeadZoneAir(); });
	cl_PlayerControllerWrapper.def("SetMouseXDeadZoneAir", [](PlayerControllerWrapper& cls_, float newMouseXDeadZoneAir) { return cls_.SetMouseXDeadZoneAir(newMouseXDeadZoneAir); }, pybind11::arg("newMouseXDeadZoneAir"));
	cl_PlayerControllerWrapper.def("GetMouseYDeadZoneAir", [](PlayerControllerWrapper& cls_) { return cls_.GetMouseYDeadZoneAir(); });
	cl_PlayerControllerWrapper.def("SetMouseYDeadZoneAir", [](PlayerControllerWrapper& cls_, float newMouseYDeadZoneAir) { return cls_.SetMouseYDeadZoneAir(newMouseYDeadZoneAir); }, pybind11::arg("newMouseYDeadZoneAir"));
	cl_PlayerControllerWrapper.def("GetLastInputs", [](PlayerControllerWrapper& cls_) { return cls_.GetLastInputs(); });
	cl_PlayerControllerWrapper.def("SetLastInputs", [](PlayerControllerWrapper& cls_, ControllerInput newLastInputs) { return cls_.SetLastInputs(newLastInputs); }, pybind11::arg("newLastInputs"));
	cl_PlayerControllerWrapper.def("GetPendingViewPRI", [](PlayerControllerWrapper& cls_) { return cls_.GetPendingViewPRI(); });
	cl_PlayerControllerWrapper.def("SetPendingViewPRI", [](PlayerControllerWrapper& cls_, PriWrapper newPendingViewPRI) { return cls_.SetPendingViewPRI(newPendingViewPRI); }, pybind11::arg("newPendingViewPRI"));
	cl_PlayerControllerWrapper.def("GetLastInputPitchUp", [](PlayerControllerWrapper& cls_) { return cls_.GetLastInputPitchUp(); });
	cl_PlayerControllerWrapper.def("SetLastInputPitchUp", [](PlayerControllerWrapper& cls_, float newLastInputPitchUp) { return cls_.SetLastInputPitchUp(newLastInputPitchUp); }, pybind11::arg("newLastInputPitchUp"));
	cl_PlayerControllerWrapper.def("GetLastInputPitchDown", [](PlayerControllerWrapper& cls_) { return cls_.GetLastInputPitchDown(); });
	cl_PlayerControllerWrapper.def("SetLastInputPitchDown", [](PlayerControllerWrapper& cls_, float newLastInputPitchDown) { return cls_.SetLastInputPitchDown(newLastInputPitchDown); }, pybind11::arg("newLastInputPitchDown"));
	cl_PlayerControllerWrapper.def("GetLastInputYawLeft", [](PlayerControllerWrapper& cls_) { return cls_.GetLastInputYawLeft(); });
	cl_PlayerControllerWrapper.def("SetLastInputYawLeft", [](PlayerControllerWrapper& cls_, float newLastInputYawLeft) { return cls_.SetLastInputYawLeft(newLastInputYawLeft); }, pybind11::arg("newLastInputYawLeft"));
	cl_PlayerControllerWrapper.def("GetLastInputYawRight", [](PlayerControllerWrapper& cls_) { return cls_.GetLastInputYawRight(); });
	cl_PlayerControllerWrapper.def("SetLastInputYawRight", [](PlayerControllerWrapper& cls_, float newLastInputYawRight) { return cls_.SetLastInputYawRight(newLastInputYawRight); }, pybind11::arg("newLastInputYawRight"));
	cl_PlayerControllerWrapper.def("GetLastInputPitch", [](PlayerControllerWrapper& cls_) { return cls_.GetLastInputPitch(); });
	cl_PlayerControllerWrapper.def("SetLastInputPitch", [](PlayerControllerWrapper& cls_, float newLastInputPitch) { return cls_.SetLastInputPitch(newLastInputPitch); }, pybind11::arg("newLastInputPitch"));
	cl_PlayerControllerWrapper.def("GetLastInputYaw", [](PlayerControllerWrapper& cls_) { return cls_.GetLastInputYaw(); });
	cl_PlayerControllerWrapper.def("SetLastInputYaw", [](PlayerControllerWrapper& cls_, float newLastInputYaw) { return cls_.SetLastInputYaw(newLastInputYaw); }, pybind11::arg("newLastInputYaw"));
	cl_PlayerControllerWrapper.def("GetMouseInputMax", [](PlayerControllerWrapper& cls_) { return cls_.GetMouseInputMax(); });
	cl_PlayerControllerWrapper.def("SetMouseInputMax", [](PlayerControllerWrapper& cls_, float newMouseInputMax) { return cls_.SetMouseInputMax(newMouseInputMax); }, pybind11::arg("newMouseInputMax"));
	cl_PlayerControllerWrapper.def("GetEngineShare", [](PlayerControllerWrapper& cls_) { return cls_.GetEngineShare(); });
	cl_PlayerControllerWrapper.def("SetEngineShare", [](PlayerControllerWrapper& cls_, EngineTAWrapper newEngineShare) { return cls_.SetEngineShare(newEngineShare); }, pybind11::arg("newEngineShare"));
	cl_PlayerControllerWrapper.def("HandleCarSet", [](PlayerControllerWrapper& cls_, PriWrapper InPRI) { return cls_.HandleCarSet(InPRI); }, pybind11::arg("InPRI"));
	cl_PlayerControllerWrapper.def("SpawnSelectedArchetype", [](PlayerControllerWrapper& cls_) { return cls_.SpawnSelectedArchetype(); });
	cl_PlayerControllerWrapper.def("RemoveActor", [](PlayerControllerWrapper& cls_) { return cls_.RemoveActor(); });
	cl_PlayerControllerWrapper.def("ToggleGrabActor", [](PlayerControllerWrapper& cls_) { return cls_.ToggleGrabActor(); });
	cl_PlayerControllerWrapper.def("ToggleRotateActor", [](PlayerControllerWrapper& cls_) { return cls_.ToggleRotateActor(); });
	cl_PlayerControllerWrapper.def("EditorReleaseActor", [](PlayerControllerWrapper& cls_) { return cls_.EditorReleaseActor(); });
	cl_PlayerControllerWrapper.def("EditorCycleActor", [](PlayerControllerWrapper& cls_) { return cls_.EditorCycleActor(); });
	cl_PlayerControllerWrapper.def("DuplicateShot", [](PlayerControllerWrapper& cls_) { return cls_.DuplicateShot(); });
	cl_PlayerControllerWrapper.def("StopEditing", [](PlayerControllerWrapper& cls_) { return cls_.StopEditing(); });
	cl_PlayerControllerWrapper.def("EditorIncreasePower", [](PlayerControllerWrapper& cls_) { return cls_.EditorIncreasePower(); });
	cl_PlayerControllerWrapper.def("EditorDecreasePower", [](PlayerControllerWrapper& cls_) { return cls_.EditorDecreasePower(); });
	cl_PlayerControllerWrapper.def("EditorIncreasePowerToggleInterim", [](PlayerControllerWrapper& cls_) { return cls_.EditorIncreasePowerToggleInterim(); });
	cl_PlayerControllerWrapper.def("EditorDecreasePowerToggleInterim", [](PlayerControllerWrapper& cls_) { return cls_.EditorDecreasePowerToggleInterim(); });
	cl_PlayerControllerWrapper.def("EditorIncreasePowerToggle2", [](PlayerControllerWrapper& cls_, long unsigned int bToggle) { return cls_.EditorIncreasePowerToggle2(bToggle); }, pybind11::arg("bToggle"));
	cl_PlayerControllerWrapper.def("EditorDecreasePowerToggle2", [](PlayerControllerWrapper& cls_, long unsigned int bToggle) { return cls_.EditorDecreasePowerToggle2(bToggle); }, pybind11::arg("bToggle"));
	cl_PlayerControllerWrapper.def("ModifyEditorPower", [](PlayerControllerWrapper& cls_, int Direction) { return cls_.ModifyEditorPower(Direction); }, pybind11::arg("Direction"));
	cl_PlayerControllerWrapper.def("ToggleCameraPosition", [](PlayerControllerWrapper& cls_) { return cls_.ToggleCameraPosition(); });
	cl_PlayerControllerWrapper.def("EditorUndo", [](PlayerControllerWrapper& cls_) { return cls_.EditorUndo(); });
	cl_PlayerControllerWrapper.def("EditorRedo", [](PlayerControllerWrapper& cls_) { return cls_.EditorRedo(); });
	cl_PlayerControllerWrapper.def("EditorIncreaseRoundTime", [](PlayerControllerWrapper& cls_) { return cls_.EditorIncreaseRoundTime(); });
	cl_PlayerControllerWrapper.def("EditorDecreaseRoundTime", [](PlayerControllerWrapper& cls_) { return cls_.EditorDecreaseRoundTime(); });
	cl_PlayerControllerWrapper.def("EditorNextRound", [](PlayerControllerWrapper& cls_) { return cls_.EditorNextRound(); });
	cl_PlayerControllerWrapper.def("EditorPrevRound", [](PlayerControllerWrapper& cls_) { return cls_.EditorPrevRound(); });
	cl_PlayerControllerWrapper.def("UpdateCrosshair", [](PlayerControllerWrapper& cls_) { return cls_.UpdateCrosshair(); });
	cl_PlayerControllerWrapper.def("NetClientInputRate", [](PlayerControllerWrapper& cls_, int Rate) { return cls_.NetClientInputRate(Rate); }, pybind11::arg("Rate"));
	cl_PlayerControllerWrapper.def("ServerCreateMatchBroadcast", [](PlayerControllerWrapper& cls_, ServerWrapper GameEvent) { return cls_.ServerCreateMatchBroadcast(GameEvent); }, pybind11::arg("GameEvent"));
	cl_PlayerControllerWrapper.def("ClampMoveActorGrabOffset", [](PlayerControllerWrapper& cls_) { return cls_.ClampMoveActorGrabOffset(); });
	cl_PlayerControllerWrapper.def("RevertToDefaultCameraHUDInput", [](PlayerControllerWrapper& cls_) { return cls_.RevertToDefaultCameraHUDInput(); });
	cl_PlayerControllerWrapper.def("SwitchToEditPawn", [](PlayerControllerWrapper& cls_) { return cls_.SwitchToEditPawn(); });
	cl_PlayerControllerWrapper.def("ServerResetPlayer", [](PlayerControllerWrapper& cls_, long unsigned int bFullReset) { return cls_.ServerResetPlayer(bFullReset); }, pybind11::arg("bFullReset"));
	cl_PlayerControllerWrapper.def("ResetPlayerRun", [](PlayerControllerWrapper& cls_) { return cls_.ResetPlayerRun(); });
	cl_PlayerControllerWrapper.def("ResetPlayerCheckpoint", [](PlayerControllerWrapper& cls_) { return cls_.ResetPlayerCheckpoint(); });
	cl_PlayerControllerWrapper.def("ToggleEditorRound", [](PlayerControllerWrapper& cls_) { return cls_.ToggleEditorRound(); });
	cl_PlayerControllerWrapper.def("ToggleBetweenCarAndEditPawn", [](PlayerControllerWrapper& cls_) { return cls_.ToggleBetweenCarAndEditPawn(); });
	cl_PlayerControllerWrapper.def("Interact", [](PlayerControllerWrapper& cls_) { return cls_.Interact(); });
	cl_PlayerControllerWrapper.def("StopMovement", [](PlayerControllerWrapper& cls_, long unsigned int bOnlyIfNoAccel) { return cls_.StopMovement(bOnlyIfNoAccel); }, pybind11::arg("bOnlyIfNoAccel"));
	cl_PlayerControllerWrapper.def("GetRotateActorCameraOffset", [](PlayerControllerWrapper& cls_, float DeltaTime, long unsigned int bSnap) { return cls_.GetRotateActorCameraOffset(DeltaTime, bSnap); }, pybind11::arg("DeltaTime"), pybind11::arg("bSnap"));
	cl_PlayerControllerWrapper.def("RestoreEditorPawnOrientation", [](PlayerControllerWrapper& cls_) { return cls_.RestoreEditorPawnOrientation(); });
	cl_PlayerControllerWrapper.def("BackupEditorPawnOrientation", [](PlayerControllerWrapper& cls_) { return cls_.BackupEditorPawnOrientation(); });
	cl_PlayerControllerWrapper.def("UpdateRotatedActorOrientation", [](PlayerControllerWrapper& cls_, float DeltaTime) { return cls_.UpdateRotatedActorOrientation(DeltaTime); }, pybind11::arg("DeltaTime"));
	cl_PlayerControllerWrapper.def("OnOpenPauseMenu", [](PlayerControllerWrapper& cls_) { return cls_.OnOpenPauseMenu(); });
	cl_PlayerControllerWrapper.def("ResetMouseCenter", [](PlayerControllerWrapper& cls_) { return cls_.ResetMouseCenter(); });
	cl_PlayerControllerWrapper.def("CalculateMouseAxis", [](PlayerControllerWrapper& cls_, float Center, float CurrentLocation, float Deadzone, float MaxDist) { return cls_.CalculateMouseAxis(Center, CurrentLocation, Deadzone, MaxDist); }, pybind11::arg("Center"), pybind11::arg("CurrentLocation"), pybind11::arg("Deadzone"), pybind11::arg("MaxDist"));
	cl_PlayerControllerWrapper.def("ShowControllerApplet", [](PlayerControllerWrapper& cls_) { return cls_.ShowControllerApplet(); });
	cl_PlayerControllerWrapper.def("ShowAccountPicker", [](PlayerControllerWrapper& cls_) { return cls_.ShowAccountPicker(); });
	cl_PlayerControllerWrapper.def("QueSaveReplay", [](PlayerControllerWrapper& cls_) { return cls_.QueSaveReplay(); });
	cl_PlayerControllerWrapper.def("SetFollowTarget2", [](PlayerControllerWrapper& cls_, PriWrapper InTarget) { return cls_.SetFollowTarget2(InTarget); }, pybind11::arg("InTarget"));
	cl_PlayerControllerWrapper.def("FollowPlayer", [](PlayerControllerWrapper& cls_, PriWrapper InPlayer) { return cls_.FollowPlayer(InPlayer); }, pybind11::arg("InPlayer"));
	//cl_PlayerControllerWrapper.def("OnPendingIdleKickChanged", [](PlayerControllerWrapper& cls_) { return cls_.OnPendingIdleKickChanged(); });
	//cl_PlayerControllerWrapper.def("SetPendingIdleKick", [](PlayerControllerWrapper& cls_, long unsigned int bPending) { return cls_.SetPendingIdleKick(bPending); }, pybind11::arg("bPending"));
	cl_PlayerControllerWrapper.def("ClientSplitscreenJoinResponse", [](PlayerControllerWrapper& cls_, SteamID & PlayerID, long unsigned int bAllow, std::string Error) { return cls_.ClientSplitscreenJoinResponse(PlayerID, bAllow, Error); }, pybind11::arg("PlayerID"), pybind11::arg("bAllow"), pybind11::arg("Error"));
	cl_PlayerControllerWrapper.def("ServerRequestSplitscreenJoin", [](PlayerControllerWrapper& cls_, SteamID & PlayerID, std::string PlayerName) { return cls_.ServerRequestSplitscreenJoin(PlayerID, PlayerName); }, pybind11::arg("PlayerID"), pybind11::arg("PlayerName"));
	cl_PlayerControllerWrapper.def("eventPreClientTravel", [](PlayerControllerWrapper& cls_, std::string PendingURL, unsigned char TravelType, long unsigned int bIsSeamlessTravel) { return cls_.eventPreClientTravel(PendingURL, TravelType, bIsSeamlessTravel); }, pybind11::arg("PendingURL"), pybind11::arg("TravelType"), pybind11::arg("bIsSeamlessTravel"));
	//cl_PlayerControllerWrapper.def("KickTrialPlayer", [](PlayerControllerWrapper& cls_) { return cls_.KickTrialPlayer(); });
	cl_PlayerControllerWrapper.def("NotifyGoalScored", [](PlayerControllerWrapper& cls_, int ScoredOnTeam) { return cls_.NotifyGoalScored(ScoredOnTeam); }, pybind11::arg("ScoredOnTeam"));
	cl_PlayerControllerWrapper.def("eventDestroyed", [](PlayerControllerWrapper& cls_) { return cls_.eventDestroyed(); });
	cl_PlayerControllerWrapper.def("ShouldBeMuted", [](PlayerControllerWrapper& cls_, PlayerControllerWrapper Other) { return cls_.ShouldBeMuted(Other); }, pybind11::arg("Other"));
	cl_PlayerControllerWrapper.def("IsCommunicationFiltered", [](PlayerControllerWrapper& cls_, unsigned char Filter, PlayerControllerWrapper Other, long unsigned int bPreset) { return cls_.IsCommunicationFiltered(Filter, Other, bPreset); }, pybind11::arg("Filter"), pybind11::arg("Other"), pybind11::arg("bPreset"));
	cl_PlayerControllerWrapper.def("RefreshMutedPlayers", [](PlayerControllerWrapper& cls_, long unsigned int bForceRefresh) { return cls_.RefreshMutedPlayers(bForceRefresh); }, pybind11::arg("bForceRefresh"));
	cl_PlayerControllerWrapper.def("eventServerUnmutePlayer", [](PlayerControllerWrapper& cls_, SteamID & PlayerNetId) { return cls_.eventServerUnmutePlayer(PlayerNetId); }, pybind11::arg("PlayerNetId"));
	cl_PlayerControllerWrapper.def("eventServerMutePlayer", [](PlayerControllerWrapper& cls_, SteamID & PlayerNetId) { return cls_.eventServerMutePlayer(PlayerNetId); }, pybind11::arg("PlayerNetId"));
	cl_PlayerControllerWrapper.def("GameplayUnmutePlayer", [](PlayerControllerWrapper& cls_, SteamID & PlayerNetId) { return cls_.GameplayUnmutePlayer(PlayerNetId); }, pybind11::arg("PlayerNetId"));
	cl_PlayerControllerWrapper.def("GameplayMutePlayer", [](PlayerControllerWrapper& cls_, SteamID & PlayerNetId) { return cls_.GameplayMutePlayer(PlayerNetId); }, pybind11::arg("PlayerNetId"));
	cl_PlayerControllerWrapper.def("ServerSetChatFilter", [](PlayerControllerWrapper& cls_, unsigned char InVoiceFilter) { return cls_.ServerSetChatFilter(InVoiceFilter); }, pybind11::arg("InVoiceFilter"));
	cl_PlayerControllerWrapper.def("ServerSetVoiceFilter", [](PlayerControllerWrapper& cls_, unsigned char InVoiceFilter) { return cls_.ServerSetVoiceFilter(InVoiceFilter); }, pybind11::arg("InVoiceFilter"));
	cl_PlayerControllerWrapper.def("IsExplictlyMuted", [](PlayerControllerWrapper& cls_, SteamID & PlayerNetId) { return cls_.IsExplictlyMuted(PlayerNetId); }, pybind11::arg("PlayerNetId"));
	cl_PlayerControllerWrapper.def("DebugAI", [](PlayerControllerWrapper& cls_) { return cls_.DebugAI(); });
	cl_PlayerControllerWrapper.def("SendPendingRPCs", [](PlayerControllerWrapper& cls_) { return cls_.SendPendingRPCs(); });
	cl_PlayerControllerWrapper.def("CanSendMessage", [](PlayerControllerWrapper& cls_, long unsigned int bQuickChatMessage) { return cls_.CanSendMessage(bQuickChatMessage); }, pybind11::arg("bQuickChatMessage"));
	//cl_PlayerControllerWrapper.def("RemoveChatBan", [](PlayerControllerWrapper& cls_) { return cls_.RemoveChatBan(); });
	//cl_PlayerControllerWrapper.def("ApplyChatBan", [](PlayerControllerWrapper& cls_, long long unsigned int Expiration) { return cls_.ApplyChatBan(Expiration); }, pybind11::arg("Expiration"));
	cl_PlayerControllerWrapper.def("ClientNotifyChatBanned", [](PlayerControllerWrapper& cls_, long long unsigned int ChatBanExpiration) { return cls_.ClientNotifyChatBanned(ChatBanExpiration); }, pybind11::arg("ChatBanExpiration"));
	cl_PlayerControllerWrapper.def("ClientNotifyChatDisabled", [](PlayerControllerWrapper& cls_, float Time) { return cls_.ClientNotifyChatDisabled(Time); }, pybind11::arg("Time"));
	cl_PlayerControllerWrapper.def("ChatMessage_TA", [](PlayerControllerWrapper& cls_, PlayerReplicationInfoWrapper InPRI, std::string Message, unsigned char ChatChannel, long unsigned int bPreset) { return cls_.ChatMessage_TA(InPRI, Message, ChatChannel, bPreset); }, pybind11::arg("InPRI"), pybind11::arg("Message"), pybind11::arg("ChatChannel"), pybind11::arg("bPreset"));
	cl_PlayerControllerWrapper.def("ServerSayInternal_TA", [](PlayerControllerWrapper& cls_, std::string Message, unsigned char ChatChannel, long unsigned int bPreset) { return cls_.ServerSayInternal_TA(Message, ChatChannel, bPreset); }, pybind11::arg("Message"), pybind11::arg("ChatChannel"), pybind11::arg("bPreset"));
	cl_PlayerControllerWrapper.def("ServerSay_TA", [](PlayerControllerWrapper& cls_, std::string Message, unsigned char ChatChannel, long unsigned int bPreset) { return cls_.ServerSay_TA(Message, ChatChannel, bPreset); }, pybind11::arg("Message"), pybind11::arg("ChatChannel"), pybind11::arg("bPreset"));
	cl_PlayerControllerWrapper.def("Say_TA2", [](PlayerControllerWrapper& cls_, std::string Message, unsigned char ChatChannel, SteamID & Recipient, long unsigned int bPreset) { return cls_.Say_TA2(Message, ChatChannel, Recipient, bPreset); }, pybind11::arg("Message"), pybind11::arg("ChatChannel"), pybind11::arg("Recipient"), pybind11::arg("bPreset"));
	cl_PlayerControllerWrapper.def("CanChatWith", [](PlayerControllerWrapper& cls_, PlayerControllerWrapper Other, long unsigned int bPreset) { return cls_.CanChatWith(Other, bPreset); }, pybind11::arg("Other"), pybind11::arg("bPreset"));
	cl_PlayerControllerWrapper.def("AllowTextMessage", [](PlayerControllerWrapper& cls_, std::string msg) { return cls_.AllowTextMessage(msg); }, pybind11::arg("msg"));
	cl_PlayerControllerWrapper.def("PushToTalkEnd", [](PlayerControllerWrapper& cls_) { return cls_.PushToTalkEnd(); });
	cl_PlayerControllerWrapper.def("PushToTalk2", [](PlayerControllerWrapper& cls_) { return cls_.PushToTalk2(); });
	cl_PlayerControllerWrapper.def("HandleJoinGameMigrationCompleted", [](PlayerControllerWrapper& cls_, long unsigned int bSuccess, std::string FailReason) { return cls_.HandleJoinGameMigrationCompleted(bSuccess, FailReason); }, pybind11::arg("bSuccess"), pybind11::arg("FailReason"));
	cl_PlayerControllerWrapper.def("eventClientUnmutePlayer", [](PlayerControllerWrapper& cls_, SteamID & PlayerNetId) { return cls_.eventClientUnmutePlayer(PlayerNetId); }, pybind11::arg("PlayerNetId"));
	cl_PlayerControllerWrapper.def("eventClientMutePlayer", [](PlayerControllerWrapper& cls_, SteamID & PlayerNetId, long unsigned int bAddToMuteList) { return cls_.eventClientMutePlayer(PlayerNetId, bAddToMuteList); }, pybind11::arg("PlayerNetId"), pybind11::arg("bAddToMuteList"));
	cl_PlayerControllerWrapper.def("ClientSetOnlineStatus", [](PlayerControllerWrapper& cls_) { return cls_.ClientSetOnlineStatus(); });
	cl_PlayerControllerWrapper.def("HandleGameDataSelected", [](PlayerControllerWrapper& cls_, int PlaylistId, int MutatorIndex) { return cls_.HandleGameDataSelected(PlaylistId, MutatorIndex); }, pybind11::arg("PlaylistId"), pybind11::arg("MutatorIndex"));
	cl_PlayerControllerWrapper.def("GetGameEvent", [](PlayerControllerWrapper& cls_) { return cls_.GetGameEvent(); });
	cl_PlayerControllerWrapper.def("ClientArbitratedMatchEnded", [](PlayerControllerWrapper& cls_) { return cls_.ClientArbitratedMatchEnded(); });
	cl_PlayerControllerWrapper.def("BannedKick", [](PlayerControllerWrapper& cls_) { return cls_.BannedKick(); });
	cl_PlayerControllerWrapper.def("NoReservationKick", [](PlayerControllerWrapper& cls_) { return cls_.NoReservationKick(); });
	cl_PlayerControllerWrapper.def("IdleKick2", [](PlayerControllerWrapper& cls_) { return cls_.IdleKick2(); });
	cl_PlayerControllerWrapper.def("ServerReportServer", [](PlayerControllerWrapper& cls_) { return cls_.ServerReportServer(); });
	cl_PlayerControllerWrapper.def("ClientUseItem", [](PlayerControllerWrapper& cls_, Vector & UseLocation, Rotator & UseRotation) { return cls_.ClientUseItem(UseLocation, UseRotation); }, pybind11::arg("UseLocation"), pybind11::arg("UseRotation"));
	cl_PlayerControllerWrapper.def("ServerTeleportCar", [](PlayerControllerWrapper& cls_, Vector & SpawnLocation, Rotator & NewRotation) { return cls_.ServerTeleportCar(SpawnLocation, NewRotation); }, pybind11::arg("SpawnLocation"), pybind11::arg("NewRotation"));
	cl_PlayerControllerWrapper.def("eventTeleportCar", [](PlayerControllerWrapper& cls_, Vector & SpawnLocation, Rotator & NewRotation) { return cls_.eventTeleportCar(SpawnLocation, NewRotation); }, pybind11::arg("SpawnLocation"), pybind11::arg("NewRotation"));
	cl_PlayerControllerWrapper.def("ServerUsePickup", [](PlayerControllerWrapper& cls_, RBActorWrapper Target) { return cls_.ServerUsePickup(Target); }, pybind11::arg("Target"));
	cl_PlayerControllerWrapper.def("UsePickup2", [](PlayerControllerWrapper& cls_) { return cls_.UsePickup2(); });
	cl_PlayerControllerWrapper.def("ToggleHandbrake", [](PlayerControllerWrapper& cls_, long unsigned int bHandbrake) { return cls_.ToggleHandbrake(bHandbrake); }, pybind11::arg("bHandbrake"));
	cl_PlayerControllerWrapper.def("ToggleBoost", [](PlayerControllerWrapper& cls_, long unsigned int bBoost) { return cls_.ToggleBoost(bBoost); }, pybind11::arg("bBoost"));
	cl_PlayerControllerWrapper.def("ToggleJump", [](PlayerControllerWrapper& cls_, long unsigned int bJump) { return cls_.ToggleJump(bJump); }, pybind11::arg("bJump"));
	cl_PlayerControllerWrapper.def("TargetSelectLeft", [](PlayerControllerWrapper& cls_) { return cls_.TargetSelectLeft(); });
	cl_PlayerControllerWrapper.def("TargetSelectRight", [](PlayerControllerWrapper& cls_) { return cls_.TargetSelectRight(); });
	cl_PlayerControllerWrapper.def("ReleaseRearCamera", [](PlayerControllerWrapper& cls_) { return cls_.ReleaseRearCamera(); });
	cl_PlayerControllerWrapper.def("PressRearCamera", [](PlayerControllerWrapper& cls_) { return cls_.PressRearCamera(); });
	cl_PlayerControllerWrapper.def("ReleaseSecondaryCamera", [](PlayerControllerWrapper& cls_) { return cls_.ReleaseSecondaryCamera(); });
	cl_PlayerControllerWrapper.def("PressSecondaryCamera", [](PlayerControllerWrapper& cls_) { return cls_.PressSecondaryCamera(); });
	cl_PlayerControllerWrapper.def("ReadyUp", [](PlayerControllerWrapper& cls_) { return cls_.ReadyUp(); });
	cl_PlayerControllerWrapper.def("Spectate", [](PlayerControllerWrapper& cls_) { return cls_.Spectate(); });
	cl_PlayerControllerWrapper.def("ChangeTeam", [](PlayerControllerWrapper& cls_, int TeamNum) { return cls_.ChangeTeam(TeamNum); }, pybind11::arg("TeamNum"));
	cl_PlayerControllerWrapper.def("SwitchTeam", [](PlayerControllerWrapper& cls_) { return cls_.SwitchTeam(); });
	cl_PlayerControllerWrapper.def("SetDefaultCameraMode", [](PlayerControllerWrapper& cls_) { return cls_.SetDefaultCameraMode(); });
	cl_PlayerControllerWrapper.def("ResetCameraMode", [](PlayerControllerWrapper& cls_) { return cls_.ResetCameraMode(); });
	cl_PlayerControllerWrapper.def("ZeroMoveInput", [](PlayerControllerWrapper& cls_) { return cls_.ZeroMoveInput(); });
	cl_PlayerControllerWrapper.def("PlayerMove", [](PlayerControllerWrapper& cls_, float DeltaTime) { return cls_.PlayerMove(DeltaTime); }, pybind11::arg("DeltaTime"));
	cl_PlayerControllerWrapper.def("IgnoreMoveInput", [](PlayerControllerWrapper& cls_, long unsigned int bNewMoveInput) { return cls_.IgnoreMoveInput(bNewMoveInput); }, pybind11::arg("bNewMoveInput"));
	cl_PlayerControllerWrapper.def("eventSendClientAdjustment", [](PlayerControllerWrapper& cls_) { return cls_.eventSendClientAdjustment(); });
	cl_PlayerControllerWrapper.def("GetPrimaryPlayerController", [](PlayerControllerWrapper& cls_) { return cls_.GetPrimaryPlayerController(); });
	cl_PlayerControllerWrapper.def("HandleAddBoostComponent", [](PlayerControllerWrapper& cls_, BoostWrapper Boost) { return cls_.HandleAddBoostComponent(Boost); }, pybind11::arg("Boost"));
	cl_PlayerControllerWrapper.def("ReplicateLoadout", [](PlayerControllerWrapper& cls_) { return cls_.ReplicateLoadout(); });
	cl_PlayerControllerWrapper.def("ReplicateCameraRotation", [](PlayerControllerWrapper& cls_) { return cls_.ReplicateCameraRotation(); });
	cl_PlayerControllerWrapper.def("SetUsingFreecam", [](PlayerControllerWrapper& cls_, long unsigned int bFreecam) { return cls_.SetUsingFreecam(bFreecam); }, pybind11::arg("bFreecam"));
	cl_PlayerControllerWrapper.def("SetUsingBehindView", [](PlayerControllerWrapper& cls_, long unsigned int bBehindView) { return cls_.SetUsingBehindView(bBehindView); }, pybind11::arg("bBehindView"));
	cl_PlayerControllerWrapper.def("SetUsingSecondaryCamera", [](PlayerControllerWrapper& cls_, long unsigned int bSecondaryCamera) { return cls_.SetUsingSecondaryCamera(bSecondaryCamera); }, pybind11::arg("bSecondaryCamera"));
	cl_PlayerControllerWrapper.def("ReplicateCameraSettings", [](PlayerControllerWrapper& cls_) { return cls_.ReplicateCameraSettings(); });
	cl_PlayerControllerWrapper.def("HandleControllerLayoutChanged", [](PlayerControllerWrapper& cls_, PriWrapper InPRI) { return cls_.HandleControllerLayoutChanged(InPRI); }, pybind11::arg("InPRI"));
	cl_PlayerControllerWrapper.def("HandlePawnTypeChanged", [](PlayerControllerWrapper& cls_, PriWrapper InPRI) { return cls_.HandlePawnTypeChanged(InPRI); }, pybind11::arg("InPRI"));
	cl_PlayerControllerWrapper.def("HandlePendingViewCarSet", [](PlayerControllerWrapper& cls_, PriWrapper InPRI) { return cls_.HandlePendingViewCarSet(InPRI); }, pybind11::arg("InPRI"));
	cl_PlayerControllerWrapper.def("HandleReplaceBot", [](PlayerControllerWrapper& cls_, PriWrapper InPRI) { return cls_.HandleReplaceBot(InPRI); }, pybind11::arg("InPRI"));
	cl_PlayerControllerWrapper.def("HandleTeamChanged", [](PlayerControllerWrapper& cls_, PriXWrapper InPRI) { return cls_.HandleTeamChanged(InPRI); }, pybind11::arg("InPRI"));
	cl_PlayerControllerWrapper.def("HandleMatchEnded", [](PlayerControllerWrapper& cls_, ServerWrapper GameEvent) { return cls_.HandleMatchEnded(GameEvent); }, pybind11::arg("GameEvent"));
	cl_PlayerControllerWrapper.def("HandleStartNewRound", [](PlayerControllerWrapper& cls_, ServerWrapper GameEvent) { return cls_.HandleStartNewRound(GameEvent); }, pybind11::arg("GameEvent"));
	cl_PlayerControllerWrapper.def("HandleGameEventChanged", [](PlayerControllerWrapper& cls_, PriWrapper InPRI) { return cls_.HandleGameEventChanged(InPRI); }, pybind11::arg("InPRI"));
	cl_PlayerControllerWrapper.def("HandlePRICameraChanged", [](PlayerControllerWrapper& cls_, PriWrapper InPRI) { return cls_.HandlePRICameraChanged(InPRI); }, pybind11::arg("InPRI"));
	cl_PlayerControllerWrapper.def("SetupLightBar", [](PlayerControllerWrapper& cls_) { return cls_.SetupLightBar(); });
	cl_PlayerControllerWrapper.def("HandlePersistentCameraSet", [](PlayerControllerWrapper& cls_, PriWrapper InPRI) { return cls_.HandlePersistentCameraSet(InPRI); }, pybind11::arg("InPRI"));
	cl_PlayerControllerWrapper.def("OnReceivedPlayerAndPRI", [](PlayerControllerWrapper& cls_) { return cls_.OnReceivedPlayerAndPRI(); });
	cl_PlayerControllerWrapper.def("UpdateVoiceFilter", [](PlayerControllerWrapper& cls_) { return cls_.UpdateVoiceFilter(); });
	cl_PlayerControllerWrapper.def("ReplicateLevelSessionID", [](PlayerControllerWrapper& cls_) { return cls_.ReplicateLevelSessionID(); });
	cl_PlayerControllerWrapper.def("ServerInitInputBuffer", [](PlayerControllerWrapper& cls_, unsigned char Type) { return cls_.ServerInitInputBuffer(Type); }, pybind11::arg("Type"));
	cl_PlayerControllerWrapper.def("eventReceivedPlayer", [](PlayerControllerWrapper& cls_) { return cls_.eventReceivedPlayer(); });
	cl_PlayerControllerWrapper.def("eventPostBeginPlay", [](PlayerControllerWrapper& cls_) { return cls_.eventPostBeginPlay(); });
	cl_PlayerControllerWrapper.def("EventChatMessage", [](PlayerControllerWrapper& cls_, PlayerControllerWrapper PC, std::string Message, long unsigned int bPreset) { return cls_.EventChatMessage(PC, Message, bPreset); }, pybind11::arg("PC"), pybind11::arg("Message"), pybind11::arg("bPreset"));
	cl_PlayerControllerWrapper.def("EventResetPlayer", [](PlayerControllerWrapper& cls_, PlayerControllerWrapper PC, long unsigned int bFullReset) { return cls_.EventResetPlayer(PC, bFullReset); }, pybind11::arg("PC"), pybind11::arg("bFullReset"));
	cl_PlayerControllerWrapper.def("EventSelectBallCamTarget", [](PlayerControllerWrapper& cls_, PlayerControllerWrapper PC, int Direction) { return cls_.EventSelectBallCamTarget(PC, Direction); }, pybind11::arg("PC"), pybind11::arg("Direction"));
	cl_PlayerControllerWrapper.def("EventTrainingEditorActorModified", [](PlayerControllerWrapper& cls_) { return cls_.EventTrainingEditorActorModified(); });
	cl_PlayerControllerWrapper.def("EventMuteChanged", [](PlayerControllerWrapper& cls_, PlayerControllerWrapper PC, SteamID & PlayerID, long unsigned int bMuted) { return cls_.EventMuteChanged(PC, PlayerID, bMuted); }, pybind11::arg("PC"), pybind11::arg("PlayerID"), pybind11::arg("bMuted"));
	//cl_PlayerControllerWrapper.def("EventPendingIdleKickChanged", [](PlayerControllerWrapper& cls_, PlayerControllerWrapper PC) { return cls_.EventPendingIdleKickChanged(PC); }, pybind11::arg("PC"));
	cl_PlayerControllerWrapper.def("EventLaunchControllerApplet", [](PlayerControllerWrapper& cls_) { return cls_.EventLaunchControllerApplet(); });
	cl_PlayerControllerWrapper.def("EventLaunchAccountPicker", [](PlayerControllerWrapper& cls_, int ControllerId) { return cls_.EventLaunchAccountPicker(ControllerId); }, pybind11::arg("ControllerId"));
	cl_PlayerControllerWrapper.def("GetbUsingGamepad", [](PlayerControllerWrapper& cls_) { return cls_.GetbUsingGamepad(); });
	cl_PlayerControllerWrapper.def("SetMouseSensitivity", [](PlayerControllerWrapper& cls_, float NewSensitivity) { return cls_.SetMouseSensitivity(NewSensitivity); }, pybind11::arg("NewSensitivity"));
	cl_PlayerControllerWrapper.def("GetMouseSensitivity", [](PlayerControllerWrapper& cls_) { return cls_.GetMouseSensitivity(); });
	cl_PlayerControllerWrapper.def("SetAForward", [](PlayerControllerWrapper& cls_, float aForward) { return cls_.SetAForward(aForward); }, pybind11::arg("aForward"));
	cl_PlayerControllerWrapper.def("GetAForward", [](PlayerControllerWrapper& cls_) { return cls_.GetAForward(); });
	cl_PlayerControllerWrapper.def("SetATurn", [](PlayerControllerWrapper& cls_, float aTurn) { return cls_.SetATurn(aTurn); }, pybind11::arg("aTurn"));
	cl_PlayerControllerWrapper.def("GetATurn", [](PlayerControllerWrapper& cls_) { return cls_.GetATurn(); });
	cl_PlayerControllerWrapper.def("SetAStrafe", [](PlayerControllerWrapper& cls_, float aStrafe) { return cls_.SetAStrafe(aStrafe); }, pybind11::arg("aStrafe"));
	cl_PlayerControllerWrapper.def("GetAStrafe", [](PlayerControllerWrapper& cls_) { return cls_.GetAStrafe(); });
	cl_PlayerControllerWrapper.def("SetAUp", [](PlayerControllerWrapper& cls_, float aUp) { return cls_.SetAUp(aUp); }, pybind11::arg("aUp"));
	cl_PlayerControllerWrapper.def("GetAUp", [](PlayerControllerWrapper& cls_) { return cls_.GetAUp(); });
	cl_PlayerControllerWrapper.def("SetALookUp", [](PlayerControllerWrapper& cls_, float aLookUp) { return cls_.SetALookUp(aLookUp); }, pybind11::arg("aLookUp"));
	cl_PlayerControllerWrapper.def("GetALookUp", [](PlayerControllerWrapper& cls_) { return cls_.GetALookUp(); });
	cl_PlayerControllerWrapper.def("SetLookRightScale", [](PlayerControllerWrapper& cls_, float NewScale) { return cls_.SetLookRightScale(NewScale); }, pybind11::arg("NewScale"));
	cl_PlayerControllerWrapper.def("GetLookRightScale", [](PlayerControllerWrapper& cls_) { return cls_.GetLookRightScale(); });
	cl_PlayerControllerWrapper.def("SetLookUpScale", [](PlayerControllerWrapper& cls_, float NewScale) { return cls_.SetLookUpScale(NewScale); }, pybind11::arg("NewScale"));
	cl_PlayerControllerWrapper.def("GetLookUpScale", [](PlayerControllerWrapper& cls_) { return cls_.GetLookUpScale(); });
	cl_PlayerControllerWrapper.def("SetGamepadLookScale", [](PlayerControllerWrapper& cls_, float NewScale) { return cls_.SetGamepadLookScale(NewScale); }, pybind11::arg("NewScale"));
	cl_PlayerControllerWrapper.def("GetGamepadLookScale", [](PlayerControllerWrapper& cls_) { return cls_.GetGamepadLookScale(); });
	cl_PlayerControllerWrapper.def("SetALookRoll", [](PlayerControllerWrapper& cls_, float NewLookRoll) { return cls_.SetALookRoll(NewLookRoll); }, pybind11::arg("NewLookRoll"));
	cl_PlayerControllerWrapper.def("GetALookRoll", [](PlayerControllerWrapper& cls_) { return cls_.GetALookRoll(); });
	cl_PlayerControllerWrapper.def("SetbRoll", [](PlayerControllerWrapper& cls_, bool NewRoll) { return cls_.SetbRoll(NewRoll); }, pybind11::arg("NewRoll"));
	cl_PlayerControllerWrapper.def("GetbRoll", [](PlayerControllerWrapper& cls_) { return cls_.GetbRoll(); });
	cl_PlayerControllerWrapper.def("SetSpectatorCameraAccel", [](PlayerControllerWrapper& cls_, float SpectatorCameraAccel) { return cls_.SetSpectatorCameraAccel(SpectatorCameraAccel); }, pybind11::arg("SpectatorCameraAccel"));
	cl_PlayerControllerWrapper.def("GetSpectatorCameraAccel", [](PlayerControllerWrapper& cls_) { return cls_.GetSpectatorCameraAccel(); });
	cl_PlayerControllerWrapper.def("SetSpectatorCameraSpeed", [](PlayerControllerWrapper& cls_, float SpectatorCameraSpeed) { return cls_.SetSpectatorCameraSpeed(SpectatorCameraSpeed); }, pybind11::arg("SpectatorCameraSpeed"));
	cl_PlayerControllerWrapper.def("GetSpectatorCameraSpeed", [](PlayerControllerWrapper& cls_) { return cls_.GetSpectatorCameraSpeed(); });
}
