void bind_WrapperStructs(pybind11::module& m)
{

	pybind11::enum_<ToastType> cl_ToastType(m, "ToastType");
	cl_ToastType.value("ToastType_Info", ToastType::ToastType_Info);
	cl_ToastType.value("ToastType_OK", ToastType::ToastType_OK);
	cl_ToastType.value("ToastType_Warning", ToastType::ToastType_Warning);
	cl_ToastType.value("ToastType_Error", ToastType::ToastType_Error);
	cl_ToastType.export_values();

	pybind11::class_<Vector, std::shared_ptr<Vector>> cl_Vector(m, "Vector");
	cl_Vector.def_property("X", [](const Vector& cls_) { return cls_.X; }, [](Vector& cls_, float const& prop_) { cls_.X = prop_; });
	cl_Vector.def_property("Y", [](const Vector& cls_) { return cls_.Y; }, [](Vector& cls_, float const& prop_) { cls_.Y = prop_; });
	cl_Vector.def_property("Z", [](const Vector& cls_) { return cls_.Z; }, [](Vector& cls_, float const& prop_) { cls_.Z = prop_; });
	//cl_Vector.def(pybind11::init<FVector>(), pybind11::arg("v"));
	cl_Vector.def(pybind11::init<float, float, float>(), pybind11::arg("x"), pybind11::arg("y"), pybind11::arg("z"));
	cl_Vector.def(pybind11::init<float>(), pybind11::arg("def_"));
	cl_Vector.def(pybind11::init<>());
	cl_Vector.def("__iadd__", [](Vector& cls_, Vector const v2) { return cls_ += v2; }, pybind11::arg("v2"));
	cl_Vector.def("__isub__", [](Vector& cls_, Vector const v2) { return cls_ -= v2; }, pybind11::arg("v2"));
	cl_Vector.def("__imul__", [](Vector& cls_, Vector const v2) { return cls_ *= v2; }, pybind11::arg("v2"));
	cl_Vector.def("__itruediv__", [](Vector& cls_, Vector const v2) { return cls_ /= v2; }, pybind11::arg("v2"));
	cl_Vector.def("__iadd__", [](Vector& cls_, float const f) { return cls_ += f; }, pybind11::arg("f"));
	cl_Vector.def("__isub__", [](Vector& cls_, float const f) { return cls_ -= f; }, pybind11::arg("f"));
	cl_Vector.def("__imul__", [](Vector& cls_, float const f) { return cls_ *= f; }, pybind11::arg("f"));
	cl_Vector.def("__itruediv__", [](Vector& cls_, float const f) { return cls_ /= f; }, pybind11::arg("f"));
	cl_Vector.def("magnitude", [](Vector& cls_) { return cls_.magnitude(); });
	cl_Vector.def("normalize", [](Vector& cls_) { return cls_.normalize(); });
	cl_Vector.def("getNormalized", [](Vector& cls_) { return cls_.getNormalized(); });
	cl_Vector.def("clone", [](Vector& cls_) { return cls_.clone(); });
	cl_Vector.def_static("dot", [](Vector const v1, Vector const v2) { return Vector::dot(v1, v2); }, pybind11::arg("v1"), pybind11::arg("v2"));
	cl_Vector.def_static("cross", [](Vector const v1, Vector const v2) { return Vector::cross(v1, v2); }, pybind11::arg("v1"), pybind11::arg("v2"));
	cl_Vector.def_static("lerp", [](Vector const v1, Vector const v2, float const t) { return Vector::lerp(v1, v2, t); }, pybind11::arg("v1"), pybind11::arg("v2"), pybind11::arg("t"));
	cl_Vector.def_static("slerp", [](Vector const v1, Vector const v2, float const t) { return Vector::slerp(v1, v2, t); }, pybind11::arg("v1"), pybind11::arg("v2"), pybind11::arg("t"));
	cl_Vector.def(pybind11::init<Vector const &>(), pybind11::arg("arg0"));
	// cl_Vector.def(pybind11::del<>());
	cl_Vector.def("__add__", [](Vector const v1, Vector const v2) { return v1 + v2; }, pybind11::arg("v2"));
	cl_Vector.def("__sub__", [](Vector const v1, Vector const v2) { return v1 - v2; }, pybind11::arg("v2"));
	cl_Vector.def("__mul__", [](Vector const v1, Vector const v2) { return v1 * v2; }, pybind11::arg("v2"));
	cl_Vector.def("__truediv__", [](Vector const v1, Vector const v2) { return v1 / v2; }, pybind11::arg("v2"));
	cl_Vector.def("__add__", [](Vector const v1, float const f) { return v1 + f; }, pybind11::arg("f"));
	cl_Vector.def("__sub__", [](Vector const v1, float const f) { return v1 - f; }, pybind11::arg("f"));
	cl_Vector.def("__mul__", [](Vector const v1, float const f) { return v1 * f; }, pybind11::arg("f"));
	cl_Vector.def("__truediv__", [](Vector const v1, float const f) { return v1 / f; }, pybind11::arg("f"));

	pybind11::class_<Rotator, std::shared_ptr<Rotator>> cl_Rotator(m, "Rotator");
	cl_Rotator.def_property("Pitch", [](const Rotator& cls_) { return cls_.Pitch; }, [](Rotator& cls_, int const& prop_) { cls_.Pitch = prop_; });
	cl_Rotator.def_property("Yaw", [](const Rotator& cls_) { return cls_.Yaw; }, [](Rotator& cls_, int const& prop_) { cls_.Yaw = prop_; });
	cl_Rotator.def_property("Roll", [](const Rotator& cls_) { return cls_.Roll; }, [](Rotator& cls_, int const& prop_) { cls_.Roll = prop_; });
	//cl_Rotator.def(pybind11::init<FRotator>(), pybind11::arg("r"));
	cl_Rotator.def(pybind11::init<int, int, int>(), pybind11::arg("pitch"), pybind11::arg("yaw"), pybind11::arg("roll"));
	cl_Rotator.def(pybind11::init<int>(), pybind11::arg("def_"));
	cl_Rotator.def(pybind11::init<>());
	cl_Rotator.def("__iadd__", [](Rotator& cls_, Rotator const r2) { return cls_ += r2; }, pybind11::arg("r2"));
	cl_Rotator.def("__isub__", [](Rotator& cls_, Rotator const r2) { return cls_ -= r2; }, pybind11::arg("r2"));
	cl_Rotator.def("__imul__", [](Rotator& cls_, Rotator const r2) { return cls_ *= r2; }, pybind11::arg("r2"));
	cl_Rotator.def("__itruediv__", [](Rotator& cls_, Rotator const r2) { return cls_ /= r2; }, pybind11::arg("r2"));
	cl_Rotator.def(pybind11::init<Rotator const &>(), pybind11::arg("arg0"));
	// cl_Rotator.def(pybind11::del<>());
	cl_Rotator.def("__add__", [](Rotator const r1, Rotator const r2) { return r1 + r2; }, pybind11::arg("r2"));
	cl_Rotator.def("__sub__", [](Rotator const r1, Rotator const r2) { return r1 - r2; }, pybind11::arg("r2"));
	cl_Rotator.def("__mul__", [](Rotator const r1, Rotator const r2) { return r1 * r2; }, pybind11::arg("r2"));
	cl_Rotator.def("__truediv__", [](Rotator const r1, Rotator const r2) { return r1 / r2; }, pybind11::arg("r2"));
	m.def("fixRotator", [](int newRotation) { return fixRotator(newRotation); }, pybind11::arg("newRotation"));
	m.def("fixPitch", [](int newRotation) { return fixPitch(newRotation); }, pybind11::arg("newRotation"));
	m.def("VectorToRotator", [](Vector const vVector) { return VectorToRotator(vVector); }, pybind11::arg("vVector"));
	m.def("RotatorToVector", [](Rotator const R) { return RotatorToVector(R); }, pybind11::arg("R"));

	pybind11::class_<Quat, std::shared_ptr<Quat>> cl_Quat(m, "Quat");
	cl_Quat.def_property("X", [](const Quat& cls_) { return cls_.X; }, [](Quat& cls_, float const& prop_) { cls_.X = prop_; });
	cl_Quat.def_property("Y", [](const Quat& cls_) { return cls_.Y; }, [](Quat& cls_, float const& prop_) { cls_.Y = prop_; });
	cl_Quat.def_property("Z", [](const Quat& cls_) { return cls_.Z; }, [](Quat& cls_, float const& prop_) { cls_.Z = prop_; });
	cl_Quat.def_property("W", [](const Quat& cls_) { return cls_.W; }, [](Quat& cls_, float const& prop_) { cls_.W = prop_; });
	cl_Quat.def(pybind11::init<float, float, float, float>(), pybind11::arg("w"), pybind11::arg("x"), pybind11::arg("y"), pybind11::arg("z"));
	cl_Quat.def(pybind11::init<>());
	cl_Quat.def("conjugate", [](Quat& cls_) { return cls_.conjugate(); });
	cl_Quat.def("normalize", [](Quat& cls_) { return cls_.normalize(); });
	cl_Quat.def("__imul__", [](Quat& cls_, Quat const q2) { return cls_ *= q2; }, pybind11::arg("q2"));
	cl_Quat.def(pybind11::init<Quat const &>(), pybind11::arg("arg0"));
	// cl_Quat.def(pybind11::del<>());
	cl_Quat.def("__mul__", [](Quat const q1, Quat const q2) { return q1 * q2; }, pybind11::arg("q2"));
	m.def("QuatSlerp", [](Quat const q1, Quat const q2, float percent) { return QuatSlerp(q1, q2, percent); }, pybind11::arg("q1"), pybind11::arg("q2"), pybind11::arg("percent"));
	m.def("RotateVectorWithQuat", [](Vector const v, Quat const q) { return RotateVectorWithQuat(v, q); }, pybind11::arg("v"), pybind11::arg("q"));
	m.def("RotatorToQuat", [](Rotator const rot) { return RotatorToQuat(rot); }, pybind11::arg("rot"));
	m.def("QuatToRotator", [](Quat const q) { return QuatToRotator(q); }, pybind11::arg("q"));

	pybind11::class_<Vector2, std::shared_ptr<Vector2>> cl_Vector2(m, "Vector2");
	cl_Vector2.def_property("X", [](const Vector2& cls_) { return cls_.X; }, [](Vector2& cls_, int const& prop_) { cls_.X = prop_; });
	cl_Vector2.def_property("Y", [](const Vector2& cls_) { return cls_.Y; }, [](Vector2& cls_, int const& prop_) { cls_.Y = prop_; });
	cl_Vector2.def("minus", [](Vector2& cls_, Vector2 const other) { return cls_.minus(other); }, pybind11::arg("other"));
	cl_Vector2.def("__iadd__", [](Vector2& cls_, Vector2 const v2) { return cls_ += v2; }, pybind11::arg("v2"));
	cl_Vector2.def("__isub__", [](Vector2& cls_, Vector2 const v2) { return cls_ -= v2; }, pybind11::arg("v2"));
	cl_Vector2.def("__imul__", [](Vector2& cls_, Vector2 const v2) { return cls_ *= v2; }, pybind11::arg("v2"));
	cl_Vector2.def("__itruediv__", [](Vector2& cls_, Vector2 const v2) { return cls_ /= v2; }, pybind11::arg("v2"));
	cl_Vector2.def("__iadd__", [](Vector2& cls_, int const i) { return cls_ += i; }, pybind11::arg("i"));
	cl_Vector2.def("__isub__", [](Vector2& cls_, int const i) { return cls_ -= i; }, pybind11::arg("i"));
	cl_Vector2.def("__imul__", [](Vector2& cls_, int const i) { return cls_ *= i; }, pybind11::arg("i"));
	cl_Vector2.def("__itruediv__", [](Vector2& cls_, int const i) { return cls_ /= i; }, pybind11::arg("i"));
	cl_Vector2.def(pybind11::init<>());
	cl_Vector2.def(pybind11::init<Vector2 const &>(), pybind11::arg("arg0"));
	// cl_Vector2.def(pybind11::del<>());
	cl_Vector2.def("__add__", [](Vector2 const v1, Vector2 const v2) { return v1 + v2; }, pybind11::arg("v2"));
	cl_Vector2.def("__sub__", [](Vector2 const v1, Vector2 const v2) { return v1 - v2; }, pybind11::arg("v2"));
	cl_Vector2.def("__mul__", [](Vector2 const v1, Vector2 const v2) { return v1 * v2; }, pybind11::arg("v2"));
	cl_Vector2.def("__truediv__", [](Vector2 const v1, Vector2 const v2) { return v1 / v2; }, pybind11::arg("v2"));
	cl_Vector2.def("__add__", [](Vector2 const v1, int const i) { return v1 + i; }, pybind11::arg("i"));
	cl_Vector2.def("__sub__", [](Vector2 const v1, int const i) { return v1 - i; }, pybind11::arg("i"));
	cl_Vector2.def("__mul__", [](Vector2 const v1, int const i) { return v1 * i; }, pybind11::arg("i"));
	cl_Vector2.def("__truediv__", [](Vector2 const v1, int const i) { return v1 / i; }, pybind11::arg("i"));

	pybind11::class_<Vector2F, std::shared_ptr<Vector2F>> cl_Vector2F(m, "Vector2F");
	cl_Vector2F.def_property("X", [](const Vector2F& cls_) { return cls_.X; }, [](Vector2F& cls_, float const& prop_) { cls_.X = prop_; });
	cl_Vector2F.def_property("Y", [](const Vector2F& cls_) { return cls_.Y; }, [](Vector2F& cls_, float const& prop_) { cls_.Y = prop_; });
	cl_Vector2F.def("minus", [](Vector2F& cls_, Vector2 const other) { return cls_.minus(other); }, pybind11::arg("other"));
	cl_Vector2F.def("minus", [](Vector2F& cls_, Vector2F const other) { return cls_.minus(other); }, pybind11::arg("other"));
	cl_Vector2F.def("__iadd__", [](Vector2F& cls_, Vector2 const v2) { return cls_ += v2; }, pybind11::arg("v2"));
	cl_Vector2F.def("__isub__", [](Vector2F& cls_, Vector2 const v2) { return cls_ -= v2; }, pybind11::arg("v2"));
	cl_Vector2F.def("__imul__", [](Vector2F& cls_, Vector2 const v2) { return cls_ *= v2; }, pybind11::arg("v2"));
	cl_Vector2F.def("__itruediv__", [](Vector2F& cls_, Vector2 const v2) { return cls_ /= v2; }, pybind11::arg("v2"));
	cl_Vector2F.def("__iadd__", [](Vector2F& cls_, Vector2F const v2) { return cls_ += v2; }, pybind11::arg("v2"));
	cl_Vector2F.def("__isub__", [](Vector2F& cls_, Vector2F const v2) { return cls_ -= v2; }, pybind11::arg("v2"));
	cl_Vector2F.def("__imul__", [](Vector2F& cls_, Vector2F const v2) { return cls_ *= v2; }, pybind11::arg("v2"));
	cl_Vector2F.def("__itruediv__", [](Vector2F& cls_, Vector2F const v2) { return cls_ /= v2; }, pybind11::arg("v2"));
	cl_Vector2F.def("__iadd__", [](Vector2F& cls_, float const f) { return cls_ += f; }, pybind11::arg("f"));
	cl_Vector2F.def("__isub__", [](Vector2F& cls_, float const f) { return cls_ -= f; }, pybind11::arg("f"));
	cl_Vector2F.def("__imul__", [](Vector2F& cls_, float const f) { return cls_ *= f; }, pybind11::arg("f"));
	cl_Vector2F.def("__itruediv__", [](Vector2F& cls_, float const f) { return cls_ /= f; }, pybind11::arg("f"));
	cl_Vector2F.def(pybind11::init<>());
	cl_Vector2F.def(pybind11::init<Vector2F const &>(), pybind11::arg("arg0"));
	// cl_Vector2F.def(pybind11::del<>());
	cl_Vector2F.def("__add__", [](Vector2F const v1, Vector2 const v2) { return v1 + v2; }, pybind11::arg("v2"));
	cl_Vector2F.def("__sub__", [](Vector2F const v1, Vector2 const v2) { return v1 - v2; }, pybind11::arg("v2"));
	cl_Vector2F.def("__mul__", [](Vector2F const v1, Vector2 const v2) { return v1 * v2; }, pybind11::arg("v2"));
	cl_Vector2F.def("__truediv__", [](Vector2F const v1, Vector2 const v2) { return v1 / v2; }, pybind11::arg("v2"));
	cl_Vector2F.def("__add__", [](Vector2F const v1, Vector2F const v2) { return v1 + v2; }, pybind11::arg("v2"));
	cl_Vector2F.def("__sub__", [](Vector2F const v1, Vector2F const v2) { return v1 - v2; }, pybind11::arg("v2"));
	cl_Vector2F.def("__mul__", [](Vector2F const v1, Vector2F const v2) { return v1 * v2; }, pybind11::arg("v2"));
	cl_Vector2F.def("__truediv__", [](Vector2F const v1, Vector2F const v2) { return v1 / v2; }, pybind11::arg("v2"));
	cl_Vector2F.def("__add__", [](Vector2F const v1, float const f) { return v1 + f; }, pybind11::arg("f"));
	cl_Vector2F.def("__sub__", [](Vector2F const v1, float const f) { return v1 - f; }, pybind11::arg("f"));
	cl_Vector2F.def("__mul__", [](Vector2F const v1, float const f) { return v1 * f; }, pybind11::arg("f"));
	cl_Vector2F.def("__truediv__", [](Vector2F const v1, float const f) { return v1 / f; }, pybind11::arg("f"));

	pybind11::class_<LinearColor, std::shared_ptr<LinearColor>> cl_LinearColor(m, "LinearColor");
	cl_LinearColor.def_property("R", [](const LinearColor& cls_) { return cls_.R; }, [](LinearColor& cls_, float const& prop_) { cls_.R = prop_; });
	cl_LinearColor.def_property("G", [](const LinearColor& cls_) { return cls_.G; }, [](LinearColor& cls_, float const& prop_) { cls_.G = prop_; });
	cl_LinearColor.def_property("B", [](const LinearColor& cls_) { return cls_.B; }, [](LinearColor& cls_, float const& prop_) { cls_.B = prop_; });
	cl_LinearColor.def_property("A", [](const LinearColor& cls_) { return cls_.A; }, [](LinearColor& cls_, float const& prop_) { cls_.A = prop_; });
	cl_LinearColor.def("__imul__", [](LinearColor& cls_, float const f) { return cls_ *= f; }, pybind11::arg("f"));
	cl_LinearColor.def("__itruediv__", [](LinearColor& cls_, float const f) { return cls_ /= f; }, pybind11::arg("f"));
	cl_LinearColor.def(pybind11::init<>());
	cl_LinearColor.def(pybind11::init<LinearColor const &>(), pybind11::arg("arg0"));
	// cl_LinearColor.def(pybind11::del<>());
	cl_LinearColor.def("__mul__", [](LinearColor const c1, float const f) { return c1 * f; }, pybind11::arg("f"));
	cl_LinearColor.def("__truediv__", [](LinearColor const c1, float const f) { return c1 / f; }, pybind11::arg("f"));
	cl_LinearColor.def("__eq__", [](LinearColor const c1, LinearColor const c2) { return c1 == c2; }, pybind11::arg("c2"));
	cl_LinearColor.def("__ne__", [](LinearColor const c1, LinearColor const c2) { return c1 != c2; }, pybind11::arg("c2"));

	pybind11::class_<PredictionInfo, std::shared_ptr<PredictionInfo>> cl_PredictionInfo(m, "PredictionInfo");
	cl_PredictionInfo.def_property("Time", [](const PredictionInfo& cls_) { return cls_.Time; }, [](PredictionInfo& cls_, float const& prop_) { cls_.Time = prop_; });
	cl_PredictionInfo.def_property("ArchTopTime", [](const PredictionInfo& cls_) { return cls_.ArchTopTime; }, [](PredictionInfo& cls_, float const& prop_) { cls_.ArchTopTime = prop_; });
	cl_PredictionInfo.def_property("Location", [](const PredictionInfo& cls_) { return cls_.Location; }, [](PredictionInfo& cls_, Vector const& prop_) { cls_.Location = prop_; });
	cl_PredictionInfo.def_property("Velocity", [](const PredictionInfo& cls_) { return cls_.Velocity; }, [](PredictionInfo& cls_, Vector const& prop_) { cls_.Velocity = prop_; });
	cl_PredictionInfo.def_property("ArchTop", [](const PredictionInfo& cls_) { return cls_.ArchTop; }, [](PredictionInfo& cls_, Vector const& prop_) { cls_.ArchTop = prop_; });
	cl_PredictionInfo.def_property("ArchTopVelocity", [](const PredictionInfo& cls_) { return cls_.ArchTopVelocity; }, [](PredictionInfo& cls_, Vector const& prop_) { cls_.ArchTopVelocity = prop_; });
	cl_PredictionInfo.def_property("bHitWall", [](const PredictionInfo& cls_) { return cls_.bHitWall; }, [](PredictionInfo& cls_, long unsigned int const& prop_) { cls_.bHitWall = prop_; });
	cl_PredictionInfo.def_property("bHitGround", [](const PredictionInfo& cls_) { return cls_.bHitGround; }, [](PredictionInfo& cls_, long unsigned int const& prop_) { cls_.bHitGround = prop_; });
	cl_PredictionInfo.def(pybind11::init<>());
	cl_PredictionInfo.def(pybind11::init<PredictionInfo const &>(), pybind11::arg("arg0"));
	// cl_PredictionInfo.def(pybind11::del<>());

	pybind11::class_<SteamID, std::shared_ptr<SteamID>> cl_SteamID(m, "SteamID");
	cl_SteamID.def_property("ID", [](const SteamID& cls_) { return cls_.ID; }, [](SteamID& cls_, long long unsigned int const& prop_) { cls_.ID = prop_; });
	cl_SteamID.def(pybind11::init<>());
	cl_SteamID.def(pybind11::init<SteamID const &>(), pybind11::arg("arg0"));
	// cl_SteamID.def(pybind11::del<>());

	pybind11::class_<SkillRating, std::shared_ptr<SkillRating>> cl_SkillRating(m, "SkillRating");
	cl_SkillRating.def_property("Mu", [](const SkillRating& cls_) { return cls_.Mu; }, [](SkillRating& cls_, float const& prop_) { cls_.Mu = prop_; });
	cl_SkillRating.def_property("Sigma", [](const SkillRating& cls_) { return cls_.Sigma; }, [](SkillRating& cls_, float const& prop_) { cls_.Sigma = prop_; });
	cl_SkillRating.def(pybind11::init<>());
	cl_SkillRating.def(pybind11::init<SkillRating const &>(), pybind11::arg("arg0"));
	// cl_SkillRating.def(pybind11::del<>());

	pybind11::class_<SkillRank, std::shared_ptr<SkillRank>> cl_SkillRank(m, "SkillRank");
	cl_SkillRank.def_property("Tier", [](const SkillRank& cls_) { return cls_.Tier; }, [](SkillRank& cls_, int const& prop_) { cls_.Tier = prop_; });
	cl_SkillRank.def_property("Division", [](const SkillRank& cls_) { return cls_.Division; }, [](SkillRank& cls_, int const& prop_) { cls_.Division = prop_; });
	cl_SkillRank.def_property("MatchesPlayed", [](const SkillRank& cls_) { return cls_.MatchesPlayed; }, [](SkillRank& cls_, int const& prop_) { cls_.MatchesPlayed = prop_; });
	cl_SkillRank.def(pybind11::init<>());
	cl_SkillRank.def(pybind11::init<SkillRank const &>(), pybind11::arg("arg0"));
	// cl_SkillRank.def(pybind11::del<>());

	pybind11::class_<UnrealColor, std::shared_ptr<UnrealColor>> cl_UnrealColor(m, "UnrealColor");
	cl_UnrealColor.def_property("B", [](const UnrealColor& cls_) { return cls_.B; }, [](UnrealColor& cls_, unsigned char const& prop_) { cls_.B = prop_; });
	cl_UnrealColor.def_property("G", [](const UnrealColor& cls_) { return cls_.G; }, [](UnrealColor& cls_, unsigned char const& prop_) { cls_.G = prop_; });
	cl_UnrealColor.def_property("R", [](const UnrealColor& cls_) { return cls_.R; }, [](UnrealColor& cls_, unsigned char const& prop_) { cls_.R = prop_; });
	cl_UnrealColor.def_property("A", [](const UnrealColor& cls_) { return cls_.A; }, [](UnrealColor& cls_, unsigned char const& prop_) { cls_.A = prop_; });
	cl_UnrealColor.def(pybind11::init<>());
	cl_UnrealColor.def(pybind11::init<UnrealColor const &>(), pybind11::arg("arg0"));
	// cl_UnrealColor.def(pybind11::del<>());

	pybind11::class_<ControllerInput, std::shared_ptr<ControllerInput>> cl_ControllerInput(m, "ControllerInput");
	cl_ControllerInput.def_property("Throttle", [](const ControllerInput& cls_) { return cls_.Throttle; }, [](ControllerInput& cls_, float const& prop_) { cls_.Throttle = prop_; });
	cl_ControllerInput.def_property("Steer", [](const ControllerInput& cls_) { return cls_.Steer; }, [](ControllerInput& cls_, float const& prop_) { cls_.Steer = prop_; });
	cl_ControllerInput.def_property("Pitch", [](const ControllerInput& cls_) { return cls_.Pitch; }, [](ControllerInput& cls_, float const& prop_) { cls_.Pitch = prop_; });
	cl_ControllerInput.def_property("Yaw", [](const ControllerInput& cls_) { return cls_.Yaw; }, [](ControllerInput& cls_, float const& prop_) { cls_.Yaw = prop_; });
	cl_ControllerInput.def_property("Roll", [](const ControllerInput& cls_) { return cls_.Roll; }, [](ControllerInput& cls_, float const& prop_) { cls_.Roll = prop_; });
	cl_ControllerInput.def_property("DodgeForward", [](const ControllerInput& cls_) { return cls_.DodgeForward; }, [](ControllerInput& cls_, float const& prop_) { cls_.DodgeForward = prop_; });
	cl_ControllerInput.def_property("DodgeStrafe", [](const ControllerInput& cls_) { return cls_.DodgeStrafe; }, [](ControllerInput& cls_, float const& prop_) { cls_.DodgeStrafe = prop_; });
	cl_ControllerInput.def_property("Handbrake", [](const ControllerInput& cls_) { return cls_.Handbrake; }, [](ControllerInput& cls_, long unsigned int const& prop_) { cls_.Handbrake = prop_; });
	cl_ControllerInput.def_property("Jump", [](const ControllerInput& cls_) { return cls_.Jump; }, [](ControllerInput& cls_, long unsigned int const& prop_) { cls_.Jump = prop_; });
	cl_ControllerInput.def_property("ActivateBoost", [](const ControllerInput& cls_) { return cls_.ActivateBoost; }, [](ControllerInput& cls_, long unsigned int const& prop_) { cls_.ActivateBoost = prop_; });
	cl_ControllerInput.def_property("HoldingBoost", [](const ControllerInput& cls_) { return cls_.HoldingBoost; }, [](ControllerInput& cls_, long unsigned int const& prop_) { cls_.HoldingBoost = prop_; });
	cl_ControllerInput.def_property("Jumped", [](const ControllerInput& cls_) { return cls_.Jumped; }, [](ControllerInput& cls_, long unsigned int const& prop_) { cls_.Jumped = prop_; });
	cl_ControllerInput.def(pybind11::init<>());
	cl_ControllerInput.def(pybind11::init<ControllerInput const &>(), pybind11::arg("arg0"));
	// cl_ControllerInput.def(pybind11::del<>());

	pybind11::class_<RecordedSample, std::shared_ptr<RecordedSample>> cl_RecordedSample(m, "RecordedSample");
	cl_RecordedSample.def_property("Low", [](const RecordedSample& cls_) { return cls_.Low; }, [](RecordedSample& cls_, float const& prop_) { cls_.Low = prop_; });
	cl_RecordedSample.def_property("High", [](const RecordedSample& cls_) { return cls_.High; }, [](RecordedSample& cls_, float const& prop_) { cls_.High = prop_; });
	cl_RecordedSample.def(pybind11::init<>());
	cl_RecordedSample.def(pybind11::init<RecordedSample const &>(), pybind11::arg("arg0"));
	// cl_RecordedSample.def(pybind11::del<>());

	pybind11::class_<POV, std::shared_ptr<POV>> cl_POV(m, "POV");
	cl_POV.def_property("location", [](const POV& cls_) { return cls_.location; }, [](POV& cls_, Vector const& prop_) { cls_.location = prop_; });
	cl_POV.def_property("rotation", [](const POV& cls_) { return cls_.rotation; }, [](POV& cls_, Rotator const& prop_) { cls_.rotation = prop_; });
	cl_POV.def_property("FOV", [](const POV& cls_) { return cls_.FOV; }, [](POV& cls_, float const& prop_) { cls_.FOV = prop_; });
	cl_POV.def(pybind11::init<>());
	cl_POV.def(pybind11::init<POV const &>(), pybind11::arg("arg0"));
	// cl_POV.def(pybind11::del<>());

	pybind11::class_<ViewTarget, std::shared_ptr<ViewTarget>> cl_ViewTarget(m, "ViewTarget");
	cl_ViewTarget.def_property("Target", [](const ViewTarget& cls_) { return cls_.Target; }, [](ViewTarget& cls_, void * const& prop_) { cls_.Target = prop_; });
	cl_ViewTarget.def_property("Controller", [](const ViewTarget& cls_) { return cls_.Controller; }, [](ViewTarget& cls_, void * const& prop_) { cls_.Controller = prop_; });
	cl_ViewTarget.def_property("POV", [](const ViewTarget& cls_) { return cls_.POV; }, [](ViewTarget& cls_, POV const& prop_) { cls_.POV = prop_; });
	cl_ViewTarget.def_property("AspectRatio", [](const ViewTarget& cls_) { return cls_.AspectRatio; }, [](ViewTarget& cls_, float const& prop_) { cls_.AspectRatio = prop_; });
	cl_ViewTarget.def_property("PRI", [](const ViewTarget& cls_) { return cls_.PRI; }, [](ViewTarget& cls_, void * const& prop_) { cls_.PRI = prop_; });
	cl_ViewTarget.def(pybind11::init<>());
	cl_ViewTarget.def(pybind11::init<ViewTarget const &>(), pybind11::arg("arg0"));
	// cl_ViewTarget.def(pybind11::del<>());

	pybind11::class_<CameraSave, std::shared_ptr<CameraSave>> cl_CameraSave(m, "CameraSave");
	cl_CameraSave.def_property("InvertSwivelPitch", [](const CameraSave& cls_) { return cls_.InvertSwivelPitch; }, [](CameraSave& cls_, bool const& prop_) { cls_.InvertSwivelPitch = prop_; });
	cl_CameraSave.def_property("CameraShake", [](const CameraSave& cls_) { return cls_.CameraShake; }, [](CameraSave& cls_, bool const& prop_) { cls_.CameraShake = prop_; });
	cl_CameraSave.def(pybind11::init<>());
	cl_CameraSave.def(pybind11::init<CameraSave const &>(), pybind11::arg("arg0"));
	// cl_CameraSave.def(pybind11::del<>());

	pybind11::class_<ProfileCameraSettings, std::shared_ptr<ProfileCameraSettings>> cl_ProfileCameraSettings(m, "ProfileCameraSettings");
	cl_ProfileCameraSettings.def_property("FOV", [](const ProfileCameraSettings& cls_) { return cls_.FOV; }, [](ProfileCameraSettings& cls_, float const& prop_) { cls_.FOV = prop_; });
	cl_ProfileCameraSettings.def_property("Height", [](const ProfileCameraSettings& cls_) { return cls_.Height; }, [](ProfileCameraSettings& cls_, float const& prop_) { cls_.Height = prop_; });
	cl_ProfileCameraSettings.def_property("Pitch", [](const ProfileCameraSettings& cls_) { return cls_.Pitch; }, [](ProfileCameraSettings& cls_, float const& prop_) { cls_.Pitch = prop_; });
	cl_ProfileCameraSettings.def_property("Distance", [](const ProfileCameraSettings& cls_) { return cls_.Distance; }, [](ProfileCameraSettings& cls_, float const& prop_) { cls_.Distance = prop_; });
	cl_ProfileCameraSettings.def_property("Stiffness", [](const ProfileCameraSettings& cls_) { return cls_.Stiffness; }, [](ProfileCameraSettings& cls_, float const& prop_) { cls_.Stiffness = prop_; });
	cl_ProfileCameraSettings.def_property("SwivelSpeed", [](const ProfileCameraSettings& cls_) { return cls_.SwivelSpeed; }, [](ProfileCameraSettings& cls_, float const& prop_) { cls_.SwivelSpeed = prop_; });
	cl_ProfileCameraSettings.def_property("TransitionSpeed", [](const ProfileCameraSettings& cls_) { return cls_.TransitionSpeed; }, [](ProfileCameraSettings& cls_, float const& prop_) { cls_.TransitionSpeed = prop_; });
	cl_ProfileCameraSettings.def(pybind11::init<>());
	cl_ProfileCameraSettings.def(pybind11::init<ProfileCameraSettings const &>(), pybind11::arg("arg0"));
	// cl_ProfileCameraSettings.def(pybind11::del<>());

	pybind11::class_<GamepadSettings, std::shared_ptr<GamepadSettings>> cl_GamepadSettings(m, "GamepadSettings");
	cl_GamepadSettings.def_property("ControllerDeadzone", [](const GamepadSettings& cls_) { return cls_.ControllerDeadzone; }, [](GamepadSettings& cls_, float const& prop_) { cls_.ControllerDeadzone = prop_; });
	cl_GamepadSettings.def_property("DodgeInputThreshold", [](const GamepadSettings& cls_) { return cls_.DodgeInputThreshold; }, [](GamepadSettings& cls_, float const& prop_) { cls_.DodgeInputThreshold = prop_; });
	cl_GamepadSettings.def_property("SteeringSensitivity", [](const GamepadSettings& cls_) { return cls_.SteeringSensitivity; }, [](GamepadSettings& cls_, float const& prop_) { cls_.SteeringSensitivity = prop_; });
	cl_GamepadSettings.def_property("AirControlSensitivity", [](const GamepadSettings& cls_) { return cls_.AirControlSensitivity; }, [](GamepadSettings& cls_, float const& prop_) { cls_.AirControlSensitivity = prop_; });
	cl_GamepadSettings.def(pybind11::init<>());
	cl_GamepadSettings.def(pybind11::init<GamepadSettings const &>(), pybind11::arg("arg0"));
	// cl_GamepadSettings.def(pybind11::del<>());

	pybind11::class_<RBState, std::shared_ptr<RBState>> cl_RBState(m, "RBState");
	cl_RBState.def_property("Quaternion", [](const RBState& cls_) { return cls_.Quaternion; }, [](RBState& cls_, Quat const& prop_) { cls_.Quaternion = prop_; });
	cl_RBState.def_property("Location", [](const RBState& cls_) { return cls_.Location; }, [](RBState& cls_, Vector const& prop_) { cls_.Location = prop_; });
	cl_RBState.def_property("LinearVelocity", [](const RBState& cls_) { return cls_.LinearVelocity; }, [](RBState& cls_, Vector const& prop_) { cls_.LinearVelocity = prop_; });
	cl_RBState.def_property("AngularVelocity", [](const RBState& cls_) { return cls_.AngularVelocity; }, [](RBState& cls_, Vector const& prop_) { cls_.AngularVelocity = prop_; });
	cl_RBState.def_property("Time", [](const RBState& cls_) { return cls_.Time; }, [](RBState& cls_, float const& prop_) { cls_.Time = prop_; });
	cl_RBState.def_property("bSleeping", [](const RBState& cls_) { return cls_.bSleeping; }, [](RBState& cls_, long unsigned int const& prop_) { cls_.bSleeping = prop_; });
	cl_RBState.def_property("bNewData", [](const RBState& cls_) { return cls_.bNewData; }, [](RBState& cls_, long unsigned int const& prop_) { cls_.bNewData = prop_; });
	cl_RBState.def(pybind11::init<>());
	cl_RBState.def(pybind11::init<RBState const &>(), pybind11::arg("arg0"));
	// cl_RBState.def(pybind11::del<>());

	pybind11::class_<WorldContactData, std::shared_ptr<WorldContactData>> cl_WorldContactData(m, "WorldContactData");
	cl_WorldContactData.def_property("bHasContact", [](const WorldContactData& cls_) { return cls_.bHasContact; }, [](WorldContactData& cls_, long unsigned int const& prop_) { cls_.bHasContact = prop_; });
	cl_WorldContactData.def_property("Location", [](const WorldContactData& cls_) { return cls_.Location; }, [](WorldContactData& cls_, Vector const& prop_) { cls_.Location = prop_; });
	cl_WorldContactData.def_property("Velocity", [](const WorldContactData& cls_) { return cls_.Velocity; }, [](WorldContactData& cls_, Vector const& prop_) { cls_.Velocity = prop_; });
	cl_WorldContactData.def_property("Normal", [](const WorldContactData& cls_) { return cls_.Normal; }, [](WorldContactData& cls_, Vector const& prop_) { cls_.Normal = prop_; });
	cl_WorldContactData.def(pybind11::init<>());
	cl_WorldContactData.def(pybind11::init<WorldContactData const &>(), pybind11::arg("arg0"));
	// cl_WorldContactData.def(pybind11::del<>());

	pybind11::class_<StickyForceData, std::shared_ptr<StickyForceData>> cl_StickyForceData(m, "StickyForceData");
	cl_StickyForceData.def_property("Ground", [](const StickyForceData& cls_) { return cls_.Ground; }, [](StickyForceData& cls_, float const& prop_) { cls_.Ground = prop_; });
	cl_StickyForceData.def_property("Wall", [](const StickyForceData& cls_) { return cls_.Wall; }, [](StickyForceData& cls_, float const& prop_) { cls_.Wall = prop_; });
	cl_StickyForceData.def(pybind11::init<>());
	cl_StickyForceData.def(pybind11::init<StickyForceData const &>(), pybind11::arg("arg0"));
	// cl_StickyForceData.def(pybind11::del<>());

	pybind11::class_<WheelContactData, std::shared_ptr<WheelContactData>> cl_WheelContactData(m, "WheelContactData");
	cl_WheelContactData.def_property("bHasContact", [](const WheelContactData& cls_) { return cls_.bHasContact; }, [](WheelContactData& cls_, long unsigned int const& prop_) { cls_.bHasContact = prop_; });
	cl_WheelContactData.def_property("bHasContactWithWorldGeometry", [](const WheelContactData& cls_) { return cls_.bHasContactWithWorldGeometry; }, [](WheelContactData& cls_, long unsigned int const& prop_) { cls_.bHasContactWithWorldGeometry = prop_; });
	cl_WheelContactData.def_property("HasContactChangeTime", [](const WheelContactData& cls_) { return cls_.HasContactChangeTime; }, [](WheelContactData& cls_, float const& prop_) { cls_.HasContactChangeTime = prop_; });
	cl_WheelContactData.def_property("Actor", [](const WheelContactData& cls_) { return cls_.Actor; }, [](WheelContactData& cls_, void * const& prop_) { cls_.Actor = prop_; });
	cl_WheelContactData.def_property("Component", [](const WheelContactData& cls_) { return cls_.Component; }, [](WheelContactData& cls_, void * const& prop_) { cls_.Component = prop_; });
	cl_WheelContactData.def_property("Location", [](const WheelContactData& cls_) { return cls_.Location; }, [](WheelContactData& cls_, Vector const& prop_) { cls_.Location = prop_; });
	cl_WheelContactData.def_property("Normal", [](const WheelContactData& cls_) { return cls_.Normal; }, [](WheelContactData& cls_, Vector const& prop_) { cls_.Normal = prop_; });
	cl_WheelContactData.def_property("LatDirection", [](const WheelContactData& cls_) { return cls_.LatDirection; }, [](WheelContactData& cls_, Vector const& prop_) { cls_.LatDirection = prop_; });
	cl_WheelContactData.def_property("LongDirection", [](const WheelContactData& cls_) { return cls_.LongDirection; }, [](WheelContactData& cls_, Vector const& prop_) { cls_.LongDirection = prop_; });
	cl_WheelContactData.def_property("PhysMatProp", [](const WheelContactData& cls_) { return cls_.PhysMatProp; }, [](WheelContactData& cls_, void * const& prop_) { cls_.PhysMatProp = prop_; });
	cl_WheelContactData.def(pybind11::init<>());
	cl_WheelContactData.def(pybind11::init<WheelContactData const &>(), pybind11::arg("arg0"));
	// cl_WheelContactData.def(pybind11::del<>());

	pybind11::class_<ReplayScoreData, std::shared_ptr<ReplayScoreData>> cl_ReplayScoreData(m, "ReplayScoreData");
	cl_ReplayScoreData.def_property("ScoredBy", [](const ReplayScoreData& cls_) { return cls_.ScoredBy; }, [](ReplayScoreData& cls_, uintptr_t const& prop_) { cls_.ScoredBy = prop_; });
	cl_ReplayScoreData.def_property("AssistedBy", [](const ReplayScoreData& cls_) { return cls_.AssistedBy; }, [](ReplayScoreData& cls_, uintptr_t const& prop_) { cls_.AssistedBy = prop_; });
	cl_ReplayScoreData.def_property("Speed", [](const ReplayScoreData& cls_) { return cls_.Speed; }, [](ReplayScoreData& cls_, float const& prop_) { cls_.Speed = prop_; });
	cl_ReplayScoreData.def_property("Time", [](const ReplayScoreData& cls_) { return cls_.Time; }, [](ReplayScoreData& cls_, float const& prop_) { cls_.Time = prop_; });
	cl_ReplayScoreData.def_property("ScoreTeam", [](const ReplayScoreData& cls_) { return cls_.ScoreTeam; }, [](ReplayScoreData& cls_, unsigned char const& prop_) { cls_.ScoreTeam = prop_; });
	cl_ReplayScoreData.def(pybind11::init<>());
	cl_ReplayScoreData.def(pybind11::init<ReplayScoreData const &>(), pybind11::arg("arg0"));
	// cl_ReplayScoreData.def(pybind11::del<>());

	pybind11::class_<VideoSettings, std::shared_ptr<VideoSettings>> cl_VideoSettings(m, "VideoSettings");
	cl_VideoSettings.def_property("bVsync", [](const VideoSettings& cls_) { return cls_.bVsync; }, [](VideoSettings& cls_, bool const& prop_) { cls_.bVsync = prop_; });
	cl_VideoSettings.def_property("bShowWeatherFX", [](const VideoSettings& cls_) { return cls_.bShowWeatherFX; }, [](VideoSettings& cls_, bool const& prop_) { cls_.bShowWeatherFX = prop_; });
	cl_VideoSettings.def_property("bShowLightShafts", [](const VideoSettings& cls_) { return cls_.bShowLightShafts; }, [](VideoSettings& cls_, bool const& prop_) { cls_.bShowLightShafts = prop_; });
	cl_VideoSettings.def_property("bTranslucentArenaShaders", [](const VideoSettings& cls_) { return cls_.bTranslucentArenaShaders; }, [](VideoSettings& cls_, bool const& prop_) { cls_.bTranslucentArenaShaders = prop_; });
	cl_VideoSettings.def_property("bShowLensFlares", [](const VideoSettings& cls_) { return cls_.bShowLensFlares; }, [](VideoSettings& cls_, bool const& prop_) { cls_.bShowLensFlares = prop_; });
	cl_VideoSettings.def_property("bEnableHDRSideBySideVisualizer", [](const VideoSettings& cls_) { return cls_.bEnableHDRSideBySideVisualizer; }, [](VideoSettings& cls_, bool const& prop_) { cls_.bEnableHDRSideBySideVisualizer = prop_; });
	cl_VideoSettings.def_property("bUncappedFramerate", [](const VideoSettings& cls_) { return cls_.bUncappedFramerate; }, [](VideoSettings& cls_, bool const& prop_) { cls_.bUncappedFramerate = prop_; });
	cl_VideoSettings.def_property("HDRBrightnessScale", [](const VideoSettings& cls_) { return cls_.HDRBrightnessScale; }, [](VideoSettings& cls_, float const& prop_) { cls_.HDRBrightnessScale = prop_; });
	cl_VideoSettings.def_property("HDRPaperWhiteScale", [](const VideoSettings& cls_) { return cls_.HDRPaperWhiteScale; }, [](VideoSettings& cls_, float const& prop_) { cls_.HDRPaperWhiteScale = prop_; });
	cl_VideoSettings.def_property("HDRGammaScale", [](const VideoSettings& cls_) { return cls_.HDRGammaScale; }, [](VideoSettings& cls_, float const& prop_) { cls_.HDRGammaScale = prop_; });
	cl_VideoSettings.def_property("WindowMode", [](const VideoSettings& cls_) { return cls_.WindowMode; }, [](VideoSettings& cls_, int const& prop_) { cls_.WindowMode = prop_; });
	cl_VideoSettings.def_property("Resolution", [](const VideoSettings& cls_) { return cls_.Resolution; }, [](VideoSettings& cls_, std::string const& prop_) { cls_.Resolution = prop_; });
	cl_VideoSettings.def_property("MaxFPS", [](const VideoSettings& cls_) { return cls_.MaxFPS; }, [](VideoSettings& cls_, int const& prop_) { cls_.MaxFPS = prop_; });
	cl_VideoSettings.def_property("VideoOptions", [](const VideoSettings& cls_) { return cls_.VideoOptions; }, [](VideoSettings& cls_, std::map<std::basic_string<char>, std::basic_string<char>, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char> > > > const& prop_) { cls_.VideoOptions = prop_; });
	cl_VideoSettings.def(pybind11::init<VideoSettings const &>(), pybind11::arg("arg0"));
	// cl_VideoSettings.def(pybind11::del<>());
	cl_VideoSettings.def(pybind11::init<>());

	pybind11::enum_<TRADEHOLD> cl_TRADEHOLD(m, "TRADEHOLD");
	cl_TRADEHOLD.value("TRADEHOLD_P2P", TRADEHOLD::TRADEHOLD_P2P);
	cl_TRADEHOLD.value("TRADEHOLD_ALL", TRADEHOLD::TRADEHOLD_ALL);
	cl_TRADEHOLD.value("TRADEHOLD_NONE", TRADEHOLD::TRADEHOLD_NONE);
	cl_TRADEHOLD.export_values();

	pybind11::enum_<PRODUCTQUALITY> cl_PRODUCTQUALITY(m, "PRODUCTQUALITY");
	cl_PRODUCTQUALITY.value("Common", PRODUCTQUALITY::Common);
	cl_PRODUCTQUALITY.value("Uncommon", PRODUCTQUALITY::Uncommon);
	cl_PRODUCTQUALITY.value("Rare", PRODUCTQUALITY::Rare);
	cl_PRODUCTQUALITY.value("VeryRare", PRODUCTQUALITY::VeryRare);
	cl_PRODUCTQUALITY.value("Import", PRODUCTQUALITY::Import);
	cl_PRODUCTQUALITY.value("Exotic", PRODUCTQUALITY::Exotic);
	cl_PRODUCTQUALITY.value("BlackMarket", PRODUCTQUALITY::BlackMarket);
	cl_PRODUCTQUALITY.value("Premium", PRODUCTQUALITY::Premium);
	cl_PRODUCTQUALITY.value("Limited", PRODUCTQUALITY::Limited);
	cl_PRODUCTQUALITY.value("MAX", PRODUCTQUALITY::MAX);
	cl_PRODUCTQUALITY.export_values();

	pybind11::enum_<UNLOCKMETHOD> cl_UNLOCKMETHOD(m, "UNLOCKMETHOD");
	cl_UNLOCKMETHOD.value("Default", UNLOCKMETHOD::Default);
	cl_UNLOCKMETHOD.value("Drop", UNLOCKMETHOD::Drop);
	cl_UNLOCKMETHOD.value("Special", UNLOCKMETHOD::Special);
	cl_UNLOCKMETHOD.value("Reward", UNLOCKMETHOD::Reward);
	cl_UNLOCKMETHOD.value("DLC", UNLOCKMETHOD::DLC);
	cl_UNLOCKMETHOD.value("Never", UNLOCKMETHOD::Never);
	cl_UNLOCKMETHOD.value("MAX_", UNLOCKMETHOD::MAX_);
	cl_UNLOCKMETHOD.export_values();

	pybind11::enum_<CARBODY> cl_CARBODY(m, "CARBODY");
	cl_CARBODY.value("CAR_BACKFIRE", CARBODY::CAR_BACKFIRE);
	cl_CARBODY.value("CAR_BREAKOUT", CARBODY::CAR_BREAKOUT);
	cl_CARBODY.value("CAR_BREAKOUTTYPES", CARBODY::CAR_BREAKOUTTYPES);
	cl_CARBODY.value("CAR_OCTANE", CARBODY::CAR_OCTANE);
	cl_CARBODY.value("CAR_OCTANEZSR", CARBODY::CAR_OCTANEZSR);
	cl_CARBODY.value("CAR_PALADIN", CARBODY::CAR_PALADIN);
	cl_CARBODY.value("CAR_ROADHOG", CARBODY::CAR_ROADHOG);
	cl_CARBODY.value("CAR_ROADHOGXL", CARBODY::CAR_ROADHOGXL);
	cl_CARBODY.value("CAR_GIZMO", CARBODY::CAR_GIZMO);
	cl_CARBODY.value("CAR_SWEETTOOTH", CARBODY::CAR_SWEETTOOTH);
	cl_CARBODY.value("CAR_XDEVIL", CARBODY::CAR_XDEVIL);
	cl_CARBODY.value("CAR_XDEVILMK2", CARBODY::CAR_XDEVILMK2);
	cl_CARBODY.value("CAR_HOTSHOT", CARBODY::CAR_HOTSHOT);
	cl_CARBODY.value("CAR_MERC", CARBODY::CAR_MERC);
	cl_CARBODY.value("CAR_VENOM", CARBODY::CAR_VENOM);
	cl_CARBODY.value("CAR_TAKUMI", CARBODY::CAR_TAKUMI);
	cl_CARBODY.value("CAR_TAKUMIRXT", CARBODY::CAR_TAKUMIRXT);
	cl_CARBODY.value("CAR_DOMINUS", CARBODY::CAR_DOMINUS);
	cl_CARBODY.value("CAR_DOMINUSGT", CARBODY::CAR_DOMINUSGT);
	cl_CARBODY.value("CAR_SCARAB", CARBODY::CAR_SCARAB);
	cl_CARBODY.value("CAR_ZIPPY", CARBODY::CAR_ZIPPY);
	cl_CARBODY.value("CAR_DELOREAN", CARBODY::CAR_DELOREAN);
	cl_CARBODY.value("CAR_RIPPER", CARBODY::CAR_RIPPER);
	cl_CARBODY.value("CAR_GROG", CARBODY::CAR_GROG);
	cl_CARBODY.value("CAR_ARMADILLO", CARBODY::CAR_ARMADILLO);
	cl_CARBODY.value("CAR_WARTHOG", CARBODY::CAR_WARTHOG);
	cl_CARBODY.value("CAR_BATMOBILE", CARBODY::CAR_BATMOBILE);
	cl_CARBODY.value("CAR_MASAMUNE", CARBODY::CAR_MASAMUNE);
	cl_CARBODY.value("CAR_MARAUDER", CARBODY::CAR_MARAUDER);
	cl_CARBODY.value("CAR_AFTERSHOCK", CARBODY::CAR_AFTERSHOCK);
	cl_CARBODY.value("CAR_ESPER", CARBODY::CAR_ESPER);
	cl_CARBODY.value("CAR_PROTEUS", CARBODY::CAR_PROTEUS);
	cl_CARBODY.value("CAR_TRITON", CARBODY::CAR_TRITON);
	cl_CARBODY.value("CAR_VULCAN", CARBODY::CAR_VULCAN);
	cl_CARBODY.value("CAR_TWINMILL", CARBODY::CAR_TWINMILL);
	cl_CARBODY.value("CAR_BONESHAKER", CARBODY::CAR_BONESHAKER);
	cl_CARBODY.value("CAR_ENDO", CARBODY::CAR_ENDO);
	cl_CARBODY.value("CAR_ICECHARGER", CARBODY::CAR_ICECHARGER);
	cl_CARBODY.value("CAR_MANTIS", CARBODY::CAR_MANTIS);
	cl_CARBODY.value("CAR_JOGER619RS", CARBODY::CAR_JOGER619RS);
	cl_CARBODY.value("CAR_CENTIO", CARBODY::CAR_CENTIO);
	cl_CARBODY.value("CAR_ANIMUSGP", CARBODY::CAR_ANIMUSGP);
	cl_CARBODY.export_values();

	pybind11::enum_<OnlinePlatform> cl_OnlinePlatform(m, "OnlinePlatform");
	cl_OnlinePlatform.value("OnlinePlatform_Unknown", OnlinePlatform::OnlinePlatform_Unknown);
	cl_OnlinePlatform.value("OnlinePlatform_Steam", OnlinePlatform::OnlinePlatform_Steam);
	cl_OnlinePlatform.value("OnlinePlatform_PS4", OnlinePlatform::OnlinePlatform_PS4);
	cl_OnlinePlatform.value("OnlinePlatform_PS3", OnlinePlatform::OnlinePlatform_PS3);
	cl_OnlinePlatform.value("OnlinePlatform_Dingo", OnlinePlatform::OnlinePlatform_Dingo);
	cl_OnlinePlatform.value("OnlinePlatform_QQ", OnlinePlatform::OnlinePlatform_QQ);
	cl_OnlinePlatform.value("OnlinePlatform_OldNNX", OnlinePlatform::OnlinePlatform_OldNNX);
	cl_OnlinePlatform.value("OnlinePlatform_NNX", OnlinePlatform::OnlinePlatform_NNX);
	cl_OnlinePlatform.value("OnlinePlatform_PsyNet", OnlinePlatform::OnlinePlatform_PsyNet);
	cl_OnlinePlatform.value("OnlinePlatform_Deleted", OnlinePlatform::OnlinePlatform_Deleted);
	cl_OnlinePlatform.value("OnlinePlatform_WeGame", OnlinePlatform::OnlinePlatform_WeGame);
	cl_OnlinePlatform.value("OnlinePlatform_Epic", OnlinePlatform::OnlinePlatform_Epic);
	cl_OnlinePlatform.value("OnlinePlatform_MAX", OnlinePlatform::OnlinePlatform_MAX);
	cl_OnlinePlatform.export_values();
}
