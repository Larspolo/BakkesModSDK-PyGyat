void bind_ActorWrapper(pybind11::module& m)
{

	pybind11::class_<ActorWrapper, std::shared_ptr<ActorWrapper>, ObjectWrapper> cl_ActorWrapper(m, "ActorWrapper");
	cl_ActorWrapper.def(pybind11::init<uintptr_t>(), pybind11::arg("mem"));
	cl_ActorWrapper.def(pybind11::init<ActorWrapper const &>(), pybind11::arg("other"));
	// cl_ActorWrapper.def(pybind11::del<>());
	cl_ActorWrapper.def("GetLocation", [](ActorWrapper& cls_) { return cls_.GetLocation(); });
	cl_ActorWrapper.def("SetLocation", [](ActorWrapper& cls_, Vector const location) { return cls_.SetLocation(location); }, pybind11::arg("location"));
	cl_ActorWrapper.def("GetVelocity", [](ActorWrapper& cls_) { return cls_.GetVelocity(); });
	cl_ActorWrapper.def("SetVelocity", [](ActorWrapper& cls_, Vector const velocity) { return cls_.SetVelocity(velocity); }, pybind11::arg("velocity"));
	cl_ActorWrapper.def("AddVelocity", [](ActorWrapper& cls_, Vector const velocity) { return cls_.AddVelocity(velocity); }, pybind11::arg("velocity"));
	cl_ActorWrapper.def("GetRotation", [](ActorWrapper& cls_) { return cls_.GetRotation(); });
	cl_ActorWrapper.def("SetRotation", [](ActorWrapper& cls_, Rotator const rotation) { return cls_.SetRotation(rotation); }, pybind11::arg("rotation"));
	cl_ActorWrapper.def("SetTorque", [](ActorWrapper& cls_, Vector const torq) { return cls_.SetTorque(torq); }, pybind11::arg("torq"));
	cl_ActorWrapper.def("Stop", [](ActorWrapper& cls_) { return cls_.Stop(); });
	cl_ActorWrapper.def("GetAngularVelocity", [](ActorWrapper& cls_) { return cls_.GetAngularVelocity(); });
	cl_ActorWrapper.def("SetAngularVelocity", [](ActorWrapper& cls_, Vector const v, bool addToCurrent) { return cls_.SetAngularVelocity(v, addToCurrent); }, pybind11::arg("v"), pybind11::arg("addToCurrent"));
	cl_ActorWrapper.def("IsNull", [](ActorWrapper& cls_) { return cls_.IsNull(); });
	cl_ActorWrapper.def("GetWorldInfo", [](ActorWrapper& cls_) { return cls_.GetWorldInfo(); });
	cl_ActorWrapper.def("GetDrawScale", [](ActorWrapper& cls_) { return cls_.GetDrawScale(); });
	cl_ActorWrapper.def("SetDrawScale", [](ActorWrapper& cls_, float newDrawScale) { return cls_.SetDrawScale(newDrawScale); }, pybind11::arg("newDrawScale"));
	cl_ActorWrapper.def("GetDrawScale3D", [](ActorWrapper& cls_) { return cls_.GetDrawScale3D(); });
	cl_ActorWrapper.def("SetDrawScale3D", [](ActorWrapper& cls_, Vector newDrawScale3D) { return cls_.SetDrawScale3D(newDrawScale3D); }, pybind11::arg("newDrawScale3D"));
	cl_ActorWrapper.def("GetPrePivot", [](ActorWrapper& cls_) { return cls_.GetPrePivot(); });
	cl_ActorWrapper.def("SetPrePivot", [](ActorWrapper& cls_, Vector newPrePivot) { return cls_.SetPrePivot(newPrePivot); }, pybind11::arg("newPrePivot"));
	cl_ActorWrapper.def("GetEditorIconColor", [](ActorWrapper& cls_) { return cls_.GetEditorIconColor(); });
	cl_ActorWrapper.def("SetEditorIconColor", [](ActorWrapper& cls_, UnrealColor newEditorIconColor) { return cls_.SetEditorIconColor(newEditorIconColor); }, pybind11::arg("newEditorIconColor"));
	cl_ActorWrapper.def("GetCustomTimeDilation", [](ActorWrapper& cls_) { return cls_.GetCustomTimeDilation(); });
	cl_ActorWrapper.def("SetCustomTimeDilation", [](ActorWrapper& cls_, float newCustomTimeDilation) { return cls_.SetCustomTimeDilation(newCustomTimeDilation); }, pybind11::arg("newCustomTimeDilation"));
	cl_ActorWrapper.def("GetPhysics", [](ActorWrapper& cls_) { return cls_.GetPhysics(); });
	cl_ActorWrapper.def("SetPhysics", [](ActorWrapper& cls_, unsigned char newPhysics) { return cls_.SetPhysics(newPhysics); }, pybind11::arg("newPhysics"));
	cl_ActorWrapper.def("GetRemoteRole", [](ActorWrapper& cls_) { return cls_.GetRemoteRole(); });
	cl_ActorWrapper.def("SetRemoteRole", [](ActorWrapper& cls_, unsigned char newRemoteRole) { return cls_.SetRemoteRole(newRemoteRole); }, pybind11::arg("newRemoteRole"));
	cl_ActorWrapper.def("GetRole", [](ActorWrapper& cls_) { return cls_.GetRole(); });
	cl_ActorWrapper.def("SetRole", [](ActorWrapper& cls_, unsigned char newRole) { return cls_.SetRole(newRole); }, pybind11::arg("newRole"));
	cl_ActorWrapper.def("GetCollisionType", [](ActorWrapper& cls_) { return cls_.GetCollisionType(); });
	cl_ActorWrapper.def("SetCollisionType", [](ActorWrapper& cls_, unsigned char newCollisionType) { return cls_.SetCollisionType(newCollisionType); }, pybind11::arg("newCollisionType"));
	cl_ActorWrapper.def("GetReplicatedCollisionType", [](ActorWrapper& cls_) { return cls_.GetReplicatedCollisionType(); });
	cl_ActorWrapper.def("SetReplicatedCollisionType", [](ActorWrapper& cls_, unsigned char newReplicatedCollisionType) { return cls_.SetReplicatedCollisionType(newReplicatedCollisionType); }, pybind11::arg("newReplicatedCollisionType"));
	cl_ActorWrapper.def("GetOwner", [](ActorWrapper& cls_) { return cls_.GetOwner(); });
	cl_ActorWrapper.def("GetBase", [](ActorWrapper& cls_) { return cls_.GetBase(); });
	cl_ActorWrapper.def("GetbStatic", [](ActorWrapper& cls_) { return cls_.GetbStatic(); });
	cl_ActorWrapper.def("GetbHidden", [](ActorWrapper& cls_) { return cls_.GetbHidden(); });
	cl_ActorWrapper.def("GetbHiddenSelf", [](ActorWrapper& cls_) { return cls_.GetbHiddenSelf(); });
	cl_ActorWrapper.def("SetbHiddenSelf", [](ActorWrapper& cls_, long unsigned int newbHiddenSelf) { return cls_.SetbHiddenSelf(newbHiddenSelf); }, pybind11::arg("newbHiddenSelf"));
	cl_ActorWrapper.def("GetbNoDelete", [](ActorWrapper& cls_) { return cls_.GetbNoDelete(); });
	cl_ActorWrapper.def("SetbNoDelete", [](ActorWrapper& cls_, long unsigned int newbNoDelete) { return cls_.SetbNoDelete(newbNoDelete); }, pybind11::arg("newbNoDelete"));
	cl_ActorWrapper.def("GetbDeleteMe", [](ActorWrapper& cls_) { return cls_.GetbDeleteMe(); });
	cl_ActorWrapper.def("SetbDeleteMe", [](ActorWrapper& cls_, long unsigned int newbDeleteMe) { return cls_.SetbDeleteMe(newbDeleteMe); }, pybind11::arg("newbDeleteMe"));
	cl_ActorWrapper.def("GetbTicked", [](ActorWrapper& cls_) { return cls_.GetbTicked(); });
	cl_ActorWrapper.def("SetbTicked", [](ActorWrapper& cls_, long unsigned int newbTicked) { return cls_.SetbTicked(newbTicked); }, pybind11::arg("newbTicked"));
	cl_ActorWrapper.def("GetbOnlyOwnerSee", [](ActorWrapper& cls_) { return cls_.GetbOnlyOwnerSee(); });
	cl_ActorWrapper.def("SetbOnlyOwnerSee", [](ActorWrapper& cls_, long unsigned int newbOnlyOwnerSee) { return cls_.SetbOnlyOwnerSee(newbOnlyOwnerSee); }, pybind11::arg("newbOnlyOwnerSee"));
	cl_ActorWrapper.def("GetbTickIsDisabled", [](ActorWrapper& cls_) { return cls_.GetbTickIsDisabled(); });
	cl_ActorWrapper.def("SetbTickIsDisabled", [](ActorWrapper& cls_, long unsigned int newbTickIsDisabled) { return cls_.SetbTickIsDisabled(newbTickIsDisabled); }, pybind11::arg("newbTickIsDisabled"));
	cl_ActorWrapper.def("GetbWorldGeometry", [](ActorWrapper& cls_) { return cls_.GetbWorldGeometry(); });
	cl_ActorWrapper.def("SetbWorldGeometry", [](ActorWrapper& cls_, long unsigned int newbWorldGeometry) { return cls_.SetbWorldGeometry(newbWorldGeometry); }, pybind11::arg("newbWorldGeometry"));
	cl_ActorWrapper.def("GetbIgnoreRigidBodyPawns", [](ActorWrapper& cls_) { return cls_.GetbIgnoreRigidBodyPawns(); });
	cl_ActorWrapper.def("SetbIgnoreRigidBodyPawns", [](ActorWrapper& cls_, long unsigned int newbIgnoreRigidBodyPawns) { return cls_.SetbIgnoreRigidBodyPawns(newbIgnoreRigidBodyPawns); }, pybind11::arg("newbIgnoreRigidBodyPawns"));
	cl_ActorWrapper.def("GetbOrientOnSlope", [](ActorWrapper& cls_) { return cls_.GetbOrientOnSlope(); });
	cl_ActorWrapper.def("SetbOrientOnSlope", [](ActorWrapper& cls_, long unsigned int newbOrientOnSlope) { return cls_.SetbOrientOnSlope(newbOrientOnSlope); }, pybind11::arg("newbOrientOnSlope"));
	cl_ActorWrapper.def("GetbIsMoving", [](ActorWrapper& cls_) { return cls_.GetbIsMoving(); });
	cl_ActorWrapper.def("GetbAlwaysEncroachCheck", [](ActorWrapper& cls_) { return cls_.GetbAlwaysEncroachCheck(); });
	cl_ActorWrapper.def("SetbAlwaysEncroachCheck", [](ActorWrapper& cls_, long unsigned int newbAlwaysEncroachCheck) { return cls_.SetbAlwaysEncroachCheck(newbAlwaysEncroachCheck); }, pybind11::arg("newbAlwaysEncroachCheck"));
	cl_ActorWrapper.def("GetbHasAlternateTargetLocation", [](ActorWrapper& cls_) { return cls_.GetbHasAlternateTargetLocation(); });
	cl_ActorWrapper.def("GetbAlwaysRelevant", [](ActorWrapper& cls_) { return cls_.GetbAlwaysRelevant(); });
	cl_ActorWrapper.def("GetbReplicateInstigator", [](ActorWrapper& cls_) { return cls_.GetbReplicateInstigator(); });
	cl_ActorWrapper.def("GetbReplicateMovement", [](ActorWrapper& cls_) { return cls_.GetbReplicateMovement(); });
	cl_ActorWrapper.def("GetbUpdateSimulatedPosition", [](ActorWrapper& cls_) { return cls_.GetbUpdateSimulatedPosition(); });
	cl_ActorWrapper.def("SetbUpdateSimulatedPosition", [](ActorWrapper& cls_, long unsigned int newbUpdateSimulatedPosition) { return cls_.SetbUpdateSimulatedPosition(newbUpdateSimulatedPosition); }, pybind11::arg("newbUpdateSimulatedPosition"));
	cl_ActorWrapper.def("GetbDemoRecording", [](ActorWrapper& cls_) { return cls_.GetbDemoRecording(); });
	cl_ActorWrapper.def("SetbDemoRecording", [](ActorWrapper& cls_, long unsigned int newbDemoRecording) { return cls_.SetbDemoRecording(newbDemoRecording); }, pybind11::arg("newbDemoRecording"));
	cl_ActorWrapper.def("GetbDemoOwner", [](ActorWrapper& cls_) { return cls_.GetbDemoOwner(); });
	cl_ActorWrapper.def("SetbDemoOwner", [](ActorWrapper& cls_, long unsigned int newbDemoOwner) { return cls_.SetbDemoOwner(newbDemoOwner); }, pybind11::arg("newbDemoOwner"));
	cl_ActorWrapper.def("GetbForceDemoRelevant", [](ActorWrapper& cls_) { return cls_.GetbForceDemoRelevant(); });
	cl_ActorWrapper.def("SetbForceDemoRelevant", [](ActorWrapper& cls_, long unsigned int newbForceDemoRelevant) { return cls_.SetbForceDemoRelevant(newbForceDemoRelevant); }, pybind11::arg("newbForceDemoRelevant"));
	cl_ActorWrapper.def("GetbNetInitialRotation", [](ActorWrapper& cls_) { return cls_.GetbNetInitialRotation(); });
	cl_ActorWrapper.def("SetbNetInitialRotation", [](ActorWrapper& cls_, long unsigned int newbNetInitialRotation) { return cls_.SetbNetInitialRotation(newbNetInitialRotation); }, pybind11::arg("newbNetInitialRotation"));
	cl_ActorWrapper.def("GetbReplicateRigidBodyLocation", [](ActorWrapper& cls_) { return cls_.GetbReplicateRigidBodyLocation(); });
	cl_ActorWrapper.def("SetbReplicateRigidBodyLocation", [](ActorWrapper& cls_, long unsigned int newbReplicateRigidBodyLocation) { return cls_.SetbReplicateRigidBodyLocation(newbReplicateRigidBodyLocation); }, pybind11::arg("newbReplicateRigidBodyLocation"));
	cl_ActorWrapper.def("GetbKillDuringLevelTransition", [](ActorWrapper& cls_) { return cls_.GetbKillDuringLevelTransition(); });
	cl_ActorWrapper.def("SetbKillDuringLevelTransition", [](ActorWrapper& cls_, long unsigned int newbKillDuringLevelTransition) { return cls_.SetbKillDuringLevelTransition(newbKillDuringLevelTransition); }, pybind11::arg("newbKillDuringLevelTransition"));
	cl_ActorWrapper.def("GetbPostRenderIfNotVisible", [](ActorWrapper& cls_) { return cls_.GetbPostRenderIfNotVisible(); });
	cl_ActorWrapper.def("SetbPostRenderIfNotVisible", [](ActorWrapper& cls_, long unsigned int newbPostRenderIfNotVisible) { return cls_.SetbPostRenderIfNotVisible(newbPostRenderIfNotVisible); }, pybind11::arg("newbPostRenderIfNotVisible"));
	cl_ActorWrapper.def("GetbForceNetUpdate", [](ActorWrapper& cls_) { return cls_.GetbForceNetUpdate(); });
	cl_ActorWrapper.def("SetbForceNetUpdate", [](ActorWrapper& cls_, long unsigned int newbForceNetUpdate) { return cls_.SetbForceNetUpdate(newbForceNetUpdate); }, pybind11::arg("newbForceNetUpdate"));
	cl_ActorWrapper.def("GetbForcePacketUpdate", [](ActorWrapper& cls_) { return cls_.GetbForcePacketUpdate(); });
	cl_ActorWrapper.def("SetbForcePacketUpdate", [](ActorWrapper& cls_, long unsigned int newbForcePacketUpdate) { return cls_.SetbForcePacketUpdate(newbForcePacketUpdate); }, pybind11::arg("newbForcePacketUpdate"));
	cl_ActorWrapper.def("GetbPendingNetUpdate", [](ActorWrapper& cls_) { return cls_.GetbPendingNetUpdate(); });
	cl_ActorWrapper.def("SetbPendingNetUpdate", [](ActorWrapper& cls_, long unsigned int newbPendingNetUpdate) { return cls_.SetbPendingNetUpdate(newbPendingNetUpdate); }, pybind11::arg("newbPendingNetUpdate"));
	cl_ActorWrapper.def("GetbGameRelevant", [](ActorWrapper& cls_) { return cls_.GetbGameRelevant(); });
	cl_ActorWrapper.def("SetbGameRelevant", [](ActorWrapper& cls_, long unsigned int newbGameRelevant) { return cls_.SetbGameRelevant(newbGameRelevant); }, pybind11::arg("newbGameRelevant"));
	cl_ActorWrapper.def("GetbMovable", [](ActorWrapper& cls_) { return cls_.GetbMovable(); });
	cl_ActorWrapper.def("SetbMovable", [](ActorWrapper& cls_, long unsigned int newbMovable) { return cls_.SetbMovable(newbMovable); }, pybind11::arg("newbMovable"));
	cl_ActorWrapper.def("GetbCanTeleport", [](ActorWrapper& cls_) { return cls_.GetbCanTeleport(); });
	cl_ActorWrapper.def("SetbCanTeleport", [](ActorWrapper& cls_, long unsigned int newbCanTeleport) { return cls_.SetbCanTeleport(newbCanTeleport); }, pybind11::arg("newbCanTeleport"));
	cl_ActorWrapper.def("GetbAlwaysTick", [](ActorWrapper& cls_) { return cls_.GetbAlwaysTick(); });
	cl_ActorWrapper.def("SetbAlwaysTick", [](ActorWrapper& cls_, long unsigned int newbAlwaysTick) { return cls_.SetbAlwaysTick(newbAlwaysTick); }, pybind11::arg("newbAlwaysTick"));
	cl_ActorWrapper.def("GetbBlocksNavigation", [](ActorWrapper& cls_) { return cls_.GetbBlocksNavigation(); });
	cl_ActorWrapper.def("SetbBlocksNavigation", [](ActorWrapper& cls_, long unsigned int newbBlocksNavigation) { return cls_.SetbBlocksNavigation(newbBlocksNavigation); }, pybind11::arg("newbBlocksNavigation"));
	cl_ActorWrapper.def("GetBlockRigidBody", [](ActorWrapper& cls_) { return cls_.GetBlockRigidBody(); });
	cl_ActorWrapper.def("SetBlockRigidBody", [](ActorWrapper& cls_, long unsigned int newBlockRigidBody) { return cls_.SetBlockRigidBody(newBlockRigidBody); }, pybind11::arg("newBlockRigidBody"));
	cl_ActorWrapper.def("GetbCollideWhenPlacing", [](ActorWrapper& cls_) { return cls_.GetbCollideWhenPlacing(); });
	cl_ActorWrapper.def("SetbCollideWhenPlacing", [](ActorWrapper& cls_, long unsigned int newbCollideWhenPlacing) { return cls_.SetbCollideWhenPlacing(newbCollideWhenPlacing); }, pybind11::arg("newbCollideWhenPlacing"));
	cl_ActorWrapper.def("GetbCollideActors", [](ActorWrapper& cls_) { return cls_.GetbCollideActors(); });
	cl_ActorWrapper.def("SetbCollideActors", [](ActorWrapper& cls_, long unsigned int newbCollideActors) { return cls_.SetbCollideActors(newbCollideActors); }, pybind11::arg("newbCollideActors"));
	cl_ActorWrapper.def("GetbCollideWorld", [](ActorWrapper& cls_) { return cls_.GetbCollideWorld(); });
	cl_ActorWrapper.def("SetbCollideWorld", [](ActorWrapper& cls_, long unsigned int newbCollideWorld) { return cls_.SetbCollideWorld(newbCollideWorld); }, pybind11::arg("newbCollideWorld"));
	cl_ActorWrapper.def("GetbCollideComplex", [](ActorWrapper& cls_) { return cls_.GetbCollideComplex(); });
	cl_ActorWrapper.def("SetbCollideComplex", [](ActorWrapper& cls_, long unsigned int newbCollideComplex) { return cls_.SetbCollideComplex(newbCollideComplex); }, pybind11::arg("newbCollideComplex"));
	cl_ActorWrapper.def("GetbBlockActors", [](ActorWrapper& cls_) { return cls_.GetbBlockActors(); });
	cl_ActorWrapper.def("SetbBlockActors", [](ActorWrapper& cls_, long unsigned int newbBlockActors) { return cls_.SetbBlockActors(newbBlockActors); }, pybind11::arg("newbBlockActors"));
	cl_ActorWrapper.def("GetbBlocksTeleport", [](ActorWrapper& cls_) { return cls_.GetbBlocksTeleport(); });
	cl_ActorWrapper.def("SetbBlocksTeleport", [](ActorWrapper& cls_, long unsigned int newbBlocksTeleport) { return cls_.SetbBlocksTeleport(newbBlocksTeleport); }, pybind11::arg("newbBlocksTeleport"));
	cl_ActorWrapper.def("GetbPhysRigidBodyOutOfWorldCheck", [](ActorWrapper& cls_) { return cls_.GetbPhysRigidBodyOutOfWorldCheck(); });
	cl_ActorWrapper.def("SetbPhysRigidBodyOutOfWorldCheck", [](ActorWrapper& cls_, long unsigned int newbPhysRigidBodyOutOfWorldCheck) { return cls_.SetbPhysRigidBodyOutOfWorldCheck(newbPhysRigidBodyOutOfWorldCheck); }, pybind11::arg("newbPhysRigidBodyOutOfWorldCheck"));
	cl_ActorWrapper.def("GetbComponentOutsideWorld", [](ActorWrapper& cls_) { return cls_.GetbComponentOutsideWorld(); });
	cl_ActorWrapper.def("GetbRigidBodyWasAwake", [](ActorWrapper& cls_) { return cls_.GetbRigidBodyWasAwake(); });
	cl_ActorWrapper.def("SetbRigidBodyWasAwake", [](ActorWrapper& cls_, long unsigned int newbRigidBodyWasAwake) { return cls_.SetbRigidBodyWasAwake(newbRigidBodyWasAwake); }, pybind11::arg("newbRigidBodyWasAwake"));
	cl_ActorWrapper.def("GetbCallRigidBodyWakeEvents", [](ActorWrapper& cls_) { return cls_.GetbCallRigidBodyWakeEvents(); });
	cl_ActorWrapper.def("SetbCallRigidBodyWakeEvents", [](ActorWrapper& cls_, long unsigned int newbCallRigidBodyWakeEvents) { return cls_.SetbCallRigidBodyWakeEvents(newbCallRigidBodyWakeEvents); }, pybind11::arg("newbCallRigidBodyWakeEvents"));
	cl_ActorWrapper.def("GetbBounce", [](ActorWrapper& cls_) { return cls_.GetbBounce(); });
	cl_ActorWrapper.def("SetbBounce", [](ActorWrapper& cls_, long unsigned int newbBounce) { return cls_.SetbBounce(newbBounce); }, pybind11::arg("newbBounce"));
	cl_ActorWrapper.def("GetbEditable", [](ActorWrapper& cls_) { return cls_.GetbEditable(); });
	cl_ActorWrapper.def("SetbEditable", [](ActorWrapper& cls_, long unsigned int newbEditable) { return cls_.SetbEditable(newbEditable); }, pybind11::arg("newbEditable"));
	cl_ActorWrapper.def("GetbLockLocation", [](ActorWrapper& cls_) { return cls_.GetbLockLocation(); });
	cl_ActorWrapper.def("SetbLockLocation", [](ActorWrapper& cls_, long unsigned int newbLockLocation) { return cls_.SetbLockLocation(newbLockLocation); }, pybind11::arg("newbLockLocation"));
	cl_ActorWrapper.def("GetNetUpdateTime", [](ActorWrapper& cls_) { return cls_.GetNetUpdateTime(); });
	cl_ActorWrapper.def("SetNetUpdateTime", [](ActorWrapper& cls_, float newNetUpdateTime) { return cls_.SetNetUpdateTime(newNetUpdateTime); }, pybind11::arg("newNetUpdateTime"));
	cl_ActorWrapper.def("GetNetUpdateFrequency", [](ActorWrapper& cls_) { return cls_.GetNetUpdateFrequency(); });
	cl_ActorWrapper.def("SetNetUpdateFrequency", [](ActorWrapper& cls_, float newNetUpdateFrequency) { return cls_.SetNetUpdateFrequency(newNetUpdateFrequency); }, pybind11::arg("newNetUpdateFrequency"));
	cl_ActorWrapper.def("GetNetPriority", [](ActorWrapper& cls_) { return cls_.GetNetPriority(); });
	cl_ActorWrapper.def("SetNetPriority", [](ActorWrapper& cls_, float newNetPriority) { return cls_.SetNetPriority(newNetPriority); }, pybind11::arg("newNetPriority"));
	cl_ActorWrapper.def("GetLastNetUpdateTime", [](ActorWrapper& cls_) { return cls_.GetLastNetUpdateTime(); });
	cl_ActorWrapper.def("GetLastForcePacketUpdateTime", [](ActorWrapper& cls_) { return cls_.GetLastForcePacketUpdateTime(); });
	cl_ActorWrapper.def("SetLastForcePacketUpdateTime", [](ActorWrapper& cls_, float newLastForcePacketUpdateTime) { return cls_.SetLastForcePacketUpdateTime(newLastForcePacketUpdateTime); }, pybind11::arg("newLastForcePacketUpdateTime"));
	cl_ActorWrapper.def("GetTimeSinceLastTick", [](ActorWrapper& cls_) { return cls_.GetTimeSinceLastTick(); });
	cl_ActorWrapper.def("GetLifeSpan", [](ActorWrapper& cls_) { return cls_.GetLifeSpan(); });
	cl_ActorWrapper.def("GetCreationTime", [](ActorWrapper& cls_) { return cls_.GetCreationTime(); });
	cl_ActorWrapper.def("GetLastRenderTime", [](ActorWrapper& cls_) { return cls_.GetLastRenderTime(); });
	cl_ActorWrapper.def("GetHiddenEditorViews", [](ActorWrapper& cls_) { return cls_.GetHiddenEditorViews(); });
	cl_ActorWrapper.def("SetHiddenEditorViews", [](ActorWrapper& cls_, long long unsigned int newHiddenEditorViews) { return cls_.SetHiddenEditorViews(newHiddenEditorViews); }, pybind11::arg("newHiddenEditorViews"));
	cl_ActorWrapper.def("GetAttached", [](ActorWrapper& cls_) { return cls_.GetAttached(); });
	cl_ActorWrapper.def("GetRelativeLocation", [](ActorWrapper& cls_) { return cls_.GetRelativeLocation(); });
	cl_ActorWrapper.def("SetRelativeLocation", [](ActorWrapper& cls_, Vector newRelativeLocation) { return cls_.SetRelativeLocation(newRelativeLocation); }, pybind11::arg("newRelativeLocation"));
	cl_ActorWrapper.def("GetRelativeRotation", [](ActorWrapper& cls_) { return cls_.GetRelativeRotation(); });
	cl_ActorWrapper.def("SetRelativeRotation", [](ActorWrapper& cls_, Rotator newRelativeRotation) { return cls_.SetRelativeRotation(newRelativeRotation); }, pybind11::arg("newRelativeRotation"));
	cl_ActorWrapper.def("GetCollisionComponent", [](ActorWrapper& cls_) { return cls_.GetCollisionComponent(); });
	cl_ActorWrapper.def("ForceNetUpdatePacket", [](ActorWrapper& cls_) { return cls_.ForceNetUpdatePacket(); });
	cl_ActorWrapper.def("ForceNetUpdate2", [](ActorWrapper& cls_) { return cls_.ForceNetUpdate2(); });
	cl_ActorWrapper.def("WillOverlap", [](ActorWrapper& cls_, Vector & PosA, Vector & VelA, Vector & PosB, Vector & VelB, float StepSize, float Radius, float * Time) { return cls_.WillOverlap(PosA, VelA, PosB, VelB, StepSize, Radius, Time); }, pybind11::arg("PosA"), pybind11::arg("VelA"), pybind11::arg("PosB"), pybind11::arg("VelB"), pybind11::arg("StepSize"), pybind11::arg("Radius"), pybind11::arg("Time"));
	cl_ActorWrapper.def("eventReplicationEnded", [](ActorWrapper& cls_) { return cls_.eventReplicationEnded(); });
	cl_ActorWrapper.def("eventPostDemoRewind", [](ActorWrapper& cls_) { return cls_.eventPostDemoRewind(); });
	cl_ActorWrapper.def("IsInPersistentLevel", [](ActorWrapper& cls_, long unsigned int bIncludeLevelStreamingPersistent) { return cls_.IsInPersistentLevel(bIncludeLevelStreamingPersistent); }, pybind11::arg("bIncludeLevelStreamingPersistent"));
	cl_ActorWrapper.def("SetHUDLocation", [](ActorWrapper& cls_, Vector & NewHUDLocation) { return cls_.SetHUDLocation(NewHUDLocation); }, pybind11::arg("NewHUDLocation"));
	cl_ActorWrapper.def("eventSpawnedByKismet", [](ActorWrapper& cls_) { return cls_.eventSpawnedByKismet(); });
	cl_ActorWrapper.def("GetTargetLocation", [](ActorWrapper& cls_, ActorWrapper RequestedBy, long unsigned int bRequestAlternateLoc) { return cls_.GetTargetLocation(RequestedBy, bRequestAlternateLoc); }, pybind11::arg("RequestedBy"), pybind11::arg("bRequestAlternateLoc"));
	cl_ActorWrapper.def("eventScriptGetTeamNum", [](ActorWrapper& cls_) { return cls_.eventScriptGetTeamNum(); });
	cl_ActorWrapper.def("GetTeamNum2", [](ActorWrapper& cls_) { return cls_.GetTeamNum2(); });
	cl_ActorWrapper.def("IsPlayerOwned", [](ActorWrapper& cls_) { return cls_.IsPlayerOwned(); });
	cl_ActorWrapper.def("IsStationary", [](ActorWrapper& cls_) { return cls_.IsStationary(); });
	cl_ActorWrapper.def("eventDebugMessagePlayer", [](ActorWrapper& cls_, std::string msg) { return cls_.eventDebugMessagePlayer(msg); }, pybind11::arg("msg"));
	cl_ActorWrapper.def("GetGravityAcceleration", [](ActorWrapper& cls_) { return cls_.GetGravityAcceleration(); });
	cl_ActorWrapper.def("GetGravityDirection", [](ActorWrapper& cls_) { return cls_.GetGravityDirection(); });
	cl_ActorWrapper.def("GetGravityZ", [](ActorWrapper& cls_) { return cls_.GetGravityZ(); });
	cl_ActorWrapper.def("IsOverlapping", [](ActorWrapper& cls_, ActorWrapper A) { return cls_.IsOverlapping(A); }, pybind11::arg("A"));
	cl_ActorWrapper.def("ContainsPoint", [](ActorWrapper& cls_, Vector & Spot) { return cls_.ContainsPoint(Spot); }, pybind11::arg("Spot"));
	cl_ActorWrapper.def("eventFellOutOfWorld", [](ActorWrapper& cls_) { return cls_.eventFellOutOfWorld(); });
	cl_ActorWrapper.def("SetTickIsDisabled", [](ActorWrapper& cls_, long unsigned int bInDisabled) { return cls_.SetTickIsDisabled(bInDisabled); }, pybind11::arg("bInDisabled"));
	cl_ActorWrapper.def("SetPhysics2", [](ActorWrapper& cls_, unsigned char newPhysics) { return cls_.SetPhysics2(newPhysics); }, pybind11::arg("newPhysics"));
	cl_ActorWrapper.def("SetHidden2", [](ActorWrapper& cls_, long unsigned int bNewHidden) { return cls_.SetHidden2(bNewHidden); }, pybind11::arg("bNewHidden"));
	cl_ActorWrapper.def("ChartData", [](ActorWrapper& cls_, std::string DataName, float DataValue) { return cls_.ChartData(DataName, DataValue); }, pybind11::arg("DataName"), pybind11::arg("DataValue"));
	cl_ActorWrapper.def("DrawDebugString", [](ActorWrapper& cls_, Vector & TextLocation, std::string Text, ActorWrapper TestBaseActor, UnrealColor & TextColor, float Duration) { return cls_.DrawDebugString(TextLocation, Text, TestBaseActor, TextColor, Duration); }, pybind11::arg("TextLocation"), pybind11::arg("Text"), pybind11::arg("TestBaseActor"), pybind11::arg("TextColor"), pybind11::arg("Duration"));
	cl_ActorWrapper.def("DrawDebugCone", [](ActorWrapper& cls_, Vector & Origin, Vector & Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, UnrealColor & DrawColor, long unsigned int bPersistentLines) { return cls_.DrawDebugCone(Origin, Direction, Length, AngleWidth, AngleHeight, NumSides, DrawColor, bPersistentLines); }, pybind11::arg("Origin"), pybind11::arg("Direction"), pybind11::arg("Length"), pybind11::arg("AngleWidth"), pybind11::arg("AngleHeight"), pybind11::arg("NumSides"), pybind11::arg("DrawColor"), pybind11::arg("bPersistentLines"));
	cl_ActorWrapper.def("GetAggregateBaseVelocity", [](ActorWrapper& cls_, ActorWrapper TestBase) { return cls_.GetAggregateBaseVelocity(TestBase); }, pybind11::arg("TestBase"));
	cl_ActorWrapper.def("IsOwnedBy", [](ActorWrapper& cls_, ActorWrapper TestActor) { return cls_.IsOwnedBy(TestActor); }, pybind11::arg("TestActor"));
	cl_ActorWrapper.def("IsBasedOn", [](ActorWrapper& cls_, ActorWrapper TestActor) { return cls_.IsBasedOn(TestActor); }, pybind11::arg("TestActor"));
	cl_ActorWrapper.def("GetTerminalVelocity", [](ActorWrapper& cls_) { return cls_.GetTerminalVelocity(); });
}
