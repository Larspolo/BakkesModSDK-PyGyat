void bind_TeamWrapper(pybind11::module& m)
{

	pybind11::class_<TeamWrapper, std::shared_ptr<TeamWrapper>, TeamInfoWrapper> cl_TeamWrapper(m, "TeamWrapper");
	cl_TeamWrapper.def(pybind11::init<uintptr_t>(), pybind11::arg("mem"));
	cl_TeamWrapper.def(pybind11::init<TeamWrapper const &>(), pybind11::arg("other"));
	// cl_TeamWrapper.def(pybind11::del<>());
	cl_TeamWrapper.def("GetPrimaryColor", [](TeamWrapper& cls_) { return cls_.GetPrimaryColor(); });
	cl_TeamWrapper.def("GetSecondaryColor", [](TeamWrapper& cls_) { return cls_.GetSecondaryColor(); });
	cl_TeamWrapper.def("GetFontColor", [](TeamWrapper& cls_) { return cls_.GetFontColor(); });
	cl_TeamWrapper.def("SetFontColor", [](TeamWrapper& cls_, LinearColor newFontColor) { return cls_.SetFontColor(newFontColor); }, pybind11::arg("newFontColor"));
	cl_TeamWrapper.def("GetColorBlindFontColor", [](TeamWrapper& cls_) { return cls_.GetColorBlindFontColor(); });
	cl_TeamWrapper.def("SetColorBlindFontColor", [](TeamWrapper& cls_, LinearColor newColorBlindFontColor) { return cls_.SetColorBlindFontColor(newColorBlindFontColor); }, pybind11::arg("newColorBlindFontColor"));
	cl_TeamWrapper.def("GetTeamControllerColor", [](TeamWrapper& cls_) { return cls_.GetTeamControllerColor(); });
	cl_TeamWrapper.def("SetTeamControllerColor", [](TeamWrapper& cls_, UnrealColor newTeamControllerColor) { return cls_.SetTeamControllerColor(newTeamControllerColor); }, pybind11::arg("newTeamControllerColor"));
	cl_TeamWrapper.def("GetTeamScoreStrobeColor", [](TeamWrapper& cls_) { return cls_.GetTeamScoreStrobeColor(); });
	cl_TeamWrapper.def("SetTeamScoreStrobeColor", [](TeamWrapper& cls_, UnrealColor newTeamScoreStrobeColor) { return cls_.SetTeamScoreStrobeColor(newTeamScoreStrobeColor); }, pybind11::arg("newTeamScoreStrobeColor"));
	cl_TeamWrapper.def("GetDefaultColorList", [](TeamWrapper& cls_) { return cls_.GetDefaultColorList(); });
	cl_TeamWrapper.def("GetColorBlindColorList", [](TeamWrapper& cls_) { return cls_.GetColorBlindColorList(); });
	cl_TeamWrapper.def("GetCurrentColorList", [](TeamWrapper& cls_) { return cls_.GetCurrentColorList(); });
	cl_TeamWrapper.def("GetGameEvent", [](TeamWrapper& cls_) { return cls_.GetGameEvent(); });
	cl_TeamWrapper.def("SetGameEvent", [](TeamWrapper& cls_, TeamGameEventWrapper newGameEvent) { return cls_.SetGameEvent(newGameEvent); }, pybind11::arg("newGameEvent"));
	cl_TeamWrapper.def("GetMembers", [](TeamWrapper& cls_) { return cls_.GetMembers(); });
	cl_TeamWrapper.def("GetCustomTeamName", [](TeamWrapper& cls_) { return cls_.GetCustomTeamName(); });
	cl_TeamWrapper.def("GetSanitizedTeamName", [](TeamWrapper& cls_) { return cls_.GetSanitizedTeamName(); });
	cl_TeamWrapper.def("GetClubID", [](TeamWrapper& cls_) { return cls_.GetClubID(); });
	cl_TeamWrapper.def("SetClubID", [](TeamWrapper& cls_, long long unsigned int newClubID) { return cls_.SetClubID(newClubID); }, pybind11::arg("newClubID"));
	cl_TeamWrapper.def("GetbForfeit", [](TeamWrapper& cls_) { return cls_.GetbForfeit(); });
	cl_TeamWrapper.def("SetbForfeit", [](TeamWrapper& cls_, long unsigned int newbForfeit) { return cls_.SetbForfeit(newbForfeit); }, pybind11::arg("newbForfeit"));
	cl_TeamWrapper.def("__Team_TA__GetHumanPlayers", [](TeamWrapper& cls_, PriWrapper PRI) { return cls_.__Team_TA__GetHumanPlayers(PRI); }, pybind11::arg("PRI"));
	cl_TeamWrapper.def("__Team_TA__GetHumanPrimaryPlayers", [](TeamWrapper& cls_, PriWrapper PRI) { return cls_.__Team_TA__GetHumanPrimaryPlayers(PRI); }, pybind11::arg("PRI"));
	cl_TeamWrapper.def("__Team_TA__GetNumOfMembersThatCanStartForfeit", [](TeamWrapper& cls_, PriWrapper P) { return cls_.__Team_TA__GetNumOfMembersThatCanStartForfeit(P); }, pybind11::arg("P"));
	cl_TeamWrapper.def("__Team_TA__EnableAllMembersStartVoteToForfeit", [](TeamWrapper& cls_, PriWrapper Member) { return cls_.__Team_TA__EnableAllMembersStartVoteToForfeit(Member); }, pybind11::arg("Member"));
	cl_TeamWrapper.def("OnClubColorsChanged", [](TeamWrapper& cls_) { return cls_.OnClubColorsChanged(); });
	cl_TeamWrapper.def("Forfeit2", [](TeamWrapper& cls_) { return cls_.Forfeit2(); });
	cl_TeamWrapper.def("EnableAllMembersStartVoteToForfeit2", [](TeamWrapper& cls_) { return cls_.EnableAllMembersStartVoteToForfeit2(); });
	cl_TeamWrapper.def("EnableAllMembersStartVoteToForfeitIfNecessary", [](TeamWrapper& cls_) { return cls_.EnableAllMembersStartVoteToForfeitIfNecessary(); });
	cl_TeamWrapper.def("VoteToForfeit22", [](TeamWrapper& cls_, PriWrapper PRI) { return cls_.VoteToForfeit22(PRI); }, pybind11::arg("PRI"));
	cl_TeamWrapper.def("NotifyKismetTeamColorChanged", [](TeamWrapper& cls_) { return cls_.NotifyKismetTeamColorChanged(); });
	cl_TeamWrapper.def("UpdateColors", [](TeamWrapper& cls_) { return cls_.UpdateColors(); });
	cl_TeamWrapper.def("SetLogo", [](TeamWrapper& cls_, int LogoID, long unsigned int bSwapColors) { return cls_.SetLogo(LogoID, bSwapColors); }, pybind11::arg("LogoID"), pybind11::arg("bSwapColors"));
	cl_TeamWrapper.def("HandleTeamNameSanitized", [](TeamWrapper& cls_, std::string Original, std::string Sanitized) { return cls_.HandleTeamNameSanitized(Original, Sanitized); }, pybind11::arg("Original"), pybind11::arg("Sanitized"));
	cl_TeamWrapper.def("SetClubID2", [](TeamWrapper& cls_, long long unsigned int InClubID) { return cls_.SetClubID2(InClubID); }, pybind11::arg("InClubID"));
	cl_TeamWrapper.def("SetCustomTeamName", [](TeamWrapper& cls_, std::string NewName) { return cls_.SetCustomTeamName(NewName); }, pybind11::arg("NewName"));
	cl_TeamWrapper.def("SetDefaultColors", [](TeamWrapper& cls_) { return cls_.SetDefaultColors(); });
	cl_TeamWrapper.def("IsSingleParty", [](TeamWrapper& cls_) { return cls_.IsSingleParty(); });
	cl_TeamWrapper.def("GetTeamMemberNamed", [](TeamWrapper& cls_, std::string PlayerName) { return cls_.GetTeamMemberNamed(PlayerName); }, pybind11::arg("PlayerName"));
	cl_TeamWrapper.def("GetNumBots", [](TeamWrapper& cls_) { return cls_.GetNumBots(); });
	cl_TeamWrapper.def("GetNumHumans", [](TeamWrapper& cls_) { return cls_.GetNumHumans(); });
	cl_TeamWrapper.def("OnScoreUpdated", [](TeamWrapper& cls_) { return cls_.OnScoreUpdated(); });
	cl_TeamWrapper.def("ResetScore", [](TeamWrapper& cls_) { return cls_.ResetScore(); });
	cl_TeamWrapper.def("RemovePoints", [](TeamWrapper& cls_, int Points) { return cls_.RemovePoints(Points); }, pybind11::arg("Points"));
	cl_TeamWrapper.def("SetScore", [](TeamWrapper& cls_, int Points) { return cls_.SetScore(Points); }, pybind11::arg("Points"));
	cl_TeamWrapper.def("ScorePoint", [](TeamWrapper& cls_, int AdditionalScore) { return cls_.ScorePoint(AdditionalScore); }, pybind11::arg("AdditionalScore"));
	cl_TeamWrapper.def("MuteOtherTeam", [](TeamWrapper& cls_, TeamWrapper OtherTeam, long unsigned int bMute) { return cls_.MuteOtherTeam(OtherTeam, bMute); }, pybind11::arg("OtherTeam"), pybind11::arg("bMute"));
	cl_TeamWrapper.def("ClearTemporarySpawnSpots", [](TeamWrapper& cls_) { return cls_.ClearTemporarySpawnSpots(); });
	cl_TeamWrapper.def("ExpireTemporarySpawnSpots", [](TeamWrapper& cls_) { return cls_.ExpireTemporarySpawnSpots(); });
	cl_TeamWrapper.def("AddTemporarySpawnSpot", [](TeamWrapper& cls_, ActorWrapper AtActor) { return cls_.AddTemporarySpawnSpot(AtActor); }, pybind11::arg("AtActor"));
	cl_TeamWrapper.def("OnGameEventSet", [](TeamWrapper& cls_) { return cls_.OnGameEventSet(); });
	cl_TeamWrapper.def("SetGameEvent2", [](TeamWrapper& cls_, TeamGameEventWrapper InGameEvent) { return cls_.SetGameEvent2(InGameEvent); }, pybind11::arg("InGameEvent"));
}
