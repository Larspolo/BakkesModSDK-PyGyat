void bind_PlayerReplicationInfoWrapper(pybind11::module& m)
{

	pybind11::class_<PlayerReplicationInfoWrapper, std::shared_ptr<PlayerReplicationInfoWrapper>, ActorWrapper> cl_PlayerReplicationInfoWrapper(m, "PlayerReplicationInfoWrapper");
	cl_PlayerReplicationInfoWrapper.def(pybind11::init<uintptr_t>(), pybind11::arg("mem"));
	cl_PlayerReplicationInfoWrapper.def(pybind11::init<PlayerReplicationInfoWrapper const &>(), pybind11::arg("other"));
	// cl_PlayerReplicationInfoWrapper.def(pybind11::del<>());
	cl_PlayerReplicationInfoWrapper.def("GetPlatform", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetPlatform(); });
	cl_PlayerReplicationInfoWrapper.def("GetScore", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetScore(); });
	cl_PlayerReplicationInfoWrapper.def("SetScore", [](PlayerReplicationInfoWrapper& cls_, int newScore) { return cls_.SetScore(newScore); }, pybind11::arg("newScore"));
	cl_PlayerReplicationInfoWrapper.def("GetDeaths", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetDeaths(); });
	cl_PlayerReplicationInfoWrapper.def("SetDeaths", [](PlayerReplicationInfoWrapper& cls_, int newDeaths) { return cls_.SetDeaths(newDeaths); }, pybind11::arg("newDeaths"));
	cl_PlayerReplicationInfoWrapper.def("GetPing", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetPing(); });
	cl_PlayerReplicationInfoWrapper.def("SetPing", [](PlayerReplicationInfoWrapper& cls_, unsigned char newPing) { return cls_.SetPing(newPing); }, pybind11::arg("newPing"));
	cl_PlayerReplicationInfoWrapper.def("GetTTSSpeaker", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetTTSSpeaker(); });
	cl_PlayerReplicationInfoWrapper.def("SetTTSSpeaker", [](PlayerReplicationInfoWrapper& cls_, unsigned char newTTSSpeaker) { return cls_.SetTTSSpeaker(newTTSSpeaker); }, pybind11::arg("newTTSSpeaker"));
	cl_PlayerReplicationInfoWrapper.def("GetNumLives", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetNumLives(); });
	cl_PlayerReplicationInfoWrapper.def("SetNumLives", [](PlayerReplicationInfoWrapper& cls_, int newNumLives) { return cls_.SetNumLives(newNumLives); }, pybind11::arg("newNumLives"));
	cl_PlayerReplicationInfoWrapper.def("GetPlayerName", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetPlayerName(); });
	cl_PlayerReplicationInfoWrapper.def("GetOldName", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetOldName(); });
	cl_PlayerReplicationInfoWrapper.def("GetPlayerID", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetPlayerID(); });
	cl_PlayerReplicationInfoWrapper.def("SetPlayerID", [](PlayerReplicationInfoWrapper& cls_, int newPlayerID) { return cls_.SetPlayerID(newPlayerID); }, pybind11::arg("newPlayerID"));
	cl_PlayerReplicationInfoWrapper.def("GetTeam", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetTeam(); });
	cl_PlayerReplicationInfoWrapper.def("SetTeam", [](PlayerReplicationInfoWrapper& cls_, TeamInfoWrapper newTeam) { return cls_.SetTeam(newTeam); }, pybind11::arg("newTeam"));
	cl_PlayerReplicationInfoWrapper.def("GetbAdmin", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetbAdmin(); });
	cl_PlayerReplicationInfoWrapper.def("SetbAdmin", [](PlayerReplicationInfoWrapper& cls_, long unsigned int newbAdmin) { return cls_.SetbAdmin(newbAdmin); }, pybind11::arg("newbAdmin"));
	cl_PlayerReplicationInfoWrapper.def("GetbIsSpectator", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetbIsSpectator(); });
	cl_PlayerReplicationInfoWrapper.def("SetbIsSpectator", [](PlayerReplicationInfoWrapper& cls_, long unsigned int newbIsSpectator) { return cls_.SetbIsSpectator(newbIsSpectator); }, pybind11::arg("newbIsSpectator"));
	cl_PlayerReplicationInfoWrapper.def("GetbOnlySpectator", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetbOnlySpectator(); });
	cl_PlayerReplicationInfoWrapper.def("SetbOnlySpectator", [](PlayerReplicationInfoWrapper& cls_, long unsigned int newbOnlySpectator) { return cls_.SetbOnlySpectator(newbOnlySpectator); }, pybind11::arg("newbOnlySpectator"));
	cl_PlayerReplicationInfoWrapper.def("GetbWaitingPlayer", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetbWaitingPlayer(); });
	cl_PlayerReplicationInfoWrapper.def("SetbWaitingPlayer", [](PlayerReplicationInfoWrapper& cls_, long unsigned int newbWaitingPlayer) { return cls_.SetbWaitingPlayer(newbWaitingPlayer); }, pybind11::arg("newbWaitingPlayer"));
	cl_PlayerReplicationInfoWrapper.def("GetbReadyToPlay", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetbReadyToPlay(); });
	cl_PlayerReplicationInfoWrapper.def("SetbReadyToPlay", [](PlayerReplicationInfoWrapper& cls_, long unsigned int newbReadyToPlay) { return cls_.SetbReadyToPlay(newbReadyToPlay); }, pybind11::arg("newbReadyToPlay"));
	cl_PlayerReplicationInfoWrapper.def("GetbOutOfLives", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetbOutOfLives(); });
	cl_PlayerReplicationInfoWrapper.def("SetbOutOfLives", [](PlayerReplicationInfoWrapper& cls_, long unsigned int newbOutOfLives) { return cls_.SetbOutOfLives(newbOutOfLives); }, pybind11::arg("newbOutOfLives"));
	cl_PlayerReplicationInfoWrapper.def("GetbBot", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetbBot(); });
	cl_PlayerReplicationInfoWrapper.def("SetbBot", [](PlayerReplicationInfoWrapper& cls_, long unsigned int newbBot) { return cls_.SetbBot(newbBot); }, pybind11::arg("newbBot"));
	cl_PlayerReplicationInfoWrapper.def("GetbIsInactive", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetbIsInactive(); });
	cl_PlayerReplicationInfoWrapper.def("SetbIsInactive", [](PlayerReplicationInfoWrapper& cls_, long unsigned int newbIsInactive) { return cls_.SetbIsInactive(newbIsInactive); }, pybind11::arg("newbIsInactive"));
	cl_PlayerReplicationInfoWrapper.def("GetbFromPreviousLevel", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetbFromPreviousLevel(); });
	cl_PlayerReplicationInfoWrapper.def("SetbFromPreviousLevel", [](PlayerReplicationInfoWrapper& cls_, long unsigned int newbFromPreviousLevel) { return cls_.SetbFromPreviousLevel(newbFromPreviousLevel); }, pybind11::arg("newbFromPreviousLevel"));
	cl_PlayerReplicationInfoWrapper.def("GetbTimedOut", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetbTimedOut(); });
	cl_PlayerReplicationInfoWrapper.def("SetbTimedOut", [](PlayerReplicationInfoWrapper& cls_, long unsigned int newbTimedOut) { return cls_.SetbTimedOut(newbTimedOut); }, pybind11::arg("newbTimedOut"));
	cl_PlayerReplicationInfoWrapper.def("GetbUnregistered", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetbUnregistered(); });
	cl_PlayerReplicationInfoWrapper.def("SetbUnregistered", [](PlayerReplicationInfoWrapper& cls_, long unsigned int newbUnregistered) { return cls_.SetbUnregistered(newbUnregistered); }, pybind11::arg("newbUnregistered"));
	cl_PlayerReplicationInfoWrapper.def("GetStartTime", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetStartTime(); });
	cl_PlayerReplicationInfoWrapper.def("SetStartTime", [](PlayerReplicationInfoWrapper& cls_, int newStartTime) { return cls_.SetStartTime(newStartTime); }, pybind11::arg("newStartTime"));
	cl_PlayerReplicationInfoWrapper.def("GetStringSpectating", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetStringSpectating(); });
	cl_PlayerReplicationInfoWrapper.def("GetStringUnknown", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetStringUnknown(); });
	cl_PlayerReplicationInfoWrapper.def("GetKills", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetKills(); });
	cl_PlayerReplicationInfoWrapper.def("SetKills", [](PlayerReplicationInfoWrapper& cls_, int newKills) { return cls_.SetKills(newKills); }, pybind11::arg("newKills"));
	cl_PlayerReplicationInfoWrapper.def("GetExactPing", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetExactPing(); });
	cl_PlayerReplicationInfoWrapper.def("SetExactPing", [](PlayerReplicationInfoWrapper& cls_, float newExactPing) { return cls_.SetExactPing(newExactPing); }, pybind11::arg("newExactPing"));
	cl_PlayerReplicationInfoWrapper.def("GetSavedNetworkAddress", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetSavedNetworkAddress(); });
	// [deprecated] cl_PlayerReplicationInfoWrapper.def("GetUniqueId", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetUniqueId(); });
	// [deprecated] cl_PlayerReplicationInfoWrapper.def("SetUniqueId", [](PlayerReplicationInfoWrapper& cls_, SteamID newUniqueId) { return cls_.SetUniqueId(newUniqueId); }, pybind11::arg("newUniqueId"));
	cl_PlayerReplicationInfoWrapper.def("GetUniqueIdWrapper", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetUniqueIdWrapper(); });
	cl_PlayerReplicationInfoWrapper.def("SetUniqueId", [](PlayerReplicationInfoWrapper& cls_, UniqueIDWrapper newUniqueId) { return cls_.SetUniqueId(newUniqueId); }, pybind11::arg("newUniqueId"));
	cl_PlayerReplicationInfoWrapper.def("UnregisterPlayerFromSession", [](PlayerReplicationInfoWrapper& cls_) { return cls_.UnregisterPlayerFromSession(); });
	cl_PlayerReplicationInfoWrapper.def("RegisterPlayerWithSession", [](PlayerReplicationInfoWrapper& cls_) { return cls_.RegisterPlayerWithSession(); });
	cl_PlayerReplicationInfoWrapper.def("IsInvalidName", [](PlayerReplicationInfoWrapper& cls_) { return cls_.IsInvalidName(); });
	cl_PlayerReplicationInfoWrapper.def("GetTeamNum", [](PlayerReplicationInfoWrapper& cls_) { return cls_.GetTeamNum(); });
	// [deprecated] cl_PlayerReplicationInfoWrapper.def("SetUniqueId2", [](PlayerReplicationInfoWrapper& cls_, SteamID & PlayerUniqueId) { return cls_.SetUniqueId2(PlayerUniqueId); }, pybind11::arg("PlayerUniqueId"));
	cl_PlayerReplicationInfoWrapper.def("SetUniqueId2", [](PlayerReplicationInfoWrapper& cls_, UniqueIDWrapper & PlayerUniqueId) { return cls_.SetUniqueId2(PlayerUniqueId); }, pybind11::arg("PlayerUniqueId"));
	cl_PlayerReplicationInfoWrapper.def("SeamlessTravelTo", [](PlayerReplicationInfoWrapper& cls_, PlayerReplicationInfoWrapper NewPRI) { return cls_.SeamlessTravelTo(NewPRI); }, pybind11::arg("NewPRI"));
	cl_PlayerReplicationInfoWrapper.def("IncrementDeaths", [](PlayerReplicationInfoWrapper& cls_, int Amt) { return cls_.IncrementDeaths(Amt); }, pybind11::arg("Amt"));
	cl_PlayerReplicationInfoWrapper.def("CopyProperties", [](PlayerReplicationInfoWrapper& cls_, PlayerReplicationInfoWrapper PRI) { return cls_.CopyProperties(PRI); }, pybind11::arg("PRI"));
	cl_PlayerReplicationInfoWrapper.def("OverrideWith", [](PlayerReplicationInfoWrapper& cls_, PlayerReplicationInfoWrapper PRI) { return cls_.OverrideWith(PRI); }, pybind11::arg("PRI"));
	cl_PlayerReplicationInfoWrapper.def("Duplicate", [](PlayerReplicationInfoWrapper& cls_) { return cls_.Duplicate(); });
	cl_PlayerReplicationInfoWrapper.def("SetWaitingPlayer", [](PlayerReplicationInfoWrapper& cls_, long unsigned int B) { return cls_.SetWaitingPlayer(B); }, pybind11::arg("B"));
	cl_PlayerReplicationInfoWrapper.def("eventSetPlayerName", [](PlayerReplicationInfoWrapper& cls_, std::string S) { return cls_.eventSetPlayerName(S); }, pybind11::arg("S"));
	cl_PlayerReplicationInfoWrapper.def("Reset", [](PlayerReplicationInfoWrapper& cls_) { return cls_.Reset(); });
	cl_PlayerReplicationInfoWrapper.def("eventDestroyed", [](PlayerReplicationInfoWrapper& cls_) { return cls_.eventDestroyed(); });
	cl_PlayerReplicationInfoWrapper.def("Unregister2", [](PlayerReplicationInfoWrapper& cls_) { return cls_.Unregister2(); });
	cl_PlayerReplicationInfoWrapper.def("UpdatePing", [](PlayerReplicationInfoWrapper& cls_, float TimeStamp) { return cls_.UpdatePing(TimeStamp); }, pybind11::arg("TimeStamp"));
	cl_PlayerReplicationInfoWrapper.def("RemoteUserDataReplicated", [](PlayerReplicationInfoWrapper& cls_) { return cls_.RemoteUserDataReplicated(); });
	cl_PlayerReplicationInfoWrapper.def("SetPlayerTeam", [](PlayerReplicationInfoWrapper& cls_, TeamInfoWrapper NewTeam) { return cls_.SetPlayerTeam(NewTeam); }, pybind11::arg("NewTeam"));
	cl_PlayerReplicationInfoWrapper.def("eventClientFillRemoteUserData", [](PlayerReplicationInfoWrapper& cls_) { return cls_.eventClientFillRemoteUserData(); });
	cl_PlayerReplicationInfoWrapper.def("eventPostBeginPlay", [](PlayerReplicationInfoWrapper& cls_) { return cls_.eventPostBeginPlay(); });
	cl_PlayerReplicationInfoWrapper.def("eventOnOwnerChanged", [](PlayerReplicationInfoWrapper& cls_) { return cls_.eventOnOwnerChanged(); });
	cl_PlayerReplicationInfoWrapper.def("eventConstruct", [](PlayerReplicationInfoWrapper& cls_) { return cls_.eventConstruct(); });
}
