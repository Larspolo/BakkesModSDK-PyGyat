void bind_BoostWrapper(pybind11::module& m)
{

	pybind11::class_<BoostWrapper, std::shared_ptr<BoostWrapper>, CarComponentWrapper> cl_BoostWrapper(m, "BoostWrapper");
	cl_BoostWrapper.def(pybind11::init<uintptr_t>(), pybind11::arg("mem"));
	cl_BoostWrapper.def(pybind11::init<BoostWrapper const &>(), pybind11::arg("other"));
	// cl_BoostWrapper.def(pybind11::del<>());
	cl_BoostWrapper.def("GetBoostConsumptionRate", [](BoostWrapper& cls_) { return cls_.GetBoostConsumptionRate(); });
	cl_BoostWrapper.def("SetBoostConsumptionRate", [](BoostWrapper& cls_, float newBoostConsumptionRate) { return cls_.SetBoostConsumptionRate(newBoostConsumptionRate); }, pybind11::arg("newBoostConsumptionRate"));
	cl_BoostWrapper.def("GetMaxBoostAmount", [](BoostWrapper& cls_) { return cls_.GetMaxBoostAmount(); });
	cl_BoostWrapper.def("SetMaxBoostAmount", [](BoostWrapper& cls_, float newMaxBoostAmount) { return cls_.SetMaxBoostAmount(newMaxBoostAmount); }, pybind11::arg("newMaxBoostAmount"));
	cl_BoostWrapper.def("GetStartBoostAmount", [](BoostWrapper& cls_) { return cls_.GetStartBoostAmount(); });
	cl_BoostWrapper.def("SetStartBoostAmount", [](BoostWrapper& cls_, float newStartBoostAmount) { return cls_.SetStartBoostAmount(newStartBoostAmount); }, pybind11::arg("newStartBoostAmount"));
	cl_BoostWrapper.def("GetCurrentBoostAmount", [](BoostWrapper& cls_) { return cls_.GetCurrentBoostAmount(); });
	cl_BoostWrapper.def("SetCurrentBoostAmount", [](BoostWrapper& cls_, float newCurrentBoostAmount) { return cls_.SetCurrentBoostAmount(newCurrentBoostAmount); }, pybind11::arg("newCurrentBoostAmount"));
	cl_BoostWrapper.def("GetBoostModifier", [](BoostWrapper& cls_) { return cls_.GetBoostModifier(); });
	cl_BoostWrapper.def("SetBoostModifier", [](BoostWrapper& cls_, float newBoostModifier) { return cls_.SetBoostModifier(newBoostModifier); }, pybind11::arg("newBoostModifier"));
	cl_BoostWrapper.def("GetLastBoostAmountRequestTime", [](BoostWrapper& cls_) { return cls_.GetLastBoostAmountRequestTime(); });
	cl_BoostWrapper.def("SetLastBoostAmountRequestTime", [](BoostWrapper& cls_, float newLastBoostAmountRequestTime) { return cls_.SetLastBoostAmountRequestTime(newLastBoostAmountRequestTime); }, pybind11::arg("newLastBoostAmountRequestTime"));
	cl_BoostWrapper.def("GetLastBoostAmount", [](BoostWrapper& cls_) { return cls_.GetLastBoostAmount(); });
	cl_BoostWrapper.def("SetLastBoostAmount", [](BoostWrapper& cls_, float newLastBoostAmount) { return cls_.SetLastBoostAmount(newLastBoostAmount); }, pybind11::arg("newLastBoostAmount"));
	cl_BoostWrapper.def("GetbPendingConfirmBoostAmount", [](BoostWrapper& cls_) { return cls_.GetbPendingConfirmBoostAmount(); });
	cl_BoostWrapper.def("SetbPendingConfirmBoostAmount", [](BoostWrapper& cls_, long unsigned int newbPendingConfirmBoostAmount) { return cls_.SetbPendingConfirmBoostAmount(newbPendingConfirmBoostAmount); }, pybind11::arg("newbPendingConfirmBoostAmount"));
	//cl_BoostWrapper.def("GetbUnlimitedBoost", [](BoostWrapper& cls_) { return cls_.GetbUnlimitedBoost(); });
	//cl_BoostWrapper.def("SetbUnlimitedBoost", [](BoostWrapper& cls_, long unsigned int newbUnlimitedBoost) { return cls_.SetbUnlimitedBoost(newbUnlimitedBoost); }, pybind11::arg("newbUnlimitedBoost"));
	cl_BoostWrapper.def("GetbNoBoost", [](BoostWrapper& cls_) { return cls_.GetbNoBoost(); });
	cl_BoostWrapper.def("SetbNoBoost", [](BoostWrapper& cls_, long unsigned int newbNoBoost) { return cls_.SetbNoBoost(newbNoBoost); }, pybind11::arg("newbNoBoost"));
	cl_BoostWrapper.def("GetBoostForce", [](BoostWrapper& cls_) { return cls_.GetBoostForce(); });
	cl_BoostWrapper.def("SetBoostForce", [](BoostWrapper& cls_, float newBoostForce) { return cls_.SetBoostForce(newBoostForce); }, pybind11::arg("newBoostForce"));
	cl_BoostWrapper.def("GetMinBoostTime", [](BoostWrapper& cls_) { return cls_.GetMinBoostTime(); });
	cl_BoostWrapper.def("SetMinBoostTime", [](BoostWrapper& cls_, float newMinBoostTime) { return cls_.SetMinBoostTime(newMinBoostTime); }, pybind11::arg("newMinBoostTime"));
	cl_BoostWrapper.def("GetRechargeRate", [](BoostWrapper& cls_) { return cls_.GetRechargeRate(); });
	cl_BoostWrapper.def("SetRechargeRate", [](BoostWrapper& cls_, float newRechargeRate) { return cls_.SetRechargeRate(newRechargeRate); }, pybind11::arg("newRechargeRate"));
	cl_BoostWrapper.def("GetRechargeDelay", [](BoostWrapper& cls_) { return cls_.GetRechargeDelay(); });
	cl_BoostWrapper.def("SetRechargeDelay", [](BoostWrapper& cls_, float newRechargeDelay) { return cls_.SetRechargeDelay(newRechargeDelay); }, pybind11::arg("newRechargeDelay"));
	cl_BoostWrapper.def("GetUnlimitedBoostRefCount", [](BoostWrapper& cls_) { return cls_.GetUnlimitedBoostRefCount(); });
	cl_BoostWrapper.def("SetUnlimitedBoostRefCount", [](BoostWrapper& cls_, int newUnlimitedBoostRefCount) { return cls_.SetUnlimitedBoostRefCount(newUnlimitedBoostRefCount); }, pybind11::arg("newUnlimitedBoostRefCount"));
	cl_BoostWrapper.def("GetReplicatedBoostAmount", [](BoostWrapper& cls_) { return cls_.GetReplicatedBoostAmount(); });
	cl_BoostWrapper.def("SetReplicatedBoostAmount", [](BoostWrapper& cls_, unsigned char newReplicatedBoostAmount) { return cls_.SetReplicatedBoostAmount(newReplicatedBoostAmount); }, pybind11::arg("newReplicatedBoostAmount"));
	cl_BoostWrapper.def("ShouldPredictBoostConsumption", [](BoostWrapper& cls_) { return cls_.ShouldPredictBoostConsumption(); });
	cl_BoostWrapper.def("ReadReplicatedBoostAmount", [](BoostWrapper& cls_) { return cls_.ReadReplicatedBoostAmount(); });
	cl_BoostWrapper.def("eventSetReplicatedBoostAmount", [](BoostWrapper& cls_) { return cls_.eventSetReplicatedBoostAmount(); });
	cl_BoostWrapper.def("ApplyForces", [](BoostWrapper& cls_, float ActiveTime) { return cls_.ApplyForces(ActiveTime); }, pybind11::arg("ActiveTime"));
	cl_BoostWrapper.def("ClientGiveBoost", [](BoostWrapper& cls_, float Amount) { return cls_.ClientGiveBoost(Amount); }, pybind11::arg("Amount"));
	cl_BoostWrapper.def("ConfirmBoostAmount2", [](BoostWrapper& cls_) { return cls_.ConfirmBoostAmount2(); });
	cl_BoostWrapper.def("SendConfirmBoostAmount", [](BoostWrapper& cls_) { return cls_.SendConfirmBoostAmount(); });
	cl_BoostWrapper.def("ClientFixBoostAmount", [](BoostWrapper& cls_, float TimeStamp, float Amount) { return cls_.ClientFixBoostAmount(TimeStamp, Amount); }, pybind11::arg("TimeStamp"), pybind11::arg("Amount"));
	cl_BoostWrapper.def("ServerConfirmBoostAmount", [](BoostWrapper& cls_, float TimeStamp, float Amount) { return cls_.ServerConfirmBoostAmount(TimeStamp, Amount); }, pybind11::arg("TimeStamp"), pybind11::arg("Amount"));
	cl_BoostWrapper.def("SetRechargeDelay2", [](BoostWrapper& cls_, float InRechargeDelay) { return cls_.SetRechargeDelay2(InRechargeDelay); }, pybind11::arg("InRechargeDelay"));
	cl_BoostWrapper.def("SetRechargeRate2", [](BoostWrapper& cls_, float InRechargeRate) { return cls_.SetRechargeRate2(InRechargeRate); }, pybind11::arg("InRechargeRate"));
	cl_BoostWrapper.def("SetNoBoost", [](BoostWrapper& cls_, long unsigned int Enabled) { return cls_.SetNoBoost(Enabled); }, pybind11::arg("Enabled"));
	cl_BoostWrapper.def("SetUnlimitedBoost2", [](BoostWrapper& cls_, long unsigned int Enabled) { return cls_.SetUnlimitedBoost2(Enabled); }, pybind11::arg("Enabled"));
	cl_BoostWrapper.def("SetUnlimitedBoostDelayed", [](BoostWrapper& cls_, long unsigned int Enabled) { return cls_.SetUnlimitedBoostDelayed(Enabled); }, pybind11::arg("Enabled"));
	cl_BoostWrapper.def("SetBoostModifier2", [](BoostWrapper& cls_, float Modifier) { return cls_.SetBoostModifier2(Modifier); }, pybind11::arg("Modifier"));
	cl_BoostWrapper.def("SetBoostAmount", [](BoostWrapper& cls_, float Amount) { return cls_.SetBoostAmount(Amount); }, pybind11::arg("Amount"));
	cl_BoostWrapper.def("GiveBoost2", [](BoostWrapper& cls_, float Amount) { return cls_.GiveBoost2(Amount); }, pybind11::arg("Amount"));
	cl_BoostWrapper.def("GiveStartingBoost", [](BoostWrapper& cls_) { return cls_.GiveStartingBoost(); });
	cl_BoostWrapper.def("GiveFullBoost", [](BoostWrapper& cls_) { return cls_.GiveFullBoost(); });
	cl_BoostWrapper.def("GetPercentBoostFull", [](BoostWrapper& cls_) { return cls_.GetPercentBoostFull(); });
	cl_BoostWrapper.def("IsFull", [](BoostWrapper& cls_) { return cls_.IsFull(); });
	cl_BoostWrapper.def("RemoveFromCar", [](BoostWrapper& cls_) { return cls_.RemoveFromCar(); });
	cl_BoostWrapper.def("CanDeactivate", [](BoostWrapper& cls_) { return cls_.CanDeactivate(); });
	cl_BoostWrapper.def("CanActivate", [](BoostWrapper& cls_) { return cls_.CanActivate(); });
}
