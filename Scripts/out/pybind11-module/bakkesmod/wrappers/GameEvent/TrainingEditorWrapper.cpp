void bind_TrainingEditorWrapper(pybind11::module& m)
{

	pybind11::class_<TrainingEditorWrapper, std::shared_ptr<TrainingEditorWrapper>, GameEditorWrapper> cl_TrainingEditorWrapper(m, "TrainingEditorWrapper");
	cl_TrainingEditorWrapper.def(pybind11::init<uintptr_t>(), pybind11::arg("mem"));
	cl_TrainingEditorWrapper.def(pybind11::init<TrainingEditorWrapper const &>(), pybind11::arg("other"));
	// cl_TrainingEditorWrapper.def(pybind11::del<>());
	cl_TrainingEditorWrapper.def("GetMinRoundTime", [](TrainingEditorWrapper& cls_) { return cls_.GetMinRoundTime(); });
	cl_TrainingEditorWrapper.def("SetMinRoundTime", [](TrainingEditorWrapper& cls_, float newMinRoundTime) { return cls_.SetMinRoundTime(newMinRoundTime); }, pybind11::arg("newMinRoundTime"));
	cl_TrainingEditorWrapper.def("GetMaxRoundTime", [](TrainingEditorWrapper& cls_) { return cls_.GetMaxRoundTime(); });
	cl_TrainingEditorWrapper.def("SetMaxRoundTime", [](TrainingEditorWrapper& cls_, float newMaxRoundTime) { return cls_.SetMaxRoundTime(newMaxRoundTime); }, pybind11::arg("newMaxRoundTime"));
	cl_TrainingEditorWrapper.def("GetbNoEditor", [](TrainingEditorWrapper& cls_) { return cls_.GetbNoEditor(); });
	cl_TrainingEditorWrapper.def("SetbNoEditor", [](TrainingEditorWrapper& cls_, long unsigned int newbNoEditor) { return cls_.SetbNoEditor(newbNoEditor); }, pybind11::arg("newbNoEditor"));
	cl_TrainingEditorWrapper.def("GetbDisplayedRedoPenaltyMessage", [](TrainingEditorWrapper& cls_) { return cls_.GetbDisplayedRedoPenaltyMessage(); });
	cl_TrainingEditorWrapper.def("SetbDisplayedRedoPenaltyMessage", [](TrainingEditorWrapper& cls_, long unsigned int newbDisplayedRedoPenaltyMessage) { return cls_.SetbDisplayedRedoPenaltyMessage(newbDisplayedRedoPenaltyMessage); }, pybind11::arg("newbDisplayedRedoPenaltyMessage"));
	cl_TrainingEditorWrapper.def("GetbUnsavedChanges", [](TrainingEditorWrapper& cls_) { return cls_.GetbUnsavedChanges(); });
	cl_TrainingEditorWrapper.def("SetbUnsavedChanges", [](TrainingEditorWrapper& cls_, long unsigned int newbUnsavedChanges) { return cls_.SetbUnsavedChanges(newbUnsavedChanges); }, pybind11::arg("newbUnsavedChanges"));
	cl_TrainingEditorWrapper.def("GetPointsScoredThisRound", [](TrainingEditorWrapper& cls_) { return cls_.GetPointsScoredThisRound(); });
	cl_TrainingEditorWrapper.def("SetPointsScoredThisRound", [](TrainingEditorWrapper& cls_, int newPointsScoredThisRound) { return cls_.SetPointsScoredThisRound(newPointsScoredThisRound); }, pybind11::arg("newPointsScoredThisRound"));
	cl_TrainingEditorWrapper.def("GetShotAttempt", [](TrainingEditorWrapper& cls_) { return cls_.GetShotAttempt(); });
	cl_TrainingEditorWrapper.def("SetShotAttempt", [](TrainingEditorWrapper& cls_, int newShotAttempt) { return cls_.SetShotAttempt(newShotAttempt); }, pybind11::arg("newShotAttempt"));
	cl_TrainingEditorWrapper.def("GetGoalieScore", [](TrainingEditorWrapper& cls_) { return cls_.GetGoalieScore(); });
	cl_TrainingEditorWrapper.def("SetGoalieScore", [](TrainingEditorWrapper& cls_, int newGoalieScore) { return cls_.SetGoalieScore(newGoalieScore); }, pybind11::arg("newGoalieScore"));
	cl_TrainingEditorWrapper.def("GetPlayTestType", [](TrainingEditorWrapper& cls_) { return cls_.GetPlayTestType(); });
	cl_TrainingEditorWrapper.def("SetPlayTestType", [](TrainingEditorWrapper& cls_, unsigned char newPlayTestType) { return cls_.SetPlayTestType(newPlayTestType); }, pybind11::arg("newPlayTestType"));
	cl_TrainingEditorWrapper.def("GetGoalMeshBlockers", [](TrainingEditorWrapper& cls_) { return cls_.GetGoalMeshBlockers(); });
	cl_TrainingEditorWrapper.def("GetGoalMeshBlockerArchetype", [](TrainingEditorWrapper& cls_) { return cls_.GetGoalMeshBlockerArchetype(); });
	cl_TrainingEditorWrapper.def("SetGoalMeshBlockerArchetype", [](TrainingEditorWrapper& cls_, ActorWrapper newGoalMeshBlockerArchetype) { return cls_.SetGoalMeshBlockerArchetype(newGoalMeshBlockerArchetype); }, pybind11::arg("newGoalMeshBlockerArchetype"));
	cl_TrainingEditorWrapper.def("GetTrainingData", [](TrainingEditorWrapper& cls_) { return cls_.GetTrainingData(); });
	cl_TrainingEditorWrapper.def("SetTrainingData", [](TrainingEditorWrapper& cls_, GameEditorSaveDataWrapper newTrainingData) { return cls_.SetTrainingData(newTrainingData); }, pybind11::arg("newTrainingData"));
	cl_TrainingEditorWrapper.def("GetSaveDelayTime", [](TrainingEditorWrapper& cls_) { return cls_.GetSaveDelayTime(); });
	cl_TrainingEditorWrapper.def("SetSaveDelayTime", [](TrainingEditorWrapper& cls_, float newSaveDelayTime) { return cls_.SetSaveDelayTime(newSaveDelayTime); }, pybind11::arg("newSaveDelayTime"));
	cl_TrainingEditorWrapper.def("GetSaveCooldown", [](TrainingEditorWrapper& cls_) { return cls_.GetSaveCooldown(); });
	cl_TrainingEditorWrapper.def("SetSaveCooldown", [](TrainingEditorWrapper& cls_, float newSaveCooldown) { return cls_.SetSaveCooldown(newSaveCooldown); }, pybind11::arg("newSaveCooldown"));
	cl_TrainingEditorWrapper.def("GetTrainingFileName", [](TrainingEditorWrapper& cls_) { return cls_.GetTrainingFileName(); });
	cl_TrainingEditorWrapper.def("OnLoadingMovieClosed", [](TrainingEditorWrapper& cls_) { return cls_.OnLoadingMovieClosed(); });
	cl_TrainingEditorWrapper.def("TagHistoryChanges", [](TrainingEditorWrapper& cls_) { return cls_.TagHistoryChanges(); });
	cl_TrainingEditorWrapper.def("MarkAsDirty", [](TrainingEditorWrapper& cls_) { return cls_.MarkAsDirty(); });
	cl_TrainingEditorWrapper.def("ForceTagHistoryChanges", [](TrainingEditorWrapper& cls_) { return cls_.ForceTagHistoryChanges(); });
	cl_TrainingEditorWrapper.def("SetTracedCrosshairActor", [](TrainingEditorWrapper& cls_, PlayerControllerWrapper PC, ActorWrapper NewActor) { return cls_.SetTracedCrosshairActor(PC, NewActor); }, pybind11::arg("PC"), pybind11::arg("NewActor"));
	cl_TrainingEditorWrapper.def("DestroyBall", [](TrainingEditorWrapper& cls_, BallWrapper Ball) { return cls_.DestroyBall(Ball); }, pybind11::arg("Ball"));
	cl_TrainingEditorWrapper.def("AllowDynamicCrowd", [](TrainingEditorWrapper& cls_) { return cls_.AllowDynamicCrowd(); });
	cl_TrainingEditorWrapper.def("BroadcastGoMessage", [](TrainingEditorWrapper& cls_) { return cls_.BroadcastGoMessage(); });
	cl_TrainingEditorWrapper.def("GetTotalRounds", [](TrainingEditorWrapper& cls_) { return cls_.GetTotalRounds(); });
	cl_TrainingEditorWrapper.def("GetDifficulty", [](TrainingEditorWrapper& cls_) { return cls_.GetDifficulty(); });
	cl_TrainingEditorWrapper.def("GetTrainingType", [](TrainingEditorWrapper& cls_) { return cls_.GetTrainingType(); });
	cl_TrainingEditorWrapper.def("Save2", [](TrainingEditorWrapper& cls_) { return cls_.Save2(); });
	cl_TrainingEditorWrapper.def("OnTrainingModeLoaded", [](TrainingEditorWrapper& cls_) { return cls_.OnTrainingModeLoaded(); });
	cl_TrainingEditorWrapper.def("DuplicateRound", [](TrainingEditorWrapper& cls_, int Index) { return cls_.DuplicateRound(Index); }, pybind11::arg("Index"));
	cl_TrainingEditorWrapper.def("ReorderRound", [](TrainingEditorWrapper& cls_, int FromIndex, int ToIndex) { return cls_.ReorderRound(FromIndex, ToIndex); }, pybind11::arg("FromIndex"), pybind11::arg("ToIndex"));
	cl_TrainingEditorWrapper.def("SetRoundTimeLimit", [](TrainingEditorWrapper& cls_, float NewRoundTime) { return cls_.SetRoundTimeLimit(NewRoundTime); }, pybind11::arg("NewRoundTime"));
	cl_TrainingEditorWrapper.def("HandleNextGame", [](TrainingEditorWrapper& cls_) { return cls_.HandleNextGame(); });
	cl_TrainingEditorWrapper.def("ResetBalls", [](TrainingEditorWrapper& cls_) { return cls_.ResetBalls(); });
	cl_TrainingEditorWrapper.def("Load2", [](TrainingEditorWrapper& cls_, std::string SaveName, PlayerControllerWrapper PC) { return cls_.Load2(SaveName, PC); }, pybind11::arg("SaveName"), pybind11::arg("PC"));
	cl_TrainingEditorWrapper.def("DestroyGoalMeshBlockers", [](TrainingEditorWrapper& cls_) { return cls_.DestroyGoalMeshBlockers(); });
	cl_TrainingEditorWrapper.def("UpdateGoalMeshBlocker", [](TrainingEditorWrapper& cls_) { return cls_.UpdateGoalMeshBlocker(); });
	cl_TrainingEditorWrapper.def("GetScore", [](TrainingEditorWrapper& cls_) { return cls_.GetScore(); });
	cl_TrainingEditorWrapper.def("RemovePointsFromScore", [](TrainingEditorWrapper& cls_, int PointsToRemove, int TeamIndex) { return cls_.RemovePointsFromScore(PointsToRemove, TeamIndex); }, pybind11::arg("PointsToRemove"), pybind11::arg("TeamIndex"));
	cl_TrainingEditorWrapper.def("ShowScorerGoalMessage", [](TrainingEditorWrapper& cls_) { return cls_.ShowScorerGoalMessage(); });
	cl_TrainingEditorWrapper.def("ShowResetRoundMessage", [](TrainingEditorWrapper& cls_) { return cls_.ShowResetRoundMessage(); });
	cl_TrainingEditorWrapper.def("ShowPenaltyMessage", [](TrainingEditorWrapper& cls_) { return cls_.ShowPenaltyMessage(); });
	cl_TrainingEditorWrapper.def("GetPlayerTeamNumber", [](TrainingEditorWrapper& cls_) { return cls_.GetPlayerTeamNumber(); });
	cl_TrainingEditorWrapper.def("GetBallGoalScoreNumber", [](TrainingEditorWrapper& cls_) { return cls_.GetBallGoalScoreNumber(); });
	cl_TrainingEditorWrapper.def("RemoveAllPointsFromScore", [](TrainingEditorWrapper& cls_, int TeamIndex) { return cls_.RemoveAllPointsFromScore(TeamIndex); }, pybind11::arg("TeamIndex"));
	cl_TrainingEditorWrapper.def("IncrementRound", [](TrainingEditorWrapper& cls_, long unsigned int bLoop) { return cls_.IncrementRound(bLoop); }, pybind11::arg("bLoop"));
	cl_TrainingEditorWrapper.def("AdjustToFloorLocation", [](TrainingEditorWrapper& cls_, Vector & TraceStart, Vector & CollsionExtent) { return cls_.AdjustToFloorLocation(TraceStart, CollsionExtent); }, pybind11::arg("TraceStart"), pybind11::arg("CollsionExtent"));
	cl_TrainingEditorWrapper.def("SpawnArchetypeAtAndAdjustToFloor", [](TrainingEditorWrapper& cls_, ActorWrapper Archetype, Vector & SpawnLocation, Rotator & SpawnRotation) { return cls_.SpawnArchetypeAtAndAdjustToFloor(Archetype, SpawnLocation, SpawnRotation); }, pybind11::arg("Archetype"), pybind11::arg("SpawnLocation"), pybind11::arg("SpawnRotation"));
	cl_TrainingEditorWrapper.def("SpawnBallAndStartPointAt", [](TrainingEditorWrapper& cls_, Vector & BallSpawnLocation, Rotator & BallSpawnRotation, Vector & StartPointSpawnLocation, Rotator & StartPointSpawnRotation) { return cls_.SpawnBallAndStartPointAt(BallSpawnLocation, BallSpawnRotation, StartPointSpawnLocation, StartPointSpawnRotation); }, pybind11::arg("BallSpawnLocation"), pybind11::arg("BallSpawnRotation"), pybind11::arg("StartPointSpawnLocation"), pybind11::arg("StartPointSpawnRotation"));
	cl_TrainingEditorWrapper.def("SetupDefaultRound", [](TrainingEditorWrapper& cls_) { return cls_.SetupDefaultRound(); });
	cl_TrainingEditorWrapper.def("SwitchToRoundNumber", [](TrainingEditorWrapper& cls_, int RoundNumber, long unsigned int BackupCurrentRound) { return cls_.SwitchToRoundNumber(RoundNumber, BackupCurrentRound); }, pybind11::arg("RoundNumber"), pybind11::arg("BackupCurrentRound"));
	cl_TrainingEditorWrapper.def("DeleteRound", [](TrainingEditorWrapper& cls_, int RoundToDelete) { return cls_.DeleteRound(RoundToDelete); }, pybind11::arg("RoundToDelete"));
	cl_TrainingEditorWrapper.def("RestartPlayTest", [](TrainingEditorWrapper& cls_) { return cls_.RestartPlayTest(); });
	cl_TrainingEditorWrapper.def("EndPlayTest", [](TrainingEditorWrapper& cls_) { return cls_.EndPlayTest(); });
	cl_TrainingEditorWrapper.def("StartPlayTest", [](TrainingEditorWrapper& cls_, unsigned char InPlayTestType) { return cls_.StartPlayTest(InPlayTestType); }, pybind11::arg("InPlayTestType"));
	cl_TrainingEditorWrapper.def("CanPlayTestRoundNumber", [](TrainingEditorWrapper& cls_, int RoundNumber) { return cls_.CanPlayTestRoundNumber(RoundNumber); }, pybind11::arg("RoundNumber"));
	cl_TrainingEditorWrapper.def("SetUnsavedChanges", [](TrainingEditorWrapper& cls_, long unsigned int bInUnsavedChanges) { return cls_.SetUnsavedChanges(bInUnsavedChanges); }, pybind11::arg("bInUnsavedChanges"));
	cl_TrainingEditorWrapper.def("UpdateActiveRoundData", [](TrainingEditorWrapper& cls_) { return cls_.UpdateActiveRoundData(); });
	cl_TrainingEditorWrapper.def("StartNewRound", [](TrainingEditorWrapper& cls_) { return cls_.StartNewRound(); });
	cl_TrainingEditorWrapper.def("IsValidRoundIndex", [](TrainingEditorWrapper& cls_, int ArrayIndex) { return cls_.IsValidRoundIndex(ArrayIndex); }, pybind11::arg("ArrayIndex"));
	cl_TrainingEditorWrapper.def("AddLocalPlayer", [](TrainingEditorWrapper& cls_, PlayerControllerWrapper Player) { return cls_.AddLocalPlayer(Player); }, pybind11::arg("Player"));
	cl_TrainingEditorWrapper.def("OnInit", [](TrainingEditorWrapper& cls_) { return cls_.OnInit(); });
	cl_TrainingEditorWrapper.def("eventDestroyed", [](TrainingEditorWrapper& cls_) { return cls_.eventDestroyed(); });
	cl_TrainingEditorWrapper.def("eventPostBeginPlay", [](TrainingEditorWrapper& cls_) { return cls_.eventPostBeginPlay(); });
	cl_TrainingEditorWrapper.def("EventSaveResult", [](TrainingEditorWrapper& cls_, long unsigned int bSuccess) { return cls_.EventSaveResult(bSuccess); }, pybind11::arg("bSuccess"));
	cl_TrainingEditorWrapper.def("EventUnsavedChanges", [](TrainingEditorWrapper& cls_, long unsigned int bOutUnsavedChanges) { return cls_.EventUnsavedChanges(bOutUnsavedChanges); }, pybind11::arg("bOutUnsavedChanges"));
	cl_TrainingEditorWrapper.def("EventPlaytestStarted", [](TrainingEditorWrapper& cls_, TrainingEditorWrapper GamEvent) { return cls_.EventPlaytestStarted(GamEvent); }, pybind11::arg("GamEvent"));
	cl_TrainingEditorWrapper.def("EventRoundChanged", [](TrainingEditorWrapper& cls_, TrainingEditorWrapper GamEvent) { return cls_.EventRoundChanged(GamEvent); }, pybind11::arg("GamEvent"));
	cl_TrainingEditorWrapper.def("EventRoundTimeChanged", [](TrainingEditorWrapper& cls_, TrainingEditorWrapper GameEvent) { return cls_.EventRoundTimeChanged(GameEvent); }, pybind11::arg("GameEvent"));
}
