void bind_ServerWrapper(pybind11::module& m)
{

	pybind11::class_<ServerWrapper, std::shared_ptr<ServerWrapper>, TeamGameEventWrapper> cl_ServerWrapper(m, "ServerWrapper");
	cl_ServerWrapper.def(pybind11::init<uintptr_t>(), pybind11::arg("mem"));
	cl_ServerWrapper.def(pybind11::init<ServerWrapper const &>(), pybind11::arg("other"));
	// cl_ServerWrapper.def(pybind11::del<>());
	cl_ServerWrapper.def("GetBall", [](ServerWrapper& cls_) { return cls_.GetBall(); });
	cl_ServerWrapper.def("SpawnCar", [](ServerWrapper& cls_, int carBody, std::string name) { return cls_.SpawnCar(carBody, name); }, pybind11::arg("carBody"), pybind11::arg("name"));
	cl_ServerWrapper.def("SpawnBot", [](ServerWrapper& cls_, int carBody, std::string name) { return cls_.SpawnBot(carBody, name); }, pybind11::arg("carBody"), pybind11::arg("name"));
	cl_ServerWrapper.def("SpawnBall", [](ServerWrapper& cls_, Vector const position, bool wake, bool spawnCannon) { return cls_.SpawnBall(position, wake, spawnCannon); }, pybind11::arg("position"), pybind11::arg("wake"), pybind11::arg("spawnCannon"));
	cl_ServerWrapper.def("HasAuthority", [](ServerWrapper& cls_) { return cls_.HasAuthority(); });
	cl_ServerWrapper.def("SetGameSpeed", [](ServerWrapper& cls_, float GameSpeed) { return cls_.SetGameSpeed(GameSpeed); }, pybind11::arg("GameSpeed"));
	cl_ServerWrapper.def("GetGameSpeed", [](ServerWrapper& cls_) { return cls_.GetGameSpeed(); });
	cl_ServerWrapper.def("SetSecondsElapsed", [](ServerWrapper& cls_, float SecondsElapsed) { return cls_.SetSecondsElapsed(SecondsElapsed); }, pybind11::arg("SecondsElapsed"));
	cl_ServerWrapper.def("GetSecondsElapsed", [](ServerWrapper& cls_) { return cls_.GetSecondsElapsed(); });
	cl_ServerWrapper.def("GetGameCar", [](ServerWrapper& cls_) { return cls_.GetGameCar(); });
	cl_ServerWrapper.def("IsBallMovingTowardsGoal", [](ServerWrapper& cls_, int goalNo, BallWrapper bw) { return cls_.IsBallMovingTowardsGoal(goalNo, bw); }, pybind11::arg("goalNo"), pybind11::arg("bw"));
	cl_ServerWrapper.def("IsInGoal", [](ServerWrapper& cls_, Vector vec) { return cls_.IsInGoal(vec); }, pybind11::arg("vec"));
	cl_ServerWrapper.def("DisableGoalReset", [](ServerWrapper& cls_) { return cls_.DisableGoalReset(); });
	cl_ServerWrapper.def("EnableGoalReset", [](ServerWrapper& cls_) { return cls_.EnableGoalReset(); });
	cl_ServerWrapper.def("GenerateShot", [](ServerWrapper& cls_, Vector startPos, Vector destination, float speed) { return cls_.GenerateShot(startPos, destination, speed); }, pybind11::arg("startPos"), pybind11::arg("destination"), pybind11::arg("speed"));
	cl_ServerWrapper.def("GenerateGoalAimLocation", [](ServerWrapper& cls_, int goalNumber, Vector currentBallLocation) { return cls_.GenerateGoalAimLocation(goalNumber, currentBallLocation); }, pybind11::arg("goalNumber"), pybind11::arg("currentBallLocation"));
	cl_ServerWrapper.def("GetGoalExtent", [](ServerWrapper& cls_, int goalNumber=0) { return cls_.GetGoalExtent(goalNumber); }, pybind11::arg("goalNumber"));
	cl_ServerWrapper.def("GetGoalLocation", [](ServerWrapper& cls_, int goalNumber=0) { return cls_.GetGoalLocation(goalNumber); }, pybind11::arg("goalNumber"));
	cl_ServerWrapper.def("GetTestCarArchetype", [](ServerWrapper& cls_) { return cls_.GetTestCarArchetype(); });
	cl_ServerWrapper.def("SetTestCarArchetype", [](ServerWrapper& cls_, CarWrapper newTestCarArchetype) { return cls_.SetTestCarArchetype(newTestCarArchetype); }, pybind11::arg("newTestCarArchetype"));
	cl_ServerWrapper.def("GetBallArchetype", [](ServerWrapper& cls_) { return cls_.GetBallArchetype(); });
	cl_ServerWrapper.def("SetBallArchetype", [](ServerWrapper& cls_, BallWrapper newBallArchetype) { return cls_.SetBallArchetype(newBallArchetype); }, pybind11::arg("newBallArchetype"));
	cl_ServerWrapper.def("GetBallSpawnPoint", [](ServerWrapper& cls_) { return cls_.GetBallSpawnPoint(); });
	cl_ServerWrapper.def("SetBallSpawnPoint", [](ServerWrapper& cls_, ActorWrapper newBallSpawnPoint) { return cls_.SetBallSpawnPoint(newBallSpawnPoint); }, pybind11::arg("newBallSpawnPoint"));
	cl_ServerWrapper.def("GetSeriesLength", [](ServerWrapper& cls_) { return cls_.GetSeriesLength(); });
	cl_ServerWrapper.def("SetSeriesLength", [](ServerWrapper& cls_, int newSeriesLength) { return cls_.SetSeriesLength(newSeriesLength); }, pybind11::arg("newSeriesLength"));
	cl_ServerWrapper.def("GetGameTime", [](ServerWrapper& cls_) { return cls_.GetGameTime(); });
	cl_ServerWrapper.def("SetGameTime", [](ServerWrapper& cls_, int newGameTime) { return cls_.SetGameTime(newGameTime); }, pybind11::arg("newGameTime"));
	cl_ServerWrapper.def("GetWarmupTime", [](ServerWrapper& cls_) { return cls_.GetWarmupTime(); });
	cl_ServerWrapper.def("SetWarmupTime", [](ServerWrapper& cls_, int newWarmupTime) { return cls_.SetWarmupTime(newWarmupTime); }, pybind11::arg("newWarmupTime"));
	cl_ServerWrapper.def("GetMaxScore", [](ServerWrapper& cls_) { return cls_.GetMaxScore(); });
	cl_ServerWrapper.def("SetMaxScore", [](ServerWrapper& cls_, int newMaxScore) { return cls_.SetMaxScore(newMaxScore); }, pybind11::arg("newMaxScore"));
	cl_ServerWrapper.def("GetAutoBalanceDifference", [](ServerWrapper& cls_) { return cls_.GetAutoBalanceDifference(); });
	cl_ServerWrapper.def("SetAutoBalanceDifference", [](ServerWrapper& cls_, int newAutoBalanceDifference) { return cls_.SetAutoBalanceDifference(newAutoBalanceDifference); }, pybind11::arg("newAutoBalanceDifference"));
	//cl_ServerWrapper.def("GetLastTrialTime", [](ServerWrapper& cls_) { return cls_.GetLastTrialTime(); });
	//cl_ServerWrapper.def("SetLastTrialTime", [](ServerWrapper& cls_, int newLastTrialTime) { return cls_.SetLastTrialTime(newLastTrialTime); }, pybind11::arg("newLastTrialTime"));
	cl_ServerWrapper.def("GetScoreSlomoTime", [](ServerWrapper& cls_) { return cls_.GetScoreSlomoTime(); });
	cl_ServerWrapper.def("SetScoreSlomoTime", [](ServerWrapper& cls_, float newScoreSlomoTime) { return cls_.SetScoreSlomoTime(newScoreSlomoTime); }, pybind11::arg("newScoreSlomoTime"));
	cl_ServerWrapper.def("GetGameTimeRemaining", [](ServerWrapper& cls_) { return cls_.GetGameTimeRemaining(); });
	cl_ServerWrapper.def("SetGameTimeRemaining", [](ServerWrapper& cls_, float newGameTimeRemaining) { return cls_.SetGameTimeRemaining(newGameTimeRemaining); }, pybind11::arg("newGameTimeRemaining"));
	cl_ServerWrapper.def("GetSecondsRemaining", [](ServerWrapper& cls_) { return cls_.GetSecondsRemaining(); });
	cl_ServerWrapper.def("SetSecondsRemaining", [](ServerWrapper& cls_, int newSecondsRemaining) { return cls_.SetSecondsRemaining(newSecondsRemaining); }, pybind11::arg("newSecondsRemaining"));
	cl_ServerWrapper.def("GetWaitTimeRemaining", [](ServerWrapper& cls_) { return cls_.GetWaitTimeRemaining(); });
	cl_ServerWrapper.def("SetWaitTimeRemaining", [](ServerWrapper& cls_, int newWaitTimeRemaining) { return cls_.SetWaitTimeRemaining(newWaitTimeRemaining); }, pybind11::arg("newWaitTimeRemaining"));
	cl_ServerWrapper.def("GetTotalGameTimePlayed", [](ServerWrapper& cls_) { return cls_.GetTotalGameTimePlayed(); });
	cl_ServerWrapper.def("SetTotalGameTimePlayed", [](ServerWrapper& cls_, float newTotalGameTimePlayed) { return cls_.SetTotalGameTimePlayed(newTotalGameTimePlayed); }, pybind11::arg("newTotalGameTimePlayed"));
	cl_ServerWrapper.def("GetOvertimeTimePlayed", [](ServerWrapper& cls_) { return cls_.GetOvertimeTimePlayed(); });
	cl_ServerWrapper.def("SetOvertimeTimePlayed", [](ServerWrapper& cls_, float newOvertimeTimePlayed) { return cls_.SetOvertimeTimePlayed(newOvertimeTimePlayed); }, pybind11::arg("newOvertimeTimePlayed"));
	cl_ServerWrapper.def("GetbRoundActive", [](ServerWrapper& cls_) { return cls_.GetbRoundActive(); });
	cl_ServerWrapper.def("SetbRoundActive", [](ServerWrapper& cls_, long unsigned int newbRoundActive) { return cls_.SetbRoundActive(newbRoundActive); }, pybind11::arg("newbRoundActive"));
	cl_ServerWrapper.def("GetbPlayReplays", [](ServerWrapper& cls_) { return cls_.GetbPlayReplays(); });
	cl_ServerWrapper.def("SetbPlayReplays", [](ServerWrapper& cls_, long unsigned int newbPlayReplays) { return cls_.SetbPlayReplays(newbPlayReplays); }, pybind11::arg("newbPlayReplays"));
	cl_ServerWrapper.def("GetbBallHasBeenHit", [](ServerWrapper& cls_) { return cls_.GetbBallHasBeenHit(); });
	cl_ServerWrapper.def("SetbBallHasBeenHit", [](ServerWrapper& cls_, long unsigned int newbBallHasBeenHit) { return cls_.SetbBallHasBeenHit(newbBallHasBeenHit); }, pybind11::arg("newbBallHasBeenHit"));
	cl_ServerWrapper.def("GetbOverTime", [](ServerWrapper& cls_) { return cls_.GetbOverTime(); });
	cl_ServerWrapper.def("SetbOverTime", [](ServerWrapper& cls_, long unsigned int newbOverTime) { return cls_.SetbOverTime(newbOverTime); }, pybind11::arg("newbOverTime"));
	cl_ServerWrapper.def("GetbUnlimitedTime", [](ServerWrapper& cls_) { return cls_.GetbUnlimitedTime(); });
	cl_ServerWrapper.def("SetbUnlimitedTime", [](ServerWrapper& cls_, long unsigned int newbUnlimitedTime) { return cls_.SetbUnlimitedTime(newbUnlimitedTime); }, pybind11::arg("newbUnlimitedTime"));
	//cl_ServerWrapper.def("GetbKickOnTrialEnd", [](ServerWrapper& cls_) { return cls_.GetbKickOnTrialEnd(); });
	//cl_ServerWrapper.def("SetbKickOnTrialEnd", [](ServerWrapper& cls_, long unsigned int newbKickOnTrialEnd) { return cls_.SetbKickOnTrialEnd(newbKickOnTrialEnd); }, pybind11::arg("newbKickOnTrialEnd"));
	cl_ServerWrapper.def("GetbNoContest", [](ServerWrapper& cls_) { return cls_.GetbNoContest(); });
	cl_ServerWrapper.def("SetbNoContest", [](ServerWrapper& cls_, long unsigned int newbNoContest) { return cls_.SetbNoContest(newbNoContest); }, pybind11::arg("newbNoContest"));
	cl_ServerWrapper.def("GetbDisableGoalDelay", [](ServerWrapper& cls_) { return cls_.GetbDisableGoalDelay(); });
	cl_ServerWrapper.def("SetbDisableGoalDelay", [](ServerWrapper& cls_, long unsigned int newbDisableGoalDelay) { return cls_.SetbDisableGoalDelay(newbDisableGoalDelay); }, pybind11::arg("newbDisableGoalDelay"));
	cl_ServerWrapper.def("GetbShowNoScorerGoalMessage", [](ServerWrapper& cls_) { return cls_.GetbShowNoScorerGoalMessage(); });
	cl_ServerWrapper.def("SetbShowNoScorerGoalMessage", [](ServerWrapper& cls_, long unsigned int newbShowNoScorerGoalMessage) { return cls_.SetbShowNoScorerGoalMessage(newbShowNoScorerGoalMessage); }, pybind11::arg("newbShowNoScorerGoalMessage"));
	cl_ServerWrapper.def("GetbMatchEnded", [](ServerWrapper& cls_) { return cls_.GetbMatchEnded(); });
	cl_ServerWrapper.def("SetbMatchEnded", [](ServerWrapper& cls_, long unsigned int newbMatchEnded) { return cls_.SetbMatchEnded(newbMatchEnded); }, pybind11::arg("newbMatchEnded"));
	cl_ServerWrapper.def("GetbShowIntroScene", [](ServerWrapper& cls_) { return cls_.GetbShowIntroScene(); });
	cl_ServerWrapper.def("SetbShowIntroScene", [](ServerWrapper& cls_, long unsigned int newbShowIntroScene) { return cls_.SetbShowIntroScene(newbShowIntroScene); }, pybind11::arg("newbShowIntroScene"));
	cl_ServerWrapper.def("GetbClubMatch", [](ServerWrapper& cls_) { return cls_.GetbClubMatch(); });
	cl_ServerWrapper.def("SetbClubMatch", [](ServerWrapper& cls_, long unsigned int newbClubMatch) { return cls_.SetbClubMatch(newbClubMatch); }, pybind11::arg("newbClubMatch"));
	cl_ServerWrapper.def("GetNextSpawnIndex", [](ServerWrapper& cls_) { return cls_.GetNextSpawnIndex(); });
	cl_ServerWrapper.def("SetNextSpawnIndex", [](ServerWrapper& cls_, int newNextSpawnIndex) { return cls_.SetNextSpawnIndex(newNextSpawnIndex); }, pybind11::arg("newNextSpawnIndex"));
	cl_ServerWrapper.def("GetReplayDirectorArchetype", [](ServerWrapper& cls_) { return cls_.GetReplayDirectorArchetype(); });
	cl_ServerWrapper.def("SetReplayDirectorArchetype", [](ServerWrapper& cls_, ReplayDirectorWrapper newReplayDirectorArchetype) { return cls_.SetReplayDirectorArchetype(newReplayDirectorArchetype); }, pybind11::arg("newReplayDirectorArchetype"));
	cl_ServerWrapper.def("GetReplayDirector", [](ServerWrapper& cls_) { return cls_.GetReplayDirector(); });
	cl_ServerWrapper.def("SetReplayDirector", [](ServerWrapper& cls_, ReplayDirectorWrapper newReplayDirector) { return cls_.SetReplayDirector(newReplayDirector); }, pybind11::arg("newReplayDirector"));
	cl_ServerWrapper.def("GetGameBalls", [](ServerWrapper& cls_) { return cls_.GetGameBalls(); });
	cl_ServerWrapper.def("GetTotalGameBalls", [](ServerWrapper& cls_) { return cls_.GetTotalGameBalls(); });
	cl_ServerWrapper.def("SetTotalGameBalls", [](ServerWrapper& cls_, int newTotalGameBalls) { return cls_.SetTotalGameBalls(newTotalGameBalls); }, pybind11::arg("newTotalGameBalls"));
	cl_ServerWrapper.def("GetPostGoalTime", [](ServerWrapper& cls_) { return cls_.GetPostGoalTime(); });
	cl_ServerWrapper.def("SetPostGoalTime", [](ServerWrapper& cls_, float newPostGoalTime) { return cls_.SetPostGoalTime(newPostGoalTime); }, pybind11::arg("newPostGoalTime"));
	cl_ServerWrapper.def("GetGoals", [](ServerWrapper& cls_) { return cls_.GetGoals(); });
	cl_ServerWrapper.def("GetSecondsRemainingCountdown", [](ServerWrapper& cls_) { return cls_.GetSecondsRemainingCountdown(); });
	cl_ServerWrapper.def("SetSecondsRemainingCountdown", [](ServerWrapper& cls_, int newSecondsRemainingCountdown) { return cls_.SetSecondsRemainingCountdown(newSecondsRemainingCountdown); }, pybind11::arg("newSecondsRemainingCountdown"));
	cl_ServerWrapper.def("GetFieldCenter", [](ServerWrapper& cls_) { return cls_.GetFieldCenter(); });
	cl_ServerWrapper.def("SetFieldCenter", [](ServerWrapper& cls_, Vector newFieldCenter) { return cls_.SetFieldCenter(newFieldCenter); }, pybind11::arg("newFieldCenter"));
	cl_ServerWrapper.def("GetGameWinner", [](ServerWrapper& cls_) { return cls_.GetGameWinner(); });
	cl_ServerWrapper.def("SetGameWinner", [](ServerWrapper& cls_, TeamWrapper newGameWinner) { return cls_.SetGameWinner(newGameWinner); }, pybind11::arg("newGameWinner"));
	cl_ServerWrapper.def("GetMatchWinner", [](ServerWrapper& cls_) { return cls_.GetMatchWinner(); });
	cl_ServerWrapper.def("SetMatchWinner", [](ServerWrapper& cls_, TeamWrapper newMatchWinner) { return cls_.SetMatchWinner(newMatchWinner); }, pybind11::arg("newMatchWinner"));
	cl_ServerWrapper.def("GetMVP", [](ServerWrapper& cls_) { return cls_.GetMVP(); });
	cl_ServerWrapper.def("SetMVP", [](ServerWrapper& cls_, PriWrapper newMVP) { return cls_.SetMVP(newMVP); }, pybind11::arg("newMVP"));
	cl_ServerWrapper.def("GetFastestGoalPlayer", [](ServerWrapper& cls_) { return cls_.GetFastestGoalPlayer(); });
	cl_ServerWrapper.def("SetFastestGoalPlayer", [](ServerWrapper& cls_, PriWrapper newFastestGoalPlayer) { return cls_.SetFastestGoalPlayer(newFastestGoalPlayer); }, pybind11::arg("newFastestGoalPlayer"));
	cl_ServerWrapper.def("GetSlowestGoalPlayer", [](ServerWrapper& cls_) { return cls_.GetSlowestGoalPlayer(); });
	cl_ServerWrapper.def("SetSlowestGoalPlayer", [](ServerWrapper& cls_, PriWrapper newSlowestGoalPlayer) { return cls_.SetSlowestGoalPlayer(newSlowestGoalPlayer); }, pybind11::arg("newSlowestGoalPlayer"));
	cl_ServerWrapper.def("GetFurthestGoalPlayer", [](ServerWrapper& cls_) { return cls_.GetFurthestGoalPlayer(); });
	cl_ServerWrapper.def("SetFurthestGoalPlayer", [](ServerWrapper& cls_, PriWrapper newFurthestGoalPlayer) { return cls_.SetFurthestGoalPlayer(newFurthestGoalPlayer); }, pybind11::arg("newFurthestGoalPlayer"));
	cl_ServerWrapper.def("GetFastestGoalSpeed", [](ServerWrapper& cls_) { return cls_.GetFastestGoalSpeed(); });
	cl_ServerWrapper.def("SetFastestGoalSpeed", [](ServerWrapper& cls_, float newFastestGoalSpeed) { return cls_.SetFastestGoalSpeed(newFastestGoalSpeed); }, pybind11::arg("newFastestGoalSpeed"));
	cl_ServerWrapper.def("GetSlowestGoalSpeed", [](ServerWrapper& cls_) { return cls_.GetSlowestGoalSpeed(); });
	cl_ServerWrapper.def("SetSlowestGoalSpeed", [](ServerWrapper& cls_, float newSlowestGoalSpeed) { return cls_.SetSlowestGoalSpeed(newSlowestGoalSpeed); }, pybind11::arg("newSlowestGoalSpeed"));
	cl_ServerWrapper.def("GetFurthestGoal", [](ServerWrapper& cls_) { return cls_.GetFurthestGoal(); });
	cl_ServerWrapper.def("SetFurthestGoal", [](ServerWrapper& cls_, float newFurthestGoal) { return cls_.SetFurthestGoal(newFurthestGoal); }, pybind11::arg("newFurthestGoal"));
	cl_ServerWrapper.def("GetReplicatedScoredOnTeam", [](ServerWrapper& cls_) { return cls_.GetReplicatedScoredOnTeam(); });
	cl_ServerWrapper.def("SetReplicatedScoredOnTeam", [](ServerWrapper& cls_, unsigned char newReplicatedScoredOnTeam) { return cls_.SetReplicatedScoredOnTeam(newReplicatedScoredOnTeam); }, pybind11::arg("newReplicatedScoredOnTeam"));
	cl_ServerWrapper.def("GetReplicatedServerPerformanceState", [](ServerWrapper& cls_) { return cls_.GetReplicatedServerPerformanceState(); });
	cl_ServerWrapper.def("SetReplicatedServerPerformanceState", [](ServerWrapper& cls_, unsigned char newReplicatedServerPerformanceState) { return cls_.SetReplicatedServerPerformanceState(newReplicatedServerPerformanceState); }, pybind11::arg("newReplicatedServerPerformanceState"));
	cl_ServerWrapper.def("GetRoundNum", [](ServerWrapper& cls_) { return cls_.GetRoundNum(); });
	cl_ServerWrapper.def("SetRoundNum", [](ServerWrapper& cls_, int newRoundNum) { return cls_.SetRoundNum(newRoundNum); }, pybind11::arg("newRoundNum"));
	//cl_ServerWrapper.def("GetKickIdleReplayOffset", [](ServerWrapper& cls_) { return cls_.GetKickIdleReplayOffset(); });
	//cl_ServerWrapper.def("SetKickIdleReplayOffset", [](ServerWrapper& cls_, float newKickIdleReplayOffset) { return cls_.SetKickIdleReplayOffset(newKickIdleReplayOffset); }, pybind11::arg("newKickIdleReplayOffset"));
	cl_ServerWrapper.def("GetAssistMaxTime", [](ServerWrapper& cls_) { return cls_.GetAssistMaxTime(); });
	cl_ServerWrapper.def("SetAssistMaxTime", [](ServerWrapper& cls_, float newAssistMaxTime) { return cls_.SetAssistMaxTime(newAssistMaxTime); }, pybind11::arg("newAssistMaxTime"));
	cl_ServerWrapper.def("GetBallHasBeenHitStartDelay", [](ServerWrapper& cls_) { return cls_.GetBallHasBeenHitStartDelay(); });
	cl_ServerWrapper.def("SetBallHasBeenHitStartDelay", [](ServerWrapper& cls_, float newBallHasBeenHitStartDelay) { return cls_.SetBallHasBeenHitStartDelay(newBallHasBeenHitStartDelay); }, pybind11::arg("newBallHasBeenHitStartDelay"));
	cl_ServerWrapper.def("GetPodiumDelay", [](ServerWrapper& cls_) { return cls_.GetPodiumDelay(); });
	cl_ServerWrapper.def("SetPodiumDelay", [](ServerWrapper& cls_, float newPodiumDelay) { return cls_.SetPodiumDelay(newPodiumDelay); }, pybind11::arg("newPodiumDelay"));
	cl_ServerWrapper.def("GetPodiumTime", [](ServerWrapper& cls_) { return cls_.GetPodiumTime(); });
	cl_ServerWrapper.def("SetPodiumTime", [](ServerWrapper& cls_, float newPodiumTime) { return cls_.SetPodiumTime(newPodiumTime); }, pybind11::arg("newPodiumTime"));
	cl_ServerWrapper.def("GetLobbyEndCountdown", [](ServerWrapper& cls_) { return cls_.GetLobbyEndCountdown(); });
	cl_ServerWrapper.def("SetLobbyEndCountdown", [](ServerWrapper& cls_, int newLobbyEndCountdown) { return cls_.SetLobbyEndCountdown(newLobbyEndCountdown); }, pybind11::arg("newLobbyEndCountdown"));
	cl_ServerWrapper.def("GetLobbyCountdown", [](ServerWrapper& cls_) { return cls_.GetLobbyCountdown(); });
	cl_ServerWrapper.def("SetLobbyCountdown", [](ServerWrapper& cls_, int newLobbyCountdown) { return cls_.SetLobbyCountdown(newLobbyCountdown); }, pybind11::arg("newLobbyCountdown"));
	cl_ServerWrapper.def("GetLobbyTime", [](ServerWrapper& cls_) { return cls_.GetLobbyTime(); });
	cl_ServerWrapper.def("SetLobbyTime", [](ServerWrapper& cls_, float newLobbyTime) { return cls_.SetLobbyTime(newLobbyTime); }, pybind11::arg("newLobbyTime"));
	cl_ServerWrapper.def("GetLobbySpawnRestartTime", [](ServerWrapper& cls_) { return cls_.GetLobbySpawnRestartTime(); });
	cl_ServerWrapper.def("SetLobbySpawnRestartTime", [](ServerWrapper& cls_, int newLobbySpawnRestartTime) { return cls_.SetLobbySpawnRestartTime(newLobbySpawnRestartTime); }, pybind11::arg("newLobbySpawnRestartTime"));
	cl_ServerWrapper.def("GetPauser", [](ServerWrapper& cls_) { return cls_.GetPauser(); });
	cl_ServerWrapper.def("SetPauser", [](ServerWrapper& cls_, PlayerControllerWrapper newPauser) { return cls_.SetPauser(newPauser); }, pybind11::arg("newPauser"));
	cl_ServerWrapper.def("GetPlayerCarCount", [](ServerWrapper& cls_) { return cls_.GetPlayerCarCount(); });
	cl_ServerWrapper.def("ReplicateSkillTiers", [](ServerWrapper& cls_) { return cls_.ReplicateSkillTiers(); });
	cl_ServerWrapper.def("RemoveTeamSelection", [](ServerWrapper& cls_) { return cls_.RemoveTeamSelection(); });
	cl_ServerWrapper.def("CheckStart", [](ServerWrapper& cls_) { return cls_.CheckStart(); });
	cl_ServerWrapper.def("StartLobbyTimer", [](ServerWrapper& cls_) { return cls_.StartLobbyTimer(); });
	cl_ServerWrapper.def("HandleCountdownTick", [](ServerWrapper& cls_) { return cls_.HandleCountdownTick(); });
	cl_ServerWrapper.def("CheckForCountdownAction", [](ServerWrapper& cls_) { return cls_.CheckForCountdownAction(); });
	cl_ServerWrapper.def("LobbyCountdownTick", [](ServerWrapper& cls_) { return cls_.LobbyCountdownTick(); });
	cl_ServerWrapper.def("CanSpawnBots", [](ServerWrapper& cls_) { return cls_.CanSpawnBots(); });
	cl_ServerWrapper.def("StartRound", [](ServerWrapper& cls_) { return cls_.StartRound(); });
	cl_ServerWrapper.def("EndRound", [](ServerWrapper& cls_) { return cls_.EndRound(); });
	cl_ServerWrapper.def("SetBallEventListeners", [](ServerWrapper& cls_, BallWrapper Ball, long unsigned int bListen) { return cls_.SetBallEventListeners(Ball, bListen); }, pybind11::arg("Ball"), pybind11::arg("bListen"));
	cl_ServerWrapper.def("CanAwardPoints", [](ServerWrapper& cls_) { return cls_.CanAwardPoints(); });
	cl_ServerWrapper.def("HandleCarTouch", [](ServerWrapper& cls_, BallWrapper Ball, CarWrapper HitCar, unsigned char HitType) { return cls_.HandleCarTouch(Ball, HitCar, HitType); }, pybind11::arg("Ball"), pybind11::arg("HitCar"), pybind11::arg("HitType"));
	cl_ServerWrapper.def("SetBallHasBeenHit2", [](ServerWrapper& cls_) { return cls_.SetBallHasBeenHit2(); });
	cl_ServerWrapper.def("DetermineScoreTouchIndex", [](ServerWrapper& cls_, BallWrapper Ball, GoalWrapper Goal) { return cls_.DetermineScoreTouchIndex(Ball, Goal); }, pybind11::arg("Ball"), pybind11::arg("Goal"));
	cl_ServerWrapper.def("DetermineAssistTouchIndex", [](ServerWrapper& cls_, BallWrapper Ball, int ScoreIdx) { return cls_.DetermineAssistTouchIndex(Ball, ScoreIdx); }, pybind11::arg("Ball"), pybind11::arg("ScoreIdx"));
	cl_ServerWrapper.def("UpdateTotalGameTimePlayed", [](ServerWrapper& cls_, float DeltaTime) { return cls_.UpdateTotalGameTimePlayed(DeltaTime); }, pybind11::arg("DeltaTime"));
	cl_ServerWrapper.def("UpdateGameTime", [](ServerWrapper& cls_, float DeltaTime) { return cls_.UpdateGameTime(DeltaTime); }, pybind11::arg("DeltaTime"));
	cl_ServerWrapper.def("CanUpdateGameTime", [](ServerWrapper& cls_) { return cls_.CanUpdateGameTime(); });
	//cl_ServerWrapper.def("WaitForBallOnGround", [](ServerWrapper& cls_) { return cls_.WaitForBallOnGround(); });
	//cl_ServerWrapper.def("BallHitGround", [](ServerWrapper& cls_, Vector & HitNorm) { return cls_.BallHitGround(HitNorm); }, pybind11::arg("HitNorm"));
	//cl_ServerWrapper.def("HandleBallHitGround", [](ServerWrapper& cls_, BallWrapper Ball, Vector & HitLoc, Vector & HitNorm) { return cls_.HandleBallHitGround(Ball, HitLoc, HitNorm); }, pybind11::arg("Ball"), pybind11::arg("HitLoc"), pybind11::arg("HitNorm"));
	//cl_ServerWrapper.def("HandleBallHitGroundTimeout", [](ServerWrapper& cls_) { return cls_.HandleBallHitGroundTimeout(); });
	cl_ServerWrapper.def("StartReplay", [](ServerWrapper& cls_) { return cls_.StartReplay(); });
	cl_ServerWrapper.def("HandleReplayFinished", [](ServerWrapper& cls_, ReplayDirectorWrapper InReplay) { return cls_.HandleReplayFinished(InReplay); }, pybind11::arg("InReplay"));
	cl_ServerWrapper.def("GotoPodiumSpotlight", [](ServerWrapper& cls_) { return cls_.GotoPodiumSpotlight(); });
	cl_ServerWrapper.def("UpdateSpotlight", [](ServerWrapper& cls_) { return cls_.UpdateSpotlight(); });
	cl_ServerWrapper.def("SpawnPodiumCars", [](ServerWrapper& cls_) { return cls_.SpawnPodiumCars(); });
	cl_ServerWrapper.def("CanEnableCarPodiumMovement", [](ServerWrapper& cls_) { return cls_.CanEnableCarPodiumMovement(); });
	cl_ServerWrapper.def("FinishEvent", [](ServerWrapper& cls_) { return cls_.FinishEvent(); });
	cl_ServerWrapper.def("__GameEvent_Soccar_TA__UpdateTeamScores", [](ServerWrapper& cls_, TeamWrapper T) { return cls_.__GameEvent_Soccar_TA__UpdateTeamScores(T); }, pybind11::arg("T"));
	cl_ServerWrapper.def("__GameEvent_Soccar_TA__SubmitMatchComplete", [](ServerWrapper& cls_, PriWrapper PRI) { return cls_.__GameEvent_Soccar_TA__SubmitMatchComplete(PRI); }, pybind11::arg("PRI"));
	cl_ServerWrapper.def("__GameEvent_Soccar_TA__CheckStart", [](ServerWrapper& cls_, TeamWrapper T) { return cls_.__GameEvent_Soccar_TA__CheckStart(T); }, pybind11::arg("T"));
	cl_ServerWrapper.def("__GameEvent_Soccar_TA__EndState", [](ServerWrapper& cls_, TeamWrapper T) { return cls_.__GameEvent_Soccar_TA__EndState(T); }, pybind11::arg("T"));
	cl_ServerWrapper.def("__ReplicatedServerPerformanceState__ChangeNotifyFunc", [](ServerWrapper& cls_) { return cls_.__ReplicatedServerPerformanceState__ChangeNotifyFunc(); });
	cl_ServerWrapper.def("__bClubMatch__ChangeNotifyFunc", [](ServerWrapper& cls_) { return cls_.__bClubMatch__ChangeNotifyFunc(); });
	cl_ServerWrapper.def("__bShowIntroScene__ChangeNotifyFunc", [](ServerWrapper& cls_) { return cls_.__bShowIntroScene__ChangeNotifyFunc(); });
	cl_ServerWrapper.def("__WaitTimeRemaining__ChangeNotifyFunc", [](ServerWrapper& cls_) { return cls_.__WaitTimeRemaining__ChangeNotifyFunc(); });
	cl_ServerWrapper.def("CheckJoinInProgress", [](ServerWrapper& cls_, PriWrapper PRI) { return cls_.CheckJoinInProgress(PRI); }, pybind11::arg("PRI"));
	cl_ServerWrapper.def("AllowDynamicCrowd", [](ServerWrapper& cls_) { return cls_.AllowDynamicCrowd(); });
	cl_ServerWrapper.def("AddBallTrajectory", [](ServerWrapper& cls_, BallWrapper InBall) { return cls_.AddBallTrajectory(InBall); }, pybind11::arg("InBall"));
	cl_ServerWrapper.def("ShowScorerGoalMessage", [](ServerWrapper& cls_) { return cls_.ShowScorerGoalMessage(); });
	cl_ServerWrapper.def("CanUseBallCam", [](ServerWrapper& cls_) { return cls_.CanUseBallCam(); });
	cl_ServerWrapper.def("DisableStatXP", [](ServerWrapper& cls_) { return cls_.DisableStatXP(); });
	cl_ServerWrapper.def("SetDisableGoalDelay", [](ServerWrapper& cls_, long unsigned int bInDisableGoalDelay) { return cls_.SetDisableGoalDelay(bInDisableGoalDelay); }, pybind11::arg("bInDisableGoalDelay"));
	cl_ServerWrapper.def("ForceMatchStart", [](ServerWrapper& cls_) { return cls_.ForceMatchStart(); });
	cl_ServerWrapper.def("RemoveLocalPlayer", [](ServerWrapper& cls_, PlayerControllerWrapper Player) { return cls_.RemoveLocalPlayer(Player); }, pybind11::arg("Player"));
	cl_ServerWrapper.def("AddLocalPlayer", [](ServerWrapper& cls_, PlayerControllerWrapper Player) { return cls_.AddLocalPlayer(Player); }, pybind11::arg("Player"));
	cl_ServerWrapper.def("DestroyGoalIndicators", [](ServerWrapper& cls_, PlayerControllerWrapper Player) { return cls_.DestroyGoalIndicators(Player); }, pybind11::arg("Player"));
	cl_ServerWrapper.def("CreateGoalIndicators", [](ServerWrapper& cls_, PlayerControllerWrapper Player) { return cls_.CreateGoalIndicators(Player); }, pybind11::arg("Player"));
	cl_ServerWrapper.def("BeginHighlightsReplay", [](ServerWrapper& cls_) { return cls_.BeginHighlightsReplay(); });
	cl_ServerWrapper.def("ShouldCountUp", [](ServerWrapper& cls_) { return cls_.ShouldCountUp(); });
	cl_ServerWrapper.def("ShouldAllowVoteToForfeit", [](ServerWrapper& cls_) { return cls_.ShouldAllowVoteToForfeit(); });
	cl_ServerWrapper.def("ShouldHaveLeaveMatchPenalty", [](ServerWrapper& cls_) { return cls_.ShouldHaveLeaveMatchPenalty(); });
	cl_ServerWrapper.def("SetPaused", [](ServerWrapper& cls_, PlayerControllerWrapper InPauser, long unsigned int bInPaused) { return cls_.SetPaused(InPauser, bInPaused); }, pybind11::arg("InPauser"), pybind11::arg("bInPaused"));
	cl_ServerWrapper.def("ShouldCountdownResumeFromPause", [](ServerWrapper& cls_) { return cls_.ShouldCountdownResumeFromPause(); });
	cl_ServerWrapper.def("SetScoreAndTime", [](ServerWrapper& cls_, PlayerControllerWrapper PC, int NewScoreTeam0, int NewScoreTeam1, int InGameTimeRemaining, long unsigned int bInOvertime, long unsigned int bRestartRound) { return cls_.SetScoreAndTime(PC, NewScoreTeam0, NewScoreTeam1, InGameTimeRemaining, bInOvertime, bRestartRound); }, pybind11::arg("PC"), pybind11::arg("NewScoreTeam0"), pybind11::arg("NewScoreTeam1"), pybind11::arg("InGameTimeRemaining"), pybind11::arg("bInOvertime"), pybind11::arg("bRestartRound"));
	cl_ServerWrapper.def("SaveLocalPlayerStats", [](ServerWrapper& cls_) { return cls_.SaveLocalPlayerStats(); });
	cl_ServerWrapper.def("ShouldPlayReplay", [](ServerWrapper& cls_) { return cls_.ShouldPlayReplay(); });
	cl_ServerWrapper.def("ShouldRecordReplay", [](ServerWrapper& cls_) { return cls_.ShouldRecordReplay(); });
	cl_ServerWrapper.def("OnBallHasBeenHit", [](ServerWrapper& cls_) { return cls_.OnBallHasBeenHit(); });
	cl_ServerWrapper.def("SpawnBall2", [](ServerWrapper& cls_, Vector & SpawnLoc, long unsigned int bWake, long unsigned int bSpawnCannon, std::string BallArch) { return cls_.SpawnBall2(SpawnLoc, bWake, bSpawnCannon, BallArch); }, pybind11::arg("SpawnLoc"), pybind11::arg("bWake"), pybind11::arg("bSpawnCannon"), pybind11::arg("BallArch"));
	cl_ServerWrapper.def("GetTotalScore", [](ServerWrapper& cls_) { return cls_.GetTotalScore(); });
	cl_ServerWrapper.def("HandleCarSet", [](ServerWrapper& cls_, PriWrapper InPRI) { return cls_.HandleCarSet(InPRI); }, pybind11::arg("InPRI"));
	cl_ServerWrapper.def("RemovePlayer", [](ServerWrapper& cls_, ControllerWrapper Player) { return cls_.RemovePlayer(Player); }, pybind11::arg("Player"));
	cl_ServerWrapper.def("RemovePRI", [](ServerWrapper& cls_, PriWrapper PRI) { return cls_.RemovePRI(PRI); }, pybind11::arg("PRI"));
	cl_ServerWrapper.def("AddPRI", [](ServerWrapper& cls_, PriWrapper PRI) { return cls_.AddPRI(PRI); }, pybind11::arg("PRI"));
	cl_ServerWrapper.def("OnMatchWinnerSet", [](ServerWrapper& cls_) { return cls_.OnMatchWinnerSet(); });
	cl_ServerWrapper.def("OnGameWinnerSet", [](ServerWrapper& cls_) { return cls_.OnGameWinnerSet(); });
	cl_ServerWrapper.def("MVPSort", [](ServerWrapper& cls_, PriWrapper A, PriWrapper B) { return cls_.MVPSort(A, B); }, pybind11::arg("A"), pybind11::arg("B"));
	cl_ServerWrapper.def("HandleHitGoal", [](ServerWrapper& cls_, BallWrapper Ball, GoalWrapper Goal) { return cls_.HandleHitGoal(Ball, Goal); }, pybind11::arg("Ball"), pybind11::arg("Goal"));
	cl_ServerWrapper.def("ClearReplicatedScoredOnTeam", [](ServerWrapper& cls_) { return cls_.ClearReplicatedScoredOnTeam(); });
	cl_ServerWrapper.def("TriggerScoreChangedEvent", [](ServerWrapper& cls_) { return cls_.TriggerScoreChangedEvent(); });
	cl_ServerWrapper.def("HandleScoreUpdated", [](ServerWrapper& cls_, TeamWrapper Team) { return cls_.HandleScoreUpdated(Team); }, pybind11::arg("Team"));
	cl_ServerWrapper.def("OnAllTeamsCreated", [](ServerWrapper& cls_) { return cls_.OnAllTeamsCreated(); });
	cl_ServerWrapper.def("TriggerGoalScoreEvent", [](ServerWrapper& cls_, int TeamScoredOn, CarWrapper Scorer) { return cls_.TriggerGoalScoreEvent(TeamScoredOn, Scorer); }, pybind11::arg("TeamScoredOn"), pybind11::arg("Scorer"));
	cl_ServerWrapper.def("SetTotalGameBalls2", [](ServerWrapper& cls_, int TotalBalls) { return cls_.SetTotalGameBalls2(TotalBalls); }, pybind11::arg("TotalBalls"));
	cl_ServerWrapper.def("RecordRecentPlayers", [](ServerWrapper& cls_) { return cls_.RecordRecentPlayers(); });
	cl_ServerWrapper.def("UpdateStats", [](ServerWrapper& cls_) { return cls_.UpdateStats(); });
	cl_ServerWrapper.def("NotifyKismetOfCurrentTime", [](ServerWrapper& cls_) { return cls_.NotifyKismetOfCurrentTime(); });
	cl_ServerWrapper.def("EnoughTimePassedToForfeit", [](ServerWrapper& cls_) { return cls_.EnoughTimePassedToForfeit(); });
	cl_ServerWrapper.def("OnGameTimeUpdated", [](ServerWrapper& cls_) { return cls_.OnGameTimeUpdated(); });
	cl_ServerWrapper.def("OnOvertimeUpdated", [](ServerWrapper& cls_) { return cls_.OnOvertimeUpdated(); });
	cl_ServerWrapper.def("ForceOvertime", [](ServerWrapper& cls_) { return cls_.ForceOvertime(); });
	cl_ServerWrapper.def("StartOvertime", [](ServerWrapper& cls_) { return cls_.StartOvertime(); });
	cl_ServerWrapper.def("OnMyHalf", [](ServerWrapper& cls_, Vector & TestLocation, unsigned char TeamNum) { return cls_.OnMyHalf(TestLocation, TeamNum); }, pybind11::arg("TestLocation"), pybind11::arg("TeamNum"));
	cl_ServerWrapper.def("GetWinningTeam", [](ServerWrapper& cls_) { return cls_.GetWinningTeam(); });
	cl_ServerWrapper.def("ResetPickups", [](ServerWrapper& cls_) { return cls_.ResetPickups(); });
	cl_ServerWrapper.def("ResetPlayers", [](ServerWrapper& cls_) { return cls_.ResetPlayers(); });
	cl_ServerWrapper.def("OnBallSpawned", [](ServerWrapper& cls_, BallWrapper NewBall) { return cls_.OnBallSpawned(NewBall); }, pybind11::arg("NewBall"));
	cl_ServerWrapper.def("ResetBalls", [](ServerWrapper& cls_) { return cls_.ResetBalls(); });
	cl_ServerWrapper.def("DestroyCars", [](ServerWrapper& cls_) { return cls_.DestroyCars(); });
	cl_ServerWrapper.def("FreezePawns", [](ServerWrapper& cls_) { return cls_.FreezePawns(); });
	cl_ServerWrapper.def("DestroyBalls", [](ServerWrapper& cls_) { return cls_.DestroyBalls(); });
	cl_ServerWrapper.def("RemoveGameBall", [](ServerWrapper& cls_, BallWrapper Ball) { return cls_.RemoveGameBall(Ball); }, pybind11::arg("Ball"));
	cl_ServerWrapper.def("AddGameBall", [](ServerWrapper& cls_, BallWrapper Ball) { return cls_.AddGameBall(Ball); }, pybind11::arg("Ball"));
	cl_ServerWrapper.def("StartNewRound", [](ServerWrapper& cls_) { return cls_.StartNewRound(); });
	cl_ServerWrapper.def("CheckForAutoBalance", [](ServerWrapper& cls_) { return cls_.CheckForAutoBalance(); });
	cl_ServerWrapper.def("HasWinner", [](ServerWrapper& cls_) { return cls_.HasWinner(); });
	cl_ServerWrapper.def("SubmitMatch2", [](ServerWrapper& cls_) { return cls_.SubmitMatch2(); });
	cl_ServerWrapper.def("SubmitMatchComplete2", [](ServerWrapper& cls_) { return cls_.SubmitMatchComplete2(); });
	cl_ServerWrapper.def("OnMatchEnded", [](ServerWrapper& cls_) { return cls_.OnMatchEnded(); });
	cl_ServerWrapper.def("ShouldDoPodiumSpotlight", [](ServerWrapper& cls_) { return cls_.ShouldDoPodiumSpotlight(); });
	cl_ServerWrapper.def("EndGame", [](ServerWrapper& cls_) { return cls_.EndGame(); });
	cl_ServerWrapper.def("UpdateTeamScores2", [](ServerWrapper& cls_) { return cls_.UpdateTeamScores2(); });
	cl_ServerWrapper.def("StartNewGame", [](ServerWrapper& cls_) { return cls_.StartNewGame(); });
	cl_ServerWrapper.def("ResetGame", [](ServerWrapper& cls_) { return cls_.ResetGame(); });
	cl_ServerWrapper.def("ClearReplicatedStatEvent", [](ServerWrapper& cls_) { return cls_.ClearReplicatedStatEvent(); });
	cl_ServerWrapper.def("eventDestroyed", [](ServerWrapper& cls_) { return cls_.eventDestroyed(); });
	cl_ServerWrapper.def("InitBotDetection", [](ServerWrapper& cls_) { return cls_.InitBotDetection(); });
	cl_ServerWrapper.def("InitCrowdManager", [](ServerWrapper& cls_) { return cls_.InitCrowdManager(); });
	cl_ServerWrapper.def("InitField", [](ServerWrapper& cls_) { return cls_.InitField(); });
	cl_ServerWrapper.def("InitGameObserver", [](ServerWrapper& cls_) { return cls_.InitGameObserver(); });
	cl_ServerWrapper.def("OnInit", [](ServerWrapper& cls_) { return cls_.OnInit(); });
	cl_ServerWrapper.def("InitMutators", [](ServerWrapper& cls_) { return cls_.InitMutators(); });
	cl_ServerWrapper.def("OnClubMatch", [](ServerWrapper& cls_) { return cls_.OnClubMatch(); });
	cl_ServerWrapper.def("CanInitClubMatch", [](ServerWrapper& cls_) { return cls_.CanInitClubMatch(); });
	cl_ServerWrapper.def("AssignCustomTeamSettings", [](ServerWrapper& cls_) { return cls_.AssignCustomTeamSettings(); });
	cl_ServerWrapper.def("InitGame2", [](ServerWrapper& cls_, std::string Options) { return cls_.InitGame2(Options); }, pybind11::arg("Options"));
	cl_ServerWrapper.def("GetMatchGUID", [](ServerWrapper& cls_) { return cls_.GetMatchGUID(); });
	cl_ServerWrapper.def("SetMatchGUID", [](ServerWrapper& cls_, std::string s) { return cls_.SetMatchGUID(s); }, pybind11::arg("s"));
	cl_ServerWrapper.def("EventGameWinnerSet", [](ServerWrapper& cls_, ServerWrapper GameEvent) { return cls_.EventGameWinnerSet(GameEvent); }, pybind11::arg("GameEvent"));
	cl_ServerWrapper.def("EventGoalScored", [](ServerWrapper& cls_, ServerWrapper GameEvent, BallWrapper Ball, GoalWrapper Goal, int ScoreIndex, int AssistIdx) { return cls_.EventGoalScored(GameEvent, Ball, Goal, ScoreIndex, AssistIdx); }, pybind11::arg("GameEvent"), pybind11::arg("Ball"), pybind11::arg("Goal"), pybind11::arg("ScoreIndex"), pybind11::arg("AssistIdx"));
}
