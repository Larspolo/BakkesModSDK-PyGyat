void bind_TutorialWrapper(pybind11::module& m)
{

	pybind11::class_<TutorialWrapper, std::shared_ptr<TutorialWrapper>, ServerWrapper> cl_TutorialWrapper(m, "TutorialWrapper");
	cl_TutorialWrapper.def(pybind11::init<uintptr_t>(), pybind11::arg("mem"));
	cl_TutorialWrapper.def(pybind11::init<TutorialWrapper const &>(), pybind11::arg("other"));
	// cl_TutorialWrapper.def(pybind11::del<>());
	cl_TutorialWrapper.def("Redo", [](TutorialWrapper& cls_) { return cls_.Redo(); });
	cl_TutorialWrapper.def("GetCarSpawnLocation", [](TutorialWrapper& cls_) { return cls_.GetCarSpawnLocation(); });
	cl_TutorialWrapper.def("SetCarSpawnLocation", [](TutorialWrapper& cls_, Vector v) { return cls_.SetCarSpawnLocation(v); }, pybind11::arg("v"));
	cl_TutorialWrapper.def("GetCarSpawnRotation", [](TutorialWrapper& cls_) { return cls_.GetCarSpawnRotation(); });
	cl_TutorialWrapper.def("SetCarSpawnRotation", [](TutorialWrapper& cls_, Rotator v) { return cls_.SetCarSpawnRotation(v); }, pybind11::arg("v"));
	cl_TutorialWrapper.def("GetGameCar", [](TutorialWrapper& cls_) { return cls_.GetGameCar(); });
	cl_TutorialWrapper.def("IsBallMovingTowardsGoal", [](TutorialWrapper& cls_, int goalNo, BallWrapper bw) { return cls_.IsBallMovingTowardsGoal(goalNo, bw); }, pybind11::arg("goalNo"), pybind11::arg("bw"));
	cl_TutorialWrapper.def("IsInGoal", [](TutorialWrapper& cls_, Vector vec) { return cls_.IsInGoal(vec); }, pybind11::arg("vec"));
	cl_TutorialWrapper.def("DisableGoalReset", [](TutorialWrapper& cls_) { return cls_.DisableGoalReset(); });
	cl_TutorialWrapper.def("EnableGoalReset", [](TutorialWrapper& cls_) { return cls_.EnableGoalReset(); });
	cl_TutorialWrapper.def("GenerateShot", [](TutorialWrapper& cls_, Vector startPos, Vector destination, float speed) { return cls_.GenerateShot(startPos, destination, speed); }, pybind11::arg("startPos"), pybind11::arg("destination"), pybind11::arg("speed"));
	cl_TutorialWrapper.def("GenerateGoalAimLocation", [](TutorialWrapper& cls_, int goalNumber, Vector currentBallLocation) { return cls_.GenerateGoalAimLocation(goalNumber, currentBallLocation); }, pybind11::arg("goalNumber"), pybind11::arg("currentBallLocation"));
	cl_TutorialWrapper.def("GetGoalExtent", [](TutorialWrapper& cls_, int goalNumber=0) { return cls_.GetGoalExtent(goalNumber); }, pybind11::arg("goalNumber"));
	cl_TutorialWrapper.def("GetGoalLocation", [](TutorialWrapper& cls_, int goalNumber=0) { return cls_.GetGoalLocation(goalNumber); }, pybind11::arg("goalNumber"));
	cl_TutorialWrapper.def("GetTotalFieldExtent", [](TutorialWrapper& cls_) { return cls_.GetTotalFieldExtent(); });
	cl_TutorialWrapper.def("SetTotalFieldExtent", [](TutorialWrapper& cls_, Vector newTotalFieldExtent) { return cls_.SetTotalFieldExtent(newTotalFieldExtent); }, pybind11::arg("newTotalFieldExtent"));
	cl_TutorialWrapper.def("GetTeamNum", [](TutorialWrapper& cls_) { return cls_.GetTeamNum(); });
	cl_TutorialWrapper.def("SetTeamNum", [](TutorialWrapper& cls_, int newTeamNum) { return cls_.SetTeamNum(newTeamNum); }, pybind11::arg("newTeamNum"));
	cl_TutorialWrapper.def("GetBallGoalNum", [](TutorialWrapper& cls_) { return cls_.GetBallGoalNum(); });
	cl_TutorialWrapper.def("SetBallGoalNum", [](TutorialWrapper& cls_, int newBallGoalNum) { return cls_.SetBallGoalNum(newBallGoalNum); }, pybind11::arg("newBallGoalNum"));
	cl_TutorialWrapper.def("GetbOnlyScoreInBallGoalNum", [](TutorialWrapper& cls_) { return cls_.GetbOnlyScoreInBallGoalNum(); });
	cl_TutorialWrapper.def("SetbOnlyScoreInBallGoalNum", [](TutorialWrapper& cls_, long unsigned int newbOnlyScoreInBallGoalNum) { return cls_.SetbOnlyScoreInBallGoalNum(newbOnlyScoreInBallGoalNum); }, pybind11::arg("newbOnlyScoreInBallGoalNum"));
	cl_TutorialWrapper.def("GetbRedoRound", [](TutorialWrapper& cls_) { return cls_.GetbRedoRound(); });
	cl_TutorialWrapper.def("SetbRedoRound", [](TutorialWrapper& cls_, long unsigned int newbRedoRound) { return cls_.SetbRedoRound(newbRedoRound); }, pybind11::arg("newbRedoRound"));
	cl_TutorialWrapper.def("GetbAllowSuperBoost", [](TutorialWrapper& cls_) { return cls_.GetbAllowSuperBoost(); });
	cl_TutorialWrapper.def("SetbAllowSuperBoost", [](TutorialWrapper& cls_, long unsigned int newbAllowSuperBoost) { return cls_.SetbAllowSuperBoost(newbAllowSuperBoost); }, pybind11::arg("newbAllowSuperBoost"));
	cl_TutorialWrapper.def("GetbDisplayedRedoPenaltyMessage", [](TutorialWrapper& cls_) { return cls_.GetbDisplayedRedoPenaltyMessage(); });
	cl_TutorialWrapper.def("SetbDisplayedRedoPenaltyMessage", [](TutorialWrapper& cls_, long unsigned int newbDisplayedRedoPenaltyMessage) { return cls_.SetbDisplayedRedoPenaltyMessage(newbDisplayedRedoPenaltyMessage); }, pybind11::arg("newbDisplayedRedoPenaltyMessage"));
	cl_TutorialWrapper.def("GetbShowBoostMeter", [](TutorialWrapper& cls_) { return cls_.GetbShowBoostMeter(); });
	cl_TutorialWrapper.def("SetbShowBoostMeter", [](TutorialWrapper& cls_, long unsigned int newbShowBoostMeter) { return cls_.SetbShowBoostMeter(newbShowBoostMeter); }, pybind11::arg("newbShowBoostMeter"));
	cl_TutorialWrapper.def("GetDifficulty", [](TutorialWrapper& cls_) { return cls_.GetDifficulty(); });
	cl_TutorialWrapper.def("SetDifficulty", [](TutorialWrapper& cls_, unsigned char newDifficulty) { return cls_.SetDifficulty(newDifficulty); }, pybind11::arg("newDifficulty"));
	cl_TutorialWrapper.def("GetDebugRotationType", [](TutorialWrapper& cls_) { return cls_.GetDebugRotationType(); });
	cl_TutorialWrapper.def("SetDebugRotationType", [](TutorialWrapper& cls_, unsigned char newDebugRotationType) { return cls_.SetDebugRotationType(newDebugRotationType); }, pybind11::arg("newDebugRotationType"));
	cl_TutorialWrapper.def("GetGoalDepth", [](TutorialWrapper& cls_) { return cls_.GetGoalDepth(); });
	cl_TutorialWrapper.def("SetGoalDepth", [](TutorialWrapper& cls_, float newGoalDepth) { return cls_.SetGoalDepth(newGoalDepth); }, pybind11::arg("newGoalDepth"));
	cl_TutorialWrapper.def("GetGameEventRounds", [](TutorialWrapper& cls_) { return cls_.GetGameEventRounds(); });
	cl_TutorialWrapper.def("SetGameEventRounds", [](TutorialWrapper& cls_, int newGameEventRounds) { return cls_.SetGameEventRounds(newGameEventRounds); }, pybind11::arg("newGameEventRounds"));
	cl_TutorialWrapper.def("GetEventStartTime", [](TutorialWrapper& cls_) { return cls_.GetEventStartTime(); });
	cl_TutorialWrapper.def("SetEventStartTime", [](TutorialWrapper& cls_, float newEventStartTime) { return cls_.SetEventStartTime(newEventStartTime); }, pybind11::arg("newEventStartTime"));
	cl_TutorialWrapper.def("GetBallInitialVelocity", [](TutorialWrapper& cls_) { return cls_.GetBallInitialVelocity(); });
	cl_TutorialWrapper.def("SetBallInitialVelocity", [](TutorialWrapper& cls_, Vector newBallInitialVelocity) { return cls_.SetBallInitialVelocity(newBallInitialVelocity); }, pybind11::arg("newBallInitialVelocity"));
	cl_TutorialWrapper.def("GetSpawnIndexTypeOverride", [](TutorialWrapper& cls_) { return cls_.GetSpawnIndexTypeOverride(); });
	cl_TutorialWrapper.def("SetSpawnIndexTypeOverride", [](TutorialWrapper& cls_, int newSpawnIndexTypeOverride) { return cls_.SetSpawnIndexTypeOverride(newSpawnIndexTypeOverride); }, pybind11::arg("newSpawnIndexTypeOverride"));
	cl_TutorialWrapper.def("GetWaveIndex", [](TutorialWrapper& cls_) { return cls_.GetWaveIndex(); });
	cl_TutorialWrapper.def("SetWaveIndex", [](TutorialWrapper& cls_, int newWaveIndex) { return cls_.SetWaveIndex(newWaveIndex); }, pybind11::arg("newWaveIndex"));
	cl_TutorialWrapper.def("GetWaveSpawnCount", [](TutorialWrapper& cls_) { return cls_.GetWaveSpawnCount(); });
	cl_TutorialWrapper.def("SetWaveSpawnCount", [](TutorialWrapper& cls_, int newWaveSpawnCount) { return cls_.SetWaveSpawnCount(newWaveSpawnCount); }, pybind11::arg("newWaveSpawnCount"));
	cl_TutorialWrapper.def("GetRandomSpawnIndex", [](TutorialWrapper& cls_) { return cls_.GetRandomSpawnIndex(); });
	cl_TutorialWrapper.def("SetRandomSpawnIndex", [](TutorialWrapper& cls_, int newRandomSpawnIndex) { return cls_.SetRandomSpawnIndex(newRandomSpawnIndex); }, pybind11::arg("newRandomSpawnIndex"));
	cl_TutorialWrapper.def("GetStartMessageArchetype", [](TutorialWrapper& cls_) { return cls_.GetStartMessageArchetype(); });
	cl_TutorialWrapper.def("GetBallSpawnLocation", [](TutorialWrapper& cls_) { return cls_.GetBallSpawnLocation(); });
	cl_TutorialWrapper.def("SetBallSpawnLocation", [](TutorialWrapper& cls_, Vector newBallSpawnLocation) { return cls_.SetBallSpawnLocation(newBallSpawnLocation); }, pybind11::arg("newBallSpawnLocation"));
	cl_TutorialWrapper.def("GetPointsScoredThisRound", [](TutorialWrapper& cls_) { return cls_.GetPointsScoredThisRound(); });
	cl_TutorialWrapper.def("SetPointsScoredThisRound", [](TutorialWrapper& cls_, int newPointsScoredThisRound) { return cls_.SetPointsScoredThisRound(newPointsScoredThisRound); }, pybind11::arg("newPointsScoredThisRound"));
	cl_TutorialWrapper.def("GetBallSpawnCount", [](TutorialWrapper& cls_) { return cls_.GetBallSpawnCount(); });
	cl_TutorialWrapper.def("SetBallSpawnCount", [](TutorialWrapper& cls_, int newBallSpawnCount) { return cls_.SetBallSpawnCount(newBallSpawnCount); }, pybind11::arg("newBallSpawnCount"));
	cl_TutorialWrapper.def("GetBallBounceScale", [](TutorialWrapper& cls_) { return cls_.GetBallBounceScale(); });
	cl_TutorialWrapper.def("SetBallBounceScale", [](TutorialWrapper& cls_, float newBallBounceScale) { return cls_.SetBallBounceScale(newBallBounceScale); }, pybind11::arg("newBallBounceScale"));
	cl_TutorialWrapper.def("GetCurrentDebugStepX", [](TutorialWrapper& cls_) { return cls_.GetCurrentDebugStepX(); });
	cl_TutorialWrapper.def("SetCurrentDebugStepX", [](TutorialWrapper& cls_, int newCurrentDebugStepX) { return cls_.SetCurrentDebugStepX(newCurrentDebugStepX); }, pybind11::arg("newCurrentDebugStepX"));
	cl_TutorialWrapper.def("GetCurrentDebugStepY", [](TutorialWrapper& cls_) { return cls_.GetCurrentDebugStepY(); });
	cl_TutorialWrapper.def("SetCurrentDebugStepY", [](TutorialWrapper& cls_, int newCurrentDebugStepY) { return cls_.SetCurrentDebugStepY(newCurrentDebugStepY); }, pybind11::arg("newCurrentDebugStepY"));
	cl_TutorialWrapper.def("GetCurrentDebugStepZ", [](TutorialWrapper& cls_) { return cls_.GetCurrentDebugStepZ(); });
	cl_TutorialWrapper.def("SetCurrentDebugStepZ", [](TutorialWrapper& cls_, int newCurrentDebugStepZ) { return cls_.SetCurrentDebugStepZ(newCurrentDebugStepZ); }, pybind11::arg("newCurrentDebugStepZ"));
	cl_TutorialWrapper.def("GetRedoCount", [](TutorialWrapper& cls_) { return cls_.GetRedoCount(); });
	cl_TutorialWrapper.def("SetRedoCount", [](TutorialWrapper& cls_, int newRedoCount) { return cls_.SetRedoCount(newRedoCount); }, pybind11::arg("newRedoCount"));
	cl_TutorialWrapper.def("GetRedoTotal", [](TutorialWrapper& cls_) { return cls_.GetRedoTotal(); });
	cl_TutorialWrapper.def("SetRedoTotal", [](TutorialWrapper& cls_, int newRedoTotal) { return cls_.SetRedoTotal(newRedoTotal); }, pybind11::arg("newRedoTotal"));
	cl_TutorialWrapper.def("InitIntro", [](TutorialWrapper& cls_) { return cls_.InitIntro(); });
	cl_TutorialWrapper.def("OnLoadingMovieClosed", [](TutorialWrapper& cls_) { return cls_.OnLoadingMovieClosed(); });
	cl_TutorialWrapper.def("StartTimers", [](TutorialWrapper& cls_) { return cls_.StartTimers(); });
	cl_TutorialWrapper.def("UpdateMVP", [](TutorialWrapper& cls_) { return cls_.UpdateMVP(); });
	cl_TutorialWrapper.def("AllowDynamicCrowd", [](TutorialWrapper& cls_) { return cls_.AllowDynamicCrowd(); });
	cl_TutorialWrapper.def("SetTutorialTip", [](TutorialWrapper& cls_, std::string NewTip) { return cls_.SetTutorialTip(NewTip); }, pybind11::arg("NewTip"));
	cl_TutorialWrapper.def("SetShowBoostMeter", [](TutorialWrapper& cls_, long unsigned int bShow) { return cls_.SetShowBoostMeter(bShow); }, pybind11::arg("bShow"));
	cl_TutorialWrapper.def("GetStepLoc", [](TutorialWrapper& cls_, int Steps, float TotalDist, long unsigned int bIncrement, int * Out_CurrentStep) { return cls_.GetStepLoc(Steps, TotalDist, bIncrement, Out_CurrentStep); }, pybind11::arg("Steps"), pybind11::arg("TotalDist"), pybind11::arg("bIncrement"), pybind11::arg("Out_CurrentStep"));
	cl_TutorialWrapper.def("GetDebugLocationInExtent", [](TutorialWrapper& cls_, Vector & Extent) { return cls_.GetDebugLocationInExtent(Extent); }, pybind11::arg("Extent"));
	cl_TutorialWrapper.def("InitDebugSetup", [](TutorialWrapper& cls_, CarWrapper Car) { return cls_.InitDebugSetup(Car); }, pybind11::arg("Car"));
	cl_TutorialWrapper.def("SkipTutorial", [](TutorialWrapper& cls_) { return cls_.SkipTutorial(); });
	cl_TutorialWrapper.def("UpdateBotCount", [](TutorialWrapper& cls_) { return cls_.UpdateBotCount(); });
	cl_TutorialWrapper.def("InitMutators", [](TutorialWrapper& cls_) { return cls_.InitMutators(); });
	cl_TutorialWrapper.def("IsPrimaryPlayer", [](TutorialWrapper& cls_, CarWrapper Car) { return cls_.IsPrimaryPlayer(Car); }, pybind11::arg("Car"));
	cl_TutorialWrapper.def("CanAwardPoints", [](TutorialWrapper& cls_) { return cls_.CanAwardPoints(); });
	cl_TutorialWrapper.def("ShowResetRoundMessage", [](TutorialWrapper& cls_) { return cls_.ShowResetRoundMessage(); });
	cl_TutorialWrapper.def("Destroyed", [](TutorialWrapper& cls_) { return cls_.Destroyed(); });
	cl_TutorialWrapper.def("EndTutorial", [](TutorialWrapper& cls_) { return cls_.EndTutorial(); });
	cl_TutorialWrapper.def("CommitRedoRound", [](TutorialWrapper& cls_) { return cls_.CommitRedoRound(); });
	cl_TutorialWrapper.def("RedoRound2", [](TutorialWrapper& cls_) { return cls_.RedoRound2(); });
	cl_TutorialWrapper.def("CanRedoRound", [](TutorialWrapper& cls_) { return cls_.CanRedoRound(); });
	cl_TutorialWrapper.def("StartNewRound", [](TutorialWrapper& cls_) { return cls_.StartNewRound(); });
	cl_TutorialWrapper.def("SaveLocalPlayerStats", [](TutorialWrapper& cls_) { return cls_.SaveLocalPlayerStats(); });
	cl_TutorialWrapper.def("GetWinningTeam", [](TutorialWrapper& cls_) { return cls_.GetWinningTeam(); });
	cl_TutorialWrapper.def("CleanupRoundActors", [](TutorialWrapper& cls_) { return cls_.CleanupRoundActors(); });
	cl_TutorialWrapper.def("CanQueSaveReplay", [](TutorialWrapper& cls_) { return cls_.CanQueSaveReplay(); });
	cl_TutorialWrapper.def("ResetBalls", [](TutorialWrapper& cls_) { return cls_.ResetBalls(); });
	cl_TutorialWrapper.def("GetScore", [](TutorialWrapper& cls_) { return cls_.GetScore(); });
	cl_TutorialWrapper.def("StartRound", [](TutorialWrapper& cls_) { return cls_.StartRound(); });
	cl_TutorialWrapper.def("GetGameEventRounds2", [](TutorialWrapper& cls_) { return cls_.GetGameEventRounds2(); });
	cl_TutorialWrapper.def("GetTotalRounds", [](TutorialWrapper& cls_) { return cls_.GetTotalRounds(); });
	cl_TutorialWrapper.def("ResetRoundTime", [](TutorialWrapper& cls_) { return cls_.ResetRoundTime(); });
	cl_TutorialWrapper.def("OnPlayerRestarted", [](TutorialWrapper& cls_, CarWrapper PlayerCar) { return cls_.OnPlayerRestarted(PlayerCar); }, pybind11::arg("PlayerCar"));
	cl_TutorialWrapper.def("GetTrainingType", [](TutorialWrapper& cls_) { return cls_.GetTrainingType(); });
	cl_TutorialWrapper.def("EndGame", [](TutorialWrapper& cls_) { return cls_.EndGame(); });
	cl_TutorialWrapper.def("GetRandomLocationInExtent", [](TutorialWrapper& cls_, Vector & Extent) { return cls_.GetRandomLocationInExtent(Extent); }, pybind11::arg("Extent"));
	cl_TutorialWrapper.def("Chance", [](TutorialWrapper& cls_, int Chances) { return cls_.Chance(Chances); }, pybind11::arg("Chances"));
	cl_TutorialWrapper.def("GetOppositeTeamNum", [](TutorialWrapper& cls_) { return cls_.GetOppositeTeamNum(); });
	cl_TutorialWrapper.def("GetDirectionToGoal", [](TutorialWrapper& cls_, int GoalNum) { return cls_.GetDirectionToGoal(GoalNum); }, pybind11::arg("GoalNum"));
	cl_TutorialWrapper.def("IsGameEventComplete", [](TutorialWrapper& cls_) { return cls_.IsGameEventComplete(); });
	cl_TutorialWrapper.def("ClampPointToExtent", [](TutorialWrapper& cls_, Vector & ExtentCenter, Vector & Point, Vector & Extent) { return cls_.ClampPointToExtent(ExtentCenter, Point, Extent); }, pybind11::arg("ExtentCenter"), pybind11::arg("Point"), pybind11::arg("Extent"));
	cl_TutorialWrapper.def("PredictInitialVelocity", [](TutorialWrapper& cls_, Vector & StartLoc, Vector & EndLoc, float Z) { return cls_.PredictInitialVelocity(StartLoc, EndLoc, Z); }, pybind11::arg("StartLoc"), pybind11::arg("EndLoc"), pybind11::arg("Z"));
	cl_TutorialWrapper.def("GetGameBall", [](TutorialWrapper& cls_) { return cls_.GetGameBall(); });
	cl_TutorialWrapper.def("GetGamePawn", [](TutorialWrapper& cls_) { return cls_.GetGamePawn(); });
	cl_TutorialWrapper.def("ResetGameEvent", [](TutorialWrapper& cls_) { return cls_.ResetGameEvent(); });
	cl_TutorialWrapper.def("CheckForReset", [](TutorialWrapper& cls_) { return cls_.CheckForReset(); });
	cl_TutorialWrapper.def("GetGoalViewWidth", [](TutorialWrapper& cls_, GoalWrapper Goal, Vector & ViewerLoc) { return cls_.GetGoalViewWidth(Goal, ViewerLoc); }, pybind11::arg("Goal"), pybind11::arg("ViewerLoc"));
	cl_TutorialWrapper.def("IsBallMovingTowardsGoal2", [](TutorialWrapper& cls_, GoalWrapper Goal, BallWrapper Ball, float MinVelocityForDestroy, float InGoalDepth) { return cls_.IsBallMovingTowardsGoal2(Goal, Ball, MinVelocityForDestroy, InGoalDepth); }, pybind11::arg("Goal"), pybind11::arg("Ball"), pybind11::arg("MinVelocityForDestroy"), pybind11::arg("InGoalDepth"));
	cl_TutorialWrapper.def("SetGoalDepth2", [](TutorialWrapper& cls_) { return cls_.SetGoalDepth2(); });
	cl_TutorialWrapper.def("GetShuffledSpawnIndex", [](TutorialWrapper& cls_) { return cls_.GetShuffledSpawnIndex(); });
	cl_TutorialWrapper.def("DestroyCannon", [](TutorialWrapper& cls_) { return cls_.DestroyCannon(); });
	cl_TutorialWrapper.def("SetCannonOrientation", [](TutorialWrapper& cls_, Vector & NewLocation, Rotator & NewRotation) { return cls_.SetCannonOrientation(NewLocation, NewRotation); }, pybind11::arg("NewLocation"), pybind11::arg("NewRotation"));
	cl_TutorialWrapper.def("SpawnBall", [](TutorialWrapper& cls_, Vector & SpawnLoc, long unsigned int bWake, long unsigned int bSpawnCannon, std::string BallArch) { return cls_.SpawnBall(SpawnLoc, bWake, bSpawnCannon, BallArch); }, pybind11::arg("SpawnLoc"), pybind11::arg("bWake"), pybind11::arg("bSpawnCannon"), pybind11::arg("BallArch"));
	cl_TutorialWrapper.def("InitBallEffects", [](TutorialWrapper& cls_) { return cls_.InitBallEffects(); });
	cl_TutorialWrapper.def("InitBallVelocity", [](TutorialWrapper& cls_) { return cls_.InitBallVelocity(); });
	cl_TutorialWrapper.def("GetRandomGoalAimLocation", [](TutorialWrapper& cls_, int InTeamNum, Vector & BallLoc) { return cls_.GetRandomGoalAimLocation(InTeamNum, BallLoc); }, pybind11::arg("InTeamNum"), pybind11::arg("BallLoc"));
	cl_TutorialWrapper.def("GetGoalExtent2", [](TutorialWrapper& cls_, GoalWrapper Goal) { return cls_.GetGoalExtent2(Goal); }, pybind11::arg("Goal"));
	cl_TutorialWrapper.def("SetBallVelocity", [](TutorialWrapper& cls_, Vector & InitialVelocity, BallWrapper Ball) { return cls_.SetBallVelocity(InitialVelocity, Ball); }, pybind11::arg("InitialVelocity"), pybind11::arg("Ball"));
	cl_TutorialWrapper.def("InitGameSetup", [](TutorialWrapper& cls_, CarWrapper Car) { return cls_.InitGameSetup(Car); }, pybind11::arg("Car"));
	cl_TutorialWrapper.def("ShouldAllowSuperBoost", [](TutorialWrapper& cls_) { return cls_.ShouldAllowSuperBoost(); });
	cl_TutorialWrapper.def("OnVehicleSetup", [](TutorialWrapper& cls_, CarWrapper Car) { return cls_.OnVehicleSetup(Car); }, pybind11::arg("Car"));
	cl_TutorialWrapper.def("HandleVehicleSetup", [](TutorialWrapper& cls_, CarWrapper Car) { return cls_.HandleVehicleSetup(Car); }, pybind11::arg("Car"));
	cl_TutorialWrapper.def("InitCrowdManager", [](TutorialWrapper& cls_) { return cls_.InitCrowdManager(); });
	cl_TutorialWrapper.def("HandleScoreUpdated", [](TutorialWrapper& cls_, TeamWrapper Team) { return cls_.HandleScoreUpdated(Team); }, pybind11::arg("Team"));
	cl_TutorialWrapper.def("SetDifficulty2", [](TutorialWrapper& cls_, int InDifficulty) { return cls_.SetDifficulty2(InDifficulty); }, pybind11::arg("InDifficulty"));
	cl_TutorialWrapper.def("UpdateStats", [](TutorialWrapper& cls_) { return cls_.UpdateStats(); });
	cl_TutorialWrapper.def("AddLocalPlayer", [](TutorialWrapper& cls_, PlayerControllerWrapper Player) { return cls_.AddLocalPlayer(Player); }, pybind11::arg("Player"));
	cl_TutorialWrapper.def("HandlePlayerResetTraining", [](TutorialWrapper& cls_, GameEventWrapper GameEvent) { return cls_.HandlePlayerResetTraining(GameEvent); }, pybind11::arg("GameEvent"));
	cl_TutorialWrapper.def("OnInit", [](TutorialWrapper& cls_) { return cls_.OnInit(); });
	cl_TutorialWrapper.def("EventTutorialTipChanged", [](TutorialWrapper& cls_, TutorialWrapper GameEvent, std::string NewTip) { return cls_.EventTutorialTipChanged(GameEvent, NewTip); }, pybind11::arg("GameEvent"), pybind11::arg("NewTip"));
}
