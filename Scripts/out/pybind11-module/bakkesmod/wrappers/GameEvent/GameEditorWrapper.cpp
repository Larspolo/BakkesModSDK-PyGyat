void bind_GameEditorWrapper(pybind11::module& m)
{

	pybind11::class_<GameEditorWrapper, std::shared_ptr<GameEditorWrapper>, ServerWrapper> cl_GameEditorWrapper(m, "GameEditorWrapper");
	cl_GameEditorWrapper.def(pybind11::init<uintptr_t>(), pybind11::arg("mem"));
	cl_GameEditorWrapper.def(pybind11::init<GameEditorWrapper const &>(), pybind11::arg("other"));
	// cl_GameEditorWrapper.def(pybind11::del<>());
	cl_GameEditorWrapper.def("GetActiveRoundNumber", [](GameEditorWrapper& cls_) { return cls_.GetActiveRoundNumber(); });
	cl_GameEditorWrapper.def("SetActiveRoundNumber", [](GameEditorWrapper& cls_, int newActiveRoundNumber) { return cls_.SetActiveRoundNumber(newActiveRoundNumber); }, pybind11::arg("newActiveRoundNumber"));
	cl_GameEditorWrapper.def("GetMaxRounds", [](GameEditorWrapper& cls_) { return cls_.GetMaxRounds(); });
	cl_GameEditorWrapper.def("SetMaxRounds", [](GameEditorWrapper& cls_, int newMaxRounds) { return cls_.SetMaxRounds(newMaxRounds); }, pybind11::arg("newMaxRounds"));
	cl_GameEditorWrapper.def("GetHistoryPosition", [](GameEditorWrapper& cls_) { return cls_.GetHistoryPosition(); });
	cl_GameEditorWrapper.def("SetHistoryPosition", [](GameEditorWrapper& cls_, int newHistoryPosition) { return cls_.SetHistoryPosition(newHistoryPosition); }, pybind11::arg("newHistoryPosition"));
	cl_GameEditorWrapper.def("GetMaxUndoHistory", [](GameEditorWrapper& cls_) { return cls_.GetMaxUndoHistory(); });
	cl_GameEditorWrapper.def("SetMaxUndoHistory", [](GameEditorWrapper& cls_, int newMaxUndoHistory) { return cls_.SetMaxUndoHistory(newMaxUndoHistory); }, pybind11::arg("newMaxUndoHistory"));
	cl_GameEditorWrapper.def("GetFXActorArchetype", [](GameEditorWrapper& cls_) { return cls_.GetFXActorArchetype(); });
	cl_GameEditorWrapper.def("SetFXActorArchetype", [](GameEditorWrapper& cls_, FXActorWrapper newFXActorArchetype) { return cls_.SetFXActorArchetype(newFXActorArchetype); }, pybind11::arg("newFXActorArchetype"));
	cl_GameEditorWrapper.def("GetFXActor", [](GameEditorWrapper& cls_) { return cls_.GetFXActor(); });
	cl_GameEditorWrapper.def("SetFXActor", [](GameEditorWrapper& cls_, FXActorWrapper newFXActor) { return cls_.SetFXActor(newFXActor); }, pybind11::arg("newFXActor"));
	cl_GameEditorWrapper.def("RotateActor", [](GameEditorWrapper& cls_, PlayerControllerWrapper PC, long unsigned int bSnapOrientation) { return cls_.RotateActor(PC, bSnapOrientation); }, pybind11::arg("PC"), pybind11::arg("bSnapOrientation"));
	cl_GameEditorWrapper.def("PrevRound", [](GameEditorWrapper& cls_) { return cls_.PrevRound(); });
	cl_GameEditorWrapper.def("NextRound", [](GameEditorWrapper& cls_) { return cls_.NextRound(); });
	cl_GameEditorWrapper.def("DecreaseTime", [](GameEditorWrapper& cls_) { return cls_.DecreaseTime(); });
	cl_GameEditorWrapper.def("IncreaseTime", [](GameEditorWrapper& cls_) { return cls_.IncreaseTime(); });
	cl_GameEditorWrapper.def("StopEditing", [](GameEditorWrapper& cls_, PlayerControllerWrapper PC) { return cls_.StopEditing(PC); }, pybind11::arg("PC"));
	cl_GameEditorWrapper.def("StartEditing", [](GameEditorWrapper& cls_) { return cls_.StartEditing(); });
	cl_GameEditorWrapper.def("CycleActor", [](GameEditorWrapper& cls_, PlayerControllerWrapper PC) { return cls_.CycleActor(PC); }, pybind11::arg("PC"));
	cl_GameEditorWrapper.def("ReleaseGrabbedActor", [](GameEditorWrapper& cls_, PlayerControllerWrapper PC) { return cls_.ReleaseGrabbedActor(PC); }, pybind11::arg("PC"));
	cl_GameEditorWrapper.def("ReleaseRotateActor", [](GameEditorWrapper& cls_, PlayerControllerWrapper PC) { return cls_.ReleaseRotateActor(PC); }, pybind11::arg("PC"));
	cl_GameEditorWrapper.def("ToggleRotateActor", [](GameEditorWrapper& cls_, PlayerControllerWrapper PC) { return cls_.ToggleRotateActor(PC); }, pybind11::arg("PC"));
	cl_GameEditorWrapper.def("ToggleGrabActor", [](GameEditorWrapper& cls_, PlayerControllerWrapper PC) { return cls_.ToggleGrabActor(PC); }, pybind11::arg("PC"));
	cl_GameEditorWrapper.def("ToggleReleaseActor", [](GameEditorWrapper& cls_, PlayerControllerWrapper PC) { return cls_.ToggleReleaseActor(PC); }, pybind11::arg("PC"));
	cl_GameEditorWrapper.def("ReleaseActor2", [](GameEditorWrapper& cls_, PlayerControllerWrapper PC) { return cls_.ReleaseActor2(PC); }, pybind11::arg("PC"));
	cl_GameEditorWrapper.def("GrabActor2", [](GameEditorWrapper& cls_, PlayerControllerWrapper PC) { return cls_.GrabActor2(PC); }, pybind11::arg("PC"));
	cl_GameEditorWrapper.def("CanQueSaveReplay", [](GameEditorWrapper& cls_) { return cls_.CanQueSaveReplay(); });
	cl_GameEditorWrapper.def("ShouldUpdateCrosshair", [](GameEditorWrapper& cls_) { return cls_.ShouldUpdateCrosshair(); });
	cl_GameEditorWrapper.def("GetPlayerTeamNumber", [](GameEditorWrapper& cls_) { return cls_.GetPlayerTeamNumber(); });
	cl_GameEditorWrapper.def("CanAddHistory", [](GameEditorWrapper& cls_) { return cls_.CanAddHistory(); });
	cl_GameEditorWrapper.def("ToggleEditorRound", [](GameEditorWrapper& cls_) { return cls_.ToggleEditorRound(); });
	cl_GameEditorWrapper.def("CommitRedoRound", [](GameEditorWrapper& cls_) { return cls_.CommitRedoRound(); });
	cl_GameEditorWrapper.def("ResetRound", [](GameEditorWrapper& cls_) { return cls_.ResetRound(); });
	cl_GameEditorWrapper.def("Save2", [](GameEditorWrapper& cls_) { return cls_.Save2(); });
	cl_GameEditorWrapper.def("Redo2", [](GameEditorWrapper& cls_, PlayerControllerWrapper PC) { return cls_.Redo2(PC); }, pybind11::arg("PC"));
	cl_GameEditorWrapper.def("Undo2", [](GameEditorWrapper& cls_, PlayerControllerWrapper PC) { return cls_.Undo2(PC); }, pybind11::arg("PC"));
	cl_GameEditorWrapper.def("GetOtherHistoryType", [](GameEditorWrapper& cls_, unsigned char HistoryType) { return cls_.GetOtherHistoryType(HistoryType); }, pybind11::arg("HistoryType"));
	cl_GameEditorWrapper.def("ClampUndoHistory", [](GameEditorWrapper& cls_) { return cls_.ClampUndoHistory(); });
	cl_GameEditorWrapper.def("ClearRedoHistory", [](GameEditorWrapper& cls_) { return cls_.ClearRedoHistory(); });
	cl_GameEditorWrapper.def("ClearAllHistory", [](GameEditorWrapper& cls_) { return cls_.ClearAllHistory(); });
	cl_GameEditorWrapper.def("DestroyActor", [](GameEditorWrapper& cls_, ActorWrapper A, unsigned char HistoryType) { return cls_.DestroyActor(A, HistoryType); }, pybind11::arg("A"), pybind11::arg("HistoryType"));
	cl_GameEditorWrapper.def("IsInEditorMode", [](GameEditorWrapper& cls_) { return cls_.IsInEditorMode(); });
	cl_GameEditorWrapper.def("RemoveAllPointsFromScore", [](GameEditorWrapper& cls_, int TeamIndex) { return cls_.RemoveAllPointsFromScore(TeamIndex); }, pybind11::arg("TeamIndex"));
	cl_GameEditorWrapper.def("RemovePointsFromScore", [](GameEditorWrapper& cls_, int PointsToRemove, int TeamIndex) { return cls_.RemovePointsFromScore(PointsToRemove, TeamIndex); }, pybind11::arg("PointsToRemove"), pybind11::arg("TeamIndex"));
	cl_GameEditorWrapper.def("DeleteAllExistingActorsBasedOffSpawnList", [](GameEditorWrapper& cls_) { return cls_.DeleteAllExistingActorsBasedOffSpawnList(); });
	cl_GameEditorWrapper.def("RoundContainsASwitch", [](GameEditorWrapper& cls_) { return cls_.RoundContainsASwitch(); });
	cl_GameEditorWrapper.def("EnableTriggers", [](GameEditorWrapper& cls_, long unsigned int bEnable) { return cls_.EnableTriggers(bEnable); }, pybind11::arg("bEnable"));
	cl_GameEditorWrapper.def("HideCarSpawnPoints", [](GameEditorWrapper& cls_, long unsigned int bHide) { return cls_.HideCarSpawnPoints(bHide); }, pybind11::arg("bHide"));
	cl_GameEditorWrapper.def("ResetSpawnLocations", [](GameEditorWrapper& cls_) { return cls_.ResetSpawnLocations(); });
	cl_GameEditorWrapper.def("OnSpawnedArchetype", [](GameEditorWrapper& cls_, ActorWrapper SpawnedActor, unsigned char HistoryType) { return cls_.OnSpawnedArchetype(SpawnedActor, HistoryType); }, pybind11::arg("SpawnedActor"), pybind11::arg("HistoryType"));
	cl_GameEditorWrapper.def("SpawnArchetype", [](GameEditorWrapper& cls_, PlayerControllerWrapper Controller, int ArchetypeIndex) { return cls_.SpawnArchetype(Controller, ArchetypeIndex); }, pybind11::arg("Controller"), pybind11::arg("ArchetypeIndex"));
	cl_GameEditorWrapper.def("IncrementSelectedSpawnArchetypeIndex", [](GameEditorWrapper& cls_, int Direction, int * Index) { return cls_.IncrementSelectedSpawnArchetypeIndex(Direction, Index); }, pybind11::arg("Direction"), pybind11::arg("Index"));
	cl_GameEditorWrapper.def("CanChangeTeam", [](GameEditorWrapper& cls_) { return cls_.CanChangeTeam(); });
	cl_GameEditorWrapper.def("ResetBallsToDefaultPosition", [](GameEditorWrapper& cls_) { return cls_.ResetBallsToDefaultPosition(); });
	cl_GameEditorWrapper.def("FireBalls", [](GameEditorWrapper& cls_) { return cls_.FireBalls(); });
	cl_GameEditorWrapper.def("Interact", [](GameEditorWrapper& cls_) { return cls_.Interact(); });
	cl_GameEditorWrapper.def("ShouldResetBalls", [](GameEditorWrapper& cls_) { return cls_.ShouldResetBalls(); });
	cl_GameEditorWrapper.def("OnVehicleSetup", [](GameEditorWrapper& cls_, CarWrapper Car) { return cls_.OnVehicleSetup(Car); }, pybind11::arg("Car"));
	cl_GameEditorWrapper.def("HandleVehicleSetup", [](GameEditorWrapper& cls_, CarWrapper Car) { return cls_.HandleVehicleSetup(Car); }, pybind11::arg("Car"));
	cl_GameEditorWrapper.def("OnPlayerRestarted", [](GameEditorWrapper& cls_, CarWrapper PlayerCar) { return cls_.OnPlayerRestarted(PlayerCar); }, pybind11::arg("PlayerCar"));
	cl_GameEditorWrapper.def("ChooseTeam", [](GameEditorWrapper& cls_, int TeamIndex, PlayerControllerWrapper Player) { return cls_.ChooseTeam(TeamIndex, Player); }, pybind11::arg("TeamIndex"), pybind11::arg("Player"));
	cl_GameEditorWrapper.def("InitFX", [](GameEditorWrapper& cls_) { return cls_.InitFX(); });
	cl_GameEditorWrapper.def("eventPostBeginPlay", [](GameEditorWrapper& cls_) { return cls_.eventPostBeginPlay(); });
}
